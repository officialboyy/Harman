
test013-OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003818  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000513c  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af4  08008af4  0000a08c  2**0
                  CONTENTS
  4 .ARM          00000008  08008af4  08008af4  00009af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008afc  08008afc  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008afc  08008afc  00009afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b00  08008b00  00009b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008b04  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  2000008c  08008b90  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08008b90  0000a6b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b803  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002311  00000000  00000000  000158bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00017bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000857  00000000  00000000  000186e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d6  00000000  00000000  00018f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed9f  00000000  00000000  0003080d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899a0  00000000  00000000  0003f5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8f4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  000c8f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cc41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080039a0 	.word	0x080039a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	080039a0 	.word	0x080039a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SSD1306_Outs>:
#include "fonts.h"
#include "oled.h"

FontDef_t *Fonts[] = { &Font_7x10, &Font_11x18, &Font_16x26 };
void SSD1306_Outs(int x, int y, char *s, int n)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	603b      	str	r3, [r7, #0]
	SSD1306_GotoXY (x, y);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	b29b      	uxth	r3, r3
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	b292      	uxth	r2, r2
 8000586:	4611      	mov	r1, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fce5 	bl	8000f58 <SSD1306_GotoXY>
	SSD1306_Puts (s, Fonts[n-1], 1);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	3b01      	subs	r3, #1
 8000592:	4a06      	ldr	r2, [pc, #24]	@ (80005ac <SSD1306_Outs+0x3c>)
 8000594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000598:	2201      	movs	r2, #1
 800059a:	4619      	mov	r1, r3
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 fd6f 	bl	8001080 <SSD1306_Puts>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <delay>:

			 
	}

void delay(int ms)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	SysTick->LOAD=16000-1;
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <delay+0x50>)
 80005ba:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80005be:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <delay+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=0x5;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <delay+0x50>)
 80005c8:	2205      	movs	r2, #5
 80005ca:	601a      	str	r2, [r3, #0]
		for (int i=0;i<ms;i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e009      	b.n	80005e6 <delay+0x36>
		{
			while(!(SysTick->CTRL &0x10000)){}
 80005d2:	bf00      	nop
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <delay+0x50>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0f9      	beq.n	80005d4 <delay+0x24>
		for (int i=0;i<ms;i++)
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dbf1      	blt.n	80005d2 <delay+0x22>
		}
	SysTick->CTRL=0;	
 80005ee:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <delay+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]

}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000e010 	.word	0xe000e010

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f001 f88f 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f97b 	bl	8000908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f94f 	bl	80008b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000616:	f000 f917 	bl	8000848 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart();
 800061a:	f000 f9fb 	bl	8000a14 <ProgramStart>
  printf("OLED initializing...\r\n");
 800061e:	4878      	ldr	r0, [pc, #480]	@ (8000800 <main+0x1fc>)
 8000620:	f002 f984 	bl	800292c <puts>
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2120      	movs	r1, #32
 8000628:	4876      	ldr	r0, [pc, #472]	@ (8000804 <main+0x200>)
 800062a:	f001 fb73 	bl	8001d14 <HAL_GPIO_WritePin>
  delay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000632:	f7ff ffbd 	bl	80005b0 <delay>
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	2120      	movs	r1, #32
 800063a:	4872      	ldr	r0, [pc, #456]	@ (8000804 <main+0x200>)
 800063c:	f001 fb6a 	bl	8001d14 <HAL_GPIO_WritePin>
	SSD1306_Init();
 8000640:	f000 fb6c 	bl	8000d1c <SSD1306_Init>

	TestText();
 8000644:	f000 ffc8 	bl	80015d8 <TestText>
	delay(2000);
 8000648:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800064c:	f7ff ffb0 	bl	80005b0 <delay>

	SSD1306_Clear();
 8000650:	f000 fd3b 	bl	80010ca <SSD1306_Clear>
	SSD1306_GotoXY (0,0);
 8000654:	2100      	movs	r1, #0
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fc7e 	bl	8000f58 <SSD1306_GotoXY>
	SSD1306_Puts ("variable", &Font_7x10, 1);
 800065c:	2201      	movs	r2, #1
 800065e:	496a      	ldr	r1, [pc, #424]	@ (8000808 <main+0x204>)
 8000660:	486a      	ldr	r0, [pc, #424]	@ (800080c <main+0x208>)
 8000662:	f000 fd0d 	bl	8001080 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000666:	f000 fbd7 	bl	8000e18 <SSD1306_UpdateScreen>
	  printf("Count simulation\r\n");
 800066a:	4869      	ldr	r0, [pc, #420]	@ (8000810 <main+0x20c>)
 800066c:	f002 f95e 	bl	800292c <puts>

	for (int i=0; i<100;i++)
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	e012      	b.n	800069c <main+0x98>
	{
	sprintf(zz,"%i",i);
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	4966      	ldr	r1, [pc, #408]	@ (8000814 <main+0x210>)
 800067a:	4867      	ldr	r0, [pc, #412]	@ (8000818 <main+0x214>)
 800067c:	f002 f95e 	bl	800293c <siprintf>
	//SSD1306_GotoXY (10, 30);
	//SSD1306_Puts (zz, &Font_7x10, 1);
	//SSD1306_Puts (zz, &Font_16x26, 1);
	SSD1306_Outs(10, 30, zz, 3);
 8000680:	2303      	movs	r3, #3
 8000682:	4a65      	ldr	r2, [pc, #404]	@ (8000818 <main+0x214>)
 8000684:	211e      	movs	r1, #30
 8000686:	200a      	movs	r0, #10
 8000688:	f7ff ff72 	bl	8000570 <SSD1306_Outs>
	SSD1306_UpdateScreen();
 800068c:	f000 fbc4 	bl	8000e18 <SSD1306_UpdateScreen>
	delay(100);
 8000690:	2064      	movs	r0, #100	@ 0x64
 8000692:	f7ff ff8d 	bl	80005b0 <delay>
	for (int i=0; i<100;i++)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b63      	cmp	r3, #99	@ 0x63
 80006a0:	dde9      	ble.n	8000676 <main+0x72>
	}
	  printf("OLED animation\r\n");
 80006a2:	485e      	ldr	r0, [pc, #376]	@ (800081c <main+0x218>)
 80006a4:	f002 f942 	bl	800292c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SSD1306_Clear();
 80006a8:	f000 fd0f 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse1,128,64,1);
 80006ac:	2301      	movs	r3, #1
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2340      	movs	r3, #64	@ 0x40
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2380      	movs	r3, #128	@ 0x80
 80006b6:	4a5a      	ldr	r2, [pc, #360]	@ (8000820 <main+0x21c>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 fac6 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80006c0:	f000 fbaa 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff73 	bl	80005b0 <delay>

		SSD1306_Clear();
 80006ca:	f000 fcfe 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse2,128,64,1);
 80006ce:	2301      	movs	r3, #1
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2380      	movs	r3, #128	@ 0x80
 80006d8:	4a52      	ldr	r2, [pc, #328]	@ (8000824 <main+0x220>)
 80006da:	2100      	movs	r1, #0
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 fab5 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80006e2:	f000 fb99 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff ff62 	bl	80005b0 <delay>

		SSD1306_Clear();
 80006ec:	f000 fced 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse3,128,64,1);
 80006f0:	2301      	movs	r3, #1
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	2340      	movs	r3, #64	@ 0x40
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2380      	movs	r3, #128	@ 0x80
 80006fa:	4a4b      	ldr	r2, [pc, #300]	@ (8000828 <main+0x224>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 faa4 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000704:	f000 fb88 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ff51 	bl	80005b0 <delay>

		SSD1306_Clear();
 800070e:	f000 fcdc 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse4,128,64,1);
 8000712:	2301      	movs	r3, #1
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2340      	movs	r3, #64	@ 0x40
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2380      	movs	r3, #128	@ 0x80
 800071c:	4a43      	ldr	r2, [pc, #268]	@ (800082c <main+0x228>)
 800071e:	2100      	movs	r1, #0
 8000720:	2000      	movs	r0, #0
 8000722:	f000 fa93 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000726:	f000 fb77 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff ff40 	bl	80005b0 <delay>

		SSD1306_Clear();
 8000730:	f000 fccb 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse5,128,64,1);
 8000734:	2301      	movs	r3, #1
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	2340      	movs	r3, #64	@ 0x40
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2380      	movs	r3, #128	@ 0x80
 800073e:	4a3c      	ldr	r2, [pc, #240]	@ (8000830 <main+0x22c>)
 8000740:	2100      	movs	r1, #0
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fa82 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000748:	f000 fb66 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff ff2f 	bl	80005b0 <delay>

		SSD1306_Clear();
 8000752:	f000 fcba 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse6,128,64,1);
 8000756:	2301      	movs	r3, #1
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	2340      	movs	r3, #64	@ 0x40
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2380      	movs	r3, #128	@ 0x80
 8000760:	4a34      	ldr	r2, [pc, #208]	@ (8000834 <main+0x230>)
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fa71 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800076a:	f000 fb55 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff ff1e 	bl	80005b0 <delay>

		SSD1306_Clear();
 8000774:	f000 fca9 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse7,128,64,1);
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2380      	movs	r3, #128	@ 0x80
 8000782:	4a2d      	ldr	r2, [pc, #180]	@ (8000838 <main+0x234>)
 8000784:	2100      	movs	r1, #0
 8000786:	2000      	movs	r0, #0
 8000788:	f000 fa60 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800078c:	f000 fb44 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ff0d 	bl	80005b0 <delay>

		SSD1306_Clear();
 8000796:	f000 fc98 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse8,128,64,1);
 800079a:	2301      	movs	r3, #1
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	2340      	movs	r3, #64	@ 0x40
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	4a25      	ldr	r2, [pc, #148]	@ (800083c <main+0x238>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fa4f 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80007ae:	f000 fb33 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff fefc 	bl	80005b0 <delay>

		SSD1306_Clear();
 80007b8:	f000 fc87 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse9,128,64,1);
 80007bc:	2301      	movs	r3, #1
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	2340      	movs	r3, #64	@ 0x40
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000840 <main+0x23c>)
 80007c8:	2100      	movs	r1, #0
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fa3e 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80007d0:	f000 fb22 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff feeb 	bl	80005b0 <delay>

		SSD1306_Clear();
 80007da:	f000 fc76 	bl	80010ca <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse10,128,64,1);
 80007de:	2301      	movs	r3, #1
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	2340      	movs	r3, #64	@ 0x40
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2380      	movs	r3, #128	@ 0x80
 80007e8:	4a16      	ldr	r2, [pc, #88]	@ (8000844 <main+0x240>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 fa2d 	bl	8000c4c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80007f2:	f000 fb11 	bl	8000e18 <SSD1306_UpdateScreen>
		delay(1);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff feda 	bl	80005b0 <delay>
		SSD1306_Clear();
 80007fc:	bf00      	nop
 80007fe:	e753      	b.n	80006a8 <main+0xa4>
 8000800:	080039b8 	.word	0x080039b8
 8000804:	40020400 	.word	0x40020400
 8000808:	2000000c 	.word	0x2000000c
 800080c:	080039d0 	.word	0x080039d0
 8000810:	080039dc 	.word	0x080039dc
 8000814:	080039f0 	.word	0x080039f0
 8000818:	200000a8 	.word	0x200000a8
 800081c:	080039f4 	.word	0x080039f4
 8000820:	080062b8 	.word	0x080062b8
 8000824:	080066b8 	.word	0x080066b8
 8000828:	08006ab8 	.word	0x08006ab8
 800082c:	08006eb8 	.word	0x08006eb8
 8000830:	080072b8 	.word	0x080072b8
 8000834:	080076b8 	.word	0x080076b8
 8000838:	08007ab8 	.word	0x08007ab8
 800083c:	08007eb8 	.word	0x08007eb8
 8000840:	080082b8 	.word	0x080082b8
 8000844:	080086b8 	.word	0x080086b8

08000848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_SPI1_Init+0x64>)
 800084e:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000854:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000894:	220a      	movs	r2, #10
 8000896:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_SPI1_Init+0x64>)
 800089a:	f001 fa89 	bl	8001db0 <HAL_SPI_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a4:	f000 f89e 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000b4 	.word	0x200000b4
 80008b0:	40013000 	.word	0x40013000

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f001 fae9 	bl	8001ec2 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 f875 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000010c 	.word	0x2000010c
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a2c      	ldr	r2, [pc, #176]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a25      	ldr	r2, [pc, #148]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a1e      	ldr	r2, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2120      	movs	r1, #32
 8000992:	4812      	ldr	r0, [pc, #72]	@ (80009dc <MX_GPIO_Init+0xd4>)
 8000994:	f001 f9be 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_GPIO_Init+0xd8>)
 80009b0:	f001 f814 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 80009b4:	2320      	movs	r3, #32
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_GPIO_Init+0xd4>)
 80009cc:	f001 f806 	bl	80019dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	@ 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40020800 	.word	0x40020800

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 80009f8:	1d39      	adds	r1, r7, #4
 80009fa:	230a      	movs	r3, #10
 80009fc:	2201      	movs	r2, #1
 80009fe:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <__io_putchar+0x20>)
 8000a00:	f001 faaf 	bl	8001f62 <HAL_UART_Transmit>
	return ch;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000010c 	.word	0x2000010c

08000a14 <ProgramStart>:
	//HAL_ADC_PollForConversion(&hadc1, 10);
	//return HAL_ADC_GetValue(&hadc1);
}

void ProgramStart()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	printf("\033[2J");	// screen clear
 8000a18:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <ProgramStart+0x28>)
 8000a1a:	f001 ff1f 	bl	800285c <iprintf>
	printf("\033[1;1H");	// Move cursor pos to (1,1)
 8000a1e:	4808      	ldr	r0, [pc, #32]	@ (8000a40 <ProgramStart+0x2c>)
 8000a20:	f001 ff1c 	bl	800285c <iprintf>
	printf("Program Started");
 8000a24:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <ProgramStart+0x30>)
 8000a26:	f001 ff19 	bl	800285c <iprintf>
	Wait(1);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f000 f80c 	bl	8000a48 <Wait>
	printf("\033[2J");	// screen clear
 8000a30:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <ProgramStart+0x28>)
 8000a32:	f001 ff13 	bl	800285c <iprintf>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08003a04 	.word	0x08003a04
 8000a40:	08003a0c 	.word	0x08003a0c
 8000a44:	08003a14 	.word	0x08003a14

08000a48 <Wait>:

void Wait(int o)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if(o) printf("Press Blue button to continue\r\n");
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <Wait+0x14>
 8000a56:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <Wait+0x30>)
 8000a58:	f001 ff68 	bl	800292c <puts>
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 8000a5c:	bf00      	nop
 8000a5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <Wait+0x34>)
 8000a64:	f001 f93e 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1f7      	bne.n	8000a5e <Wait+0x16>
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	08003a24 	.word	0x08003a24
 8000a7c:	40020800 	.word	0x40020800

08000a80 <SSD1306_WRITECOMMAND>:
/* SSD1306 data buffer */
static char SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];


void SSD1306_WRITECOMMAND(char command)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	OLED_CommMode();
 8000a8a:	f000 fbfb 	bl	8001284 <OLED_CommMode>
	OLED_Select();
 8000a8e:	f000 fbcf 	bl	8001230 <OLED_Select>
	OLED_SPI_Write(&command,1);
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	2101      	movs	r1, #1
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fb94 	bl	80011c4 <OLED_SPI_Write>
	OLED_Deselect();
 8000a9c:	f000 fbd6 	bl	800124c <OLED_Deselect>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <SSD1306_Write_Multi_Data>:
	OLED_SPI_Write(&command,1);
	OLED_Deselect();
}

void SSD1306_Write_Multi_Data(char * data, uint16_t length)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	807b      	strh	r3, [r7, #2]
	OLED_DataMode();
 8000ab4:	f000 fbd8 	bl	8001268 <OLED_DataMode>
	OLED_Select();
 8000ab8:	f000 fbba 	bl	8001230 <OLED_Select>
	OLED_SPI_Write((char*)data,length);
 8000abc:	887b      	ldrh	r3, [r7, #2]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 fb7f 	bl	80011c4 <OLED_SPI_Write>
	OLED_Deselect();
 8000ac6:	f000 fbc1 	bl	800124c <OLED_Deselect>

}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	460a      	mov	r2, r1
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000ae2:	2026      	movs	r0, #38	@ 0x26
 8000ae4:	f7ff ffcc 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff ffc9 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffc5 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff ffc2 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ffbe 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff ffbb 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0XFF);
 8000b0a:	20ff      	movs	r0, #255	@ 0xff
 8000b0c:	f7ff ffb8 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000b10:	202f      	movs	r0, #47	@ 0x2f
 8000b12:	f7ff ffb5 	bl	8000a80 <SSD1306_WRITECOMMAND>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	460a      	mov	r2, r1
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000b2e:	2027      	movs	r0, #39	@ 0x27
 8000b30:	f7ff ffa6 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff ffa3 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff9f 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff ff9c 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff98 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff ff95 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0XFF);
 8000b56:	20ff      	movs	r0, #255	@ 0xff
 8000b58:	f7ff ff92 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000b5c:	202f      	movs	r0, #47	@ 0x2f
 8000b5e:	f7ff ff8f 	bl	8000a80 <SSD1306_WRITECOMMAND>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <SSD1306_Scrolldiagright>:


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	460a      	mov	r2, r1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	4613      	mov	r3, r2
 8000b78:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8000b7a:	20a3      	movs	r0, #163	@ 0xa3
 8000b7c:	f7ff ff80 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ff7d 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8000b86:	2040      	movs	r0, #64	@ 0x40
 8000b88:	f7ff ff7a 	bl	8000a80 <SSD1306_WRITECOMMAND>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 8000b8c:	2029      	movs	r0, #41	@ 0x29
 8000b8e:	f7ff ff77 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ff74 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff70 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff ff6d 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff69 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x01);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff ff66 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8000bb4:	202f      	movs	r0, #47	@ 0x2f
 8000bb6:	f7ff ff63 	bl	8000a80 <SSD1306_WRITECOMMAND>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <SSD1306_Scrolldiagleft>:


void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	460a      	mov	r2, r1
 8000bcc:	71fb      	strb	r3, [r7, #7]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8000bd2:	20a3      	movs	r0, #163	@ 0xa3
 8000bd4:	f7ff ff54 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff ff51 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8000bde:	2040      	movs	r0, #64	@ 0x40
 8000be0:	f7ff ff4e 	bl	8000a80 <SSD1306_WRITECOMMAND>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 8000be4:	202a      	movs	r0, #42	@ 0x2a
 8000be6:	f7ff ff4b 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff48 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff44 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff ff41 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff3d 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x01);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff ff3a 	bl	8000a80 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8000c0c:	202f      	movs	r0, #47	@ 0x2f
 8000c0e:	f7ff ff37 	bl	8000a80 <SSD1306_WRITECOMMAND>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <SSD1306_Stopscroll>:


void SSD1306_Stopscroll(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c1e:	202e      	movs	r0, #46	@ 0x2e
 8000c20:	f7ff ff2e 	bl	8000a80 <SSD1306_WRITECOMMAND>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <SSD1306_InvertDisplay+0x16>
 8000c36:	20a7      	movs	r0, #167	@ 0xa7
 8000c38:	f7ff ff22 	bl	8000a80 <SSD1306_WRITECOMMAND>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8000c3c:	e002      	b.n	8000c44 <SSD1306_InvertDisplay+0x1c>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8000c3e:	20a6      	movs	r0, #166	@ 0xa6
 8000c40:	f7ff ff1e 	bl	8000a80 <SSD1306_WRITECOMMAND>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4603      	mov	r3, r0
 8000c58:	81fb      	strh	r3, [r7, #14]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	81bb      	strh	r3, [r7, #12]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c66:	3307      	adds	r3, #7
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da00      	bge.n	8000c6e <SSD1306_DrawBitmap+0x22>
 8000c6c:	3307      	adds	r3, #7
 8000c6e:	10db      	asrs	r3, r3, #3
 8000c70:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	82bb      	strh	r3, [r7, #20]
 8000c7a:	e044      	b.n	8000d06 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	827b      	strh	r3, [r7, #18]
 8000c80:	e02f      	b.n	8000ce2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000c82:	8a7b      	ldrh	r3, [r7, #18]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	75fb      	strb	r3, [r7, #23]
 8000c92:	e012      	b.n	8000cba <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000c94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c98:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000c9c:	fb03 f202 	mul.w	r2, r3, r2
 8000ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	da00      	bge.n	8000caa <SSD1306_DrawBitmap+0x5e>
 8000ca8:	3307      	adds	r3, #7
 8000caa:	10db      	asrs	r3, r3, #3
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4413      	add	r3, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da09      	bge.n	8000cd6 <SSD1306_DrawBitmap+0x8a>
 8000cc2:	89fa      	ldrh	r2, [r7, #14]
 8000cc4:	8a7b      	ldrh	r3, [r7, #18]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	89b9      	ldrh	r1, [r7, #12]
 8000ccc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f8e1 	bl	8000e98 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000cd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	827b      	strh	r3, [r7, #18]
 8000ce2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	dbc9      	blt.n	8000c82 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000cee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	82bb      	strh	r3, [r7, #20]
 8000cfa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	3301      	adds	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	81bb      	strh	r3, [r7, #12]
 8000d06:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000d0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dbb4      	blt.n	8000c7c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <SSD1306_Init>:

uint8_t SSD1306_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	 OLED_SPI_Pins_Init();
 8000d22:	f000 f9db 	bl	80010dc <OLED_SPI_Pins_Init>

	 OLED_SPI_Configure();
 8000d26:	f000 f9ff 	bl	8001128 <OLED_SPI_Configure>
	/* A little delay */
	uint32_t p = 2500;
 8000d2a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000d2e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d30:	e002      	b.n	8000d38 <SSD1306_Init+0x1c>
		p--;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f9      	bne.n	8000d32 <SSD1306_Init+0x16>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000d3e:	20ae      	movs	r0, #174	@ 0xae
 8000d40:	f7ff fe9e 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000d44:	2020      	movs	r0, #32
 8000d46:	f7ff fe9b 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d4a:	2010      	movs	r0, #16
 8000d4c:	f7ff fe98 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d50:	20b0      	movs	r0, #176	@ 0xb0
 8000d52:	f7ff fe95 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d56:	20c8      	movs	r0, #200	@ 0xc8
 8000d58:	f7ff fe92 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fe8f 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d62:	2010      	movs	r0, #16
 8000d64:	f7ff fe8c 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d68:	2040      	movs	r0, #64	@ 0x40
 8000d6a:	f7ff fe89 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d6e:	2081      	movs	r0, #129	@ 0x81
 8000d70:	f7ff fe86 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xFF);
 8000d74:	20ff      	movs	r0, #255	@ 0xff
 8000d76:	f7ff fe83 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d7a:	20a1      	movs	r0, #161	@ 0xa1
 8000d7c:	f7ff fe80 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d80:	20a6      	movs	r0, #166	@ 0xa6
 8000d82:	f7ff fe7d 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d86:	20a8      	movs	r0, #168	@ 0xa8
 8000d88:	f7ff fe7a 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x3F); //
 8000d8c:	203f      	movs	r0, #63	@ 0x3f
 8000d8e:	f7ff fe77 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d92:	20a4      	movs	r0, #164	@ 0xa4
 8000d94:	f7ff fe74 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d98:	20d3      	movs	r0, #211	@ 0xd3
 8000d9a:	f7ff fe71 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fe6e 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000da4:	20d5      	movs	r0, #213	@ 0xd5
 8000da6:	f7ff fe6b 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000daa:	20f0      	movs	r0, #240	@ 0xf0
 8000dac:	f7ff fe68 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000db0:	20d9      	movs	r0, #217	@ 0xd9
 8000db2:	f7ff fe65 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x22); //
 8000db6:	2022      	movs	r0, #34	@ 0x22
 8000db8:	f7ff fe62 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000dbc:	20da      	movs	r0, #218	@ 0xda
 8000dbe:	f7ff fe5f 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x12);
 8000dc2:	2012      	movs	r0, #18
 8000dc4:	f7ff fe5c 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000dc8:	20db      	movs	r0, #219	@ 0xdb
 8000dca:	f7ff fe59 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000dce:	2020      	movs	r0, #32
 8000dd0:	f7ff fe56 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000dd4:	208d      	movs	r0, #141	@ 0x8d
 8000dd6:	f7ff fe53 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x14); //
 8000dda:	2014      	movs	r0, #20
 8000ddc:	f7ff fe50 	bl	8000a80 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000de0:	20af      	movs	r0, #175	@ 0xaf
 8000de2:	f7ff fe4d 	bl	8000a80 <SSD1306_WRITECOMMAND>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000de6:	202e      	movs	r0, #46	@ 0x2e
 8000de8:	f7ff fe4a 	bl	8000a80 <SSD1306_WRITECOMMAND>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 f83b 	bl	8000e68 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000df2:	f000 f811 	bl	8000e18 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <SSD1306_Init+0xf8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <SSD1306_Init+0xf8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e02:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <SSD1306_Init+0xf8>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000e08:	2301      	movs	r3, #1
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000554 	.word	0x20000554

08000e18 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	e016      	b.n	8000e52 <SSD1306_UpdateScreen+0x3a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	3b50      	subs	r3, #80	@ 0x50
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fe28 	bl	8000a80 <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x00);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fe25 	bl	8000a80 <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x10);
 8000e36:	2010      	movs	r0, #16
 8000e38:	f7ff fe22 	bl	8000a80 <SSD1306_WRITECOMMAND>
		
		/* Write multi data */

		SSD1306_Write_Multi_Data(&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	01db      	lsls	r3, r3, #7
 8000e40:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <SSD1306_UpdateScreen+0x4c>)
 8000e42:	4413      	add	r3, r2
 8000e44:	2180      	movs	r1, #128	@ 0x80
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe2e 	bl	8000aa8 <SSD1306_Write_Multi_Data>
	for (m = 0; m < 8; m++) {
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	d9e5      	bls.n	8000e24 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000154 	.word	0x20000154

08000e68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <SSD1306_Fill+0x14>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e000      	b.n	8000e7e <SSD1306_Fill+0x16>
 8000e7c:	23ff      	movs	r3, #255	@ 0xff
 8000e7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e82:	4619      	mov	r1, r3
 8000e84:	4803      	ldr	r0, [pc, #12]	@ (8000e94 <SSD1306_Fill+0x2c>)
 8000e86:	f001 fe51 	bl	8002b2c <memset>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000154 	.word	0x20000154

08000e98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	80bb      	strh	r3, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	70fb      	strb	r3, [r7, #3]
	if (
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eae:	d848      	bhi.n	8000f42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eb4:	d845      	bhi.n	8000f42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <SSD1306_DrawPixel+0xb8>)
 8000eb8:	791b      	ldrb	r3, [r3, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2301      	moveq	r3, #1
 8000ec6:	2300      	movne	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d11a      	bne.n	8000f08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ed2:	88fa      	ldrh	r2, [r7, #6]
 8000ed4:	88bb      	ldrh	r3, [r7, #4]
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	b298      	uxth	r0, r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	01db      	lsls	r3, r3, #7
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f54 <SSD1306_DrawPixel+0xbc>)
 8000ee2:	5cd3      	ldrb	r3, [r2, r3]
 8000ee4:	b25a      	sxtb	r2, r3
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	2101      	movs	r1, #1
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	b259      	sxtb	r1, r3
 8000ef8:	88fa      	ldrh	r2, [r7, #6]
 8000efa:	4603      	mov	r3, r0
 8000efc:	01db      	lsls	r3, r3, #7
 8000efe:	4413      	add	r3, r2
 8000f00:	b2c9      	uxtb	r1, r1
 8000f02:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <SSD1306_DrawPixel+0xbc>)
 8000f04:	54d1      	strb	r1, [r2, r3]
 8000f06:	e01d      	b.n	8000f44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f08:	88fa      	ldrh	r2, [r7, #6]
 8000f0a:	88bb      	ldrh	r3, [r7, #4]
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	b298      	uxth	r0, r3
 8000f10:	4603      	mov	r3, r0
 8000f12:	01db      	lsls	r3, r3, #7
 8000f14:	4413      	add	r3, r2
 8000f16:	4a0f      	ldr	r2, [pc, #60]	@ (8000f54 <SSD1306_DrawPixel+0xbc>)
 8000f18:	5cd3      	ldrb	r3, [r2, r3]
 8000f1a:	b25a      	sxtb	r2, r3
 8000f1c:	88bb      	ldrh	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	4013      	ands	r3, r2
 8000f30:	b259      	sxtb	r1, r3
 8000f32:	88fa      	ldrh	r2, [r7, #6]
 8000f34:	4603      	mov	r3, r0
 8000f36:	01db      	lsls	r3, r3, #7
 8000f38:	4413      	add	r3, r2
 8000f3a:	b2c9      	uxtb	r1, r1
 8000f3c:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SSD1306_DrawPixel+0xbc>)
 8000f3e:	54d1      	strb	r1, [r2, r3]
 8000f40:	e000      	b.n	8000f44 <SSD1306_DrawPixel+0xac>
		return;
 8000f42:	bf00      	nop
	}
}
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000554 	.word	0x20000554
 8000f54:	20000154 	.word	0x20000154

08000f58 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	80fb      	strh	r3, [r7, #6]
 8000f64:	4613      	mov	r3, r2
 8000f66:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f68:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <SSD1306_GotoXY+0x28>)
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <SSD1306_GotoXY+0x28>)
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	8053      	strh	r3, [r2, #2]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	20000554 	.word	0x20000554

08000f84 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f94:	4b39      	ldr	r3, [pc, #228]	@ (800107c <SSD1306_Putc+0xf8>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
	if (
 8000fa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fa2:	dc07      	bgt.n	8000fb4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000fa4:	4b35      	ldr	r3, [pc, #212]	@ (800107c <SSD1306_Putc+0xf8>)
 8000fa6:	885b      	ldrh	r3, [r3, #2]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000fb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fb2:	dd01      	ble.n	8000fb8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e05d      	b.n	8001074 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e04b      	b.n	8001056 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3b20      	subs	r3, #32
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	7849      	ldrb	r1, [r1, #1]
 8000fca:	fb01 f303 	mul.w	r3, r1, r3
 8000fce:	4619      	mov	r1, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	440b      	add	r3, r1
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e030      	b.n	8001044 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d010      	beq.n	8001014 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000ff2:	4b22      	ldr	r3, [pc, #136]	@ (800107c <SSD1306_Putc+0xf8>)
 8000ff4:	881a      	ldrh	r2, [r3, #0]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b298      	uxth	r0, r3
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <SSD1306_Putc+0xf8>)
 8001000:	885a      	ldrh	r2, [r3, #2]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	b29b      	uxth	r3, r3
 8001006:	4413      	add	r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	79ba      	ldrb	r2, [r7, #6]
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff ff43 	bl	8000e98 <SSD1306_DrawPixel>
 8001012:	e014      	b.n	800103e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <SSD1306_Putc+0xf8>)
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	b29b      	uxth	r3, r3
 800101c:	4413      	add	r3, r2
 800101e:	b298      	uxth	r0, r3
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <SSD1306_Putc+0xf8>)
 8001022:	885a      	ldrh	r2, [r3, #2]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4413      	add	r3, r2
 800102a:	b299      	uxth	r1, r3
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf0c      	ite	eq
 8001032:	2301      	moveq	r3, #1
 8001034:	2300      	movne	r3, #0
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	f7ff ff2d 	bl	8000e98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	3301      	adds	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4293      	cmp	r3, r2
 800104e:	d3c8      	bcc.n	8000fe2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	461a      	mov	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	4293      	cmp	r3, r2
 8001060:	d3ad      	bcc.n	8000fbe <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SSD1306_Putc+0xf8>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	4413      	add	r3, r2
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b03      	ldr	r3, [pc, #12]	@ (800107c <SSD1306_Putc+0xf8>)
 8001070:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001072:	79fb      	ldrb	r3, [r7, #7]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000554 	.word	0x20000554

08001080 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	4613      	mov	r3, r2
 800108c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800108e:	e012      	b.n	80010b6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff73 	bl	8000f84 <SSD1306_Putc>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d002      	beq.n	80010b0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	e008      	b.n	80010c2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1e8      	bne.n	8001090 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	781b      	ldrb	r3, [r3, #0]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff feca 	bl	8000e68 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80010d4:	f7ff fea0 	bl	8000e18 <SSD1306_UpdateScreen>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <OLED_SPI_Pins_Init>:

#include "stm32f4xx.h"


void OLED_SPI_Pins_Init()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN; //enable clock for GPIOA
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <OLED_SPI_Pins_Init+0x44>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <OLED_SPI_Pins_Init+0x44>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6313      	str	r3, [r2, #48]	@ 0x30

	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE7_1;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <OLED_SPI_Pins_Init+0x48>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <OLED_SPI_Pins_Init+0x48>)
 80010f2:	f443 4308 	orr.w	r3, r3, #34816	@ 0x8800
 80010f6:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER &=~(GPIO_MODER_MODE5_0|GPIO_MODER_MODE7_0);

	//Set PA9 and PA10 as Output
	GPIOA->MODER|=GPIO_MODER_MODE9_0|GPIO_MODER_MODE10_0;//|GPIO_MODER_MODE6_0;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <OLED_SPI_Pins_Init+0x48>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <OLED_SPI_Pins_Init+0x48>)
 80010fe:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8001102:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER&=~(GPIO_MODER_MODE9_1|GPIO_MODER_MODE10_1);//|GPIO_MODER_MODE6_1);

	/*select which AF for PA5, PA6 and PA7*/
	GPIOA->AFR[0]|=(0x05<<20)|(0x05<<24)|(0x05<<28);
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <OLED_SPI_Pins_Init+0x48>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a06      	ldr	r2, [pc, #24]	@ (8001124 <OLED_SPI_Pins_Init+0x48>)
 800110a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800110e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001112:	6213      	str	r3, [r2, #32]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000

08001128 <OLED_SPI_Configure>:

void OLED_SPI_Configure()
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	/*Enable clock access to SPI1 module*/
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800112c:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <OLED_SPI_Configure+0x94>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001130:	4a22      	ldr	r2, [pc, #136]	@ (80011bc <OLED_SPI_Configure+0x94>)
 8001132:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001136:	6453      	str	r3, [r2, #68]	@ 0x44

		/*Set clock to fPCLK/2*/
		SPI1->CR1 &=~(1U<<3);
 8001138:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a20      	ldr	r2, [pc, #128]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800113e:	f023 0308 	bic.w	r3, r3, #8
 8001142:	6013      	str	r3, [r2, #0]
		SPI1->CR1 &=~(1U<<4);
 8001144:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1d      	ldr	r2, [pc, #116]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800114a:	f023 0310 	bic.w	r3, r3, #16
 800114e:	6013      	str	r3, [r2, #0]
		SPI1->CR1 &=~(1U<<5);
 8001150:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a1a      	ldr	r2, [pc, #104]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 8001156:	f023 0320 	bic.w	r3, r3, #32
 800115a:	6013      	str	r3, [r2, #0]

		/*Enable full duplex*/
		SPI1->CR1 &=~(1U<<10);
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 8001162:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001166:	6013      	str	r3, [r2, #0]

		/*Set MSB first*/
		SPI1->CR1 &= ~(1U<<7);
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800116e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001172:	6013      	str	r3, [r2, #0]

		/*Set mode to MASTER*/
		SPI1->CR1 |= (1U<<2);
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6013      	str	r3, [r2, #0]

		/*Set 8 bit data mode*/
		SPI1->CR1 &= ~(1U<<11);
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 8001186:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800118a:	6013      	str	r3, [r2, #0]

		/*Select software slave management by
		 * setting SSM=1 and SSI=1*/
		SPI1->CR1 |= (1<<8);
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 8001192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001196:	6013      	str	r3, [r2, #0]
		SPI1->CR1 |= (1<<9);
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a2:	6013      	str	r3, [r2, #0]

		/*Enable SPI module*/
		SPI1->CR1 |= (1<<6);
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <OLED_SPI_Configure+0x98>)
 80011aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40013000 	.word	0x40013000

080011c4 <OLED_SPI_Write>:

void OLED_SPI_Write(char *data,uint32_t size)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]

	while(i<size)
 80011d2:	e00f      	b.n	80011f4 <OLED_SPI_Write+0x30>
	{
		/*Wait until TXE is set*/
		while(!(SPI1->SR & (SPI_SR_TXE))){}
 80011d4:	bf00      	nop
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <OLED_SPI_Write+0x68>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f9      	beq.n	80011d6 <OLED_SPI_Write+0x12>

		/*Write the data to the data register*/
		SPI1->DR =(uint8_t) data[i];
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <OLED_SPI_Write+0x68>)
 80011ec:	60da      	str	r2, [r3, #12]
		i++;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3301      	adds	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
	while(i<size)
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d3eb      	bcc.n	80011d4 <OLED_SPI_Write+0x10>
	}
	/*Wait until TXE is set*/
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 80011fc:	bf00      	nop
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <OLED_SPI_Write+0x68>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f9      	beq.n	80011fe <OLED_SPI_Write+0x3a>

	/*Wait for BUSY flag to reset*/
	while((SPI1->SR & (SPI_SR_BSY))){}
 800120a:	bf00      	nop
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <OLED_SPI_Write+0x68>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f9      	bne.n	800120c <OLED_SPI_Write+0x48>

	/*Clear OVR flag*/
	(void)SPI1->DR;
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <OLED_SPI_Write+0x68>)
 800121a:	68db      	ldr	r3, [r3, #12]
	(void)SPI1->SR;
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <OLED_SPI_Write+0x68>)
 800121e:	689b      	ldr	r3, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40013000 	.word	0x40013000

08001230 <OLED_Select>:



void OLED_Select(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	GPIOA->BSRR =GPIO_BSRR_BR9;
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <OLED_Select+0x18>)
 8001236:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800123a:	619a      	str	r2, [r3, #24]

}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40020000 	.word	0x40020000

0800124c <OLED_Deselect>:

/*Pull high to disable*/
void OLED_Deselect(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	GPIOA->BSRR =GPIO_BSRR_BS9;
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <OLED_Deselect+0x18>)
 8001252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001256:	619a      	str	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40020000 	.word	0x40020000

08001268 <OLED_DataMode>:

void OLED_DataMode()
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	GPIOA->BSRR=GPIO_BSRR_BS10;
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <OLED_DataMode+0x18>)
 800126e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001272:	619a      	str	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40020000 	.word	0x40020000

08001284 <OLED_CommMode>:

void OLED_CommMode()
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	GPIOA->BSRR=GPIO_BSRR_BR10;
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <OLED_CommMode+0x18>)
 800128a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800128e:	619a      	str	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40020000 	.word	0x40020000

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012de:	2007      	movs	r0, #7
 80012e0:	f000 fb48 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <HAL_SPI_MspInit+0x84>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12b      	bne.n	800136a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a17      	ldr	r2, [pc, #92]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 800131c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a10      	ldr	r2, [pc, #64]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800134a:	23a0      	movs	r3, #160	@ 0xa0
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135a:	2305      	movs	r3, #5
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <HAL_SPI_MspInit+0x8c>)
 8001366:	f000 fb39 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40013000 	.word	0x40013000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <HAL_UART_MspInit+0x84>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12b      	bne.n	80013fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_UART_MspInit+0x88>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <HAL_UART_MspInit+0x88>)
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_UART_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_UART_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <HAL_UART_MspInit+0x88>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <HAL_UART_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013da:	230c      	movs	r3, #12
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ea:	2307      	movs	r3, #7
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <HAL_UART_MspInit+0x8c>)
 80013f6:	f000 faf1 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004400 	.word	0x40004400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <NMI_Handler+0x4>

08001418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <MemManage_Handler+0x4>

08001428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <UsageFault_Handler+0x4>

08001438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 f9b3 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}

0800146e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e00a      	b.n	8001496 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001480:	f3af 8000 	nop.w
 8001484:	4601      	mov	r1, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	60ba      	str	r2, [r7, #8]
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	429a      	cmp	r2, r3
 800149c:	dbf0      	blt.n	8001480 <_read+0x12>
  }

  return len;
 800149e:	687b      	ldr	r3, [r7, #4]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e009      	b.n	80014ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	60ba      	str	r2, [r7, #8]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fa94 	bl	80009f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbf1      	blt.n	80014ba <_write+0x12>
  }
  return len;
 80014d6:	687b      	ldr	r3, [r7, #4]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_close>:

int _close(int file)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001508:	605a      	str	r2, [r3, #4]
  return 0;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_isatty>:

int _isatty(int file)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001520:	2301      	movs	r3, #1
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f001 fb26 	bl	8002bc8 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20020000 	.word	0x20020000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	2000055c 	.word	0x2000055c
 80015b0:	200006b0 	.word	0x200006b0

080015b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <TestText>:
#include "oled.h"
#include "delay.h"
#define min(a, b) (((a) < (b)) ? (a) : (b))

void TestText()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (0,0);
 80015dc:	2100      	movs	r1, #0
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff fcba 	bl	8000f58 <SSD1306_GotoXY>
	SSD1306_Puts ("Embedded", &Font_7x10, 1);
 80015e4:	2201      	movs	r2, #1
 80015e6:	4935      	ldr	r1, [pc, #212]	@ (80016bc <TestText+0xe4>)
 80015e8:	4835      	ldr	r0, [pc, #212]	@ (80016c0 <TestText+0xe8>)
 80015ea:	f7ff fd49 	bl	8001080 <SSD1306_Puts>

	SSD1306_GotoXY (0, 10);
 80015ee:	210a      	movs	r1, #10
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff fcb1 	bl	8000f58 <SSD1306_GotoXY>
	SSD1306_Puts ("Expret.io", &Font_7x10, 1);
 80015f6:	2201      	movs	r2, #1
 80015f8:	4930      	ldr	r1, [pc, #192]	@ (80016bc <TestText+0xe4>)
 80015fa:	4832      	ldr	r0, [pc, #200]	@ (80016c4 <TestText+0xec>)
 80015fc:	f7ff fd40 	bl	8001080 <SSD1306_Puts>

	SSD1306_GotoXY (0, 30);
 8001600:	211e      	movs	r1, #30
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fca8 	bl	8000f58 <SSD1306_GotoXY>
	SSD1306_Puts ("OLED Display", &Font_7x10, 1);
 8001608:	2201      	movs	r2, #1
 800160a:	492c      	ldr	r1, [pc, #176]	@ (80016bc <TestText+0xe4>)
 800160c:	482e      	ldr	r0, [pc, #184]	@ (80016c8 <TestText+0xf0>)
 800160e:	f7ff fd37 	bl	8001080 <SSD1306_Puts>

	SSD1306_GotoXY (0, 50);
 8001612:	2132      	movs	r1, #50	@ 0x32
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff fc9f 	bl	8000f58 <SSD1306_GotoXY>
	SSD1306_Puts ("Bare Metal Code", &Font_7x10, 1);
 800161a:	2201      	movs	r2, #1
 800161c:	4927      	ldr	r1, [pc, #156]	@ (80016bc <TestText+0xe4>)
 800161e:	482b      	ldr	r0, [pc, #172]	@ (80016cc <TestText+0xf4>)
 8001620:	f7ff fd2e 	bl	8001080 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8001624:	f7ff fbf8 	bl	8000e18 <SSD1306_UpdateScreen>

	delay (2000);
 8001628:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800162c:	f7fe ffc0 	bl	80005b0 <delay>
	  printf("OLED scrolling...\r\n");
 8001630:	4827      	ldr	r0, [pc, #156]	@ (80016d0 <TestText+0xf8>)
 8001632:	f001 f97b 	bl	800292c <puts>

	SSD1306_ScrollRight(0,7);  // scroll entire screen
 8001636:	2107      	movs	r1, #7
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fa4a 	bl	8000ad2 <SSD1306_ScrollRight>

	delay(2000);  // 2 sec
 800163e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001642:	f7fe ffb5 	bl	80005b0 <delay>

	SSD1306_ScrollLeft(0,7);  // scroll entire screen
 8001646:	2107      	movs	r1, #7
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff fa68 	bl	8000b1e <SSD1306_ScrollLeft>

	delay(2000);  // 2 sec
 800164e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001652:	f7fe ffad 	bl	80005b0 <delay>

	SSD1306_Stopscroll();
 8001656:	f7ff fae0 	bl	8000c1a <SSD1306_Stopscroll>

	SSD1306_ScrollRight(0x00, 0x0f);    // scroll entire screen right
 800165a:	210f      	movs	r1, #15
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fa38 	bl	8000ad2 <SSD1306_ScrollRight>

	delay (2000);
 8001662:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001666:	f7fe ffa3 	bl	80005b0 <delay>

	SSD1306_ScrollLeft(0x00, 0x0f);  // scroll entire screen left
 800166a:	210f      	movs	r1, #15
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff fa56 	bl	8000b1e <SSD1306_ScrollLeft>

	delay (2000);
 8001672:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001676:	f7fe ff9b 	bl	80005b0 <delay>

	SSD1306_Scrolldiagright(0x00, 0x0f);  // scroll entire screen diagonal right
 800167a:	210f      	movs	r1, #15
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fa74 	bl	8000b6a <SSD1306_Scrolldiagright>

	delay (2000);
 8001682:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001686:	f7fe ff93 	bl	80005b0 <delay>

	SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 800168a:	210f      	movs	r1, #15
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fa98 	bl	8000bc2 <SSD1306_Scrolldiagleft>

	delay (2000);
 8001692:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001696:	f7fe ff8b 	bl	80005b0 <delay>

	SSD1306_Stopscroll();   // stop scrolling. If not done, screen will keep on scrolling
 800169a:	f7ff fabe 	bl	8000c1a <SSD1306_Stopscroll>

	  printf("OLED invert screen\r\n");
 800169e:	480d      	ldr	r0, [pc, #52]	@ (80016d4 <TestText+0xfc>)
 80016a0:	f001 f944 	bl	800292c <puts>

	SSD1306_InvertDisplay(1);   // invert the display
 80016a4:	2001      	movs	r0, #1
 80016a6:	f7ff fabf 	bl	8000c28 <SSD1306_InvertDisplay>

	delay(2000);
 80016aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016ae:	f7fe ff7f 	bl	80005b0 <delay>

	SSD1306_InvertDisplay(0);  // normalize the display
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff fab8 	bl	8000c28 <SSD1306_InvertDisplay>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	08003a44 	.word	0x08003a44
 80016c4:	08003a50 	.word	0x08003a50
 80016c8:	08003a5c 	.word	0x08003a5c
 80016cc:	08003a6c 	.word	0x08003a6c
 80016d0:	08003a7c 	.word	0x08003a7c
 80016d4:	08003a90 	.word	0x08003a90

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001710 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016dc:	f7ff ff6a 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	@ (8001714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	@ (8001718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001706:	f001 fa65 	bl	8002bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7fe ff7b 	bl	8000604 <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800171c:	08008b04 	.word	0x08008b04
  ldr r2, =_sbss
 8001720:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001724:	200006b0 	.word	0x200006b0

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	@ (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f90d 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff fd9e 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f917 	bl	80019c2 <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f8ed 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	@ (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000024 	.word	0x20000024
 80017c8:	2000002c 	.word	0x2000002c
 80017cc:	20000028 	.word	0x20000028

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2000002c 	.word	0x2000002c
 80017f4:	20000560 	.word	0x20000560

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	@ (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000560 	.word	0x20000560

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	@ (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	@ 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff47 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff5c 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffb0 	bl	8001930 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e159      	b.n	8001cac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8148 	bne.w	8001ca6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d005      	beq.n	8001a2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d130      	bne.n	8001a90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0201 	and.w	r2, r3, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d017      	beq.n	8001acc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d123      	bne.n	8001b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a2 	beq.w	8001ca6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b57      	ldr	r3, [pc, #348]	@ (8001cc4 <HAL_GPIO_Init+0x2e8>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	4a56      	ldr	r2, [pc, #344]	@ (8001cc4 <HAL_GPIO_Init+0x2e8>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b72:	4b54      	ldr	r3, [pc, #336]	@ (8001cc4 <HAL_GPIO_Init+0x2e8>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7e:	4a52      	ldr	r2, [pc, #328]	@ (8001cc8 <HAL_GPIO_Init+0x2ec>)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	@ (8001ccc <HAL_GPIO_Init+0x2f0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_GPIO_Init+0x202>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a48      	ldr	r2, [pc, #288]	@ (8001cd0 <HAL_GPIO_Init+0x2f4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0x1fe>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a47      	ldr	r2, [pc, #284]	@ (8001cd4 <HAL_GPIO_Init+0x2f8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_GPIO_Init+0x1fa>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a46      	ldr	r2, [pc, #280]	@ (8001cd8 <HAL_GPIO_Init+0x2fc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x1f6>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a45      	ldr	r2, [pc, #276]	@ (8001cdc <HAL_GPIO_Init+0x300>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_Init+0x1f2>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e008      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bde:	2300      	movs	r3, #0
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4093      	lsls	r3, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf0:	4935      	ldr	r1, [pc, #212]	@ (8001cc8 <HAL_GPIO_Init+0x2ec>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfe:	4b38      	ldr	r3, [pc, #224]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c22:	4a2f      	ldr	r2, [pc, #188]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c4c:	4a24      	ldr	r2, [pc, #144]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c52:	4b23      	ldr	r3, [pc, #140]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce0 <HAL_GPIO_Init+0x304>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	f67f aea2 	bls.w	80019f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3724      	adds	r7, #36	@ 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020800 	.word	0x40020800
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40013c00 	.word	0x40013c00

08001ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d30:	e003      	b.n	8001d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	041a      	lsls	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	619a      	str	r2, [r3, #24]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000024 	.word	0x20000024

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4903      	ldr	r1, [pc, #12]	@ (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	08008ab8 	.word	0x08008ab8

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d8c:	f7ff ffdc 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4903      	ldr	r1, [pc, #12]	@ (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	08008ab8 	.word	0x08008ab8

08001db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e07b      	b.n	8001eba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d108      	bne.n	8001ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dd2:	d009      	beq.n	8001de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
 8001dda:	e005      	b.n	8001de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fa74 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6c:	ea42 0103 	orr.w	r1, r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 0104 	and.w	r1, r3, #4
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	f003 0210 	and.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e042      	b.n	8001f5a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d106      	bne.n	8001eee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fa49 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2224      	movs	r2, #36	@ 0x24
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f972 	bl	80021f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b08a      	sub	sp, #40	@ 0x28
 8001f66:	af02      	add	r7, sp, #8
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d175      	bne.n	800206e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <HAL_UART_Transmit+0x2c>
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e06e      	b.n	8002070 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2221      	movs	r2, #33	@ 0x21
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fc2a 	bl	80017f8 <HAL_GetTick>
 8001fa4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	88fa      	ldrh	r2, [r7, #6]
 8001faa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	88fa      	ldrh	r2, [r7, #6]
 8001fb0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fba:	d108      	bne.n	8001fce <HAL_UART_Transmit+0x6c>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d104      	bne.n	8001fce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e003      	b.n	8001fd6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fd6:	e02e      	b.n	8002036 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2180      	movs	r1, #128	@ 0x80
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f848 	bl	8002078 <UART_WaitOnFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e03a      	b.n	8002070 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800200e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	3302      	adds	r3, #2
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	e007      	b.n	8002028 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800203a:	b29b      	uxth	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1cb      	bne.n	8001fd8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2200      	movs	r2, #0
 8002048:	2140      	movs	r1, #64	@ 0x40
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f814 	bl	8002078 <UART_WaitOnFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e006      	b.n	8002070 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800206e:	2302      	movs	r3, #2
  }
}
 8002070:	4618      	mov	r0, r3
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002088:	e03b      	b.n	8002102 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d037      	beq.n	8002102 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002092:	f7ff fbb1 	bl	80017f8 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e03a      	b.n	8002122 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d023      	beq.n	8002102 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b80      	cmp	r3, #128	@ 0x80
 80020be:	d020      	beq.n	8002102 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b40      	cmp	r3, #64	@ 0x40
 80020c4:	d01d      	beq.n	8002102 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d116      	bne.n	8002102 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f81d 	bl	800212a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2208      	movs	r2, #8
 80020f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4013      	ands	r3, r2
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	429a      	cmp	r2, r3
 8002110:	bf0c      	ite	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	2300      	movne	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	429a      	cmp	r2, r3
 800211e:	d0b4      	beq.n	800208a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800212a:	b480      	push	{r7}
 800212c:	b095      	sub	sp, #84	@ 0x54
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	330c      	adds	r3, #12
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213c:	e853 3f00 	ldrex	r3, [r3]
 8002140:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	330c      	adds	r3, #12
 8002150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002152:	643a      	str	r2, [r7, #64]	@ 0x40
 8002154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002156:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002158:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800215a:	e841 2300 	strex	r3, r2, [r1]
 800215e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1e5      	bne.n	8002132 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3314      	adds	r3, #20
 800216c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	e853 3f00 	ldrex	r3, [r3]
 8002174:	61fb      	str	r3, [r7, #28]
   return(result);
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3314      	adds	r3, #20
 8002184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002188:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800218c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800218e:	e841 2300 	strex	r3, r2, [r1]
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1e5      	bne.n	8002166 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d119      	bne.n	80021d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	e853 3f00 	ldrex	r3, [r3]
 80021b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f023 0310 	bic.w	r3, r3, #16
 80021b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021c2:	61ba      	str	r2, [r7, #24]
 80021c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c6:	6979      	ldr	r1, [r7, #20]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	e841 2300 	strex	r3, r2, [r1]
 80021ce:	613b      	str	r3, [r7, #16]
   return(result);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1e5      	bne.n	80021a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80021e4:	bf00      	nop
 80021e6:	3754      	adds	r7, #84	@ 0x54
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f4:	b0c0      	sub	sp, #256	@ 0x100
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220c:	68d9      	ldr	r1, [r3, #12]
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	ea40 0301 	orr.w	r3, r0, r1
 8002218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800221a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	431a      	orrs	r2, r3
 8002228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	431a      	orrs	r2, r3
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002248:	f021 010c 	bic.w	r1, r1, #12
 800224c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002256:	430b      	orrs	r3, r1
 8002258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800225a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800226a:	6999      	ldr	r1, [r3, #24]
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	ea40 0301 	orr.w	r3, r0, r1
 8002276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b8f      	ldr	r3, [pc, #572]	@ (80024bc <UART_SetConfig+0x2cc>)
 8002280:	429a      	cmp	r2, r3
 8002282:	d005      	beq.n	8002290 <UART_SetConfig+0xa0>
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b8d      	ldr	r3, [pc, #564]	@ (80024c0 <UART_SetConfig+0x2d0>)
 800228c:	429a      	cmp	r2, r3
 800228e:	d104      	bne.n	800229a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002290:	f7ff fd7a 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8002294:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002298:	e003      	b.n	80022a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800229a:	f7ff fd61 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 800229e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022ac:	f040 810c 	bne.w	80024c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022b4:	2200      	movs	r2, #0
 80022b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80022be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80022c2:	4622      	mov	r2, r4
 80022c4:	462b      	mov	r3, r5
 80022c6:	1891      	adds	r1, r2, r2
 80022c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80022ca:	415b      	adcs	r3, r3
 80022cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022d2:	4621      	mov	r1, r4
 80022d4:	eb12 0801 	adds.w	r8, r2, r1
 80022d8:	4629      	mov	r1, r5
 80022da:	eb43 0901 	adc.w	r9, r3, r1
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f2:	4690      	mov	r8, r2
 80022f4:	4699      	mov	r9, r3
 80022f6:	4623      	mov	r3, r4
 80022f8:	eb18 0303 	adds.w	r3, r8, r3
 80022fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002300:	462b      	mov	r3, r5
 8002302:	eb49 0303 	adc.w	r3, r9, r3
 8002306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800230a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002316:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800231a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800231e:	460b      	mov	r3, r1
 8002320:	18db      	adds	r3, r3, r3
 8002322:	653b      	str	r3, [r7, #80]	@ 0x50
 8002324:	4613      	mov	r3, r2
 8002326:	eb42 0303 	adc.w	r3, r2, r3
 800232a:	657b      	str	r3, [r7, #84]	@ 0x54
 800232c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002334:	f7fd ffa4 	bl	8000280 <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4b61      	ldr	r3, [pc, #388]	@ (80024c4 <UART_SetConfig+0x2d4>)
 800233e:	fba3 2302 	umull	r2, r3, r3, r2
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	011c      	lsls	r4, r3, #4
 8002346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800234a:	2200      	movs	r2, #0
 800234c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002350:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002358:	4642      	mov	r2, r8
 800235a:	464b      	mov	r3, r9
 800235c:	1891      	adds	r1, r2, r2
 800235e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002360:	415b      	adcs	r3, r3
 8002362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002368:	4641      	mov	r1, r8
 800236a:	eb12 0a01 	adds.w	sl, r2, r1
 800236e:	4649      	mov	r1, r9
 8002370:	eb43 0b01 	adc.w	fp, r3, r1
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002388:	4692      	mov	sl, r2
 800238a:	469b      	mov	fp, r3
 800238c:	4643      	mov	r3, r8
 800238e:	eb1a 0303 	adds.w	r3, sl, r3
 8002392:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002396:	464b      	mov	r3, r9
 8002398:	eb4b 0303 	adc.w	r3, fp, r3
 800239c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80023b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80023b4:	460b      	mov	r3, r1
 80023b6:	18db      	adds	r3, r3, r3
 80023b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80023ba:	4613      	mov	r3, r2
 80023bc:	eb42 0303 	adc.w	r3, r2, r3
 80023c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80023c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80023ca:	f7fd ff59 	bl	8000280 <__aeabi_uldivmod>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4611      	mov	r1, r2
 80023d4:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <UART_SetConfig+0x2d4>)
 80023d6:	fba3 2301 	umull	r2, r3, r3, r1
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2264      	movs	r2, #100	@ 0x64
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	1acb      	subs	r3, r1, r3
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80023ea:	4b36      	ldr	r3, [pc, #216]	@ (80024c4 <UART_SetConfig+0x2d4>)
 80023ec:	fba3 2302 	umull	r2, r3, r3, r2
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80023f8:	441c      	add	r4, r3
 80023fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023fe:	2200      	movs	r2, #0
 8002400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002404:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800240c:	4642      	mov	r2, r8
 800240e:	464b      	mov	r3, r9
 8002410:	1891      	adds	r1, r2, r2
 8002412:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002414:	415b      	adcs	r3, r3
 8002416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800241c:	4641      	mov	r1, r8
 800241e:	1851      	adds	r1, r2, r1
 8002420:	6339      	str	r1, [r7, #48]	@ 0x30
 8002422:	4649      	mov	r1, r9
 8002424:	414b      	adcs	r3, r1
 8002426:	637b      	str	r3, [r7, #52]	@ 0x34
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002434:	4659      	mov	r1, fp
 8002436:	00cb      	lsls	r3, r1, #3
 8002438:	4651      	mov	r1, sl
 800243a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800243e:	4651      	mov	r1, sl
 8002440:	00ca      	lsls	r2, r1, #3
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	4603      	mov	r3, r0
 8002448:	4642      	mov	r2, r8
 800244a:	189b      	adds	r3, r3, r2
 800244c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002450:	464b      	mov	r3, r9
 8002452:	460a      	mov	r2, r1
 8002454:	eb42 0303 	adc.w	r3, r2, r3
 8002458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800245c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002468:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800246c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002470:	460b      	mov	r3, r1
 8002472:	18db      	adds	r3, r3, r3
 8002474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002476:	4613      	mov	r3, r2
 8002478:	eb42 0303 	adc.w	r3, r2, r3
 800247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002486:	f7fd fefb 	bl	8000280 <__aeabi_uldivmod>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <UART_SetConfig+0x2d4>)
 8002490:	fba3 1302 	umull	r1, r3, r3, r2
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	2164      	movs	r1, #100	@ 0x64
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	3332      	adds	r3, #50	@ 0x32
 80024a2:	4a08      	ldr	r2, [pc, #32]	@ (80024c4 <UART_SetConfig+0x2d4>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	095b      	lsrs	r3, r3, #5
 80024aa:	f003 0207 	and.w	r2, r3, #7
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4422      	add	r2, r4
 80024b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024b8:	e106      	b.n	80026c8 <UART_SetConfig+0x4d8>
 80024ba:	bf00      	nop
 80024bc:	40011000 	.word	0x40011000
 80024c0:	40011400 	.word	0x40011400
 80024c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024cc:	2200      	movs	r2, #0
 80024ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80024d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80024da:	4642      	mov	r2, r8
 80024dc:	464b      	mov	r3, r9
 80024de:	1891      	adds	r1, r2, r2
 80024e0:	6239      	str	r1, [r7, #32]
 80024e2:	415b      	adcs	r3, r3
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024ea:	4641      	mov	r1, r8
 80024ec:	1854      	adds	r4, r2, r1
 80024ee:	4649      	mov	r1, r9
 80024f0:	eb43 0501 	adc.w	r5, r3, r1
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	00eb      	lsls	r3, r5, #3
 80024fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002502:	00e2      	lsls	r2, r4, #3
 8002504:	4614      	mov	r4, r2
 8002506:	461d      	mov	r5, r3
 8002508:	4643      	mov	r3, r8
 800250a:	18e3      	adds	r3, r4, r3
 800250c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002510:	464b      	mov	r3, r9
 8002512:	eb45 0303 	adc.w	r3, r5, r3
 8002516:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800251a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002526:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002536:	4629      	mov	r1, r5
 8002538:	008b      	lsls	r3, r1, #2
 800253a:	4621      	mov	r1, r4
 800253c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002540:	4621      	mov	r1, r4
 8002542:	008a      	lsls	r2, r1, #2
 8002544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002548:	f7fd fe9a 	bl	8000280 <__aeabi_uldivmod>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4b60      	ldr	r3, [pc, #384]	@ (80026d4 <UART_SetConfig+0x4e4>)
 8002552:	fba3 2302 	umull	r2, r3, r3, r2
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	011c      	lsls	r4, r3, #4
 800255a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800255e:	2200      	movs	r2, #0
 8002560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002564:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800256c:	4642      	mov	r2, r8
 800256e:	464b      	mov	r3, r9
 8002570:	1891      	adds	r1, r2, r2
 8002572:	61b9      	str	r1, [r7, #24]
 8002574:	415b      	adcs	r3, r3
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257c:	4641      	mov	r1, r8
 800257e:	1851      	adds	r1, r2, r1
 8002580:	6139      	str	r1, [r7, #16]
 8002582:	4649      	mov	r1, r9
 8002584:	414b      	adcs	r3, r1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002594:	4659      	mov	r1, fp
 8002596:	00cb      	lsls	r3, r1, #3
 8002598:	4651      	mov	r1, sl
 800259a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259e:	4651      	mov	r1, sl
 80025a0:	00ca      	lsls	r2, r1, #3
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	4642      	mov	r2, r8
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025b0:	464b      	mov	r3, r9
 80025b2:	460a      	mov	r2, r1
 80025b4:	eb42 0303 	adc.w	r3, r2, r3
 80025b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80025d4:	4649      	mov	r1, r9
 80025d6:	008b      	lsls	r3, r1, #2
 80025d8:	4641      	mov	r1, r8
 80025da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025de:	4641      	mov	r1, r8
 80025e0:	008a      	lsls	r2, r1, #2
 80025e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80025e6:	f7fd fe4b 	bl	8000280 <__aeabi_uldivmod>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	4b38      	ldr	r3, [pc, #224]	@ (80026d4 <UART_SetConfig+0x4e4>)
 80025f2:	fba3 2301 	umull	r2, r3, r3, r1
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2264      	movs	r2, #100	@ 0x64
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	1acb      	subs	r3, r1, r3
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	3332      	adds	r3, #50	@ 0x32
 8002604:	4a33      	ldr	r2, [pc, #204]	@ (80026d4 <UART_SetConfig+0x4e4>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002610:	441c      	add	r4, r3
 8002612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002616:	2200      	movs	r2, #0
 8002618:	673b      	str	r3, [r7, #112]	@ 0x70
 800261a:	677a      	str	r2, [r7, #116]	@ 0x74
 800261c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002620:	4642      	mov	r2, r8
 8002622:	464b      	mov	r3, r9
 8002624:	1891      	adds	r1, r2, r2
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	415b      	adcs	r3, r3
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002630:	4641      	mov	r1, r8
 8002632:	1851      	adds	r1, r2, r1
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	4649      	mov	r1, r9
 8002638:	414b      	adcs	r3, r1
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002648:	4659      	mov	r1, fp
 800264a:	00cb      	lsls	r3, r1, #3
 800264c:	4651      	mov	r1, sl
 800264e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002652:	4651      	mov	r1, sl
 8002654:	00ca      	lsls	r2, r1, #3
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	4603      	mov	r3, r0
 800265c:	4642      	mov	r2, r8
 800265e:	189b      	adds	r3, r3, r2
 8002660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002662:	464b      	mov	r3, r9
 8002664:	460a      	mov	r2, r1
 8002666:	eb42 0303 	adc.w	r3, r2, r3
 800266a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	663b      	str	r3, [r7, #96]	@ 0x60
 8002676:	667a      	str	r2, [r7, #100]	@ 0x64
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002684:	4649      	mov	r1, r9
 8002686:	008b      	lsls	r3, r1, #2
 8002688:	4641      	mov	r1, r8
 800268a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800268e:	4641      	mov	r1, r8
 8002690:	008a      	lsls	r2, r1, #2
 8002692:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002696:	f7fd fdf3 	bl	8000280 <__aeabi_uldivmod>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <UART_SetConfig+0x4e4>)
 80026a0:	fba3 1302 	umull	r1, r3, r3, r2
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	2164      	movs	r1, #100	@ 0x64
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	3332      	adds	r3, #50	@ 0x32
 80026b2:	4a08      	ldr	r2, [pc, #32]	@ (80026d4 <UART_SetConfig+0x4e4>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	f003 020f 	and.w	r2, r3, #15
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4422      	add	r2, r4
 80026c6:	609a      	str	r2, [r3, #8]
}
 80026c8:	bf00      	nop
 80026ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80026ce:	46bd      	mov	sp, r7
 80026d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d4:	51eb851f 	.word	0x51eb851f

080026d8 <std>:
 80026d8:	2300      	movs	r3, #0
 80026da:	b510      	push	{r4, lr}
 80026dc:	4604      	mov	r4, r0
 80026de:	e9c0 3300 	strd	r3, r3, [r0]
 80026e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026e6:	6083      	str	r3, [r0, #8]
 80026e8:	8181      	strh	r1, [r0, #12]
 80026ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80026ec:	81c2      	strh	r2, [r0, #14]
 80026ee:	6183      	str	r3, [r0, #24]
 80026f0:	4619      	mov	r1, r3
 80026f2:	2208      	movs	r2, #8
 80026f4:	305c      	adds	r0, #92	@ 0x5c
 80026f6:	f000 fa19 	bl	8002b2c <memset>
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <std+0x58>)
 80026fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80026fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <std+0x5c>)
 8002700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <std+0x60>)
 8002704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002706:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <std+0x64>)
 8002708:	6323      	str	r3, [r4, #48]	@ 0x30
 800270a:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <std+0x68>)
 800270c:	6224      	str	r4, [r4, #32]
 800270e:	429c      	cmp	r4, r3
 8002710:	d006      	beq.n	8002720 <std+0x48>
 8002712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002716:	4294      	cmp	r4, r2
 8002718:	d002      	beq.n	8002720 <std+0x48>
 800271a:	33d0      	adds	r3, #208	@ 0xd0
 800271c:	429c      	cmp	r4, r3
 800271e:	d105      	bne.n	800272c <std+0x54>
 8002720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002728:	f000 ba78 	b.w	8002c1c <__retarget_lock_init_recursive>
 800272c:	bd10      	pop	{r4, pc}
 800272e:	bf00      	nop
 8002730:	0800297d 	.word	0x0800297d
 8002734:	0800299f 	.word	0x0800299f
 8002738:	080029d7 	.word	0x080029d7
 800273c:	080029fb 	.word	0x080029fb
 8002740:	20000564 	.word	0x20000564

08002744 <stdio_exit_handler>:
 8002744:	4a02      	ldr	r2, [pc, #8]	@ (8002750 <stdio_exit_handler+0xc>)
 8002746:	4903      	ldr	r1, [pc, #12]	@ (8002754 <stdio_exit_handler+0x10>)
 8002748:	4803      	ldr	r0, [pc, #12]	@ (8002758 <stdio_exit_handler+0x14>)
 800274a:	f000 b869 	b.w	8002820 <_fwalk_sglue>
 800274e:	bf00      	nop
 8002750:	20000030 	.word	0x20000030
 8002754:	0800376d 	.word	0x0800376d
 8002758:	20000040 	.word	0x20000040

0800275c <cleanup_stdio>:
 800275c:	6841      	ldr	r1, [r0, #4]
 800275e:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <cleanup_stdio+0x34>)
 8002760:	4299      	cmp	r1, r3
 8002762:	b510      	push	{r4, lr}
 8002764:	4604      	mov	r4, r0
 8002766:	d001      	beq.n	800276c <cleanup_stdio+0x10>
 8002768:	f001 f800 	bl	800376c <_fflush_r>
 800276c:	68a1      	ldr	r1, [r4, #8]
 800276e:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <cleanup_stdio+0x38>)
 8002770:	4299      	cmp	r1, r3
 8002772:	d002      	beq.n	800277a <cleanup_stdio+0x1e>
 8002774:	4620      	mov	r0, r4
 8002776:	f000 fff9 	bl	800376c <_fflush_r>
 800277a:	68e1      	ldr	r1, [r4, #12]
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <cleanup_stdio+0x3c>)
 800277e:	4299      	cmp	r1, r3
 8002780:	d004      	beq.n	800278c <cleanup_stdio+0x30>
 8002782:	4620      	mov	r0, r4
 8002784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002788:	f000 bff0 	b.w	800376c <_fflush_r>
 800278c:	bd10      	pop	{r4, pc}
 800278e:	bf00      	nop
 8002790:	20000564 	.word	0x20000564
 8002794:	200005cc 	.word	0x200005cc
 8002798:	20000634 	.word	0x20000634

0800279c <global_stdio_init.part.0>:
 800279c:	b510      	push	{r4, lr}
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <global_stdio_init.part.0+0x30>)
 80027a0:	4c0b      	ldr	r4, [pc, #44]	@ (80027d0 <global_stdio_init.part.0+0x34>)
 80027a2:	4a0c      	ldr	r2, [pc, #48]	@ (80027d4 <global_stdio_init.part.0+0x38>)
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	4620      	mov	r0, r4
 80027a8:	2200      	movs	r2, #0
 80027aa:	2104      	movs	r1, #4
 80027ac:	f7ff ff94 	bl	80026d8 <std>
 80027b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80027b4:	2201      	movs	r2, #1
 80027b6:	2109      	movs	r1, #9
 80027b8:	f7ff ff8e 	bl	80026d8 <std>
 80027bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80027c0:	2202      	movs	r2, #2
 80027c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c6:	2112      	movs	r1, #18
 80027c8:	f7ff bf86 	b.w	80026d8 <std>
 80027cc:	2000069c 	.word	0x2000069c
 80027d0:	20000564 	.word	0x20000564
 80027d4:	08002745 	.word	0x08002745

080027d8 <__sfp_lock_acquire>:
 80027d8:	4801      	ldr	r0, [pc, #4]	@ (80027e0 <__sfp_lock_acquire+0x8>)
 80027da:	f000 ba20 	b.w	8002c1e <__retarget_lock_acquire_recursive>
 80027de:	bf00      	nop
 80027e0:	200006a5 	.word	0x200006a5

080027e4 <__sfp_lock_release>:
 80027e4:	4801      	ldr	r0, [pc, #4]	@ (80027ec <__sfp_lock_release+0x8>)
 80027e6:	f000 ba1b 	b.w	8002c20 <__retarget_lock_release_recursive>
 80027ea:	bf00      	nop
 80027ec:	200006a5 	.word	0x200006a5

080027f0 <__sinit>:
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4604      	mov	r4, r0
 80027f4:	f7ff fff0 	bl	80027d8 <__sfp_lock_acquire>
 80027f8:	6a23      	ldr	r3, [r4, #32]
 80027fa:	b11b      	cbz	r3, 8002804 <__sinit+0x14>
 80027fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002800:	f7ff bff0 	b.w	80027e4 <__sfp_lock_release>
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <__sinit+0x28>)
 8002806:	6223      	str	r3, [r4, #32]
 8002808:	4b04      	ldr	r3, [pc, #16]	@ (800281c <__sinit+0x2c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f5      	bne.n	80027fc <__sinit+0xc>
 8002810:	f7ff ffc4 	bl	800279c <global_stdio_init.part.0>
 8002814:	e7f2      	b.n	80027fc <__sinit+0xc>
 8002816:	bf00      	nop
 8002818:	0800275d 	.word	0x0800275d
 800281c:	2000069c 	.word	0x2000069c

08002820 <_fwalk_sglue>:
 8002820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002824:	4607      	mov	r7, r0
 8002826:	4688      	mov	r8, r1
 8002828:	4614      	mov	r4, r2
 800282a:	2600      	movs	r6, #0
 800282c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002830:	f1b9 0901 	subs.w	r9, r9, #1
 8002834:	d505      	bpl.n	8002842 <_fwalk_sglue+0x22>
 8002836:	6824      	ldr	r4, [r4, #0]
 8002838:	2c00      	cmp	r4, #0
 800283a:	d1f7      	bne.n	800282c <_fwalk_sglue+0xc>
 800283c:	4630      	mov	r0, r6
 800283e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002842:	89ab      	ldrh	r3, [r5, #12]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d907      	bls.n	8002858 <_fwalk_sglue+0x38>
 8002848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800284c:	3301      	adds	r3, #1
 800284e:	d003      	beq.n	8002858 <_fwalk_sglue+0x38>
 8002850:	4629      	mov	r1, r5
 8002852:	4638      	mov	r0, r7
 8002854:	47c0      	blx	r8
 8002856:	4306      	orrs	r6, r0
 8002858:	3568      	adds	r5, #104	@ 0x68
 800285a:	e7e9      	b.n	8002830 <_fwalk_sglue+0x10>

0800285c <iprintf>:
 800285c:	b40f      	push	{r0, r1, r2, r3}
 800285e:	b507      	push	{r0, r1, r2, lr}
 8002860:	4906      	ldr	r1, [pc, #24]	@ (800287c <iprintf+0x20>)
 8002862:	ab04      	add	r3, sp, #16
 8002864:	6808      	ldr	r0, [r1, #0]
 8002866:	f853 2b04 	ldr.w	r2, [r3], #4
 800286a:	6881      	ldr	r1, [r0, #8]
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	f000 fc53 	bl	8003118 <_vfiprintf_r>
 8002872:	b003      	add	sp, #12
 8002874:	f85d eb04 	ldr.w	lr, [sp], #4
 8002878:	b004      	add	sp, #16
 800287a:	4770      	bx	lr
 800287c:	2000003c 	.word	0x2000003c

08002880 <_puts_r>:
 8002880:	6a03      	ldr	r3, [r0, #32]
 8002882:	b570      	push	{r4, r5, r6, lr}
 8002884:	6884      	ldr	r4, [r0, #8]
 8002886:	4605      	mov	r5, r0
 8002888:	460e      	mov	r6, r1
 800288a:	b90b      	cbnz	r3, 8002890 <_puts_r+0x10>
 800288c:	f7ff ffb0 	bl	80027f0 <__sinit>
 8002890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002892:	07db      	lsls	r3, r3, #31
 8002894:	d405      	bmi.n	80028a2 <_puts_r+0x22>
 8002896:	89a3      	ldrh	r3, [r4, #12]
 8002898:	0598      	lsls	r0, r3, #22
 800289a:	d402      	bmi.n	80028a2 <_puts_r+0x22>
 800289c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800289e:	f000 f9be 	bl	8002c1e <__retarget_lock_acquire_recursive>
 80028a2:	89a3      	ldrh	r3, [r4, #12]
 80028a4:	0719      	lsls	r1, r3, #28
 80028a6:	d502      	bpl.n	80028ae <_puts_r+0x2e>
 80028a8:	6923      	ldr	r3, [r4, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d135      	bne.n	800291a <_puts_r+0x9a>
 80028ae:	4621      	mov	r1, r4
 80028b0:	4628      	mov	r0, r5
 80028b2:	f000 f8e5 	bl	8002a80 <__swsetup_r>
 80028b6:	b380      	cbz	r0, 800291a <_puts_r+0x9a>
 80028b8:	f04f 35ff 	mov.w	r5, #4294967295
 80028bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028be:	07da      	lsls	r2, r3, #31
 80028c0:	d405      	bmi.n	80028ce <_puts_r+0x4e>
 80028c2:	89a3      	ldrh	r3, [r4, #12]
 80028c4:	059b      	lsls	r3, r3, #22
 80028c6:	d402      	bmi.n	80028ce <_puts_r+0x4e>
 80028c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028ca:	f000 f9a9 	bl	8002c20 <__retarget_lock_release_recursive>
 80028ce:	4628      	mov	r0, r5
 80028d0:	bd70      	pop	{r4, r5, r6, pc}
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da04      	bge.n	80028e0 <_puts_r+0x60>
 80028d6:	69a2      	ldr	r2, [r4, #24]
 80028d8:	429a      	cmp	r2, r3
 80028da:	dc17      	bgt.n	800290c <_puts_r+0x8c>
 80028dc:	290a      	cmp	r1, #10
 80028de:	d015      	beq.n	800290c <_puts_r+0x8c>
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	6022      	str	r2, [r4, #0]
 80028e6:	7019      	strb	r1, [r3, #0]
 80028e8:	68a3      	ldr	r3, [r4, #8]
 80028ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80028ee:	3b01      	subs	r3, #1
 80028f0:	60a3      	str	r3, [r4, #8]
 80028f2:	2900      	cmp	r1, #0
 80028f4:	d1ed      	bne.n	80028d2 <_puts_r+0x52>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	da11      	bge.n	800291e <_puts_r+0x9e>
 80028fa:	4622      	mov	r2, r4
 80028fc:	210a      	movs	r1, #10
 80028fe:	4628      	mov	r0, r5
 8002900:	f000 f87f 	bl	8002a02 <__swbuf_r>
 8002904:	3001      	adds	r0, #1
 8002906:	d0d7      	beq.n	80028b8 <_puts_r+0x38>
 8002908:	250a      	movs	r5, #10
 800290a:	e7d7      	b.n	80028bc <_puts_r+0x3c>
 800290c:	4622      	mov	r2, r4
 800290e:	4628      	mov	r0, r5
 8002910:	f000 f877 	bl	8002a02 <__swbuf_r>
 8002914:	3001      	adds	r0, #1
 8002916:	d1e7      	bne.n	80028e8 <_puts_r+0x68>
 8002918:	e7ce      	b.n	80028b8 <_puts_r+0x38>
 800291a:	3e01      	subs	r6, #1
 800291c:	e7e4      	b.n	80028e8 <_puts_r+0x68>
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	6022      	str	r2, [r4, #0]
 8002924:	220a      	movs	r2, #10
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e7ee      	b.n	8002908 <_puts_r+0x88>
	...

0800292c <puts>:
 800292c:	4b02      	ldr	r3, [pc, #8]	@ (8002938 <puts+0xc>)
 800292e:	4601      	mov	r1, r0
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	f7ff bfa5 	b.w	8002880 <_puts_r>
 8002936:	bf00      	nop
 8002938:	2000003c 	.word	0x2000003c

0800293c <siprintf>:
 800293c:	b40e      	push	{r1, r2, r3}
 800293e:	b500      	push	{lr}
 8002940:	b09c      	sub	sp, #112	@ 0x70
 8002942:	ab1d      	add	r3, sp, #116	@ 0x74
 8002944:	9002      	str	r0, [sp, #8]
 8002946:	9006      	str	r0, [sp, #24]
 8002948:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800294c:	4809      	ldr	r0, [pc, #36]	@ (8002974 <siprintf+0x38>)
 800294e:	9107      	str	r1, [sp, #28]
 8002950:	9104      	str	r1, [sp, #16]
 8002952:	4909      	ldr	r1, [pc, #36]	@ (8002978 <siprintf+0x3c>)
 8002954:	f853 2b04 	ldr.w	r2, [r3], #4
 8002958:	9105      	str	r1, [sp, #20]
 800295a:	6800      	ldr	r0, [r0, #0]
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	a902      	add	r1, sp, #8
 8002960:	f000 fab4 	bl	8002ecc <_svfiprintf_r>
 8002964:	9b02      	ldr	r3, [sp, #8]
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	b01c      	add	sp, #112	@ 0x70
 800296c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002970:	b003      	add	sp, #12
 8002972:	4770      	bx	lr
 8002974:	2000003c 	.word	0x2000003c
 8002978:	ffff0208 	.word	0xffff0208

0800297c <__sread>:
 800297c:	b510      	push	{r4, lr}
 800297e:	460c      	mov	r4, r1
 8002980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002984:	f000 f8fc 	bl	8002b80 <_read_r>
 8002988:	2800      	cmp	r0, #0
 800298a:	bfab      	itete	ge
 800298c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800298e:	89a3      	ldrhlt	r3, [r4, #12]
 8002990:	181b      	addge	r3, r3, r0
 8002992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002996:	bfac      	ite	ge
 8002998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800299a:	81a3      	strhlt	r3, [r4, #12]
 800299c:	bd10      	pop	{r4, pc}

0800299e <__swrite>:
 800299e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a2:	461f      	mov	r7, r3
 80029a4:	898b      	ldrh	r3, [r1, #12]
 80029a6:	05db      	lsls	r3, r3, #23
 80029a8:	4605      	mov	r5, r0
 80029aa:	460c      	mov	r4, r1
 80029ac:	4616      	mov	r6, r2
 80029ae:	d505      	bpl.n	80029bc <__swrite+0x1e>
 80029b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b4:	2302      	movs	r3, #2
 80029b6:	2200      	movs	r2, #0
 80029b8:	f000 f8d0 	bl	8002b5c <_lseek_r>
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029c6:	81a3      	strh	r3, [r4, #12]
 80029c8:	4632      	mov	r2, r6
 80029ca:	463b      	mov	r3, r7
 80029cc:	4628      	mov	r0, r5
 80029ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029d2:	f000 b8e7 	b.w	8002ba4 <_write_r>

080029d6 <__sseek>:
 80029d6:	b510      	push	{r4, lr}
 80029d8:	460c      	mov	r4, r1
 80029da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029de:	f000 f8bd 	bl	8002b5c <_lseek_r>
 80029e2:	1c43      	adds	r3, r0, #1
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	bf15      	itete	ne
 80029e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80029ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80029ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80029f2:	81a3      	strheq	r3, [r4, #12]
 80029f4:	bf18      	it	ne
 80029f6:	81a3      	strhne	r3, [r4, #12]
 80029f8:	bd10      	pop	{r4, pc}

080029fa <__sclose>:
 80029fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029fe:	f000 b89d 	b.w	8002b3c <_close_r>

08002a02 <__swbuf_r>:
 8002a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a04:	460e      	mov	r6, r1
 8002a06:	4614      	mov	r4, r2
 8002a08:	4605      	mov	r5, r0
 8002a0a:	b118      	cbz	r0, 8002a14 <__swbuf_r+0x12>
 8002a0c:	6a03      	ldr	r3, [r0, #32]
 8002a0e:	b90b      	cbnz	r3, 8002a14 <__swbuf_r+0x12>
 8002a10:	f7ff feee 	bl	80027f0 <__sinit>
 8002a14:	69a3      	ldr	r3, [r4, #24]
 8002a16:	60a3      	str	r3, [r4, #8]
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	071a      	lsls	r2, r3, #28
 8002a1c:	d501      	bpl.n	8002a22 <__swbuf_r+0x20>
 8002a1e:	6923      	ldr	r3, [r4, #16]
 8002a20:	b943      	cbnz	r3, 8002a34 <__swbuf_r+0x32>
 8002a22:	4621      	mov	r1, r4
 8002a24:	4628      	mov	r0, r5
 8002a26:	f000 f82b 	bl	8002a80 <__swsetup_r>
 8002a2a:	b118      	cbz	r0, 8002a34 <__swbuf_r+0x32>
 8002a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8002a30:	4638      	mov	r0, r7
 8002a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	6922      	ldr	r2, [r4, #16]
 8002a38:	1a98      	subs	r0, r3, r2
 8002a3a:	6963      	ldr	r3, [r4, #20]
 8002a3c:	b2f6      	uxtb	r6, r6
 8002a3e:	4283      	cmp	r3, r0
 8002a40:	4637      	mov	r7, r6
 8002a42:	dc05      	bgt.n	8002a50 <__swbuf_r+0x4e>
 8002a44:	4621      	mov	r1, r4
 8002a46:	4628      	mov	r0, r5
 8002a48:	f000 fe90 	bl	800376c <_fflush_r>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d1ed      	bne.n	8002a2c <__swbuf_r+0x2a>
 8002a50:	68a3      	ldr	r3, [r4, #8]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	60a3      	str	r3, [r4, #8]
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	6022      	str	r2, [r4, #0]
 8002a5c:	701e      	strb	r6, [r3, #0]
 8002a5e:	6962      	ldr	r2, [r4, #20]
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d004      	beq.n	8002a70 <__swbuf_r+0x6e>
 8002a66:	89a3      	ldrh	r3, [r4, #12]
 8002a68:	07db      	lsls	r3, r3, #31
 8002a6a:	d5e1      	bpl.n	8002a30 <__swbuf_r+0x2e>
 8002a6c:	2e0a      	cmp	r6, #10
 8002a6e:	d1df      	bne.n	8002a30 <__swbuf_r+0x2e>
 8002a70:	4621      	mov	r1, r4
 8002a72:	4628      	mov	r0, r5
 8002a74:	f000 fe7a 	bl	800376c <_fflush_r>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d0d9      	beq.n	8002a30 <__swbuf_r+0x2e>
 8002a7c:	e7d6      	b.n	8002a2c <__swbuf_r+0x2a>
	...

08002a80 <__swsetup_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4b29      	ldr	r3, [pc, #164]	@ (8002b28 <__swsetup_r+0xa8>)
 8002a84:	4605      	mov	r5, r0
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	460c      	mov	r4, r1
 8002a8a:	b118      	cbz	r0, 8002a94 <__swsetup_r+0x14>
 8002a8c:	6a03      	ldr	r3, [r0, #32]
 8002a8e:	b90b      	cbnz	r3, 8002a94 <__swsetup_r+0x14>
 8002a90:	f7ff feae 	bl	80027f0 <__sinit>
 8002a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a98:	0719      	lsls	r1, r3, #28
 8002a9a:	d422      	bmi.n	8002ae2 <__swsetup_r+0x62>
 8002a9c:	06da      	lsls	r2, r3, #27
 8002a9e:	d407      	bmi.n	8002ab0 <__swsetup_r+0x30>
 8002aa0:	2209      	movs	r2, #9
 8002aa2:	602a      	str	r2, [r5, #0]
 8002aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aa8:	81a3      	strh	r3, [r4, #12]
 8002aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8002aae:	e033      	b.n	8002b18 <__swsetup_r+0x98>
 8002ab0:	0758      	lsls	r0, r3, #29
 8002ab2:	d512      	bpl.n	8002ada <__swsetup_r+0x5a>
 8002ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ab6:	b141      	cbz	r1, 8002aca <__swsetup_r+0x4a>
 8002ab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002abc:	4299      	cmp	r1, r3
 8002abe:	d002      	beq.n	8002ac6 <__swsetup_r+0x46>
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f000 f8af 	bl	8002c24 <_free_r>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002aca:	89a3      	ldrh	r3, [r4, #12]
 8002acc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ad0:	81a3      	strh	r3, [r4, #12]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	6063      	str	r3, [r4, #4]
 8002ad6:	6923      	ldr	r3, [r4, #16]
 8002ad8:	6023      	str	r3, [r4, #0]
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	81a3      	strh	r3, [r4, #12]
 8002ae2:	6923      	ldr	r3, [r4, #16]
 8002ae4:	b94b      	cbnz	r3, 8002afa <__swsetup_r+0x7a>
 8002ae6:	89a3      	ldrh	r3, [r4, #12]
 8002ae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002af0:	d003      	beq.n	8002afa <__swsetup_r+0x7a>
 8002af2:	4621      	mov	r1, r4
 8002af4:	4628      	mov	r0, r5
 8002af6:	f000 fe87 	bl	8003808 <__smakebuf_r>
 8002afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002afe:	f013 0201 	ands.w	r2, r3, #1
 8002b02:	d00a      	beq.n	8002b1a <__swsetup_r+0x9a>
 8002b04:	2200      	movs	r2, #0
 8002b06:	60a2      	str	r2, [r4, #8]
 8002b08:	6962      	ldr	r2, [r4, #20]
 8002b0a:	4252      	negs	r2, r2
 8002b0c:	61a2      	str	r2, [r4, #24]
 8002b0e:	6922      	ldr	r2, [r4, #16]
 8002b10:	b942      	cbnz	r2, 8002b24 <__swsetup_r+0xa4>
 8002b12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002b16:	d1c5      	bne.n	8002aa4 <__swsetup_r+0x24>
 8002b18:	bd38      	pop	{r3, r4, r5, pc}
 8002b1a:	0799      	lsls	r1, r3, #30
 8002b1c:	bf58      	it	pl
 8002b1e:	6962      	ldrpl	r2, [r4, #20]
 8002b20:	60a2      	str	r2, [r4, #8]
 8002b22:	e7f4      	b.n	8002b0e <__swsetup_r+0x8e>
 8002b24:	2000      	movs	r0, #0
 8002b26:	e7f7      	b.n	8002b18 <__swsetup_r+0x98>
 8002b28:	2000003c 	.word	0x2000003c

08002b2c <memset>:
 8002b2c:	4402      	add	r2, r0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d100      	bne.n	8002b36 <memset+0xa>
 8002b34:	4770      	bx	lr
 8002b36:	f803 1b01 	strb.w	r1, [r3], #1
 8002b3a:	e7f9      	b.n	8002b30 <memset+0x4>

08002b3c <_close_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	4d06      	ldr	r5, [pc, #24]	@ (8002b58 <_close_r+0x1c>)
 8002b40:	2300      	movs	r3, #0
 8002b42:	4604      	mov	r4, r0
 8002b44:	4608      	mov	r0, r1
 8002b46:	602b      	str	r3, [r5, #0]
 8002b48:	f7fe fcca 	bl	80014e0 <_close>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d102      	bne.n	8002b56 <_close_r+0x1a>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	b103      	cbz	r3, 8002b56 <_close_r+0x1a>
 8002b54:	6023      	str	r3, [r4, #0]
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
 8002b58:	200006a0 	.word	0x200006a0

08002b5c <_lseek_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4d07      	ldr	r5, [pc, #28]	@ (8002b7c <_lseek_r+0x20>)
 8002b60:	4604      	mov	r4, r0
 8002b62:	4608      	mov	r0, r1
 8002b64:	4611      	mov	r1, r2
 8002b66:	2200      	movs	r2, #0
 8002b68:	602a      	str	r2, [r5, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f7fe fcdf 	bl	800152e <_lseek>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d102      	bne.n	8002b7a <_lseek_r+0x1e>
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	b103      	cbz	r3, 8002b7a <_lseek_r+0x1e>
 8002b78:	6023      	str	r3, [r4, #0]
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	200006a0 	.word	0x200006a0

08002b80 <_read_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	4d07      	ldr	r5, [pc, #28]	@ (8002ba0 <_read_r+0x20>)
 8002b84:	4604      	mov	r4, r0
 8002b86:	4608      	mov	r0, r1
 8002b88:	4611      	mov	r1, r2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	602a      	str	r2, [r5, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f7fe fc6d 	bl	800146e <_read>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d102      	bne.n	8002b9e <_read_r+0x1e>
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	b103      	cbz	r3, 8002b9e <_read_r+0x1e>
 8002b9c:	6023      	str	r3, [r4, #0]
 8002b9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ba0:	200006a0 	.word	0x200006a0

08002ba4 <_write_r>:
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	4d07      	ldr	r5, [pc, #28]	@ (8002bc4 <_write_r+0x20>)
 8002ba8:	4604      	mov	r4, r0
 8002baa:	4608      	mov	r0, r1
 8002bac:	4611      	mov	r1, r2
 8002bae:	2200      	movs	r2, #0
 8002bb0:	602a      	str	r2, [r5, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f7fe fc78 	bl	80014a8 <_write>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d102      	bne.n	8002bc2 <_write_r+0x1e>
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	b103      	cbz	r3, 8002bc2 <_write_r+0x1e>
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	200006a0 	.word	0x200006a0

08002bc8 <__errno>:
 8002bc8:	4b01      	ldr	r3, [pc, #4]	@ (8002bd0 <__errno+0x8>)
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	2000003c 	.word	0x2000003c

08002bd4 <__libc_init_array>:
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8002c0c <__libc_init_array+0x38>)
 8002bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8002c10 <__libc_init_array+0x3c>)
 8002bda:	1b64      	subs	r4, r4, r5
 8002bdc:	10a4      	asrs	r4, r4, #2
 8002bde:	2600      	movs	r6, #0
 8002be0:	42a6      	cmp	r6, r4
 8002be2:	d109      	bne.n	8002bf8 <__libc_init_array+0x24>
 8002be4:	4d0b      	ldr	r5, [pc, #44]	@ (8002c14 <__libc_init_array+0x40>)
 8002be6:	4c0c      	ldr	r4, [pc, #48]	@ (8002c18 <__libc_init_array+0x44>)
 8002be8:	f000 feda 	bl	80039a0 <_init>
 8002bec:	1b64      	subs	r4, r4, r5
 8002bee:	10a4      	asrs	r4, r4, #2
 8002bf0:	2600      	movs	r6, #0
 8002bf2:	42a6      	cmp	r6, r4
 8002bf4:	d105      	bne.n	8002c02 <__libc_init_array+0x2e>
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfc:	4798      	blx	r3
 8002bfe:	3601      	adds	r6, #1
 8002c00:	e7ee      	b.n	8002be0 <__libc_init_array+0xc>
 8002c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c06:	4798      	blx	r3
 8002c08:	3601      	adds	r6, #1
 8002c0a:	e7f2      	b.n	8002bf2 <__libc_init_array+0x1e>
 8002c0c:	08008afc 	.word	0x08008afc
 8002c10:	08008afc 	.word	0x08008afc
 8002c14:	08008afc 	.word	0x08008afc
 8002c18:	08008b00 	.word	0x08008b00

08002c1c <__retarget_lock_init_recursive>:
 8002c1c:	4770      	bx	lr

08002c1e <__retarget_lock_acquire_recursive>:
 8002c1e:	4770      	bx	lr

08002c20 <__retarget_lock_release_recursive>:
 8002c20:	4770      	bx	lr
	...

08002c24 <_free_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4605      	mov	r5, r0
 8002c28:	2900      	cmp	r1, #0
 8002c2a:	d041      	beq.n	8002cb0 <_free_r+0x8c>
 8002c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c30:	1f0c      	subs	r4, r1, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bfb8      	it	lt
 8002c36:	18e4      	addlt	r4, r4, r3
 8002c38:	f000 f8e0 	bl	8002dfc <__malloc_lock>
 8002c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <_free_r+0x90>)
 8002c3e:	6813      	ldr	r3, [r2, #0]
 8002c40:	b933      	cbnz	r3, 8002c50 <_free_r+0x2c>
 8002c42:	6063      	str	r3, [r4, #4]
 8002c44:	6014      	str	r4, [r2, #0]
 8002c46:	4628      	mov	r0, r5
 8002c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c4c:	f000 b8dc 	b.w	8002e08 <__malloc_unlock>
 8002c50:	42a3      	cmp	r3, r4
 8002c52:	d908      	bls.n	8002c66 <_free_r+0x42>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	1821      	adds	r1, r4, r0
 8002c58:	428b      	cmp	r3, r1
 8002c5a:	bf01      	itttt	eq
 8002c5c:	6819      	ldreq	r1, [r3, #0]
 8002c5e:	685b      	ldreq	r3, [r3, #4]
 8002c60:	1809      	addeq	r1, r1, r0
 8002c62:	6021      	streq	r1, [r4, #0]
 8002c64:	e7ed      	b.n	8002c42 <_free_r+0x1e>
 8002c66:	461a      	mov	r2, r3
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	b10b      	cbz	r3, 8002c70 <_free_r+0x4c>
 8002c6c:	42a3      	cmp	r3, r4
 8002c6e:	d9fa      	bls.n	8002c66 <_free_r+0x42>
 8002c70:	6811      	ldr	r1, [r2, #0]
 8002c72:	1850      	adds	r0, r2, r1
 8002c74:	42a0      	cmp	r0, r4
 8002c76:	d10b      	bne.n	8002c90 <_free_r+0x6c>
 8002c78:	6820      	ldr	r0, [r4, #0]
 8002c7a:	4401      	add	r1, r0
 8002c7c:	1850      	adds	r0, r2, r1
 8002c7e:	4283      	cmp	r3, r0
 8002c80:	6011      	str	r1, [r2, #0]
 8002c82:	d1e0      	bne.n	8002c46 <_free_r+0x22>
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	6053      	str	r3, [r2, #4]
 8002c8a:	4408      	add	r0, r1
 8002c8c:	6010      	str	r0, [r2, #0]
 8002c8e:	e7da      	b.n	8002c46 <_free_r+0x22>
 8002c90:	d902      	bls.n	8002c98 <_free_r+0x74>
 8002c92:	230c      	movs	r3, #12
 8002c94:	602b      	str	r3, [r5, #0]
 8002c96:	e7d6      	b.n	8002c46 <_free_r+0x22>
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	1821      	adds	r1, r4, r0
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	bf04      	itt	eq
 8002ca0:	6819      	ldreq	r1, [r3, #0]
 8002ca2:	685b      	ldreq	r3, [r3, #4]
 8002ca4:	6063      	str	r3, [r4, #4]
 8002ca6:	bf04      	itt	eq
 8002ca8:	1809      	addeq	r1, r1, r0
 8002caa:	6021      	streq	r1, [r4, #0]
 8002cac:	6054      	str	r4, [r2, #4]
 8002cae:	e7ca      	b.n	8002c46 <_free_r+0x22>
 8002cb0:	bd38      	pop	{r3, r4, r5, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200006ac 	.word	0x200006ac

08002cb8 <sbrk_aligned>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	4e0f      	ldr	r6, [pc, #60]	@ (8002cf8 <sbrk_aligned+0x40>)
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	6831      	ldr	r1, [r6, #0]
 8002cc0:	4605      	mov	r5, r0
 8002cc2:	b911      	cbnz	r1, 8002cca <sbrk_aligned+0x12>
 8002cc4:	f000 fe18 	bl	80038f8 <_sbrk_r>
 8002cc8:	6030      	str	r0, [r6, #0]
 8002cca:	4621      	mov	r1, r4
 8002ccc:	4628      	mov	r0, r5
 8002cce:	f000 fe13 	bl	80038f8 <_sbrk_r>
 8002cd2:	1c43      	adds	r3, r0, #1
 8002cd4:	d103      	bne.n	8002cde <sbrk_aligned+0x26>
 8002cd6:	f04f 34ff 	mov.w	r4, #4294967295
 8002cda:	4620      	mov	r0, r4
 8002cdc:	bd70      	pop	{r4, r5, r6, pc}
 8002cde:	1cc4      	adds	r4, r0, #3
 8002ce0:	f024 0403 	bic.w	r4, r4, #3
 8002ce4:	42a0      	cmp	r0, r4
 8002ce6:	d0f8      	beq.n	8002cda <sbrk_aligned+0x22>
 8002ce8:	1a21      	subs	r1, r4, r0
 8002cea:	4628      	mov	r0, r5
 8002cec:	f000 fe04 	bl	80038f8 <_sbrk_r>
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d1f2      	bne.n	8002cda <sbrk_aligned+0x22>
 8002cf4:	e7ef      	b.n	8002cd6 <sbrk_aligned+0x1e>
 8002cf6:	bf00      	nop
 8002cf8:	200006a8 	.word	0x200006a8

08002cfc <_malloc_r>:
 8002cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d00:	1ccd      	adds	r5, r1, #3
 8002d02:	f025 0503 	bic.w	r5, r5, #3
 8002d06:	3508      	adds	r5, #8
 8002d08:	2d0c      	cmp	r5, #12
 8002d0a:	bf38      	it	cc
 8002d0c:	250c      	movcc	r5, #12
 8002d0e:	2d00      	cmp	r5, #0
 8002d10:	4606      	mov	r6, r0
 8002d12:	db01      	blt.n	8002d18 <_malloc_r+0x1c>
 8002d14:	42a9      	cmp	r1, r5
 8002d16:	d904      	bls.n	8002d22 <_malloc_r+0x26>
 8002d18:	230c      	movs	r3, #12
 8002d1a:	6033      	str	r3, [r6, #0]
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002df8 <_malloc_r+0xfc>
 8002d26:	f000 f869 	bl	8002dfc <__malloc_lock>
 8002d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d2e:	461c      	mov	r4, r3
 8002d30:	bb44      	cbnz	r4, 8002d84 <_malloc_r+0x88>
 8002d32:	4629      	mov	r1, r5
 8002d34:	4630      	mov	r0, r6
 8002d36:	f7ff ffbf 	bl	8002cb8 <sbrk_aligned>
 8002d3a:	1c43      	adds	r3, r0, #1
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	d158      	bne.n	8002df2 <_malloc_r+0xf6>
 8002d40:	f8d8 4000 	ldr.w	r4, [r8]
 8002d44:	4627      	mov	r7, r4
 8002d46:	2f00      	cmp	r7, #0
 8002d48:	d143      	bne.n	8002dd2 <_malloc_r+0xd6>
 8002d4a:	2c00      	cmp	r4, #0
 8002d4c:	d04b      	beq.n	8002de6 <_malloc_r+0xea>
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	4639      	mov	r1, r7
 8002d52:	4630      	mov	r0, r6
 8002d54:	eb04 0903 	add.w	r9, r4, r3
 8002d58:	f000 fdce 	bl	80038f8 <_sbrk_r>
 8002d5c:	4581      	cmp	r9, r0
 8002d5e:	d142      	bne.n	8002de6 <_malloc_r+0xea>
 8002d60:	6821      	ldr	r1, [r4, #0]
 8002d62:	1a6d      	subs	r5, r5, r1
 8002d64:	4629      	mov	r1, r5
 8002d66:	4630      	mov	r0, r6
 8002d68:	f7ff ffa6 	bl	8002cb8 <sbrk_aligned>
 8002d6c:	3001      	adds	r0, #1
 8002d6e:	d03a      	beq.n	8002de6 <_malloc_r+0xea>
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	442b      	add	r3, r5
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	f8d8 3000 	ldr.w	r3, [r8]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	bb62      	cbnz	r2, 8002dd8 <_malloc_r+0xdc>
 8002d7e:	f8c8 7000 	str.w	r7, [r8]
 8002d82:	e00f      	b.n	8002da4 <_malloc_r+0xa8>
 8002d84:	6822      	ldr	r2, [r4, #0]
 8002d86:	1b52      	subs	r2, r2, r5
 8002d88:	d420      	bmi.n	8002dcc <_malloc_r+0xd0>
 8002d8a:	2a0b      	cmp	r2, #11
 8002d8c:	d917      	bls.n	8002dbe <_malloc_r+0xc2>
 8002d8e:	1961      	adds	r1, r4, r5
 8002d90:	42a3      	cmp	r3, r4
 8002d92:	6025      	str	r5, [r4, #0]
 8002d94:	bf18      	it	ne
 8002d96:	6059      	strne	r1, [r3, #4]
 8002d98:	6863      	ldr	r3, [r4, #4]
 8002d9a:	bf08      	it	eq
 8002d9c:	f8c8 1000 	streq.w	r1, [r8]
 8002da0:	5162      	str	r2, [r4, r5]
 8002da2:	604b      	str	r3, [r1, #4]
 8002da4:	4630      	mov	r0, r6
 8002da6:	f000 f82f 	bl	8002e08 <__malloc_unlock>
 8002daa:	f104 000b 	add.w	r0, r4, #11
 8002dae:	1d23      	adds	r3, r4, #4
 8002db0:	f020 0007 	bic.w	r0, r0, #7
 8002db4:	1ac2      	subs	r2, r0, r3
 8002db6:	bf1c      	itt	ne
 8002db8:	1a1b      	subne	r3, r3, r0
 8002dba:	50a3      	strne	r3, [r4, r2]
 8002dbc:	e7af      	b.n	8002d1e <_malloc_r+0x22>
 8002dbe:	6862      	ldr	r2, [r4, #4]
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	bf0c      	ite	eq
 8002dc4:	f8c8 2000 	streq.w	r2, [r8]
 8002dc8:	605a      	strne	r2, [r3, #4]
 8002dca:	e7eb      	b.n	8002da4 <_malloc_r+0xa8>
 8002dcc:	4623      	mov	r3, r4
 8002dce:	6864      	ldr	r4, [r4, #4]
 8002dd0:	e7ae      	b.n	8002d30 <_malloc_r+0x34>
 8002dd2:	463c      	mov	r4, r7
 8002dd4:	687f      	ldr	r7, [r7, #4]
 8002dd6:	e7b6      	b.n	8002d46 <_malloc_r+0x4a>
 8002dd8:	461a      	mov	r2, r3
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	42a3      	cmp	r3, r4
 8002dde:	d1fb      	bne.n	8002dd8 <_malloc_r+0xdc>
 8002de0:	2300      	movs	r3, #0
 8002de2:	6053      	str	r3, [r2, #4]
 8002de4:	e7de      	b.n	8002da4 <_malloc_r+0xa8>
 8002de6:	230c      	movs	r3, #12
 8002de8:	6033      	str	r3, [r6, #0]
 8002dea:	4630      	mov	r0, r6
 8002dec:	f000 f80c 	bl	8002e08 <__malloc_unlock>
 8002df0:	e794      	b.n	8002d1c <_malloc_r+0x20>
 8002df2:	6005      	str	r5, [r0, #0]
 8002df4:	e7d6      	b.n	8002da4 <_malloc_r+0xa8>
 8002df6:	bf00      	nop
 8002df8:	200006ac 	.word	0x200006ac

08002dfc <__malloc_lock>:
 8002dfc:	4801      	ldr	r0, [pc, #4]	@ (8002e04 <__malloc_lock+0x8>)
 8002dfe:	f7ff bf0e 	b.w	8002c1e <__retarget_lock_acquire_recursive>
 8002e02:	bf00      	nop
 8002e04:	200006a4 	.word	0x200006a4

08002e08 <__malloc_unlock>:
 8002e08:	4801      	ldr	r0, [pc, #4]	@ (8002e10 <__malloc_unlock+0x8>)
 8002e0a:	f7ff bf09 	b.w	8002c20 <__retarget_lock_release_recursive>
 8002e0e:	bf00      	nop
 8002e10:	200006a4 	.word	0x200006a4

08002e14 <__ssputs_r>:
 8002e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e18:	688e      	ldr	r6, [r1, #8]
 8002e1a:	461f      	mov	r7, r3
 8002e1c:	42be      	cmp	r6, r7
 8002e1e:	680b      	ldr	r3, [r1, #0]
 8002e20:	4682      	mov	sl, r0
 8002e22:	460c      	mov	r4, r1
 8002e24:	4690      	mov	r8, r2
 8002e26:	d82d      	bhi.n	8002e84 <__ssputs_r+0x70>
 8002e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e30:	d026      	beq.n	8002e80 <__ssputs_r+0x6c>
 8002e32:	6965      	ldr	r5, [r4, #20]
 8002e34:	6909      	ldr	r1, [r1, #16]
 8002e36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e3a:	eba3 0901 	sub.w	r9, r3, r1
 8002e3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e42:	1c7b      	adds	r3, r7, #1
 8002e44:	444b      	add	r3, r9
 8002e46:	106d      	asrs	r5, r5, #1
 8002e48:	429d      	cmp	r5, r3
 8002e4a:	bf38      	it	cc
 8002e4c:	461d      	movcc	r5, r3
 8002e4e:	0553      	lsls	r3, r2, #21
 8002e50:	d527      	bpl.n	8002ea2 <__ssputs_r+0x8e>
 8002e52:	4629      	mov	r1, r5
 8002e54:	f7ff ff52 	bl	8002cfc <_malloc_r>
 8002e58:	4606      	mov	r6, r0
 8002e5a:	b360      	cbz	r0, 8002eb6 <__ssputs_r+0xa2>
 8002e5c:	6921      	ldr	r1, [r4, #16]
 8002e5e:	464a      	mov	r2, r9
 8002e60:	f000 fd5a 	bl	8003918 <memcpy>
 8002e64:	89a3      	ldrh	r3, [r4, #12]
 8002e66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e6e:	81a3      	strh	r3, [r4, #12]
 8002e70:	6126      	str	r6, [r4, #16]
 8002e72:	6165      	str	r5, [r4, #20]
 8002e74:	444e      	add	r6, r9
 8002e76:	eba5 0509 	sub.w	r5, r5, r9
 8002e7a:	6026      	str	r6, [r4, #0]
 8002e7c:	60a5      	str	r5, [r4, #8]
 8002e7e:	463e      	mov	r6, r7
 8002e80:	42be      	cmp	r6, r7
 8002e82:	d900      	bls.n	8002e86 <__ssputs_r+0x72>
 8002e84:	463e      	mov	r6, r7
 8002e86:	6820      	ldr	r0, [r4, #0]
 8002e88:	4632      	mov	r2, r6
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	f000 fcf8 	bl	8003880 <memmove>
 8002e90:	68a3      	ldr	r3, [r4, #8]
 8002e92:	1b9b      	subs	r3, r3, r6
 8002e94:	60a3      	str	r3, [r4, #8]
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	4433      	add	r3, r6
 8002e9a:	6023      	str	r3, [r4, #0]
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea2:	462a      	mov	r2, r5
 8002ea4:	f000 fd46 	bl	8003934 <_realloc_r>
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d1e0      	bne.n	8002e70 <__ssputs_r+0x5c>
 8002eae:	6921      	ldr	r1, [r4, #16]
 8002eb0:	4650      	mov	r0, sl
 8002eb2:	f7ff feb7 	bl	8002c24 <_free_r>
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	f8ca 3000 	str.w	r3, [sl]
 8002ebc:	89a3      	ldrh	r3, [r4, #12]
 8002ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ec2:	81a3      	strh	r3, [r4, #12]
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	e7e9      	b.n	8002e9e <__ssputs_r+0x8a>
	...

08002ecc <_svfiprintf_r>:
 8002ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed0:	4698      	mov	r8, r3
 8002ed2:	898b      	ldrh	r3, [r1, #12]
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	b09d      	sub	sp, #116	@ 0x74
 8002ed8:	4607      	mov	r7, r0
 8002eda:	460d      	mov	r5, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	d510      	bpl.n	8002f02 <_svfiprintf_r+0x36>
 8002ee0:	690b      	ldr	r3, [r1, #16]
 8002ee2:	b973      	cbnz	r3, 8002f02 <_svfiprintf_r+0x36>
 8002ee4:	2140      	movs	r1, #64	@ 0x40
 8002ee6:	f7ff ff09 	bl	8002cfc <_malloc_r>
 8002eea:	6028      	str	r0, [r5, #0]
 8002eec:	6128      	str	r0, [r5, #16]
 8002eee:	b930      	cbnz	r0, 8002efe <_svfiprintf_r+0x32>
 8002ef0:	230c      	movs	r3, #12
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	b01d      	add	sp, #116	@ 0x74
 8002efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002efe:	2340      	movs	r3, #64	@ 0x40
 8002f00:	616b      	str	r3, [r5, #20]
 8002f02:	2300      	movs	r3, #0
 8002f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f06:	2320      	movs	r3, #32
 8002f08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f10:	2330      	movs	r3, #48	@ 0x30
 8002f12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80030b0 <_svfiprintf_r+0x1e4>
 8002f16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f1a:	f04f 0901 	mov.w	r9, #1
 8002f1e:	4623      	mov	r3, r4
 8002f20:	469a      	mov	sl, r3
 8002f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f26:	b10a      	cbz	r2, 8002f2c <_svfiprintf_r+0x60>
 8002f28:	2a25      	cmp	r2, #37	@ 0x25
 8002f2a:	d1f9      	bne.n	8002f20 <_svfiprintf_r+0x54>
 8002f2c:	ebba 0b04 	subs.w	fp, sl, r4
 8002f30:	d00b      	beq.n	8002f4a <_svfiprintf_r+0x7e>
 8002f32:	465b      	mov	r3, fp
 8002f34:	4622      	mov	r2, r4
 8002f36:	4629      	mov	r1, r5
 8002f38:	4638      	mov	r0, r7
 8002f3a:	f7ff ff6b 	bl	8002e14 <__ssputs_r>
 8002f3e:	3001      	adds	r0, #1
 8002f40:	f000 80a7 	beq.w	8003092 <_svfiprintf_r+0x1c6>
 8002f44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f46:	445a      	add	r2, fp
 8002f48:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 809f 	beq.w	8003092 <_svfiprintf_r+0x1c6>
 8002f54:	2300      	movs	r3, #0
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f5e:	f10a 0a01 	add.w	sl, sl, #1
 8002f62:	9304      	str	r3, [sp, #16]
 8002f64:	9307      	str	r3, [sp, #28]
 8002f66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f6c:	4654      	mov	r4, sl
 8002f6e:	2205      	movs	r2, #5
 8002f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f74:	484e      	ldr	r0, [pc, #312]	@ (80030b0 <_svfiprintf_r+0x1e4>)
 8002f76:	f7fd f933 	bl	80001e0 <memchr>
 8002f7a:	9a04      	ldr	r2, [sp, #16]
 8002f7c:	b9d8      	cbnz	r0, 8002fb6 <_svfiprintf_r+0xea>
 8002f7e:	06d0      	lsls	r0, r2, #27
 8002f80:	bf44      	itt	mi
 8002f82:	2320      	movmi	r3, #32
 8002f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f88:	0711      	lsls	r1, r2, #28
 8002f8a:	bf44      	itt	mi
 8002f8c:	232b      	movmi	r3, #43	@ 0x2b
 8002f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f92:	f89a 3000 	ldrb.w	r3, [sl]
 8002f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f98:	d015      	beq.n	8002fc6 <_svfiprintf_r+0xfa>
 8002f9a:	9a07      	ldr	r2, [sp, #28]
 8002f9c:	4654      	mov	r4, sl
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f04f 0c0a 	mov.w	ip, #10
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002faa:	3b30      	subs	r3, #48	@ 0x30
 8002fac:	2b09      	cmp	r3, #9
 8002fae:	d94b      	bls.n	8003048 <_svfiprintf_r+0x17c>
 8002fb0:	b1b0      	cbz	r0, 8002fe0 <_svfiprintf_r+0x114>
 8002fb2:	9207      	str	r2, [sp, #28]
 8002fb4:	e014      	b.n	8002fe0 <_svfiprintf_r+0x114>
 8002fb6:	eba0 0308 	sub.w	r3, r0, r8
 8002fba:	fa09 f303 	lsl.w	r3, r9, r3
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	9304      	str	r3, [sp, #16]
 8002fc2:	46a2      	mov	sl, r4
 8002fc4:	e7d2      	b.n	8002f6c <_svfiprintf_r+0xa0>
 8002fc6:	9b03      	ldr	r3, [sp, #12]
 8002fc8:	1d19      	adds	r1, r3, #4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	9103      	str	r1, [sp, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bfbb      	ittet	lt
 8002fd2:	425b      	neglt	r3, r3
 8002fd4:	f042 0202 	orrlt.w	r2, r2, #2
 8002fd8:	9307      	strge	r3, [sp, #28]
 8002fda:	9307      	strlt	r3, [sp, #28]
 8002fdc:	bfb8      	it	lt
 8002fde:	9204      	strlt	r2, [sp, #16]
 8002fe0:	7823      	ldrb	r3, [r4, #0]
 8002fe2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fe4:	d10a      	bne.n	8002ffc <_svfiprintf_r+0x130>
 8002fe6:	7863      	ldrb	r3, [r4, #1]
 8002fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fea:	d132      	bne.n	8003052 <_svfiprintf_r+0x186>
 8002fec:	9b03      	ldr	r3, [sp, #12]
 8002fee:	1d1a      	adds	r2, r3, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	9203      	str	r2, [sp, #12]
 8002ff4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ff8:	3402      	adds	r4, #2
 8002ffa:	9305      	str	r3, [sp, #20]
 8002ffc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80030c0 <_svfiprintf_r+0x1f4>
 8003000:	7821      	ldrb	r1, [r4, #0]
 8003002:	2203      	movs	r2, #3
 8003004:	4650      	mov	r0, sl
 8003006:	f7fd f8eb 	bl	80001e0 <memchr>
 800300a:	b138      	cbz	r0, 800301c <_svfiprintf_r+0x150>
 800300c:	9b04      	ldr	r3, [sp, #16]
 800300e:	eba0 000a 	sub.w	r0, r0, sl
 8003012:	2240      	movs	r2, #64	@ 0x40
 8003014:	4082      	lsls	r2, r0
 8003016:	4313      	orrs	r3, r2
 8003018:	3401      	adds	r4, #1
 800301a:	9304      	str	r3, [sp, #16]
 800301c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003020:	4824      	ldr	r0, [pc, #144]	@ (80030b4 <_svfiprintf_r+0x1e8>)
 8003022:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003026:	2206      	movs	r2, #6
 8003028:	f7fd f8da 	bl	80001e0 <memchr>
 800302c:	2800      	cmp	r0, #0
 800302e:	d036      	beq.n	800309e <_svfiprintf_r+0x1d2>
 8003030:	4b21      	ldr	r3, [pc, #132]	@ (80030b8 <_svfiprintf_r+0x1ec>)
 8003032:	bb1b      	cbnz	r3, 800307c <_svfiprintf_r+0x1b0>
 8003034:	9b03      	ldr	r3, [sp, #12]
 8003036:	3307      	adds	r3, #7
 8003038:	f023 0307 	bic.w	r3, r3, #7
 800303c:	3308      	adds	r3, #8
 800303e:	9303      	str	r3, [sp, #12]
 8003040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003042:	4433      	add	r3, r6
 8003044:	9309      	str	r3, [sp, #36]	@ 0x24
 8003046:	e76a      	b.n	8002f1e <_svfiprintf_r+0x52>
 8003048:	fb0c 3202 	mla	r2, ip, r2, r3
 800304c:	460c      	mov	r4, r1
 800304e:	2001      	movs	r0, #1
 8003050:	e7a8      	b.n	8002fa4 <_svfiprintf_r+0xd8>
 8003052:	2300      	movs	r3, #0
 8003054:	3401      	adds	r4, #1
 8003056:	9305      	str	r3, [sp, #20]
 8003058:	4619      	mov	r1, r3
 800305a:	f04f 0c0a 	mov.w	ip, #10
 800305e:	4620      	mov	r0, r4
 8003060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003064:	3a30      	subs	r2, #48	@ 0x30
 8003066:	2a09      	cmp	r2, #9
 8003068:	d903      	bls.n	8003072 <_svfiprintf_r+0x1a6>
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0c6      	beq.n	8002ffc <_svfiprintf_r+0x130>
 800306e:	9105      	str	r1, [sp, #20]
 8003070:	e7c4      	b.n	8002ffc <_svfiprintf_r+0x130>
 8003072:	fb0c 2101 	mla	r1, ip, r1, r2
 8003076:	4604      	mov	r4, r0
 8003078:	2301      	movs	r3, #1
 800307a:	e7f0      	b.n	800305e <_svfiprintf_r+0x192>
 800307c:	ab03      	add	r3, sp, #12
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	462a      	mov	r2, r5
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <_svfiprintf_r+0x1f0>)
 8003084:	a904      	add	r1, sp, #16
 8003086:	4638      	mov	r0, r7
 8003088:	f3af 8000 	nop.w
 800308c:	1c42      	adds	r2, r0, #1
 800308e:	4606      	mov	r6, r0
 8003090:	d1d6      	bne.n	8003040 <_svfiprintf_r+0x174>
 8003092:	89ab      	ldrh	r3, [r5, #12]
 8003094:	065b      	lsls	r3, r3, #25
 8003096:	f53f af2d 	bmi.w	8002ef4 <_svfiprintf_r+0x28>
 800309a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800309c:	e72c      	b.n	8002ef8 <_svfiprintf_r+0x2c>
 800309e:	ab03      	add	r3, sp, #12
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	462a      	mov	r2, r5
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <_svfiprintf_r+0x1f0>)
 80030a6:	a904      	add	r1, sp, #16
 80030a8:	4638      	mov	r0, r7
 80030aa:	f000 f9bb 	bl	8003424 <_printf_i>
 80030ae:	e7ed      	b.n	800308c <_svfiprintf_r+0x1c0>
 80030b0:	08008ac0 	.word	0x08008ac0
 80030b4:	08008aca 	.word	0x08008aca
 80030b8:	00000000 	.word	0x00000000
 80030bc:	08002e15 	.word	0x08002e15
 80030c0:	08008ac6 	.word	0x08008ac6

080030c4 <__sfputc_r>:
 80030c4:	6893      	ldr	r3, [r2, #8]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	b410      	push	{r4}
 80030cc:	6093      	str	r3, [r2, #8]
 80030ce:	da08      	bge.n	80030e2 <__sfputc_r+0x1e>
 80030d0:	6994      	ldr	r4, [r2, #24]
 80030d2:	42a3      	cmp	r3, r4
 80030d4:	db01      	blt.n	80030da <__sfputc_r+0x16>
 80030d6:	290a      	cmp	r1, #10
 80030d8:	d103      	bne.n	80030e2 <__sfputc_r+0x1e>
 80030da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030de:	f7ff bc90 	b.w	8002a02 <__swbuf_r>
 80030e2:	6813      	ldr	r3, [r2, #0]
 80030e4:	1c58      	adds	r0, r3, #1
 80030e6:	6010      	str	r0, [r2, #0]
 80030e8:	7019      	strb	r1, [r3, #0]
 80030ea:	4608      	mov	r0, r1
 80030ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <__sfputs_r>:
 80030f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f4:	4606      	mov	r6, r0
 80030f6:	460f      	mov	r7, r1
 80030f8:	4614      	mov	r4, r2
 80030fa:	18d5      	adds	r5, r2, r3
 80030fc:	42ac      	cmp	r4, r5
 80030fe:	d101      	bne.n	8003104 <__sfputs_r+0x12>
 8003100:	2000      	movs	r0, #0
 8003102:	e007      	b.n	8003114 <__sfputs_r+0x22>
 8003104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003108:	463a      	mov	r2, r7
 800310a:	4630      	mov	r0, r6
 800310c:	f7ff ffda 	bl	80030c4 <__sfputc_r>
 8003110:	1c43      	adds	r3, r0, #1
 8003112:	d1f3      	bne.n	80030fc <__sfputs_r+0xa>
 8003114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003118 <_vfiprintf_r>:
 8003118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311c:	460d      	mov	r5, r1
 800311e:	b09d      	sub	sp, #116	@ 0x74
 8003120:	4614      	mov	r4, r2
 8003122:	4698      	mov	r8, r3
 8003124:	4606      	mov	r6, r0
 8003126:	b118      	cbz	r0, 8003130 <_vfiprintf_r+0x18>
 8003128:	6a03      	ldr	r3, [r0, #32]
 800312a:	b90b      	cbnz	r3, 8003130 <_vfiprintf_r+0x18>
 800312c:	f7ff fb60 	bl	80027f0 <__sinit>
 8003130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003132:	07d9      	lsls	r1, r3, #31
 8003134:	d405      	bmi.n	8003142 <_vfiprintf_r+0x2a>
 8003136:	89ab      	ldrh	r3, [r5, #12]
 8003138:	059a      	lsls	r2, r3, #22
 800313a:	d402      	bmi.n	8003142 <_vfiprintf_r+0x2a>
 800313c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800313e:	f7ff fd6e 	bl	8002c1e <__retarget_lock_acquire_recursive>
 8003142:	89ab      	ldrh	r3, [r5, #12]
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	d501      	bpl.n	800314c <_vfiprintf_r+0x34>
 8003148:	692b      	ldr	r3, [r5, #16]
 800314a:	b99b      	cbnz	r3, 8003174 <_vfiprintf_r+0x5c>
 800314c:	4629      	mov	r1, r5
 800314e:	4630      	mov	r0, r6
 8003150:	f7ff fc96 	bl	8002a80 <__swsetup_r>
 8003154:	b170      	cbz	r0, 8003174 <_vfiprintf_r+0x5c>
 8003156:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003158:	07dc      	lsls	r4, r3, #31
 800315a:	d504      	bpl.n	8003166 <_vfiprintf_r+0x4e>
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	b01d      	add	sp, #116	@ 0x74
 8003162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003166:	89ab      	ldrh	r3, [r5, #12]
 8003168:	0598      	lsls	r0, r3, #22
 800316a:	d4f7      	bmi.n	800315c <_vfiprintf_r+0x44>
 800316c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800316e:	f7ff fd57 	bl	8002c20 <__retarget_lock_release_recursive>
 8003172:	e7f3      	b.n	800315c <_vfiprintf_r+0x44>
 8003174:	2300      	movs	r3, #0
 8003176:	9309      	str	r3, [sp, #36]	@ 0x24
 8003178:	2320      	movs	r3, #32
 800317a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800317e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003182:	2330      	movs	r3, #48	@ 0x30
 8003184:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003334 <_vfiprintf_r+0x21c>
 8003188:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800318c:	f04f 0901 	mov.w	r9, #1
 8003190:	4623      	mov	r3, r4
 8003192:	469a      	mov	sl, r3
 8003194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003198:	b10a      	cbz	r2, 800319e <_vfiprintf_r+0x86>
 800319a:	2a25      	cmp	r2, #37	@ 0x25
 800319c:	d1f9      	bne.n	8003192 <_vfiprintf_r+0x7a>
 800319e:	ebba 0b04 	subs.w	fp, sl, r4
 80031a2:	d00b      	beq.n	80031bc <_vfiprintf_r+0xa4>
 80031a4:	465b      	mov	r3, fp
 80031a6:	4622      	mov	r2, r4
 80031a8:	4629      	mov	r1, r5
 80031aa:	4630      	mov	r0, r6
 80031ac:	f7ff ffa1 	bl	80030f2 <__sfputs_r>
 80031b0:	3001      	adds	r0, #1
 80031b2:	f000 80a7 	beq.w	8003304 <_vfiprintf_r+0x1ec>
 80031b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031b8:	445a      	add	r2, fp
 80031ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80031bc:	f89a 3000 	ldrb.w	r3, [sl]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 809f 	beq.w	8003304 <_vfiprintf_r+0x1ec>
 80031c6:	2300      	movs	r3, #0
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031d0:	f10a 0a01 	add.w	sl, sl, #1
 80031d4:	9304      	str	r3, [sp, #16]
 80031d6:	9307      	str	r3, [sp, #28]
 80031d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80031de:	4654      	mov	r4, sl
 80031e0:	2205      	movs	r2, #5
 80031e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e6:	4853      	ldr	r0, [pc, #332]	@ (8003334 <_vfiprintf_r+0x21c>)
 80031e8:	f7fc fffa 	bl	80001e0 <memchr>
 80031ec:	9a04      	ldr	r2, [sp, #16]
 80031ee:	b9d8      	cbnz	r0, 8003228 <_vfiprintf_r+0x110>
 80031f0:	06d1      	lsls	r1, r2, #27
 80031f2:	bf44      	itt	mi
 80031f4:	2320      	movmi	r3, #32
 80031f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031fa:	0713      	lsls	r3, r2, #28
 80031fc:	bf44      	itt	mi
 80031fe:	232b      	movmi	r3, #43	@ 0x2b
 8003200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003204:	f89a 3000 	ldrb.w	r3, [sl]
 8003208:	2b2a      	cmp	r3, #42	@ 0x2a
 800320a:	d015      	beq.n	8003238 <_vfiprintf_r+0x120>
 800320c:	9a07      	ldr	r2, [sp, #28]
 800320e:	4654      	mov	r4, sl
 8003210:	2000      	movs	r0, #0
 8003212:	f04f 0c0a 	mov.w	ip, #10
 8003216:	4621      	mov	r1, r4
 8003218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800321c:	3b30      	subs	r3, #48	@ 0x30
 800321e:	2b09      	cmp	r3, #9
 8003220:	d94b      	bls.n	80032ba <_vfiprintf_r+0x1a2>
 8003222:	b1b0      	cbz	r0, 8003252 <_vfiprintf_r+0x13a>
 8003224:	9207      	str	r2, [sp, #28]
 8003226:	e014      	b.n	8003252 <_vfiprintf_r+0x13a>
 8003228:	eba0 0308 	sub.w	r3, r0, r8
 800322c:	fa09 f303 	lsl.w	r3, r9, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	9304      	str	r3, [sp, #16]
 8003234:	46a2      	mov	sl, r4
 8003236:	e7d2      	b.n	80031de <_vfiprintf_r+0xc6>
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	1d19      	adds	r1, r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9103      	str	r1, [sp, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	bfbb      	ittet	lt
 8003244:	425b      	neglt	r3, r3
 8003246:	f042 0202 	orrlt.w	r2, r2, #2
 800324a:	9307      	strge	r3, [sp, #28]
 800324c:	9307      	strlt	r3, [sp, #28]
 800324e:	bfb8      	it	lt
 8003250:	9204      	strlt	r2, [sp, #16]
 8003252:	7823      	ldrb	r3, [r4, #0]
 8003254:	2b2e      	cmp	r3, #46	@ 0x2e
 8003256:	d10a      	bne.n	800326e <_vfiprintf_r+0x156>
 8003258:	7863      	ldrb	r3, [r4, #1]
 800325a:	2b2a      	cmp	r3, #42	@ 0x2a
 800325c:	d132      	bne.n	80032c4 <_vfiprintf_r+0x1ac>
 800325e:	9b03      	ldr	r3, [sp, #12]
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	9203      	str	r2, [sp, #12]
 8003266:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800326a:	3402      	adds	r4, #2
 800326c:	9305      	str	r3, [sp, #20]
 800326e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003344 <_vfiprintf_r+0x22c>
 8003272:	7821      	ldrb	r1, [r4, #0]
 8003274:	2203      	movs	r2, #3
 8003276:	4650      	mov	r0, sl
 8003278:	f7fc ffb2 	bl	80001e0 <memchr>
 800327c:	b138      	cbz	r0, 800328e <_vfiprintf_r+0x176>
 800327e:	9b04      	ldr	r3, [sp, #16]
 8003280:	eba0 000a 	sub.w	r0, r0, sl
 8003284:	2240      	movs	r2, #64	@ 0x40
 8003286:	4082      	lsls	r2, r0
 8003288:	4313      	orrs	r3, r2
 800328a:	3401      	adds	r4, #1
 800328c:	9304      	str	r3, [sp, #16]
 800328e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003292:	4829      	ldr	r0, [pc, #164]	@ (8003338 <_vfiprintf_r+0x220>)
 8003294:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003298:	2206      	movs	r2, #6
 800329a:	f7fc ffa1 	bl	80001e0 <memchr>
 800329e:	2800      	cmp	r0, #0
 80032a0:	d03f      	beq.n	8003322 <_vfiprintf_r+0x20a>
 80032a2:	4b26      	ldr	r3, [pc, #152]	@ (800333c <_vfiprintf_r+0x224>)
 80032a4:	bb1b      	cbnz	r3, 80032ee <_vfiprintf_r+0x1d6>
 80032a6:	9b03      	ldr	r3, [sp, #12]
 80032a8:	3307      	adds	r3, #7
 80032aa:	f023 0307 	bic.w	r3, r3, #7
 80032ae:	3308      	adds	r3, #8
 80032b0:	9303      	str	r3, [sp, #12]
 80032b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032b4:	443b      	add	r3, r7
 80032b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80032b8:	e76a      	b.n	8003190 <_vfiprintf_r+0x78>
 80032ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80032be:	460c      	mov	r4, r1
 80032c0:	2001      	movs	r0, #1
 80032c2:	e7a8      	b.n	8003216 <_vfiprintf_r+0xfe>
 80032c4:	2300      	movs	r3, #0
 80032c6:	3401      	adds	r4, #1
 80032c8:	9305      	str	r3, [sp, #20]
 80032ca:	4619      	mov	r1, r3
 80032cc:	f04f 0c0a 	mov.w	ip, #10
 80032d0:	4620      	mov	r0, r4
 80032d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032d6:	3a30      	subs	r2, #48	@ 0x30
 80032d8:	2a09      	cmp	r2, #9
 80032da:	d903      	bls.n	80032e4 <_vfiprintf_r+0x1cc>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0c6      	beq.n	800326e <_vfiprintf_r+0x156>
 80032e0:	9105      	str	r1, [sp, #20]
 80032e2:	e7c4      	b.n	800326e <_vfiprintf_r+0x156>
 80032e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80032e8:	4604      	mov	r4, r0
 80032ea:	2301      	movs	r3, #1
 80032ec:	e7f0      	b.n	80032d0 <_vfiprintf_r+0x1b8>
 80032ee:	ab03      	add	r3, sp, #12
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	462a      	mov	r2, r5
 80032f4:	4b12      	ldr	r3, [pc, #72]	@ (8003340 <_vfiprintf_r+0x228>)
 80032f6:	a904      	add	r1, sp, #16
 80032f8:	4630      	mov	r0, r6
 80032fa:	f3af 8000 	nop.w
 80032fe:	4607      	mov	r7, r0
 8003300:	1c78      	adds	r0, r7, #1
 8003302:	d1d6      	bne.n	80032b2 <_vfiprintf_r+0x19a>
 8003304:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003306:	07d9      	lsls	r1, r3, #31
 8003308:	d405      	bmi.n	8003316 <_vfiprintf_r+0x1fe>
 800330a:	89ab      	ldrh	r3, [r5, #12]
 800330c:	059a      	lsls	r2, r3, #22
 800330e:	d402      	bmi.n	8003316 <_vfiprintf_r+0x1fe>
 8003310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003312:	f7ff fc85 	bl	8002c20 <__retarget_lock_release_recursive>
 8003316:	89ab      	ldrh	r3, [r5, #12]
 8003318:	065b      	lsls	r3, r3, #25
 800331a:	f53f af1f 	bmi.w	800315c <_vfiprintf_r+0x44>
 800331e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003320:	e71e      	b.n	8003160 <_vfiprintf_r+0x48>
 8003322:	ab03      	add	r3, sp, #12
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	462a      	mov	r2, r5
 8003328:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <_vfiprintf_r+0x228>)
 800332a:	a904      	add	r1, sp, #16
 800332c:	4630      	mov	r0, r6
 800332e:	f000 f879 	bl	8003424 <_printf_i>
 8003332:	e7e4      	b.n	80032fe <_vfiprintf_r+0x1e6>
 8003334:	08008ac0 	.word	0x08008ac0
 8003338:	08008aca 	.word	0x08008aca
 800333c:	00000000 	.word	0x00000000
 8003340:	080030f3 	.word	0x080030f3
 8003344:	08008ac6 	.word	0x08008ac6

08003348 <_printf_common>:
 8003348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800334c:	4616      	mov	r6, r2
 800334e:	4698      	mov	r8, r3
 8003350:	688a      	ldr	r2, [r1, #8]
 8003352:	690b      	ldr	r3, [r1, #16]
 8003354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003358:	4293      	cmp	r3, r2
 800335a:	bfb8      	it	lt
 800335c:	4613      	movlt	r3, r2
 800335e:	6033      	str	r3, [r6, #0]
 8003360:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003364:	4607      	mov	r7, r0
 8003366:	460c      	mov	r4, r1
 8003368:	b10a      	cbz	r2, 800336e <_printf_common+0x26>
 800336a:	3301      	adds	r3, #1
 800336c:	6033      	str	r3, [r6, #0]
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	0699      	lsls	r1, r3, #26
 8003372:	bf42      	ittt	mi
 8003374:	6833      	ldrmi	r3, [r6, #0]
 8003376:	3302      	addmi	r3, #2
 8003378:	6033      	strmi	r3, [r6, #0]
 800337a:	6825      	ldr	r5, [r4, #0]
 800337c:	f015 0506 	ands.w	r5, r5, #6
 8003380:	d106      	bne.n	8003390 <_printf_common+0x48>
 8003382:	f104 0a19 	add.w	sl, r4, #25
 8003386:	68e3      	ldr	r3, [r4, #12]
 8003388:	6832      	ldr	r2, [r6, #0]
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	42ab      	cmp	r3, r5
 800338e:	dc26      	bgt.n	80033de <_printf_common+0x96>
 8003390:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	3b00      	subs	r3, #0
 8003398:	bf18      	it	ne
 800339a:	2301      	movne	r3, #1
 800339c:	0692      	lsls	r2, r2, #26
 800339e:	d42b      	bmi.n	80033f8 <_printf_common+0xb0>
 80033a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033a4:	4641      	mov	r1, r8
 80033a6:	4638      	mov	r0, r7
 80033a8:	47c8      	blx	r9
 80033aa:	3001      	adds	r0, #1
 80033ac:	d01e      	beq.n	80033ec <_printf_common+0xa4>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	6922      	ldr	r2, [r4, #16]
 80033b2:	f003 0306 	and.w	r3, r3, #6
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf02      	ittt	eq
 80033ba:	68e5      	ldreq	r5, [r4, #12]
 80033bc:	6833      	ldreq	r3, [r6, #0]
 80033be:	1aed      	subeq	r5, r5, r3
 80033c0:	68a3      	ldr	r3, [r4, #8]
 80033c2:	bf0c      	ite	eq
 80033c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033c8:	2500      	movne	r5, #0
 80033ca:	4293      	cmp	r3, r2
 80033cc:	bfc4      	itt	gt
 80033ce:	1a9b      	subgt	r3, r3, r2
 80033d0:	18ed      	addgt	r5, r5, r3
 80033d2:	2600      	movs	r6, #0
 80033d4:	341a      	adds	r4, #26
 80033d6:	42b5      	cmp	r5, r6
 80033d8:	d11a      	bne.n	8003410 <_printf_common+0xc8>
 80033da:	2000      	movs	r0, #0
 80033dc:	e008      	b.n	80033f0 <_printf_common+0xa8>
 80033de:	2301      	movs	r3, #1
 80033e0:	4652      	mov	r2, sl
 80033e2:	4641      	mov	r1, r8
 80033e4:	4638      	mov	r0, r7
 80033e6:	47c8      	blx	r9
 80033e8:	3001      	adds	r0, #1
 80033ea:	d103      	bne.n	80033f4 <_printf_common+0xac>
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f4:	3501      	adds	r5, #1
 80033f6:	e7c6      	b.n	8003386 <_printf_common+0x3e>
 80033f8:	18e1      	adds	r1, r4, r3
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	2030      	movs	r0, #48	@ 0x30
 80033fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003402:	4422      	add	r2, r4
 8003404:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003408:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800340c:	3302      	adds	r3, #2
 800340e:	e7c7      	b.n	80033a0 <_printf_common+0x58>
 8003410:	2301      	movs	r3, #1
 8003412:	4622      	mov	r2, r4
 8003414:	4641      	mov	r1, r8
 8003416:	4638      	mov	r0, r7
 8003418:	47c8      	blx	r9
 800341a:	3001      	adds	r0, #1
 800341c:	d0e6      	beq.n	80033ec <_printf_common+0xa4>
 800341e:	3601      	adds	r6, #1
 8003420:	e7d9      	b.n	80033d6 <_printf_common+0x8e>
	...

08003424 <_printf_i>:
 8003424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003428:	7e0f      	ldrb	r7, [r1, #24]
 800342a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800342c:	2f78      	cmp	r7, #120	@ 0x78
 800342e:	4691      	mov	r9, r2
 8003430:	4680      	mov	r8, r0
 8003432:	460c      	mov	r4, r1
 8003434:	469a      	mov	sl, r3
 8003436:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800343a:	d807      	bhi.n	800344c <_printf_i+0x28>
 800343c:	2f62      	cmp	r7, #98	@ 0x62
 800343e:	d80a      	bhi.n	8003456 <_printf_i+0x32>
 8003440:	2f00      	cmp	r7, #0
 8003442:	f000 80d2 	beq.w	80035ea <_printf_i+0x1c6>
 8003446:	2f58      	cmp	r7, #88	@ 0x58
 8003448:	f000 80b9 	beq.w	80035be <_printf_i+0x19a>
 800344c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003450:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003454:	e03a      	b.n	80034cc <_printf_i+0xa8>
 8003456:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800345a:	2b15      	cmp	r3, #21
 800345c:	d8f6      	bhi.n	800344c <_printf_i+0x28>
 800345e:	a101      	add	r1, pc, #4	@ (adr r1, 8003464 <_printf_i+0x40>)
 8003460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003464:	080034bd 	.word	0x080034bd
 8003468:	080034d1 	.word	0x080034d1
 800346c:	0800344d 	.word	0x0800344d
 8003470:	0800344d 	.word	0x0800344d
 8003474:	0800344d 	.word	0x0800344d
 8003478:	0800344d 	.word	0x0800344d
 800347c:	080034d1 	.word	0x080034d1
 8003480:	0800344d 	.word	0x0800344d
 8003484:	0800344d 	.word	0x0800344d
 8003488:	0800344d 	.word	0x0800344d
 800348c:	0800344d 	.word	0x0800344d
 8003490:	080035d1 	.word	0x080035d1
 8003494:	080034fb 	.word	0x080034fb
 8003498:	0800358b 	.word	0x0800358b
 800349c:	0800344d 	.word	0x0800344d
 80034a0:	0800344d 	.word	0x0800344d
 80034a4:	080035f3 	.word	0x080035f3
 80034a8:	0800344d 	.word	0x0800344d
 80034ac:	080034fb 	.word	0x080034fb
 80034b0:	0800344d 	.word	0x0800344d
 80034b4:	0800344d 	.word	0x0800344d
 80034b8:	08003593 	.word	0x08003593
 80034bc:	6833      	ldr	r3, [r6, #0]
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6032      	str	r2, [r6, #0]
 80034c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034cc:	2301      	movs	r3, #1
 80034ce:	e09d      	b.n	800360c <_printf_i+0x1e8>
 80034d0:	6833      	ldr	r3, [r6, #0]
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	1d19      	adds	r1, r3, #4
 80034d6:	6031      	str	r1, [r6, #0]
 80034d8:	0606      	lsls	r6, r0, #24
 80034da:	d501      	bpl.n	80034e0 <_printf_i+0xbc>
 80034dc:	681d      	ldr	r5, [r3, #0]
 80034de:	e003      	b.n	80034e8 <_printf_i+0xc4>
 80034e0:	0645      	lsls	r5, r0, #25
 80034e2:	d5fb      	bpl.n	80034dc <_printf_i+0xb8>
 80034e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034e8:	2d00      	cmp	r5, #0
 80034ea:	da03      	bge.n	80034f4 <_printf_i+0xd0>
 80034ec:	232d      	movs	r3, #45	@ 0x2d
 80034ee:	426d      	negs	r5, r5
 80034f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034f4:	4859      	ldr	r0, [pc, #356]	@ (800365c <_printf_i+0x238>)
 80034f6:	230a      	movs	r3, #10
 80034f8:	e011      	b.n	800351e <_printf_i+0xfa>
 80034fa:	6821      	ldr	r1, [r4, #0]
 80034fc:	6833      	ldr	r3, [r6, #0]
 80034fe:	0608      	lsls	r0, r1, #24
 8003500:	f853 5b04 	ldr.w	r5, [r3], #4
 8003504:	d402      	bmi.n	800350c <_printf_i+0xe8>
 8003506:	0649      	lsls	r1, r1, #25
 8003508:	bf48      	it	mi
 800350a:	b2ad      	uxthmi	r5, r5
 800350c:	2f6f      	cmp	r7, #111	@ 0x6f
 800350e:	4853      	ldr	r0, [pc, #332]	@ (800365c <_printf_i+0x238>)
 8003510:	6033      	str	r3, [r6, #0]
 8003512:	bf14      	ite	ne
 8003514:	230a      	movne	r3, #10
 8003516:	2308      	moveq	r3, #8
 8003518:	2100      	movs	r1, #0
 800351a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800351e:	6866      	ldr	r6, [r4, #4]
 8003520:	60a6      	str	r6, [r4, #8]
 8003522:	2e00      	cmp	r6, #0
 8003524:	bfa2      	ittt	ge
 8003526:	6821      	ldrge	r1, [r4, #0]
 8003528:	f021 0104 	bicge.w	r1, r1, #4
 800352c:	6021      	strge	r1, [r4, #0]
 800352e:	b90d      	cbnz	r5, 8003534 <_printf_i+0x110>
 8003530:	2e00      	cmp	r6, #0
 8003532:	d04b      	beq.n	80035cc <_printf_i+0x1a8>
 8003534:	4616      	mov	r6, r2
 8003536:	fbb5 f1f3 	udiv	r1, r5, r3
 800353a:	fb03 5711 	mls	r7, r3, r1, r5
 800353e:	5dc7      	ldrb	r7, [r0, r7]
 8003540:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003544:	462f      	mov	r7, r5
 8003546:	42bb      	cmp	r3, r7
 8003548:	460d      	mov	r5, r1
 800354a:	d9f4      	bls.n	8003536 <_printf_i+0x112>
 800354c:	2b08      	cmp	r3, #8
 800354e:	d10b      	bne.n	8003568 <_printf_i+0x144>
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	07df      	lsls	r7, r3, #31
 8003554:	d508      	bpl.n	8003568 <_printf_i+0x144>
 8003556:	6923      	ldr	r3, [r4, #16]
 8003558:	6861      	ldr	r1, [r4, #4]
 800355a:	4299      	cmp	r1, r3
 800355c:	bfde      	ittt	le
 800355e:	2330      	movle	r3, #48	@ 0x30
 8003560:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003564:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003568:	1b92      	subs	r2, r2, r6
 800356a:	6122      	str	r2, [r4, #16]
 800356c:	f8cd a000 	str.w	sl, [sp]
 8003570:	464b      	mov	r3, r9
 8003572:	aa03      	add	r2, sp, #12
 8003574:	4621      	mov	r1, r4
 8003576:	4640      	mov	r0, r8
 8003578:	f7ff fee6 	bl	8003348 <_printf_common>
 800357c:	3001      	adds	r0, #1
 800357e:	d14a      	bne.n	8003616 <_printf_i+0x1f2>
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	b004      	add	sp, #16
 8003586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	f043 0320 	orr.w	r3, r3, #32
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	4833      	ldr	r0, [pc, #204]	@ (8003660 <_printf_i+0x23c>)
 8003594:	2778      	movs	r7, #120	@ 0x78
 8003596:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	6831      	ldr	r1, [r6, #0]
 800359e:	061f      	lsls	r7, r3, #24
 80035a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80035a4:	d402      	bmi.n	80035ac <_printf_i+0x188>
 80035a6:	065f      	lsls	r7, r3, #25
 80035a8:	bf48      	it	mi
 80035aa:	b2ad      	uxthmi	r5, r5
 80035ac:	6031      	str	r1, [r6, #0]
 80035ae:	07d9      	lsls	r1, r3, #31
 80035b0:	bf44      	itt	mi
 80035b2:	f043 0320 	orrmi.w	r3, r3, #32
 80035b6:	6023      	strmi	r3, [r4, #0]
 80035b8:	b11d      	cbz	r5, 80035c2 <_printf_i+0x19e>
 80035ba:	2310      	movs	r3, #16
 80035bc:	e7ac      	b.n	8003518 <_printf_i+0xf4>
 80035be:	4827      	ldr	r0, [pc, #156]	@ (800365c <_printf_i+0x238>)
 80035c0:	e7e9      	b.n	8003596 <_printf_i+0x172>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	f023 0320 	bic.w	r3, r3, #32
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	e7f6      	b.n	80035ba <_printf_i+0x196>
 80035cc:	4616      	mov	r6, r2
 80035ce:	e7bd      	b.n	800354c <_printf_i+0x128>
 80035d0:	6833      	ldr	r3, [r6, #0]
 80035d2:	6825      	ldr	r5, [r4, #0]
 80035d4:	6961      	ldr	r1, [r4, #20]
 80035d6:	1d18      	adds	r0, r3, #4
 80035d8:	6030      	str	r0, [r6, #0]
 80035da:	062e      	lsls	r6, r5, #24
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	d501      	bpl.n	80035e4 <_printf_i+0x1c0>
 80035e0:	6019      	str	r1, [r3, #0]
 80035e2:	e002      	b.n	80035ea <_printf_i+0x1c6>
 80035e4:	0668      	lsls	r0, r5, #25
 80035e6:	d5fb      	bpl.n	80035e0 <_printf_i+0x1bc>
 80035e8:	8019      	strh	r1, [r3, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	6123      	str	r3, [r4, #16]
 80035ee:	4616      	mov	r6, r2
 80035f0:	e7bc      	b.n	800356c <_printf_i+0x148>
 80035f2:	6833      	ldr	r3, [r6, #0]
 80035f4:	1d1a      	adds	r2, r3, #4
 80035f6:	6032      	str	r2, [r6, #0]
 80035f8:	681e      	ldr	r6, [r3, #0]
 80035fa:	6862      	ldr	r2, [r4, #4]
 80035fc:	2100      	movs	r1, #0
 80035fe:	4630      	mov	r0, r6
 8003600:	f7fc fdee 	bl	80001e0 <memchr>
 8003604:	b108      	cbz	r0, 800360a <_printf_i+0x1e6>
 8003606:	1b80      	subs	r0, r0, r6
 8003608:	6060      	str	r0, [r4, #4]
 800360a:	6863      	ldr	r3, [r4, #4]
 800360c:	6123      	str	r3, [r4, #16]
 800360e:	2300      	movs	r3, #0
 8003610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003614:	e7aa      	b.n	800356c <_printf_i+0x148>
 8003616:	6923      	ldr	r3, [r4, #16]
 8003618:	4632      	mov	r2, r6
 800361a:	4649      	mov	r1, r9
 800361c:	4640      	mov	r0, r8
 800361e:	47d0      	blx	sl
 8003620:	3001      	adds	r0, #1
 8003622:	d0ad      	beq.n	8003580 <_printf_i+0x15c>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	079b      	lsls	r3, r3, #30
 8003628:	d413      	bmi.n	8003652 <_printf_i+0x22e>
 800362a:	68e0      	ldr	r0, [r4, #12]
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	4298      	cmp	r0, r3
 8003630:	bfb8      	it	lt
 8003632:	4618      	movlt	r0, r3
 8003634:	e7a6      	b.n	8003584 <_printf_i+0x160>
 8003636:	2301      	movs	r3, #1
 8003638:	4632      	mov	r2, r6
 800363a:	4649      	mov	r1, r9
 800363c:	4640      	mov	r0, r8
 800363e:	47d0      	blx	sl
 8003640:	3001      	adds	r0, #1
 8003642:	d09d      	beq.n	8003580 <_printf_i+0x15c>
 8003644:	3501      	adds	r5, #1
 8003646:	68e3      	ldr	r3, [r4, #12]
 8003648:	9903      	ldr	r1, [sp, #12]
 800364a:	1a5b      	subs	r3, r3, r1
 800364c:	42ab      	cmp	r3, r5
 800364e:	dcf2      	bgt.n	8003636 <_printf_i+0x212>
 8003650:	e7eb      	b.n	800362a <_printf_i+0x206>
 8003652:	2500      	movs	r5, #0
 8003654:	f104 0619 	add.w	r6, r4, #25
 8003658:	e7f5      	b.n	8003646 <_printf_i+0x222>
 800365a:	bf00      	nop
 800365c:	08008ad1 	.word	0x08008ad1
 8003660:	08008ae2 	.word	0x08008ae2

08003664 <__sflush_r>:
 8003664:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800366c:	0716      	lsls	r6, r2, #28
 800366e:	4605      	mov	r5, r0
 8003670:	460c      	mov	r4, r1
 8003672:	d454      	bmi.n	800371e <__sflush_r+0xba>
 8003674:	684b      	ldr	r3, [r1, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	dc02      	bgt.n	8003680 <__sflush_r+0x1c>
 800367a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	dd48      	ble.n	8003712 <__sflush_r+0xae>
 8003680:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003682:	2e00      	cmp	r6, #0
 8003684:	d045      	beq.n	8003712 <__sflush_r+0xae>
 8003686:	2300      	movs	r3, #0
 8003688:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800368c:	682f      	ldr	r7, [r5, #0]
 800368e:	6a21      	ldr	r1, [r4, #32]
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	d030      	beq.n	80036f6 <__sflush_r+0x92>
 8003694:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003696:	89a3      	ldrh	r3, [r4, #12]
 8003698:	0759      	lsls	r1, r3, #29
 800369a:	d505      	bpl.n	80036a8 <__sflush_r+0x44>
 800369c:	6863      	ldr	r3, [r4, #4]
 800369e:	1ad2      	subs	r2, r2, r3
 80036a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036a2:	b10b      	cbz	r3, 80036a8 <__sflush_r+0x44>
 80036a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036a6:	1ad2      	subs	r2, r2, r3
 80036a8:	2300      	movs	r3, #0
 80036aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036ac:	6a21      	ldr	r1, [r4, #32]
 80036ae:	4628      	mov	r0, r5
 80036b0:	47b0      	blx	r6
 80036b2:	1c43      	adds	r3, r0, #1
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	d106      	bne.n	80036c6 <__sflush_r+0x62>
 80036b8:	6829      	ldr	r1, [r5, #0]
 80036ba:	291d      	cmp	r1, #29
 80036bc:	d82b      	bhi.n	8003716 <__sflush_r+0xb2>
 80036be:	4a2a      	ldr	r2, [pc, #168]	@ (8003768 <__sflush_r+0x104>)
 80036c0:	410a      	asrs	r2, r1
 80036c2:	07d6      	lsls	r6, r2, #31
 80036c4:	d427      	bmi.n	8003716 <__sflush_r+0xb2>
 80036c6:	2200      	movs	r2, #0
 80036c8:	6062      	str	r2, [r4, #4]
 80036ca:	04d9      	lsls	r1, r3, #19
 80036cc:	6922      	ldr	r2, [r4, #16]
 80036ce:	6022      	str	r2, [r4, #0]
 80036d0:	d504      	bpl.n	80036dc <__sflush_r+0x78>
 80036d2:	1c42      	adds	r2, r0, #1
 80036d4:	d101      	bne.n	80036da <__sflush_r+0x76>
 80036d6:	682b      	ldr	r3, [r5, #0]
 80036d8:	b903      	cbnz	r3, 80036dc <__sflush_r+0x78>
 80036da:	6560      	str	r0, [r4, #84]	@ 0x54
 80036dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036de:	602f      	str	r7, [r5, #0]
 80036e0:	b1b9      	cbz	r1, 8003712 <__sflush_r+0xae>
 80036e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036e6:	4299      	cmp	r1, r3
 80036e8:	d002      	beq.n	80036f0 <__sflush_r+0x8c>
 80036ea:	4628      	mov	r0, r5
 80036ec:	f7ff fa9a 	bl	8002c24 <_free_r>
 80036f0:	2300      	movs	r3, #0
 80036f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80036f4:	e00d      	b.n	8003712 <__sflush_r+0xae>
 80036f6:	2301      	movs	r3, #1
 80036f8:	4628      	mov	r0, r5
 80036fa:	47b0      	blx	r6
 80036fc:	4602      	mov	r2, r0
 80036fe:	1c50      	adds	r0, r2, #1
 8003700:	d1c9      	bne.n	8003696 <__sflush_r+0x32>
 8003702:	682b      	ldr	r3, [r5, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0c6      	beq.n	8003696 <__sflush_r+0x32>
 8003708:	2b1d      	cmp	r3, #29
 800370a:	d001      	beq.n	8003710 <__sflush_r+0xac>
 800370c:	2b16      	cmp	r3, #22
 800370e:	d11e      	bne.n	800374e <__sflush_r+0xea>
 8003710:	602f      	str	r7, [r5, #0]
 8003712:	2000      	movs	r0, #0
 8003714:	e022      	b.n	800375c <__sflush_r+0xf8>
 8003716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800371a:	b21b      	sxth	r3, r3
 800371c:	e01b      	b.n	8003756 <__sflush_r+0xf2>
 800371e:	690f      	ldr	r7, [r1, #16]
 8003720:	2f00      	cmp	r7, #0
 8003722:	d0f6      	beq.n	8003712 <__sflush_r+0xae>
 8003724:	0793      	lsls	r3, r2, #30
 8003726:	680e      	ldr	r6, [r1, #0]
 8003728:	bf08      	it	eq
 800372a:	694b      	ldreq	r3, [r1, #20]
 800372c:	600f      	str	r7, [r1, #0]
 800372e:	bf18      	it	ne
 8003730:	2300      	movne	r3, #0
 8003732:	eba6 0807 	sub.w	r8, r6, r7
 8003736:	608b      	str	r3, [r1, #8]
 8003738:	f1b8 0f00 	cmp.w	r8, #0
 800373c:	dde9      	ble.n	8003712 <__sflush_r+0xae>
 800373e:	6a21      	ldr	r1, [r4, #32]
 8003740:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003742:	4643      	mov	r3, r8
 8003744:	463a      	mov	r2, r7
 8003746:	4628      	mov	r0, r5
 8003748:	47b0      	blx	r6
 800374a:	2800      	cmp	r0, #0
 800374c:	dc08      	bgt.n	8003760 <__sflush_r+0xfc>
 800374e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003756:	81a3      	strh	r3, [r4, #12]
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003760:	4407      	add	r7, r0
 8003762:	eba8 0800 	sub.w	r8, r8, r0
 8003766:	e7e7      	b.n	8003738 <__sflush_r+0xd4>
 8003768:	dfbffffe 	.word	0xdfbffffe

0800376c <_fflush_r>:
 800376c:	b538      	push	{r3, r4, r5, lr}
 800376e:	690b      	ldr	r3, [r1, #16]
 8003770:	4605      	mov	r5, r0
 8003772:	460c      	mov	r4, r1
 8003774:	b913      	cbnz	r3, 800377c <_fflush_r+0x10>
 8003776:	2500      	movs	r5, #0
 8003778:	4628      	mov	r0, r5
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	b118      	cbz	r0, 8003786 <_fflush_r+0x1a>
 800377e:	6a03      	ldr	r3, [r0, #32]
 8003780:	b90b      	cbnz	r3, 8003786 <_fflush_r+0x1a>
 8003782:	f7ff f835 	bl	80027f0 <__sinit>
 8003786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f3      	beq.n	8003776 <_fflush_r+0xa>
 800378e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003790:	07d0      	lsls	r0, r2, #31
 8003792:	d404      	bmi.n	800379e <_fflush_r+0x32>
 8003794:	0599      	lsls	r1, r3, #22
 8003796:	d402      	bmi.n	800379e <_fflush_r+0x32>
 8003798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800379a:	f7ff fa40 	bl	8002c1e <__retarget_lock_acquire_recursive>
 800379e:	4628      	mov	r0, r5
 80037a0:	4621      	mov	r1, r4
 80037a2:	f7ff ff5f 	bl	8003664 <__sflush_r>
 80037a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037a8:	07da      	lsls	r2, r3, #31
 80037aa:	4605      	mov	r5, r0
 80037ac:	d4e4      	bmi.n	8003778 <_fflush_r+0xc>
 80037ae:	89a3      	ldrh	r3, [r4, #12]
 80037b0:	059b      	lsls	r3, r3, #22
 80037b2:	d4e1      	bmi.n	8003778 <_fflush_r+0xc>
 80037b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037b6:	f7ff fa33 	bl	8002c20 <__retarget_lock_release_recursive>
 80037ba:	e7dd      	b.n	8003778 <_fflush_r+0xc>

080037bc <__swhatbuf_r>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	460c      	mov	r4, r1
 80037c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c4:	2900      	cmp	r1, #0
 80037c6:	b096      	sub	sp, #88	@ 0x58
 80037c8:	4615      	mov	r5, r2
 80037ca:	461e      	mov	r6, r3
 80037cc:	da0d      	bge.n	80037ea <__swhatbuf_r+0x2e>
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	bf14      	ite	ne
 80037da:	2340      	movne	r3, #64	@ 0x40
 80037dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80037e0:	2000      	movs	r0, #0
 80037e2:	6031      	str	r1, [r6, #0]
 80037e4:	602b      	str	r3, [r5, #0]
 80037e6:	b016      	add	sp, #88	@ 0x58
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
 80037ea:	466a      	mov	r2, sp
 80037ec:	f000 f862 	bl	80038b4 <_fstat_r>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	dbec      	blt.n	80037ce <__swhatbuf_r+0x12>
 80037f4:	9901      	ldr	r1, [sp, #4]
 80037f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80037fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80037fe:	4259      	negs	r1, r3
 8003800:	4159      	adcs	r1, r3
 8003802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003806:	e7eb      	b.n	80037e0 <__swhatbuf_r+0x24>

08003808 <__smakebuf_r>:
 8003808:	898b      	ldrh	r3, [r1, #12]
 800380a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800380c:	079d      	lsls	r5, r3, #30
 800380e:	4606      	mov	r6, r0
 8003810:	460c      	mov	r4, r1
 8003812:	d507      	bpl.n	8003824 <__smakebuf_r+0x1c>
 8003814:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	6123      	str	r3, [r4, #16]
 800381c:	2301      	movs	r3, #1
 800381e:	6163      	str	r3, [r4, #20]
 8003820:	b003      	add	sp, #12
 8003822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003824:	ab01      	add	r3, sp, #4
 8003826:	466a      	mov	r2, sp
 8003828:	f7ff ffc8 	bl	80037bc <__swhatbuf_r>
 800382c:	9f00      	ldr	r7, [sp, #0]
 800382e:	4605      	mov	r5, r0
 8003830:	4639      	mov	r1, r7
 8003832:	4630      	mov	r0, r6
 8003834:	f7ff fa62 	bl	8002cfc <_malloc_r>
 8003838:	b948      	cbnz	r0, 800384e <__smakebuf_r+0x46>
 800383a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800383e:	059a      	lsls	r2, r3, #22
 8003840:	d4ee      	bmi.n	8003820 <__smakebuf_r+0x18>
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	81a3      	strh	r3, [r4, #12]
 800384c:	e7e2      	b.n	8003814 <__smakebuf_r+0xc>
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	6020      	str	r0, [r4, #0]
 8003852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003856:	81a3      	strh	r3, [r4, #12]
 8003858:	9b01      	ldr	r3, [sp, #4]
 800385a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800385e:	b15b      	cbz	r3, 8003878 <__smakebuf_r+0x70>
 8003860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003864:	4630      	mov	r0, r6
 8003866:	f000 f837 	bl	80038d8 <_isatty_r>
 800386a:	b128      	cbz	r0, 8003878 <__smakebuf_r+0x70>
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	81a3      	strh	r3, [r4, #12]
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	431d      	orrs	r5, r3
 800387c:	81a5      	strh	r5, [r4, #12]
 800387e:	e7cf      	b.n	8003820 <__smakebuf_r+0x18>

08003880 <memmove>:
 8003880:	4288      	cmp	r0, r1
 8003882:	b510      	push	{r4, lr}
 8003884:	eb01 0402 	add.w	r4, r1, r2
 8003888:	d902      	bls.n	8003890 <memmove+0x10>
 800388a:	4284      	cmp	r4, r0
 800388c:	4623      	mov	r3, r4
 800388e:	d807      	bhi.n	80038a0 <memmove+0x20>
 8003890:	1e43      	subs	r3, r0, #1
 8003892:	42a1      	cmp	r1, r4
 8003894:	d008      	beq.n	80038a8 <memmove+0x28>
 8003896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800389a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800389e:	e7f8      	b.n	8003892 <memmove+0x12>
 80038a0:	4402      	add	r2, r0
 80038a2:	4601      	mov	r1, r0
 80038a4:	428a      	cmp	r2, r1
 80038a6:	d100      	bne.n	80038aa <memmove+0x2a>
 80038a8:	bd10      	pop	{r4, pc}
 80038aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038b2:	e7f7      	b.n	80038a4 <memmove+0x24>

080038b4 <_fstat_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4d07      	ldr	r5, [pc, #28]	@ (80038d4 <_fstat_r+0x20>)
 80038b8:	2300      	movs	r3, #0
 80038ba:	4604      	mov	r4, r0
 80038bc:	4608      	mov	r0, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	602b      	str	r3, [r5, #0]
 80038c2:	f7fd fe19 	bl	80014f8 <_fstat>
 80038c6:	1c43      	adds	r3, r0, #1
 80038c8:	d102      	bne.n	80038d0 <_fstat_r+0x1c>
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	b103      	cbz	r3, 80038d0 <_fstat_r+0x1c>
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	bd38      	pop	{r3, r4, r5, pc}
 80038d2:	bf00      	nop
 80038d4:	200006a0 	.word	0x200006a0

080038d8 <_isatty_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	4d06      	ldr	r5, [pc, #24]	@ (80038f4 <_isatty_r+0x1c>)
 80038dc:	2300      	movs	r3, #0
 80038de:	4604      	mov	r4, r0
 80038e0:	4608      	mov	r0, r1
 80038e2:	602b      	str	r3, [r5, #0]
 80038e4:	f7fd fe18 	bl	8001518 <_isatty>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d102      	bne.n	80038f2 <_isatty_r+0x1a>
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	b103      	cbz	r3, 80038f2 <_isatty_r+0x1a>
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
 80038f4:	200006a0 	.word	0x200006a0

080038f8 <_sbrk_r>:
 80038f8:	b538      	push	{r3, r4, r5, lr}
 80038fa:	4d06      	ldr	r5, [pc, #24]	@ (8003914 <_sbrk_r+0x1c>)
 80038fc:	2300      	movs	r3, #0
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	602b      	str	r3, [r5, #0]
 8003904:	f7fd fe20 	bl	8001548 <_sbrk>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	d102      	bne.n	8003912 <_sbrk_r+0x1a>
 800390c:	682b      	ldr	r3, [r5, #0]
 800390e:	b103      	cbz	r3, 8003912 <_sbrk_r+0x1a>
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	200006a0 	.word	0x200006a0

08003918 <memcpy>:
 8003918:	440a      	add	r2, r1
 800391a:	4291      	cmp	r1, r2
 800391c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003920:	d100      	bne.n	8003924 <memcpy+0xc>
 8003922:	4770      	bx	lr
 8003924:	b510      	push	{r4, lr}
 8003926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800392a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800392e:	4291      	cmp	r1, r2
 8003930:	d1f9      	bne.n	8003926 <memcpy+0xe>
 8003932:	bd10      	pop	{r4, pc}

08003934 <_realloc_r>:
 8003934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003938:	4680      	mov	r8, r0
 800393a:	4615      	mov	r5, r2
 800393c:	460c      	mov	r4, r1
 800393e:	b921      	cbnz	r1, 800394a <_realloc_r+0x16>
 8003940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003944:	4611      	mov	r1, r2
 8003946:	f7ff b9d9 	b.w	8002cfc <_malloc_r>
 800394a:	b92a      	cbnz	r2, 8003958 <_realloc_r+0x24>
 800394c:	f7ff f96a 	bl	8002c24 <_free_r>
 8003950:	2400      	movs	r4, #0
 8003952:	4620      	mov	r0, r4
 8003954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003958:	f000 f81a 	bl	8003990 <_malloc_usable_size_r>
 800395c:	4285      	cmp	r5, r0
 800395e:	4606      	mov	r6, r0
 8003960:	d802      	bhi.n	8003968 <_realloc_r+0x34>
 8003962:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003966:	d8f4      	bhi.n	8003952 <_realloc_r+0x1e>
 8003968:	4629      	mov	r1, r5
 800396a:	4640      	mov	r0, r8
 800396c:	f7ff f9c6 	bl	8002cfc <_malloc_r>
 8003970:	4607      	mov	r7, r0
 8003972:	2800      	cmp	r0, #0
 8003974:	d0ec      	beq.n	8003950 <_realloc_r+0x1c>
 8003976:	42b5      	cmp	r5, r6
 8003978:	462a      	mov	r2, r5
 800397a:	4621      	mov	r1, r4
 800397c:	bf28      	it	cs
 800397e:	4632      	movcs	r2, r6
 8003980:	f7ff ffca 	bl	8003918 <memcpy>
 8003984:	4621      	mov	r1, r4
 8003986:	4640      	mov	r0, r8
 8003988:	f7ff f94c 	bl	8002c24 <_free_r>
 800398c:	463c      	mov	r4, r7
 800398e:	e7e0      	b.n	8003952 <_realloc_r+0x1e>

08003990 <_malloc_usable_size_r>:
 8003990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003994:	1f18      	subs	r0, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	bfbc      	itt	lt
 800399a:	580b      	ldrlt	r3, [r1, r0]
 800399c:	18c0      	addlt	r0, r0, r3
 800399e:	4770      	bx	lr

080039a0 <_init>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr

080039ac <_fini>:
 80039ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ae:	bf00      	nop
 80039b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b2:	bc08      	pop	{r3}
 80039b4:	469e      	mov	lr, r3
 80039b6:	4770      	bx	lr
