
test015-BT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004788  08004788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004828  08004828  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004828  08004828  00005828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004830  08004830  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004830  08004830  00005830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004834  08004834  00005834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004838  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000068  080048a0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080048a0  00006388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db93  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209f  00000000  00000000  00013c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00015cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a45  00000000  00000000  00016a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017280  00000000  00000000  00017445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f103  00000000  00000000  0002e6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffd8  00000000  00000000  0003d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd7a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eac  00000000  00000000  000cd7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d1690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004770 	.word	0x08004770

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004770 	.word	0x08004770

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
char buf1[100], dum1;
char buf2[100], dum2;
int idx1 = 0, idx2 = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)  // BT input
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a25      	ldr	r2, [pc, #148]	@ (8000610 <HAL_UART_RxCpltCallback+0xa0>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d10e      	bne.n	800059e <HAL_UART_RxCpltCallback+0x2e>
	{
		buf1[idx1++] = dum1;
 8000580:	4b24      	ldr	r3, [pc, #144]	@ (8000614 <HAL_UART_RxCpltCallback+0xa4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	4923      	ldr	r1, [pc, #140]	@ (8000614 <HAL_UART_RxCpltCallback+0xa4>)
 8000588:	600a      	str	r2, [r1, #0]
 800058a:	4a23      	ldr	r2, [pc, #140]	@ (8000618 <HAL_UART_RxCpltCallback+0xa8>)
 800058c:	7811      	ldrb	r1, [r2, #0]
 800058e:	4a23      	ldr	r2, [pc, #140]	@ (800061c <HAL_UART_RxCpltCallback+0xac>)
 8000590:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart1, &dum1, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	4920      	ldr	r1, [pc, #128]	@ (8000618 <HAL_UART_RxCpltCallback+0xa8>)
 8000596:	481e      	ldr	r0, [pc, #120]	@ (8000610 <HAL_UART_RxCpltCallback+0xa0>)
 8000598:	f002 f9e1 	bl	800295e <HAL_UART_Receive_IT>
			idx2 = 0;
		}
		else buf2[idx2++] = dum2;
		HAL_UART_Receive_IT(&huart2, &dum2, 1);
	}
}
 800059c:	e033      	b.n	8000606 <HAL_UART_RxCpltCallback+0x96>
	else if(huart == &huart2) // KBD input
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000620 <HAL_UART_RxCpltCallback+0xb0>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d12f      	bne.n	8000606 <HAL_UART_RxCpltCallback+0x96>
		HAL_UART_Transmit(&huart2, &dum2, 1, 10);
 80005a6:	230a      	movs	r3, #10
 80005a8:	2201      	movs	r2, #1
 80005aa:	491e      	ldr	r1, [pc, #120]	@ (8000624 <HAL_UART_RxCpltCallback+0xb4>)
 80005ac:	481c      	ldr	r0, [pc, #112]	@ (8000620 <HAL_UART_RxCpltCallback+0xb0>)
 80005ae:	f002 f94b 	bl	8002848 <HAL_UART_Transmit>
		if(dum2 == '\r')
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <HAL_UART_RxCpltCallback+0xb4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b0d      	cmp	r3, #13
 80005b8:	d117      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x7a>
			HAL_UART_Transmit(&huart2, "\n", 1, 10);
 80005ba:	230a      	movs	r3, #10
 80005bc:	2201      	movs	r2, #1
 80005be:	491a      	ldr	r1, [pc, #104]	@ (8000628 <HAL_UART_RxCpltCallback+0xb8>)
 80005c0:	4817      	ldr	r0, [pc, #92]	@ (8000620 <HAL_UART_RxCpltCallback+0xb0>)
 80005c2:	f002 f941 	bl	8002848 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, buf2, idx2, 10);
 80005c6:	4b19      	ldr	r3, [pc, #100]	@ (800062c <HAL_UART_RxCpltCallback+0xbc>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	4918      	ldr	r1, [pc, #96]	@ (8000630 <HAL_UART_RxCpltCallback+0xc0>)
 80005d0:	480f      	ldr	r0, [pc, #60]	@ (8000610 <HAL_UART_RxCpltCallback+0xa0>)
 80005d2:	f002 f939 	bl	8002848 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, "\0", 1, 10);
 80005d6:	230a      	movs	r3, #10
 80005d8:	2201      	movs	r2, #1
 80005da:	4916      	ldr	r1, [pc, #88]	@ (8000634 <HAL_UART_RxCpltCallback+0xc4>)
 80005dc:	480c      	ldr	r0, [pc, #48]	@ (8000610 <HAL_UART_RxCpltCallback+0xa0>)
 80005de:	f002 f933 	bl	8002848 <HAL_UART_Transmit>
			idx2 = 0;
 80005e2:	4b12      	ldr	r3, [pc, #72]	@ (800062c <HAL_UART_RxCpltCallback+0xbc>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	e008      	b.n	80005fc <HAL_UART_RxCpltCallback+0x8c>
		else buf2[idx2++] = dum2;
 80005ea:	4b10      	ldr	r3, [pc, #64]	@ (800062c <HAL_UART_RxCpltCallback+0xbc>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	490e      	ldr	r1, [pc, #56]	@ (800062c <HAL_UART_RxCpltCallback+0xbc>)
 80005f2:	600a      	str	r2, [r1, #0]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000624 <HAL_UART_RxCpltCallback+0xb4>)
 80005f6:	7811      	ldrb	r1, [r2, #0]
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <HAL_UART_RxCpltCallback+0xc0>)
 80005fa:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart2, &dum2, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	4909      	ldr	r1, [pc, #36]	@ (8000624 <HAL_UART_RxCpltCallback+0xb4>)
 8000600:	4807      	ldr	r0, [pc, #28]	@ (8000620 <HAL_UART_RxCpltCallback+0xb0>)
 8000602:	f002 f9ac 	bl	800295e <HAL_UART_Receive_IT>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000cc 	.word	0x200000cc
 8000614:	2000022c 	.word	0x2000022c
 8000618:	200001c0 	.word	0x200001c0
 800061c:	2000015c 	.word	0x2000015c
 8000620:	20000114 	.word	0x20000114
 8000624:	20000228 	.word	0x20000228
 8000628:	08004788 	.word	0x08004788
 800062c:	20000230 	.word	0x20000230
 8000630:	200001c4 	.word	0x200001c4
 8000634:	0800478c 	.word	0x0800478c

08000638 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	if(idx1)
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00b      	beq.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		buf1[idx1] = 0;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a07      	ldr	r2, [pc, #28]	@ (800066c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800064e:	2100      	movs	r1, #0
 8000650:	54d1      	strb	r1, [r2, r3]
		printf("UART1>%s\r\n",buf1);
 8000652:	4906      	ldr	r1, [pc, #24]	@ (800066c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000654:	4806      	ldr	r0, [pc, #24]	@ (8000670 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000656:	f003 f9bf 	bl	80039d8 <iprintf>
		idx1 = 0;
 800065a:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
	}
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000022c 	.word	0x2000022c
 800066c:	2000015c 	.word	0x2000015c
 8000670:	08004790 	.word	0x08004790

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fbf8 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f824 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f000 f92e 	bl	80008e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000684:	f000 f902 	bl	800088c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000688:	f000 f8d6 	bl	8000838 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800068c:	f000 f886 	bl	800079c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ProgramStart();
 8000690:	f000 f9ac 	bl	80009ec <ProgramStart>
  HAL_UART_Receive_IT(&huart1, &dum1, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	4907      	ldr	r1, [pc, #28]	@ (80006b4 <main+0x40>)
 8000698:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <main+0x44>)
 800069a:	f002 f960 	bl	800295e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &dum2, 1);
 800069e:	2201      	movs	r2, #1
 80006a0:	4906      	ldr	r1, [pc, #24]	@ (80006bc <main+0x48>)
 80006a2:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <main+0x4c>)
 80006a4:	f002 f95b 	bl	800295e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80006a8:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <main+0x50>)
 80006aa:	f001 fc93 	bl	8001fd4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ae:	bf00      	nop
 80006b0:	e7fd      	b.n	80006ae <main+0x3a>
 80006b2:	bf00      	nop
 80006b4:	200001c0 	.word	0x200001c0
 80006b8:	200000cc 	.word	0x200000cc
 80006bc:	20000228 	.word	0x20000228
 80006c0:	20000114 	.word	0x20000114
 80006c4:	20000084 	.word	0x20000084

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	@ 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fac6 	bl	8003c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000738:	2310      	movs	r3, #16
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000740:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000742:	2304      	movs	r3, #4
 8000744:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000746:	2304      	movs	r3, #4
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ff58 	bl	8001604 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075a:	f000 f92f 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f9ba 	bl	8001af4 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f919 	bl	80009bc <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <MX_TIM3_Init+0x98>)
 80007bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007c0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80007c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80007cc:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007e0:	4813      	ldr	r0, [pc, #76]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007e2:	f001 fba7 	bl	8001f34 <HAL_TIM_Base_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007ec:	f000 f8e6 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007fe:	f001 fd3b 	bl	8002278 <HAL_TIM_ConfigClockSource>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 f8d8 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_TIM3_Init+0x94>)
 800081a:	f001 ff43 	bl	80026a4 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f8ca 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000084 	.word	0x20000084
 8000834:	40000400 	.word	0x40000400

08000838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_USART1_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000844:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USART1_UART_Init+0x4c>)
 8000870:	f001 ff9a 	bl	80027a8 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f89f 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000cc 	.word	0x200000cc
 8000888:	40011000 	.word	0x40011000

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <MX_USART2_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f001 ff70 	bl	80027a8 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 f875 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000114 	.word	0x20000114
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a2c      	ldr	r2, [pc, #176]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a25      	ldr	r2, [pc, #148]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a1e      	ldr	r2, [pc, #120]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	4812      	ldr	r0, [pc, #72]	@ (80009b4 <MX_GPIO_Init+0xd4>)
 800096c:	f000 fe30 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000976:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <MX_GPIO_Init+0xd8>)
 8000988:	f000 fc86 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800098c:	2320      	movs	r3, #32
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_GPIO_Init+0xd4>)
 80009a4:	f000 fc78 	bl	8001298 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	@ 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020800 	.word	0x40020800

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 80009d0:	1d39      	adds	r1, r7, #4
 80009d2:	230a      	movs	r3, #10
 80009d4:	2201      	movs	r2, #1
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <__io_putchar+0x20>)
 80009d8:	f001 ff36 	bl	8002848 <HAL_UART_Transmit>
	return ch;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000114 	.word	0x20000114

080009ec <ProgramStart>:
	//HAL_ADC_PollForConversion(&hadc1, 10);
	//return HAL_ADC_GetValue(&hadc1);
}

void ProgramStart()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	printf("\033[2J");	// screen clear
 80009f0:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <ProgramStart+0x28>)
 80009f2:	f002 fff1 	bl	80039d8 <iprintf>
	printf("\033[1;1H");	// Move cursor pos to (1,1)
 80009f6:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <ProgramStart+0x2c>)
 80009f8:	f002 ffee 	bl	80039d8 <iprintf>
	printf("Program Started");
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <ProgramStart+0x30>)
 80009fe:	f002 ffeb 	bl	80039d8 <iprintf>
	Wait(1);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 f80c 	bl	8000a20 <Wait>
	printf("\033[2J");	// screen clear
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <ProgramStart+0x28>)
 8000a0a:	f002 ffe5 	bl	80039d8 <iprintf>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	0800479c 	.word	0x0800479c
 8000a18:	080047a4 	.word	0x080047a4
 8000a1c:	080047ac 	.word	0x080047ac

08000a20 <Wait>:

void Wait(int o)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if(o) printf("Press Blue button to continue\r\n");
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <Wait+0x14>
 8000a2e:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <Wait+0x30>)
 8000a30:	f003 f83a 	bl	8003aa8 <puts>
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 8000a34:	bf00      	nop
 8000a36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a3a:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <Wait+0x34>)
 8000a3c:	f000 fdb0 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1f7      	bne.n	8000a36 <Wait+0x16>
}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	080047bc 	.word	0x080047bc
 8000a54:	40020800 	.word	0x40020800

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a96:	2007      	movs	r0, #7
 8000a98:	f000 fb2a 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <HAL_TIM_Base_MspInit+0x48>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d115      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201d      	movs	r0, #29
 8000adc:	f000 fb13 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ae0:	201d      	movs	r0, #29
 8000ae2:	f000 fb2c 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40000400 	.word	0x40000400
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	@ 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a3a      	ldr	r2, [pc, #232]	@ (8000c00 <HAL_UART_MspInit+0x108>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d135      	bne.n	8000b86 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	4b39      	ldr	r3, [pc, #228]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a38      	ldr	r2, [pc, #224]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b36      	ldr	r3, [pc, #216]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a31      	ldr	r2, [pc, #196]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b64:	2307      	movs	r3, #7
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <HAL_UART_MspInit+0x110>)
 8000b70:	f000 fb92 	bl	8001298 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2025      	movs	r0, #37	@ 0x25
 8000b7a:	f000 fac4 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b7e:	2025      	movs	r0, #37	@ 0x25
 8000b80:	f000 fadd 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b84:	e038      	b.n	8000bf8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_UART_MspInit+0x114>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d133      	bne.n	8000bf8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	4a1a      	ldr	r2, [pc, #104]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba0:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a13      	ldr	r2, [pc, #76]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_UART_MspInit+0x10c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc8:	230c      	movs	r3, #12
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4809      	ldr	r0, [pc, #36]	@ (8000c08 <HAL_UART_MspInit+0x110>)
 8000be4:	f000 fb58 	bl	8001298 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2026      	movs	r0, #38	@ 0x26
 8000bee:	f000 fa8a 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bf2:	2026      	movs	r0, #38	@ 0x26
 8000bf4:	f000 faa3 	bl	800113e <HAL_NVIC_EnableIRQ>
}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	@ 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40011000 	.word	0x40011000
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40004400 	.word	0x40004400

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <MemManage_Handler+0x4>

08000c28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f953 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <TIM3_IRQHandler+0x10>)
 8000c76:	f001 fa0f 	bl	8002098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000084 	.word	0x20000084

08000c84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c88:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <USART1_IRQHandler+0x10>)
 8000c8a:	f001 fe8d 	bl	80029a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000cc 	.word	0x200000cc

08000c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <USART2_IRQHandler+0x10>)
 8000c9e:	f001 fe83 	bl	80029a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000114 	.word	0x20000114

08000cac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
  }

  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fe61 	bl	80009c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf1      	blt.n	8000cf8 <_write+0x12>
  }
  return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
  return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f002 ffa4 	bl	8003d04 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	20000234 	.word	0x20000234
 8000df0:	20000388 	.word	0x20000388

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1c:	f7ff ffea 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f002 ff63 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fc13 	bl	8000674 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e5c:	08004838 	.word	0x08004838
  ldr r2, =_sbss
 8000e60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e64:	20000388 	.word	0x20000388

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f92b 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fdda 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f943 	bl	800115a <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f90b 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000238 	.word	0x20000238

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000238 	.word	0x20000238

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	@ (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	@ (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	@ (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff29 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff3e 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff31 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff feda 	bl	8000f38 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d008      	beq.n	80011a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2280      	movs	r2, #128	@ 0x80
 8001196:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e052      	b.n	800124a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0216 	bic.w	r2, r2, #22
 80011b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d103      	bne.n	80011d4 <HAL_DMA_Abort+0x62>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0208 	bic.w	r2, r2, #8
 80011e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f4:	e013      	b.n	800121e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011f6:	f7ff fe9f 	bl	8000f38 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b05      	cmp	r3, #5
 8001202:	d90c      	bls.n	800121e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2220      	movs	r2, #32
 8001208:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e015      	b.n	800124a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e4      	bne.n	80011f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001230:	223f      	movs	r2, #63	@ 0x3f
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d004      	beq.n	8001270 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2280      	movs	r2, #128	@ 0x80
 800126a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e00c      	b.n	800128a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2205      	movs	r2, #5
 8001274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e159      	b.n	8001568 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8148 	bne.w	8001562 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d005      	beq.n	80012ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d130      	bne.n	800134c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b03      	cmp	r3, #3
 8001356:	d017      	beq.n	8001388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	69b9      	ldr	r1, [r7, #24]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a2 	beq.w	8001562 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b57      	ldr	r3, [pc, #348]	@ (8001580 <HAL_GPIO_Init+0x2e8>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	4a56      	ldr	r2, [pc, #344]	@ (8001580 <HAL_GPIO_Init+0x2e8>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142c:	6453      	str	r3, [r2, #68]	@ 0x44
 800142e:	4b54      	ldr	r3, [pc, #336]	@ (8001580 <HAL_GPIO_Init+0x2e8>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143a:	4a52      	ldr	r2, [pc, #328]	@ (8001584 <HAL_GPIO_Init+0x2ec>)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a49      	ldr	r2, [pc, #292]	@ (8001588 <HAL_GPIO_Init+0x2f0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d019      	beq.n	800149a <HAL_GPIO_Init+0x202>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a48      	ldr	r2, [pc, #288]	@ (800158c <HAL_GPIO_Init+0x2f4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x1fe>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a47      	ldr	r2, [pc, #284]	@ (8001590 <HAL_GPIO_Init+0x2f8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a46      	ldr	r2, [pc, #280]	@ (8001594 <HAL_GPIO_Init+0x2fc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x1f6>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a45      	ldr	r2, [pc, #276]	@ (8001598 <HAL_GPIO_Init+0x300>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x1f2>
 8001486:	2304      	movs	r3, #4
 8001488:	e008      	b.n	800149c <HAL_GPIO_Init+0x204>
 800148a:	2307      	movs	r3, #7
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x204>
 800148e:	2303      	movs	r3, #3
 8001490:	e004      	b.n	800149c <HAL_GPIO_Init+0x204>
 8001492:	2302      	movs	r3, #2
 8001494:	e002      	b.n	800149c <HAL_GPIO_Init+0x204>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x204>
 800149a:	2300      	movs	r3, #0
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	f002 0203 	and.w	r2, r2, #3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4093      	lsls	r3, r2
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ac:	4935      	ldr	r1, [pc, #212]	@ (8001584 <HAL_GPIO_Init+0x2ec>)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ba:	4b38      	ldr	r3, [pc, #224]	@ (800159c <HAL_GPIO_Init+0x304>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014de:	4a2f      	ldr	r2, [pc, #188]	@ (800159c <HAL_GPIO_Init+0x304>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <HAL_GPIO_Init+0x304>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001508:	4a24      	ldr	r2, [pc, #144]	@ (800159c <HAL_GPIO_Init+0x304>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800150e:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_GPIO_Init+0x304>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001532:	4a1a      	ldr	r2, [pc, #104]	@ (800159c <HAL_GPIO_Init+0x304>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_GPIO_Init+0x304>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155c:	4a0f      	ldr	r2, [pc, #60]	@ (800159c <HAL_GPIO_Init+0x304>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3301      	adds	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	f67f aea2 	bls.w	80012b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40013800 	.word	0x40013800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020800 	.word	0x40020800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40021000 	.word	0x40021000
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ec:	e003      	b.n	80015f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	619a      	str	r2, [r3, #24]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e267      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d075      	beq.n	800170e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001622:	4b88      	ldr	r3, [pc, #544]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b04      	cmp	r3, #4
 800162c:	d00c      	beq.n	8001648 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162e:	4b85      	ldr	r3, [pc, #532]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001636:	2b08      	cmp	r3, #8
 8001638:	d112      	bne.n	8001660 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163a:	4b82      	ldr	r3, [pc, #520]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001642:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001646:	d10b      	bne.n	8001660 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	4b7e      	ldr	r3, [pc, #504]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d05b      	beq.n	800170c <HAL_RCC_OscConfig+0x108>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d157      	bne.n	800170c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e242      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001668:	d106      	bne.n	8001678 <HAL_RCC_OscConfig+0x74>
 800166a:	4b76      	ldr	r3, [pc, #472]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a75      	ldr	r2, [pc, #468]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0xb0>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x98>
 8001682:	4b70      	ldr	r3, [pc, #448]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6f      	ldr	r2, [pc, #444]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b6d      	ldr	r3, [pc, #436]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6c      	ldr	r2, [pc, #432]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xb0>
 800169c:	4b69      	ldr	r3, [pc, #420]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a68      	ldr	r2, [pc, #416]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b66      	ldr	r3, [pc, #408]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a65      	ldr	r2, [pc, #404]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc3c 	bl	8000f38 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fc38 	bl	8000f38 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	@ 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e207      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xc0>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc28 	bl	8000f38 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fc24 	bl	8000f38 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1f3      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	4b51      	ldr	r3, [pc, #324]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0xe8>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d063      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800171a:	4b4a      	ldr	r3, [pc, #296]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001726:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800172e:	2b08      	cmp	r3, #8
 8001730:	d11c      	bne.n	800176c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001732:	4b44      	ldr	r3, [pc, #272]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d116      	bne.n	800176c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	4b41      	ldr	r3, [pc, #260]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x152>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1c7      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4937      	ldr	r1, [pc, #220]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	e03a      	b.n	80017e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001774:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <HAL_RCC_OscConfig+0x244>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fbdd 	bl	8000f38 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff fbd9 	bl	8000f38 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e1a8      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001794:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b28      	ldr	r3, [pc, #160]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4925      	ldr	r1, [pc, #148]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <HAL_RCC_OscConfig+0x244>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fbbc 	bl	8000f38 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c4:	f7ff fbb8 	bl	8000f38 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e187      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d036      	beq.n	800185c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d016      	beq.n	8001824 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_RCC_OscConfig+0x248>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff fb9c 	bl	8000f38 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff fb98 	bl	8000f38 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e167      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_RCC_OscConfig+0x240>)
 8001818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x200>
 8001822:	e01b      	b.n	800185c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_RCC_OscConfig+0x248>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff fb85 	bl	8000f38 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001830:	e00e      	b.n	8001850 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001832:	f7ff fb81 	bl	8000f38 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d907      	bls.n	8001850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e150      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
 8001844:	40023800 	.word	0x40023800
 8001848:	42470000 	.word	0x42470000
 800184c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	4b88      	ldr	r3, [pc, #544]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1ea      	bne.n	8001832 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8097 	beq.w	8001998 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186e:	4b81      	ldr	r3, [pc, #516]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10f      	bne.n	800189a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	4a7c      	ldr	r2, [pc, #496]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	@ 0x40
 800188a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001896:	2301      	movs	r3, #1
 8001898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	4b77      	ldr	r3, [pc, #476]	@ (8001a78 <HAL_RCC_OscConfig+0x474>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d118      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a6:	4b74      	ldr	r3, [pc, #464]	@ (8001a78 <HAL_RCC_OscConfig+0x474>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a73      	ldr	r2, [pc, #460]	@ (8001a78 <HAL_RCC_OscConfig+0x474>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fb41 	bl	8000f38 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ba:	f7ff fb3d 	bl	8000f38 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e10c      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a78 <HAL_RCC_OscConfig+0x474>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x2ea>
 80018e0:	4b64      	ldr	r3, [pc, #400]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e4:	4a63      	ldr	r2, [pc, #396]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ec:	e01c      	b.n	8001928 <HAL_RCC_OscConfig+0x324>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x30c>
 80018f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6713      	str	r3, [r2, #112]	@ 0x70
 8001902:	4b5c      	ldr	r3, [pc, #368]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001906:	4a5b      	ldr	r2, [pc, #364]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6713      	str	r3, [r2, #112]	@ 0x70
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0x324>
 8001910:	4b58      	ldr	r3, [pc, #352]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001914:	4a57      	ldr	r2, [pc, #348]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001916:	f023 0301 	bic.w	r3, r3, #1
 800191a:	6713      	str	r3, [r2, #112]	@ 0x70
 800191c:	4b55      	ldr	r3, [pc, #340]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001920:	4a54      	ldr	r2, [pc, #336]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001922:	f023 0304 	bic.w	r3, r3, #4
 8001926:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d015      	beq.n	800195c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff fb02 	bl	8000f38 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001936:	e00a      	b.n	800194e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001938:	f7ff fafe 	bl	8000f38 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e0cb      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194e:	4b49      	ldr	r3, [pc, #292]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0ee      	beq.n	8001938 <HAL_RCC_OscConfig+0x334>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195c:	f7ff faec 	bl	8000f38 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001962:	e00a      	b.n	800197a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001964:	f7ff fae8 	bl	8000f38 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e0b5      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ee      	bne.n	8001964 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198c:	4b39      	ldr	r3, [pc, #228]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	4a38      	ldr	r2, [pc, #224]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001996:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80a1 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019a2:	4b34      	ldr	r3, [pc, #208]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d05c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d141      	bne.n	8001a3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b6:	4b31      	ldr	r3, [pc, #196]	@ (8001a7c <HAL_RCC_OscConfig+0x478>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fabc 	bl	8000f38 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff fab8 	bl	8000f38 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e087      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	019b      	lsls	r3, r3, #6
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	3b01      	subs	r3, #1
 80019fc:	041b      	lsls	r3, r3, #16
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	491b      	ldr	r1, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_RCC_OscConfig+0x478>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa91 	bl	8000f38 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff fa8d 	bl	8000f38 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e05c      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x416>
 8001a38:	e054      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_RCC_OscConfig+0x478>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fa7a 	bl	8000f38 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff fa76 	bl	8000f38 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e045      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x444>
 8001a66:	e03d      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d107      	bne.n	8001a80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e038      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <HAL_RCC_OscConfig+0x4ec>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d028      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d121      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d11a      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ab6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d111      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ada:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0cc      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b68      	ldr	r3, [pc, #416]	@ (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d90c      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b65      	ldr	r3, [pc, #404]	@ (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b63      	ldr	r3, [pc, #396]	@ (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0b8      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b48:	4b59      	ldr	r3, [pc, #356]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a58      	ldr	r2, [pc, #352]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b60:	4b53      	ldr	r3, [pc, #332]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a52      	ldr	r2, [pc, #328]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6c:	4b50      	ldr	r3, [pc, #320]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	494d      	ldr	r1, [pc, #308]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d044      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b47      	ldr	r3, [pc, #284]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d119      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e07f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e06f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e067      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b37      	ldr	r3, [pc, #220]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4934      	ldr	r1, [pc, #208]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	f7ff f9a8 	bl	8000f38 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff f9a4 	bl	8000f38 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e04f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d20c      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e032      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4916      	ldr	r1, [pc, #88]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	490e      	ldr	r1, [pc, #56]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c7a:	f000 f821 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	490a      	ldr	r1, [pc, #40]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	5ccb      	ldrb	r3, [r1, r3]
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f908 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	080047dc 	.word	0x080047dc
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	b094      	sub	sp, #80	@ 0x50
 8001cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ccc:	2300      	movs	r3, #0
 8001cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd8:	4b79      	ldr	r3, [pc, #484]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d00d      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	f200 80e1 	bhi.w	8001eac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001cf2:	e0db      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cf4:	4b73      	ldr	r3, [pc, #460]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001cf8:	e0db      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cfa:	4b73      	ldr	r3, [pc, #460]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cfe:	e0d8      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d00:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d08:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d063      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d32:	4622      	mov	r2, r4
 8001d34:	462b      	mov	r3, r5
 8001d36:	f04f 0000 	mov.w	r0, #0
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	0159      	lsls	r1, r3, #5
 8001d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d44:	0150      	lsls	r0, r2, #5
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	1a51      	subs	r1, r2, r1
 8001d4e:	6139      	str	r1, [r7, #16]
 8001d50:	4629      	mov	r1, r5
 8001d52:	eb63 0301 	sbc.w	r3, r3, r1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d64:	4659      	mov	r1, fp
 8001d66:	018b      	lsls	r3, r1, #6
 8001d68:	4651      	mov	r1, sl
 8001d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d6e:	4651      	mov	r1, sl
 8001d70:	018a      	lsls	r2, r1, #6
 8001d72:	4651      	mov	r1, sl
 8001d74:	ebb2 0801 	subs.w	r8, r2, r1
 8001d78:	4659      	mov	r1, fp
 8001d7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d92:	4690      	mov	r8, r2
 8001d94:	4699      	mov	r9, r3
 8001d96:	4623      	mov	r3, r4
 8001d98:	eb18 0303 	adds.w	r3, r8, r3
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	462b      	mov	r3, r5
 8001da0:	eb49 0303 	adc.w	r3, r9, r3
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001db2:	4629      	mov	r1, r5
 8001db4:	024b      	lsls	r3, r1, #9
 8001db6:	4621      	mov	r1, r4
 8001db8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	024a      	lsls	r2, r1, #9
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dd0:	f7fe fa56 	bl	8000280 <__aeabi_uldivmod>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4613      	mov	r3, r2
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ddc:	e058      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dde:	4b38      	ldr	r3, [pc, #224]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	2200      	movs	r2, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	4611      	mov	r1, r2
 8001dea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dee:	623b      	str	r3, [r7, #32]
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001df8:	4642      	mov	r2, r8
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	f04f 0000 	mov.w	r0, #0
 8001e00:	f04f 0100 	mov.w	r1, #0
 8001e04:	0159      	lsls	r1, r3, #5
 8001e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e0a:	0150      	lsls	r0, r2, #5
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4641      	mov	r1, r8
 8001e12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e16:	4649      	mov	r1, r9
 8001e18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e30:	ebb2 040a 	subs.w	r4, r2, sl
 8001e34:	eb63 050b 	sbc.w	r5, r3, fp
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	00eb      	lsls	r3, r5, #3
 8001e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e46:	00e2      	lsls	r2, r4, #3
 8001e48:	4614      	mov	r4, r2
 8001e4a:	461d      	mov	r5, r3
 8001e4c:	4643      	mov	r3, r8
 8001e4e:	18e3      	adds	r3, r4, r3
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	464b      	mov	r3, r9
 8001e54:	eb45 0303 	adc.w	r3, r5, r3
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e66:	4629      	mov	r1, r5
 8001e68:	028b      	lsls	r3, r1, #10
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e70:	4621      	mov	r1, r4
 8001e72:	028a      	lsls	r2, r1, #10
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	61fa      	str	r2, [r7, #28]
 8001e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e84:	f7fe f9fc 	bl	8000280 <__aeabi_uldivmod>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001ea0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eaa:	e002      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3750      	adds	r7, #80	@ 0x50
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	007a1200 	.word	0x007a1200

08001ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ee8:	f7ff fff0 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0a9b      	lsrs	r3, r3, #10
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4903      	ldr	r1, [pc, #12]	@ (8001f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	080047ec 	.word	0x080047ec

08001f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f10:	f7ff ffdc 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0b5b      	lsrs	r3, r3, #13
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4903      	ldr	r1, [pc, #12]	@ (8001f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	080047ec 	.word	0x080047ec

08001f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e041      	b.n	8001fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fda4 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f000 fa70 	bl	8002458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d001      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e044      	b.n	8002076 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1e      	ldr	r2, [pc, #120]	@ (8002084 <HAL_TIM_Base_Start_IT+0xb0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d018      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x6c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002016:	d013      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x6c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1a      	ldr	r2, [pc, #104]	@ (8002088 <HAL_TIM_Base_Start_IT+0xb4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00e      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x6c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a19      	ldr	r2, [pc, #100]	@ (800208c <HAL_TIM_Base_Start_IT+0xb8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d009      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x6c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a17      	ldr	r2, [pc, #92]	@ (8002090 <HAL_TIM_Base_Start_IT+0xbc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x6c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a16      	ldr	r2, [pc, #88]	@ (8002094 <HAL_TIM_Base_Start_IT+0xc0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d010      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002062:	e007      	b.n	8002074 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40010000 	.word	0x40010000
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800
 8002090:	40000c00 	.word	0x40000c00
 8002094:	40014000 	.word	0x40014000

08002098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d020      	beq.n	80020fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0202 	mvn.w	r2, #2
 80020cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f999 	bl	800241a <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f98b 	bl	8002406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f99c 	bl	800242e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d020      	beq.n	8002148 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0204 	mvn.w	r2, #4
 8002118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f973 	bl	800241a <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f965 	bl	8002406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f976 	bl	800242e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d020      	beq.n	8002194 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01b      	beq.n	8002194 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0208 	mvn.w	r2, #8
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2204      	movs	r2, #4
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f94d 	bl	800241a <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f93f 	bl	8002406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f950 	bl	800242e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d020      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0210 	mvn.w	r2, #16
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2208      	movs	r2, #8
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f927 	bl	800241a <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f919 	bl	8002406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f92a 	bl	800242e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00c      	beq.n	8002204 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0201 	mvn.w	r2, #1
 80021fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe fa1a 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00c      	beq.n	8002228 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fab6 	bl	8002794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00c      	beq.n	800224c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f8fb 	bl	8002442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00c      	beq.n	8002270 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0220 	mvn.w	r2, #32
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa88 	bl	8002780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_TIM_ConfigClockSource+0x1c>
 8002290:	2302      	movs	r3, #2
 8002292:	e0b4      	b.n	80023fe <HAL_TIM_ConfigClockSource+0x186>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022cc:	d03e      	beq.n	800234c <HAL_TIM_ConfigClockSource+0xd4>
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022d2:	f200 8087 	bhi.w	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022da:	f000 8086 	beq.w	80023ea <HAL_TIM_ConfigClockSource+0x172>
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e2:	d87f      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b70      	cmp	r3, #112	@ 0x70
 80022e6:	d01a      	beq.n	800231e <HAL_TIM_ConfigClockSource+0xa6>
 80022e8:	2b70      	cmp	r3, #112	@ 0x70
 80022ea:	d87b      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b60      	cmp	r3, #96	@ 0x60
 80022ee:	d050      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x11a>
 80022f0:	2b60      	cmp	r3, #96	@ 0x60
 80022f2:	d877      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b50      	cmp	r3, #80	@ 0x50
 80022f6:	d03c      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0xfa>
 80022f8:	2b50      	cmp	r3, #80	@ 0x50
 80022fa:	d873      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022fc:	2b40      	cmp	r3, #64	@ 0x40
 80022fe:	d058      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002300:	2b40      	cmp	r3, #64	@ 0x40
 8002302:	d86f      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b30      	cmp	r3, #48	@ 0x30
 8002306:	d064      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002308:	2b30      	cmp	r3, #48	@ 0x30
 800230a:	d86b      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b20      	cmp	r3, #32
 800230e:	d060      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002310:	2b20      	cmp	r3, #32
 8002312:	d867      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d05c      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002318:	2b10      	cmp	r3, #16
 800231a:	d05a      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 800231c:	e062      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800232e:	f000 f999 	bl	8002664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	609a      	str	r2, [r3, #8]
      break;
 800234a:	e04f      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800235c:	f000 f982 	bl	8002664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800236e:	609a      	str	r2, [r3, #8]
      break;
 8002370:	e03c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800237e:	461a      	mov	r2, r3
 8002380:	f000 f8f6 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2150      	movs	r1, #80	@ 0x50
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f94f 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 8002390:	e02c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 f915 	bl	80025ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2160      	movs	r1, #96	@ 0x60
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f93f 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 80023b0:	e01c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023be:	461a      	mov	r2, r3
 80023c0:	f000 f8d6 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2140      	movs	r1, #64	@ 0x40
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f92f 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 80023d0:	e00c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f000 f926 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 80023e2:	e003      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e000      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3a      	ldr	r2, [pc, #232]	@ (8002554 <TIM_Base_SetConfig+0xfc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00f      	beq.n	8002490 <TIM_Base_SetConfig+0x38>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002476:	d00b      	beq.n	8002490 <TIM_Base_SetConfig+0x38>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a37      	ldr	r2, [pc, #220]	@ (8002558 <TIM_Base_SetConfig+0x100>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <TIM_Base_SetConfig+0x38>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a36      	ldr	r2, [pc, #216]	@ (800255c <TIM_Base_SetConfig+0x104>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <TIM_Base_SetConfig+0x38>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a35      	ldr	r2, [pc, #212]	@ (8002560 <TIM_Base_SetConfig+0x108>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d108      	bne.n	80024a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002554 <TIM_Base_SetConfig+0xfc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01b      	beq.n	80024e2 <TIM_Base_SetConfig+0x8a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b0:	d017      	beq.n	80024e2 <TIM_Base_SetConfig+0x8a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a28      	ldr	r2, [pc, #160]	@ (8002558 <TIM_Base_SetConfig+0x100>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <TIM_Base_SetConfig+0x8a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a27      	ldr	r2, [pc, #156]	@ (800255c <TIM_Base_SetConfig+0x104>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00f      	beq.n	80024e2 <TIM_Base_SetConfig+0x8a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a26      	ldr	r2, [pc, #152]	@ (8002560 <TIM_Base_SetConfig+0x108>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00b      	beq.n	80024e2 <TIM_Base_SetConfig+0x8a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a25      	ldr	r2, [pc, #148]	@ (8002564 <TIM_Base_SetConfig+0x10c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d007      	beq.n	80024e2 <TIM_Base_SetConfig+0x8a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a24      	ldr	r2, [pc, #144]	@ (8002568 <TIM_Base_SetConfig+0x110>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d003      	beq.n	80024e2 <TIM_Base_SetConfig+0x8a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a23      	ldr	r2, [pc, #140]	@ (800256c <TIM_Base_SetConfig+0x114>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d108      	bne.n	80024f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a0e      	ldr	r2, [pc, #56]	@ (8002554 <TIM_Base_SetConfig+0xfc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d103      	bne.n	8002528 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f023 0201 	bic.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	611a      	str	r2, [r3, #16]
  }
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40000400 	.word	0x40000400
 800255c:	40000800 	.word	0x40000800
 8002560:	40000c00 	.word	0x40000c00
 8002564:	40014000 	.word	0x40014000
 8002568:	40014400 	.word	0x40014400
 800256c:	40014800 	.word	0x40014800

08002570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0201 	bic.w	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800259a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f023 030a 	bic.w	r3, r3, #10
 80025ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b087      	sub	sp, #28
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f023 0210 	bic.w	r2, r3, #16
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	031b      	lsls	r3, r3, #12
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800260a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	621a      	str	r2, [r3, #32]
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	f043 0307 	orr.w	r3, r3, #7
 8002650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800267e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	021a      	lsls	r2, r3, #8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	431a      	orrs	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e050      	b.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1c      	ldr	r2, [pc, #112]	@ (800276c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d018      	beq.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002708:	d013      	beq.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a18      	ldr	r2, [pc, #96]	@ (8002770 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a16      	ldr	r2, [pc, #88]	@ (8002774 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a15      	ldr	r2, [pc, #84]	@ (8002778 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a13      	ldr	r2, [pc, #76]	@ (800277c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d10c      	bne.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	4313      	orrs	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40010000 	.word	0x40010000
 8002770:	40000400 	.word	0x40000400
 8002774:	40000800 	.word	0x40000800
 8002778:	40000c00 	.word	0x40000c00
 800277c:	40014000 	.word	0x40014000

08002780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e042      	b.n	8002840 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe f992 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	@ 0x24
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fdbd 	bl	800336c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	@ 0x28
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b20      	cmp	r3, #32
 8002866:	d175      	bne.n	8002954 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_UART_Transmit+0x2c>
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e06e      	b.n	8002956 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	@ 0x21
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002886:	f7fe fb57 	bl	8000f38 <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a0:	d108      	bne.n	80028b4 <HAL_UART_Transmit+0x6c>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e003      	b.n	80028bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028bc:	e02e      	b.n	800291c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2180      	movs	r1, #128	@ 0x80
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fb1f 	bl	8002f0c <UART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e03a      	b.n	8002956 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	3302      	adds	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	e007      	b.n	800290e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cb      	bne.n	80028be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	2140      	movs	r1, #64	@ 0x40
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 faeb 	bl	8002f0c <UART_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e006      	b.n	8002956 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	4613      	mov	r3, r2
 800296a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b20      	cmp	r3, #32
 8002976:	d112      	bne.n	800299e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_UART_Receive_IT+0x26>
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e00b      	b.n	80029a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	461a      	mov	r2, r3
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fb12 	bl	8002fbe <UART_Start_Receive_IT>
 800299a:	4603      	mov	r3, r0
 800299c:	e000      	b.n	80029a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b0ba      	sub	sp, #232	@ 0xe8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_UART_IRQHandler+0x66>
 80029fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fbf2 	bl	80031f0 <UART_Receive_IT>
      return;
 8002a0c:	e25b      	b.n	8002ec6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80de 	beq.w	8002bd4 <HAL_UART_IRQHandler+0x22c>
 8002a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80d1 	beq.w	8002bd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_UART_IRQHandler+0xae>
 8002a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_UART_IRQHandler+0xd2>
 8002a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f043 0202 	orr.w	r2, r3, #2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_UART_IRQHandler+0xf6>
 8002a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f043 0204 	orr.w	r2, r3, #4
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d011      	beq.n	8002ace <HAL_UART_IRQHandler+0x126>
 8002aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f043 0208 	orr.w	r2, r3, #8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 81f2 	beq.w	8002ebc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_UART_IRQHandler+0x14e>
 8002ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fb7d 	bl	80031f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b00:	2b40      	cmp	r3, #64	@ 0x40
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_UART_IRQHandler+0x17a>
 8002b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d04f      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa85 	bl	8003032 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b32:	2b40      	cmp	r3, #64	@ 0x40
 8002b34:	d141      	bne.n	8002bba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3314      	adds	r3, #20
 8002b3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b44:	e853 3f00 	ldrex	r3, [r3]
 8002b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1d9      	bne.n	8002b36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d013      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d88 <HAL_UART_IRQHandler+0x3e0>)
 8002b90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fb5b 	bl	8001252 <HAL_DMA_Abort_IT>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bac:	4610      	mov	r0, r2
 8002bae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb0:	e00e      	b.n	8002bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f994 	bl	8002ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	e00a      	b.n	8002bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f990 	bl	8002ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	e006      	b.n	8002bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f98c 	bl	8002ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002bce:	e175      	b.n	8002ebc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	bf00      	nop
    return;
 8002bd2:	e173      	b.n	8002ebc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f040 814f 	bne.w	8002e7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8148 	beq.w	8002e7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8141 	beq.w	8002e7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1a:	2b40      	cmp	r3, #64	@ 0x40
 8002c1c:	f040 80b6 	bne.w	8002d8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8145 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	f080 813e 	bcs.w	8002ec0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c56:	f000 8088 	beq.w	8002d6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	330c      	adds	r3, #12
 8002c82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1d9      	bne.n	8002c5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3314      	adds	r3, #20
 8002cc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e1      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3314      	adds	r3, #20
 8002ce8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cec:	e853 3f00 	ldrex	r3, [r3]
 8002cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e3      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d3a:	f023 0310 	bic.w	r3, r3, #16
 8002d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e3      	bne.n	8002d28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe fa04 	bl	8001172 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f8b7 	bl	8002ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d86:	e09b      	b.n	8002ec0 <HAL_UART_IRQHandler+0x518>
 8002d88:	080030f9 	.word	0x080030f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 808e 	beq.w	8002ec4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8089 	beq.w	8002ec4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002dd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002dd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1e3      	bne.n	8002db2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3314      	adds	r3, #20
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	623b      	str	r3, [r7, #32]
   return(result);
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3314      	adds	r3, #20
 8002e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e16:	e841 2300 	strex	r3, r2, [r1]
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e3      	bne.n	8002dea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0310 	bic.w	r3, r3, #16
 8002e46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e54:	61fa      	str	r2, [r7, #28]
 8002e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	69b9      	ldr	r1, [r7, #24]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	617b      	str	r3, [r7, #20]
   return(result);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e3      	bne.n	8002e30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e72:	4619      	mov	r1, r3
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f83d 	bl	8002ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e7a:	e023      	b.n	8002ec4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_UART_IRQHandler+0x4f4>
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f943 	bl	8003120 <UART_Transmit_IT>
    return;
 8002e9a:	e014      	b.n	8002ec6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x51e>
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f983 	bl	80031c0 <UART_EndTransmit_IT>
    return;
 8002eba:	e004      	b.n	8002ec6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002ebc:	bf00      	nop
 8002ebe:	e002      	b.n	8002ec6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ec0:	bf00      	nop
 8002ec2:	e000      	b.n	8002ec6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ec4:	bf00      	nop
  }
}
 8002ec6:	37e8      	adds	r7, #232	@ 0xe8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f1c:	e03b      	b.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d037      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	f7fe f807 	bl	8000f38 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	6a3a      	ldr	r2, [r7, #32]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e03a      	b.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d023      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b80      	cmp	r3, #128	@ 0x80
 8002f52:	d020      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b40      	cmp	r3, #64	@ 0x40
 8002f58:	d01d      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d116      	bne.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f857 	bl	8003032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2208      	movs	r2, #8
 8002f88:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00f      	b.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d0b4      	beq.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2222      	movs	r2, #34	@ 0x22
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003002:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0220 	orr.w	r2, r2, #32
 8003022:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003032:	b480      	push	{r7}
 8003034:	b095      	sub	sp, #84	@ 0x54
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	330c      	adds	r3, #12
 8003040:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800305a:	643a      	str	r2, [r7, #64]	@ 0x40
 800305c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e5      	bne.n	800303a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3314      	adds	r3, #20
 8003074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	61fb      	str	r3, [r7, #28]
   return(result);
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800308e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003090:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e5      	bne.n	800306e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d119      	bne.n	80030de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f023 0310 	bic.w	r3, r3, #16
 80030c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ca:	61ba      	str	r2, [r7, #24]
 80030cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6979      	ldr	r1, [r7, #20]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	613b      	str	r3, [r7, #16]
   return(result);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e5      	bne.n	80030aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030ec:	bf00      	nop
 80030ee:	3754      	adds	r7, #84	@ 0x54
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff fee4 	bl	8002ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b21      	cmp	r3, #33	@ 0x21
 8003132:	d13e      	bne.n	80031b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313c:	d114      	bne.n	8003168 <UART_Transmit_IT+0x48>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d110      	bne.n	8003168 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	621a      	str	r2, [r3, #32]
 8003166:	e008      	b.n	800317a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	1c59      	adds	r1, r3, #1
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6211      	str	r1, [r2, #32]
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29b      	uxth	r3, r3
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	4619      	mov	r1, r3
 8003188:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800319c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fe73 	bl	8002ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08c      	sub	sp, #48	@ 0x30
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b22      	cmp	r3, #34	@ 0x22
 8003202:	f040 80ae 	bne.w	8003362 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320e:	d117      	bne.n	8003240 <UART_Receive_IT+0x50>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d113      	bne.n	8003240 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322e:	b29a      	uxth	r2, r3
 8003230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003232:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	1c9a      	adds	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	629a      	str	r2, [r3, #40]	@ 0x28
 800323e:	e026      	b.n	800328e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003246:	2300      	movs	r3, #0
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003252:	d007      	beq.n	8003264 <UART_Receive_IT+0x74>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <UART_Receive_IT+0x82>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e008      	b.n	8003284 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800327e:	b2da      	uxtb	r2, r3
 8003280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003282:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29b      	uxth	r3, r3
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4619      	mov	r1, r3
 800329c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d15d      	bne.n	800335e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0220 	bic.w	r2, r2, #32
 80032b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d135      	bne.n	8003354 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	613b      	str	r3, [r7, #16]
   return(result);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f023 0310 	bic.w	r3, r3, #16
 8003304:	627b      	str	r3, [r7, #36]	@ 0x24
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330e:	623a      	str	r2, [r7, #32]
 8003310:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	69f9      	ldr	r1, [r7, #28]
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	61bb      	str	r3, [r7, #24]
   return(result);
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b10      	cmp	r3, #16
 800332e:	d10a      	bne.n	8003346 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fdd1 	bl	8002ef4 <HAL_UARTEx_RxEventCallback>
 8003352:	e002      	b.n	800335a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fd f90b 	bl	8000570 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e002      	b.n	8003364 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e000      	b.n	8003364 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003362:	2302      	movs	r3, #2
  }
}
 8003364:	4618      	mov	r0, r3
 8003366:	3730      	adds	r7, #48	@ 0x30
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800336c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003370:	b0c0      	sub	sp, #256	@ 0x100
 8003372:	af00      	add	r7, sp, #0
 8003374:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	68d9      	ldr	r1, [r3, #12]
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	ea40 0301 	orr.w	r3, r0, r1
 8003394:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033c4:	f021 010c 	bic.w	r1, r1, #12
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033d2:	430b      	orrs	r3, r1
 80033d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e6:	6999      	ldr	r1, [r3, #24]
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	ea40 0301 	orr.w	r3, r0, r1
 80033f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003638 <UART_SetConfig+0x2cc>)
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d005      	beq.n	800340c <UART_SetConfig+0xa0>
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b8d      	ldr	r3, [pc, #564]	@ (800363c <UART_SetConfig+0x2d0>)
 8003408:	429a      	cmp	r2, r3
 800340a:	d104      	bne.n	8003416 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800340c:	f7fe fd7e 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 8003410:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003414:	e003      	b.n	800341e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003416:	f7fe fd65 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 800341a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003428:	f040 810c 	bne.w	8003644 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800342c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003430:	2200      	movs	r2, #0
 8003432:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003436:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800343a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800343e:	4622      	mov	r2, r4
 8003440:	462b      	mov	r3, r5
 8003442:	1891      	adds	r1, r2, r2
 8003444:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003446:	415b      	adcs	r3, r3
 8003448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800344a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800344e:	4621      	mov	r1, r4
 8003450:	eb12 0801 	adds.w	r8, r2, r1
 8003454:	4629      	mov	r1, r5
 8003456:	eb43 0901 	adc.w	r9, r3, r1
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800346e:	4690      	mov	r8, r2
 8003470:	4699      	mov	r9, r3
 8003472:	4623      	mov	r3, r4
 8003474:	eb18 0303 	adds.w	r3, r8, r3
 8003478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800347c:	462b      	mov	r3, r5
 800347e:	eb49 0303 	adc.w	r3, r9, r3
 8003482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003492:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003496:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800349a:	460b      	mov	r3, r1
 800349c:	18db      	adds	r3, r3, r3
 800349e:	653b      	str	r3, [r7, #80]	@ 0x50
 80034a0:	4613      	mov	r3, r2
 80034a2:	eb42 0303 	adc.w	r3, r2, r3
 80034a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80034a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034b0:	f7fc fee6 	bl	8000280 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4b61      	ldr	r3, [pc, #388]	@ (8003640 <UART_SetConfig+0x2d4>)
 80034ba:	fba3 2302 	umull	r2, r3, r3, r2
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	011c      	lsls	r4, r3, #4
 80034c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034d4:	4642      	mov	r2, r8
 80034d6:	464b      	mov	r3, r9
 80034d8:	1891      	adds	r1, r2, r2
 80034da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034dc:	415b      	adcs	r3, r3
 80034de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034e4:	4641      	mov	r1, r8
 80034e6:	eb12 0a01 	adds.w	sl, r2, r1
 80034ea:	4649      	mov	r1, r9
 80034ec:	eb43 0b01 	adc.w	fp, r3, r1
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003504:	4692      	mov	sl, r2
 8003506:	469b      	mov	fp, r3
 8003508:	4643      	mov	r3, r8
 800350a:	eb1a 0303 	adds.w	r3, sl, r3
 800350e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003512:	464b      	mov	r3, r9
 8003514:	eb4b 0303 	adc.w	r3, fp, r3
 8003518:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003528:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800352c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003530:	460b      	mov	r3, r1
 8003532:	18db      	adds	r3, r3, r3
 8003534:	643b      	str	r3, [r7, #64]	@ 0x40
 8003536:	4613      	mov	r3, r2
 8003538:	eb42 0303 	adc.w	r3, r2, r3
 800353c:	647b      	str	r3, [r7, #68]	@ 0x44
 800353e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003542:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003546:	f7fc fe9b 	bl	8000280 <__aeabi_uldivmod>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4611      	mov	r1, r2
 8003550:	4b3b      	ldr	r3, [pc, #236]	@ (8003640 <UART_SetConfig+0x2d4>)
 8003552:	fba3 2301 	umull	r2, r3, r3, r1
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2264      	movs	r2, #100	@ 0x64
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	1acb      	subs	r3, r1, r3
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003566:	4b36      	ldr	r3, [pc, #216]	@ (8003640 <UART_SetConfig+0x2d4>)
 8003568:	fba3 2302 	umull	r2, r3, r3, r2
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003574:	441c      	add	r4, r3
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003580:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003584:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003588:	4642      	mov	r2, r8
 800358a:	464b      	mov	r3, r9
 800358c:	1891      	adds	r1, r2, r2
 800358e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003590:	415b      	adcs	r3, r3
 8003592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003598:	4641      	mov	r1, r8
 800359a:	1851      	adds	r1, r2, r1
 800359c:	6339      	str	r1, [r7, #48]	@ 0x30
 800359e:	4649      	mov	r1, r9
 80035a0:	414b      	adcs	r3, r1
 80035a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035b0:	4659      	mov	r1, fp
 80035b2:	00cb      	lsls	r3, r1, #3
 80035b4:	4651      	mov	r1, sl
 80035b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ba:	4651      	mov	r1, sl
 80035bc:	00ca      	lsls	r2, r1, #3
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	4642      	mov	r2, r8
 80035c6:	189b      	adds	r3, r3, r2
 80035c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035cc:	464b      	mov	r3, r9
 80035ce:	460a      	mov	r2, r1
 80035d0:	eb42 0303 	adc.w	r3, r2, r3
 80035d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035ec:	460b      	mov	r3, r1
 80035ee:	18db      	adds	r3, r3, r3
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f2:	4613      	mov	r3, r2
 80035f4:	eb42 0303 	adc.w	r3, r2, r3
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003602:	f7fc fe3d 	bl	8000280 <__aeabi_uldivmod>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <UART_SetConfig+0x2d4>)
 800360c:	fba3 1302 	umull	r1, r3, r3, r2
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	2164      	movs	r1, #100	@ 0x64
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	3332      	adds	r3, #50	@ 0x32
 800361e:	4a08      	ldr	r2, [pc, #32]	@ (8003640 <UART_SetConfig+0x2d4>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	f003 0207 	and.w	r2, r3, #7
 800362a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4422      	add	r2, r4
 8003632:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003634:	e106      	b.n	8003844 <UART_SetConfig+0x4d8>
 8003636:	bf00      	nop
 8003638:	40011000 	.word	0x40011000
 800363c:	40011400 	.word	0x40011400
 8003640:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003648:	2200      	movs	r2, #0
 800364a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800364e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003652:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003656:	4642      	mov	r2, r8
 8003658:	464b      	mov	r3, r9
 800365a:	1891      	adds	r1, r2, r2
 800365c:	6239      	str	r1, [r7, #32]
 800365e:	415b      	adcs	r3, r3
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
 8003662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003666:	4641      	mov	r1, r8
 8003668:	1854      	adds	r4, r2, r1
 800366a:	4649      	mov	r1, r9
 800366c:	eb43 0501 	adc.w	r5, r3, r1
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	00eb      	lsls	r3, r5, #3
 800367a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800367e:	00e2      	lsls	r2, r4, #3
 8003680:	4614      	mov	r4, r2
 8003682:	461d      	mov	r5, r3
 8003684:	4643      	mov	r3, r8
 8003686:	18e3      	adds	r3, r4, r3
 8003688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800368c:	464b      	mov	r3, r9
 800368e:	eb45 0303 	adc.w	r3, r5, r3
 8003692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036b2:	4629      	mov	r1, r5
 80036b4:	008b      	lsls	r3, r1, #2
 80036b6:	4621      	mov	r1, r4
 80036b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036bc:	4621      	mov	r1, r4
 80036be:	008a      	lsls	r2, r1, #2
 80036c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036c4:	f7fc fddc 	bl	8000280 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4b60      	ldr	r3, [pc, #384]	@ (8003850 <UART_SetConfig+0x4e4>)
 80036ce:	fba3 2302 	umull	r2, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	011c      	lsls	r4, r3, #4
 80036d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036e8:	4642      	mov	r2, r8
 80036ea:	464b      	mov	r3, r9
 80036ec:	1891      	adds	r1, r2, r2
 80036ee:	61b9      	str	r1, [r7, #24]
 80036f0:	415b      	adcs	r3, r3
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f8:	4641      	mov	r1, r8
 80036fa:	1851      	adds	r1, r2, r1
 80036fc:	6139      	str	r1, [r7, #16]
 80036fe:	4649      	mov	r1, r9
 8003700:	414b      	adcs	r3, r1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003710:	4659      	mov	r1, fp
 8003712:	00cb      	lsls	r3, r1, #3
 8003714:	4651      	mov	r1, sl
 8003716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371a:	4651      	mov	r1, sl
 800371c:	00ca      	lsls	r2, r1, #3
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	4603      	mov	r3, r0
 8003724:	4642      	mov	r2, r8
 8003726:	189b      	adds	r3, r3, r2
 8003728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800372c:	464b      	mov	r3, r9
 800372e:	460a      	mov	r2, r1
 8003730:	eb42 0303 	adc.w	r3, r2, r3
 8003734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003742:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003750:	4649      	mov	r1, r9
 8003752:	008b      	lsls	r3, r1, #2
 8003754:	4641      	mov	r1, r8
 8003756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375a:	4641      	mov	r1, r8
 800375c:	008a      	lsls	r2, r1, #2
 800375e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003762:	f7fc fd8d 	bl	8000280 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4611      	mov	r1, r2
 800376c:	4b38      	ldr	r3, [pc, #224]	@ (8003850 <UART_SetConfig+0x4e4>)
 800376e:	fba3 2301 	umull	r2, r3, r3, r1
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2264      	movs	r2, #100	@ 0x64
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	1acb      	subs	r3, r1, r3
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	3332      	adds	r3, #50	@ 0x32
 8003780:	4a33      	ldr	r2, [pc, #204]	@ (8003850 <UART_SetConfig+0x4e4>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800378c:	441c      	add	r4, r3
 800378e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003792:	2200      	movs	r2, #0
 8003794:	673b      	str	r3, [r7, #112]	@ 0x70
 8003796:	677a      	str	r2, [r7, #116]	@ 0x74
 8003798:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	1891      	adds	r1, r2, r2
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	415b      	adcs	r3, r3
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ac:	4641      	mov	r1, r8
 80037ae:	1851      	adds	r1, r2, r1
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	4649      	mov	r1, r9
 80037b4:	414b      	adcs	r3, r1
 80037b6:	607b      	str	r3, [r7, #4]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037c4:	4659      	mov	r1, fp
 80037c6:	00cb      	lsls	r3, r1, #3
 80037c8:	4651      	mov	r1, sl
 80037ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ce:	4651      	mov	r1, sl
 80037d0:	00ca      	lsls	r2, r1, #3
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	4642      	mov	r2, r8
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037de:	464b      	mov	r3, r9
 80037e0:	460a      	mov	r2, r1
 80037e2:	eb42 0303 	adc.w	r3, r2, r3
 80037e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80037f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003800:	4649      	mov	r1, r9
 8003802:	008b      	lsls	r3, r1, #2
 8003804:	4641      	mov	r1, r8
 8003806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380a:	4641      	mov	r1, r8
 800380c:	008a      	lsls	r2, r1, #2
 800380e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003812:	f7fc fd35 	bl	8000280 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <UART_SetConfig+0x4e4>)
 800381c:	fba3 1302 	umull	r1, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	2164      	movs	r1, #100	@ 0x64
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	3332      	adds	r3, #50	@ 0x32
 800382e:	4a08      	ldr	r2, [pc, #32]	@ (8003850 <UART_SetConfig+0x4e4>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	f003 020f 	and.w	r2, r3, #15
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4422      	add	r2, r4
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800384a:	46bd      	mov	sp, r7
 800384c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003850:	51eb851f 	.word	0x51eb851f

08003854 <std>:
 8003854:	2300      	movs	r3, #0
 8003856:	b510      	push	{r4, lr}
 8003858:	4604      	mov	r4, r0
 800385a:	e9c0 3300 	strd	r3, r3, [r0]
 800385e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003862:	6083      	str	r3, [r0, #8]
 8003864:	8181      	strh	r1, [r0, #12]
 8003866:	6643      	str	r3, [r0, #100]	@ 0x64
 8003868:	81c2      	strh	r2, [r0, #14]
 800386a:	6183      	str	r3, [r0, #24]
 800386c:	4619      	mov	r1, r3
 800386e:	2208      	movs	r2, #8
 8003870:	305c      	adds	r0, #92	@ 0x5c
 8003872:	f000 f9f9 	bl	8003c68 <memset>
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <std+0x58>)
 8003878:	6263      	str	r3, [r4, #36]	@ 0x24
 800387a:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <std+0x5c>)
 800387c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <std+0x60>)
 8003880:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003882:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <std+0x64>)
 8003884:	6323      	str	r3, [r4, #48]	@ 0x30
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <std+0x68>)
 8003888:	6224      	str	r4, [r4, #32]
 800388a:	429c      	cmp	r4, r3
 800388c:	d006      	beq.n	800389c <std+0x48>
 800388e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003892:	4294      	cmp	r4, r2
 8003894:	d002      	beq.n	800389c <std+0x48>
 8003896:	33d0      	adds	r3, #208	@ 0xd0
 8003898:	429c      	cmp	r4, r3
 800389a:	d105      	bne.n	80038a8 <std+0x54>
 800389c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a4:	f000 ba58 	b.w	8003d58 <__retarget_lock_init_recursive>
 80038a8:	bd10      	pop	{r4, pc}
 80038aa:	bf00      	nop
 80038ac:	08003ab9 	.word	0x08003ab9
 80038b0:	08003adb 	.word	0x08003adb
 80038b4:	08003b13 	.word	0x08003b13
 80038b8:	08003b37 	.word	0x08003b37
 80038bc:	2000023c 	.word	0x2000023c

080038c0 <stdio_exit_handler>:
 80038c0:	4a02      	ldr	r2, [pc, #8]	@ (80038cc <stdio_exit_handler+0xc>)
 80038c2:	4903      	ldr	r1, [pc, #12]	@ (80038d0 <stdio_exit_handler+0x10>)
 80038c4:	4803      	ldr	r0, [pc, #12]	@ (80038d4 <stdio_exit_handler+0x14>)
 80038c6:	f000 b869 	b.w	800399c <_fwalk_sglue>
 80038ca:	bf00      	nop
 80038cc:	2000000c 	.word	0x2000000c
 80038d0:	080045f9 	.word	0x080045f9
 80038d4:	2000001c 	.word	0x2000001c

080038d8 <cleanup_stdio>:
 80038d8:	6841      	ldr	r1, [r0, #4]
 80038da:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <cleanup_stdio+0x34>)
 80038dc:	4299      	cmp	r1, r3
 80038de:	b510      	push	{r4, lr}
 80038e0:	4604      	mov	r4, r0
 80038e2:	d001      	beq.n	80038e8 <cleanup_stdio+0x10>
 80038e4:	f000 fe88 	bl	80045f8 <_fflush_r>
 80038e8:	68a1      	ldr	r1, [r4, #8]
 80038ea:	4b09      	ldr	r3, [pc, #36]	@ (8003910 <cleanup_stdio+0x38>)
 80038ec:	4299      	cmp	r1, r3
 80038ee:	d002      	beq.n	80038f6 <cleanup_stdio+0x1e>
 80038f0:	4620      	mov	r0, r4
 80038f2:	f000 fe81 	bl	80045f8 <_fflush_r>
 80038f6:	68e1      	ldr	r1, [r4, #12]
 80038f8:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <cleanup_stdio+0x3c>)
 80038fa:	4299      	cmp	r1, r3
 80038fc:	d004      	beq.n	8003908 <cleanup_stdio+0x30>
 80038fe:	4620      	mov	r0, r4
 8003900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003904:	f000 be78 	b.w	80045f8 <_fflush_r>
 8003908:	bd10      	pop	{r4, pc}
 800390a:	bf00      	nop
 800390c:	2000023c 	.word	0x2000023c
 8003910:	200002a4 	.word	0x200002a4
 8003914:	2000030c 	.word	0x2000030c

08003918 <global_stdio_init.part.0>:
 8003918:	b510      	push	{r4, lr}
 800391a:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <global_stdio_init.part.0+0x30>)
 800391c:	4c0b      	ldr	r4, [pc, #44]	@ (800394c <global_stdio_init.part.0+0x34>)
 800391e:	4a0c      	ldr	r2, [pc, #48]	@ (8003950 <global_stdio_init.part.0+0x38>)
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	4620      	mov	r0, r4
 8003924:	2200      	movs	r2, #0
 8003926:	2104      	movs	r1, #4
 8003928:	f7ff ff94 	bl	8003854 <std>
 800392c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003930:	2201      	movs	r2, #1
 8003932:	2109      	movs	r1, #9
 8003934:	f7ff ff8e 	bl	8003854 <std>
 8003938:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800393c:	2202      	movs	r2, #2
 800393e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003942:	2112      	movs	r1, #18
 8003944:	f7ff bf86 	b.w	8003854 <std>
 8003948:	20000374 	.word	0x20000374
 800394c:	2000023c 	.word	0x2000023c
 8003950:	080038c1 	.word	0x080038c1

08003954 <__sfp_lock_acquire>:
 8003954:	4801      	ldr	r0, [pc, #4]	@ (800395c <__sfp_lock_acquire+0x8>)
 8003956:	f000 ba00 	b.w	8003d5a <__retarget_lock_acquire_recursive>
 800395a:	bf00      	nop
 800395c:	2000037d 	.word	0x2000037d

08003960 <__sfp_lock_release>:
 8003960:	4801      	ldr	r0, [pc, #4]	@ (8003968 <__sfp_lock_release+0x8>)
 8003962:	f000 b9fb 	b.w	8003d5c <__retarget_lock_release_recursive>
 8003966:	bf00      	nop
 8003968:	2000037d 	.word	0x2000037d

0800396c <__sinit>:
 800396c:	b510      	push	{r4, lr}
 800396e:	4604      	mov	r4, r0
 8003970:	f7ff fff0 	bl	8003954 <__sfp_lock_acquire>
 8003974:	6a23      	ldr	r3, [r4, #32]
 8003976:	b11b      	cbz	r3, 8003980 <__sinit+0x14>
 8003978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800397c:	f7ff bff0 	b.w	8003960 <__sfp_lock_release>
 8003980:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <__sinit+0x28>)
 8003982:	6223      	str	r3, [r4, #32]
 8003984:	4b04      	ldr	r3, [pc, #16]	@ (8003998 <__sinit+0x2c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f5      	bne.n	8003978 <__sinit+0xc>
 800398c:	f7ff ffc4 	bl	8003918 <global_stdio_init.part.0>
 8003990:	e7f2      	b.n	8003978 <__sinit+0xc>
 8003992:	bf00      	nop
 8003994:	080038d9 	.word	0x080038d9
 8003998:	20000374 	.word	0x20000374

0800399c <_fwalk_sglue>:
 800399c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a0:	4607      	mov	r7, r0
 80039a2:	4688      	mov	r8, r1
 80039a4:	4614      	mov	r4, r2
 80039a6:	2600      	movs	r6, #0
 80039a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039ac:	f1b9 0901 	subs.w	r9, r9, #1
 80039b0:	d505      	bpl.n	80039be <_fwalk_sglue+0x22>
 80039b2:	6824      	ldr	r4, [r4, #0]
 80039b4:	2c00      	cmp	r4, #0
 80039b6:	d1f7      	bne.n	80039a8 <_fwalk_sglue+0xc>
 80039b8:	4630      	mov	r0, r6
 80039ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039be:	89ab      	ldrh	r3, [r5, #12]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d907      	bls.n	80039d4 <_fwalk_sglue+0x38>
 80039c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039c8:	3301      	adds	r3, #1
 80039ca:	d003      	beq.n	80039d4 <_fwalk_sglue+0x38>
 80039cc:	4629      	mov	r1, r5
 80039ce:	4638      	mov	r0, r7
 80039d0:	47c0      	blx	r8
 80039d2:	4306      	orrs	r6, r0
 80039d4:	3568      	adds	r5, #104	@ 0x68
 80039d6:	e7e9      	b.n	80039ac <_fwalk_sglue+0x10>

080039d8 <iprintf>:
 80039d8:	b40f      	push	{r0, r1, r2, r3}
 80039da:	b507      	push	{r0, r1, r2, lr}
 80039dc:	4906      	ldr	r1, [pc, #24]	@ (80039f8 <iprintf+0x20>)
 80039de:	ab04      	add	r3, sp, #16
 80039e0:	6808      	ldr	r0, [r1, #0]
 80039e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80039e6:	6881      	ldr	r1, [r0, #8]
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	f000 fadb 	bl	8003fa4 <_vfiprintf_r>
 80039ee:	b003      	add	sp, #12
 80039f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039f4:	b004      	add	sp, #16
 80039f6:	4770      	bx	lr
 80039f8:	20000018 	.word	0x20000018

080039fc <_puts_r>:
 80039fc:	6a03      	ldr	r3, [r0, #32]
 80039fe:	b570      	push	{r4, r5, r6, lr}
 8003a00:	6884      	ldr	r4, [r0, #8]
 8003a02:	4605      	mov	r5, r0
 8003a04:	460e      	mov	r6, r1
 8003a06:	b90b      	cbnz	r3, 8003a0c <_puts_r+0x10>
 8003a08:	f7ff ffb0 	bl	800396c <__sinit>
 8003a0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a0e:	07db      	lsls	r3, r3, #31
 8003a10:	d405      	bmi.n	8003a1e <_puts_r+0x22>
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	0598      	lsls	r0, r3, #22
 8003a16:	d402      	bmi.n	8003a1e <_puts_r+0x22>
 8003a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a1a:	f000 f99e 	bl	8003d5a <__retarget_lock_acquire_recursive>
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	0719      	lsls	r1, r3, #28
 8003a22:	d502      	bpl.n	8003a2a <_puts_r+0x2e>
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d135      	bne.n	8003a96 <_puts_r+0x9a>
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f000 f8c5 	bl	8003bbc <__swsetup_r>
 8003a32:	b380      	cbz	r0, 8003a96 <_puts_r+0x9a>
 8003a34:	f04f 35ff 	mov.w	r5, #4294967295
 8003a38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a3a:	07da      	lsls	r2, r3, #31
 8003a3c:	d405      	bmi.n	8003a4a <_puts_r+0x4e>
 8003a3e:	89a3      	ldrh	r3, [r4, #12]
 8003a40:	059b      	lsls	r3, r3, #22
 8003a42:	d402      	bmi.n	8003a4a <_puts_r+0x4e>
 8003a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a46:	f000 f989 	bl	8003d5c <__retarget_lock_release_recursive>
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	bd70      	pop	{r4, r5, r6, pc}
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	da04      	bge.n	8003a5c <_puts_r+0x60>
 8003a52:	69a2      	ldr	r2, [r4, #24]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dc17      	bgt.n	8003a88 <_puts_r+0x8c>
 8003a58:	290a      	cmp	r1, #10
 8003a5a:	d015      	beq.n	8003a88 <_puts_r+0x8c>
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	6022      	str	r2, [r4, #0]
 8003a62:	7019      	strb	r1, [r3, #0]
 8003a64:	68a3      	ldr	r3, [r4, #8]
 8003a66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	60a3      	str	r3, [r4, #8]
 8003a6e:	2900      	cmp	r1, #0
 8003a70:	d1ed      	bne.n	8003a4e <_puts_r+0x52>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	da11      	bge.n	8003a9a <_puts_r+0x9e>
 8003a76:	4622      	mov	r2, r4
 8003a78:	210a      	movs	r1, #10
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f000 f85f 	bl	8003b3e <__swbuf_r>
 8003a80:	3001      	adds	r0, #1
 8003a82:	d0d7      	beq.n	8003a34 <_puts_r+0x38>
 8003a84:	250a      	movs	r5, #10
 8003a86:	e7d7      	b.n	8003a38 <_puts_r+0x3c>
 8003a88:	4622      	mov	r2, r4
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f000 f857 	bl	8003b3e <__swbuf_r>
 8003a90:	3001      	adds	r0, #1
 8003a92:	d1e7      	bne.n	8003a64 <_puts_r+0x68>
 8003a94:	e7ce      	b.n	8003a34 <_puts_r+0x38>
 8003a96:	3e01      	subs	r6, #1
 8003a98:	e7e4      	b.n	8003a64 <_puts_r+0x68>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	6022      	str	r2, [r4, #0]
 8003aa0:	220a      	movs	r2, #10
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	e7ee      	b.n	8003a84 <_puts_r+0x88>
	...

08003aa8 <puts>:
 8003aa8:	4b02      	ldr	r3, [pc, #8]	@ (8003ab4 <puts+0xc>)
 8003aaa:	4601      	mov	r1, r0
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	f7ff bfa5 	b.w	80039fc <_puts_r>
 8003ab2:	bf00      	nop
 8003ab4:	20000018 	.word	0x20000018

08003ab8 <__sread>:
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	460c      	mov	r4, r1
 8003abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac0:	f000 f8fc 	bl	8003cbc <_read_r>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	bfab      	itete	ge
 8003ac8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003aca:	89a3      	ldrhlt	r3, [r4, #12]
 8003acc:	181b      	addge	r3, r3, r0
 8003ace:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ad2:	bfac      	ite	ge
 8003ad4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ad6:	81a3      	strhlt	r3, [r4, #12]
 8003ad8:	bd10      	pop	{r4, pc}

08003ada <__swrite>:
 8003ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ade:	461f      	mov	r7, r3
 8003ae0:	898b      	ldrh	r3, [r1, #12]
 8003ae2:	05db      	lsls	r3, r3, #23
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	4616      	mov	r6, r2
 8003aea:	d505      	bpl.n	8003af8 <__swrite+0x1e>
 8003aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af0:	2302      	movs	r3, #2
 8003af2:	2200      	movs	r2, #0
 8003af4:	f000 f8d0 	bl	8003c98 <_lseek_r>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003afe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b02:	81a3      	strh	r3, [r4, #12]
 8003b04:	4632      	mov	r2, r6
 8003b06:	463b      	mov	r3, r7
 8003b08:	4628      	mov	r0, r5
 8003b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0e:	f000 b8e7 	b.w	8003ce0 <_write_r>

08003b12 <__sseek>:
 8003b12:	b510      	push	{r4, lr}
 8003b14:	460c      	mov	r4, r1
 8003b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1a:	f000 f8bd 	bl	8003c98 <_lseek_r>
 8003b1e:	1c43      	adds	r3, r0, #1
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	bf15      	itete	ne
 8003b24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b2e:	81a3      	strheq	r3, [r4, #12]
 8003b30:	bf18      	it	ne
 8003b32:	81a3      	strhne	r3, [r4, #12]
 8003b34:	bd10      	pop	{r4, pc}

08003b36 <__sclose>:
 8003b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3a:	f000 b89d 	b.w	8003c78 <_close_r>

08003b3e <__swbuf_r>:
 8003b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b40:	460e      	mov	r6, r1
 8003b42:	4614      	mov	r4, r2
 8003b44:	4605      	mov	r5, r0
 8003b46:	b118      	cbz	r0, 8003b50 <__swbuf_r+0x12>
 8003b48:	6a03      	ldr	r3, [r0, #32]
 8003b4a:	b90b      	cbnz	r3, 8003b50 <__swbuf_r+0x12>
 8003b4c:	f7ff ff0e 	bl	800396c <__sinit>
 8003b50:	69a3      	ldr	r3, [r4, #24]
 8003b52:	60a3      	str	r3, [r4, #8]
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	071a      	lsls	r2, r3, #28
 8003b58:	d501      	bpl.n	8003b5e <__swbuf_r+0x20>
 8003b5a:	6923      	ldr	r3, [r4, #16]
 8003b5c:	b943      	cbnz	r3, 8003b70 <__swbuf_r+0x32>
 8003b5e:	4621      	mov	r1, r4
 8003b60:	4628      	mov	r0, r5
 8003b62:	f000 f82b 	bl	8003bbc <__swsetup_r>
 8003b66:	b118      	cbz	r0, 8003b70 <__swbuf_r+0x32>
 8003b68:	f04f 37ff 	mov.w	r7, #4294967295
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	6922      	ldr	r2, [r4, #16]
 8003b74:	1a98      	subs	r0, r3, r2
 8003b76:	6963      	ldr	r3, [r4, #20]
 8003b78:	b2f6      	uxtb	r6, r6
 8003b7a:	4283      	cmp	r3, r0
 8003b7c:	4637      	mov	r7, r6
 8003b7e:	dc05      	bgt.n	8003b8c <__swbuf_r+0x4e>
 8003b80:	4621      	mov	r1, r4
 8003b82:	4628      	mov	r0, r5
 8003b84:	f000 fd38 	bl	80045f8 <_fflush_r>
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d1ed      	bne.n	8003b68 <__swbuf_r+0x2a>
 8003b8c:	68a3      	ldr	r3, [r4, #8]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	60a3      	str	r3, [r4, #8]
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	6022      	str	r2, [r4, #0]
 8003b98:	701e      	strb	r6, [r3, #0]
 8003b9a:	6962      	ldr	r2, [r4, #20]
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d004      	beq.n	8003bac <__swbuf_r+0x6e>
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	07db      	lsls	r3, r3, #31
 8003ba6:	d5e1      	bpl.n	8003b6c <__swbuf_r+0x2e>
 8003ba8:	2e0a      	cmp	r6, #10
 8003baa:	d1df      	bne.n	8003b6c <__swbuf_r+0x2e>
 8003bac:	4621      	mov	r1, r4
 8003bae:	4628      	mov	r0, r5
 8003bb0:	f000 fd22 	bl	80045f8 <_fflush_r>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d0d9      	beq.n	8003b6c <__swbuf_r+0x2e>
 8003bb8:	e7d6      	b.n	8003b68 <__swbuf_r+0x2a>
	...

08003bbc <__swsetup_r>:
 8003bbc:	b538      	push	{r3, r4, r5, lr}
 8003bbe:	4b29      	ldr	r3, [pc, #164]	@ (8003c64 <__swsetup_r+0xa8>)
 8003bc0:	4605      	mov	r5, r0
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	b118      	cbz	r0, 8003bd0 <__swsetup_r+0x14>
 8003bc8:	6a03      	ldr	r3, [r0, #32]
 8003bca:	b90b      	cbnz	r3, 8003bd0 <__swsetup_r+0x14>
 8003bcc:	f7ff fece 	bl	800396c <__sinit>
 8003bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd4:	0719      	lsls	r1, r3, #28
 8003bd6:	d422      	bmi.n	8003c1e <__swsetup_r+0x62>
 8003bd8:	06da      	lsls	r2, r3, #27
 8003bda:	d407      	bmi.n	8003bec <__swsetup_r+0x30>
 8003bdc:	2209      	movs	r2, #9
 8003bde:	602a      	str	r2, [r5, #0]
 8003be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003be4:	81a3      	strh	r3, [r4, #12]
 8003be6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bea:	e033      	b.n	8003c54 <__swsetup_r+0x98>
 8003bec:	0758      	lsls	r0, r3, #29
 8003bee:	d512      	bpl.n	8003c16 <__swsetup_r+0x5a>
 8003bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bf2:	b141      	cbz	r1, 8003c06 <__swsetup_r+0x4a>
 8003bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bf8:	4299      	cmp	r1, r3
 8003bfa:	d002      	beq.n	8003c02 <__swsetup_r+0x46>
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f000 f8af 	bl	8003d60 <_free_r>
 8003c02:	2300      	movs	r3, #0
 8003c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c0c:	81a3      	strh	r3, [r4, #12]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	6063      	str	r3, [r4, #4]
 8003c12:	6923      	ldr	r3, [r4, #16]
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	f043 0308 	orr.w	r3, r3, #8
 8003c1c:	81a3      	strh	r3, [r4, #12]
 8003c1e:	6923      	ldr	r3, [r4, #16]
 8003c20:	b94b      	cbnz	r3, 8003c36 <__swsetup_r+0x7a>
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2c:	d003      	beq.n	8003c36 <__swsetup_r+0x7a>
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 fd2f 	bl	8004694 <__smakebuf_r>
 8003c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c3a:	f013 0201 	ands.w	r2, r3, #1
 8003c3e:	d00a      	beq.n	8003c56 <__swsetup_r+0x9a>
 8003c40:	2200      	movs	r2, #0
 8003c42:	60a2      	str	r2, [r4, #8]
 8003c44:	6962      	ldr	r2, [r4, #20]
 8003c46:	4252      	negs	r2, r2
 8003c48:	61a2      	str	r2, [r4, #24]
 8003c4a:	6922      	ldr	r2, [r4, #16]
 8003c4c:	b942      	cbnz	r2, 8003c60 <__swsetup_r+0xa4>
 8003c4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c52:	d1c5      	bne.n	8003be0 <__swsetup_r+0x24>
 8003c54:	bd38      	pop	{r3, r4, r5, pc}
 8003c56:	0799      	lsls	r1, r3, #30
 8003c58:	bf58      	it	pl
 8003c5a:	6962      	ldrpl	r2, [r4, #20]
 8003c5c:	60a2      	str	r2, [r4, #8]
 8003c5e:	e7f4      	b.n	8003c4a <__swsetup_r+0x8e>
 8003c60:	2000      	movs	r0, #0
 8003c62:	e7f7      	b.n	8003c54 <__swsetup_r+0x98>
 8003c64:	20000018 	.word	0x20000018

08003c68 <memset>:
 8003c68:	4402      	add	r2, r0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d100      	bne.n	8003c72 <memset+0xa>
 8003c70:	4770      	bx	lr
 8003c72:	f803 1b01 	strb.w	r1, [r3], #1
 8003c76:	e7f9      	b.n	8003c6c <memset+0x4>

08003c78 <_close_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d06      	ldr	r5, [pc, #24]	@ (8003c94 <_close_r+0x1c>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4604      	mov	r4, r0
 8003c80:	4608      	mov	r0, r1
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	f7fd f84b 	bl	8000d1e <_close>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d102      	bne.n	8003c92 <_close_r+0x1a>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	b103      	cbz	r3, 8003c92 <_close_r+0x1a>
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	20000378 	.word	0x20000378

08003c98 <_lseek_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	4d07      	ldr	r5, [pc, #28]	@ (8003cb8 <_lseek_r+0x20>)
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	4608      	mov	r0, r1
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	602a      	str	r2, [r5, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f7fd f860 	bl	8000d6c <_lseek>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d102      	bne.n	8003cb6 <_lseek_r+0x1e>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	b103      	cbz	r3, 8003cb6 <_lseek_r+0x1e>
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	20000378 	.word	0x20000378

08003cbc <_read_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4d07      	ldr	r5, [pc, #28]	@ (8003cdc <_read_r+0x20>)
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	4608      	mov	r0, r1
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	602a      	str	r2, [r5, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f7fc ffee 	bl	8000cac <_read>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d102      	bne.n	8003cda <_read_r+0x1e>
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	b103      	cbz	r3, 8003cda <_read_r+0x1e>
 8003cd8:	6023      	str	r3, [r4, #0]
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	20000378 	.word	0x20000378

08003ce0 <_write_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	4d07      	ldr	r5, [pc, #28]	@ (8003d00 <_write_r+0x20>)
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	4611      	mov	r1, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	602a      	str	r2, [r5, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7fc fff9 	bl	8000ce6 <_write>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_write_r+0x1e>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_write_r+0x1e>
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	20000378 	.word	0x20000378

08003d04 <__errno>:
 8003d04:	4b01      	ldr	r3, [pc, #4]	@ (8003d0c <__errno+0x8>)
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000018 	.word	0x20000018

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4d0d      	ldr	r5, [pc, #52]	@ (8003d48 <__libc_init_array+0x38>)
 8003d14:	4c0d      	ldr	r4, [pc, #52]	@ (8003d4c <__libc_init_array+0x3c>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	4d0b      	ldr	r5, [pc, #44]	@ (8003d50 <__libc_init_array+0x40>)
 8003d22:	4c0c      	ldr	r4, [pc, #48]	@ (8003d54 <__libc_init_array+0x44>)
 8003d24:	f000 fd24 	bl	8004770 <_init>
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	08004830 	.word	0x08004830
 8003d4c:	08004830 	.word	0x08004830
 8003d50:	08004830 	.word	0x08004830
 8003d54:	08004834 	.word	0x08004834

08003d58 <__retarget_lock_init_recursive>:
 8003d58:	4770      	bx	lr

08003d5a <__retarget_lock_acquire_recursive>:
 8003d5a:	4770      	bx	lr

08003d5c <__retarget_lock_release_recursive>:
 8003d5c:	4770      	bx	lr
	...

08003d60 <_free_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	4605      	mov	r5, r0
 8003d64:	2900      	cmp	r1, #0
 8003d66:	d041      	beq.n	8003dec <_free_r+0x8c>
 8003d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d6c:	1f0c      	subs	r4, r1, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bfb8      	it	lt
 8003d72:	18e4      	addlt	r4, r4, r3
 8003d74:	f000 f8e0 	bl	8003f38 <__malloc_lock>
 8003d78:	4a1d      	ldr	r2, [pc, #116]	@ (8003df0 <_free_r+0x90>)
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	b933      	cbnz	r3, 8003d8c <_free_r+0x2c>
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	6014      	str	r4, [r2, #0]
 8003d82:	4628      	mov	r0, r5
 8003d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d88:	f000 b8dc 	b.w	8003f44 <__malloc_unlock>
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	d908      	bls.n	8003da2 <_free_r+0x42>
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	1821      	adds	r1, r4, r0
 8003d94:	428b      	cmp	r3, r1
 8003d96:	bf01      	itttt	eq
 8003d98:	6819      	ldreq	r1, [r3, #0]
 8003d9a:	685b      	ldreq	r3, [r3, #4]
 8003d9c:	1809      	addeq	r1, r1, r0
 8003d9e:	6021      	streq	r1, [r4, #0]
 8003da0:	e7ed      	b.n	8003d7e <_free_r+0x1e>
 8003da2:	461a      	mov	r2, r3
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	b10b      	cbz	r3, 8003dac <_free_r+0x4c>
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d9fa      	bls.n	8003da2 <_free_r+0x42>
 8003dac:	6811      	ldr	r1, [r2, #0]
 8003dae:	1850      	adds	r0, r2, r1
 8003db0:	42a0      	cmp	r0, r4
 8003db2:	d10b      	bne.n	8003dcc <_free_r+0x6c>
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	4401      	add	r1, r0
 8003db8:	1850      	adds	r0, r2, r1
 8003dba:	4283      	cmp	r3, r0
 8003dbc:	6011      	str	r1, [r2, #0]
 8003dbe:	d1e0      	bne.n	8003d82 <_free_r+0x22>
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	6053      	str	r3, [r2, #4]
 8003dc6:	4408      	add	r0, r1
 8003dc8:	6010      	str	r0, [r2, #0]
 8003dca:	e7da      	b.n	8003d82 <_free_r+0x22>
 8003dcc:	d902      	bls.n	8003dd4 <_free_r+0x74>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	602b      	str	r3, [r5, #0]
 8003dd2:	e7d6      	b.n	8003d82 <_free_r+0x22>
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	1821      	adds	r1, r4, r0
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	bf04      	itt	eq
 8003ddc:	6819      	ldreq	r1, [r3, #0]
 8003dde:	685b      	ldreq	r3, [r3, #4]
 8003de0:	6063      	str	r3, [r4, #4]
 8003de2:	bf04      	itt	eq
 8003de4:	1809      	addeq	r1, r1, r0
 8003de6:	6021      	streq	r1, [r4, #0]
 8003de8:	6054      	str	r4, [r2, #4]
 8003dea:	e7ca      	b.n	8003d82 <_free_r+0x22>
 8003dec:	bd38      	pop	{r3, r4, r5, pc}
 8003dee:	bf00      	nop
 8003df0:	20000384 	.word	0x20000384

08003df4 <sbrk_aligned>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	4e0f      	ldr	r6, [pc, #60]	@ (8003e34 <sbrk_aligned+0x40>)
 8003df8:	460c      	mov	r4, r1
 8003dfa:	6831      	ldr	r1, [r6, #0]
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	b911      	cbnz	r1, 8003e06 <sbrk_aligned+0x12>
 8003e00:	f000 fca6 	bl	8004750 <_sbrk_r>
 8003e04:	6030      	str	r0, [r6, #0]
 8003e06:	4621      	mov	r1, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f000 fca1 	bl	8004750 <_sbrk_r>
 8003e0e:	1c43      	adds	r3, r0, #1
 8003e10:	d103      	bne.n	8003e1a <sbrk_aligned+0x26>
 8003e12:	f04f 34ff 	mov.w	r4, #4294967295
 8003e16:	4620      	mov	r0, r4
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
 8003e1a:	1cc4      	adds	r4, r0, #3
 8003e1c:	f024 0403 	bic.w	r4, r4, #3
 8003e20:	42a0      	cmp	r0, r4
 8003e22:	d0f8      	beq.n	8003e16 <sbrk_aligned+0x22>
 8003e24:	1a21      	subs	r1, r4, r0
 8003e26:	4628      	mov	r0, r5
 8003e28:	f000 fc92 	bl	8004750 <_sbrk_r>
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d1f2      	bne.n	8003e16 <sbrk_aligned+0x22>
 8003e30:	e7ef      	b.n	8003e12 <sbrk_aligned+0x1e>
 8003e32:	bf00      	nop
 8003e34:	20000380 	.word	0x20000380

08003e38 <_malloc_r>:
 8003e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e3c:	1ccd      	adds	r5, r1, #3
 8003e3e:	f025 0503 	bic.w	r5, r5, #3
 8003e42:	3508      	adds	r5, #8
 8003e44:	2d0c      	cmp	r5, #12
 8003e46:	bf38      	it	cc
 8003e48:	250c      	movcc	r5, #12
 8003e4a:	2d00      	cmp	r5, #0
 8003e4c:	4606      	mov	r6, r0
 8003e4e:	db01      	blt.n	8003e54 <_malloc_r+0x1c>
 8003e50:	42a9      	cmp	r1, r5
 8003e52:	d904      	bls.n	8003e5e <_malloc_r+0x26>
 8003e54:	230c      	movs	r3, #12
 8003e56:	6033      	str	r3, [r6, #0]
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f34 <_malloc_r+0xfc>
 8003e62:	f000 f869 	bl	8003f38 <__malloc_lock>
 8003e66:	f8d8 3000 	ldr.w	r3, [r8]
 8003e6a:	461c      	mov	r4, r3
 8003e6c:	bb44      	cbnz	r4, 8003ec0 <_malloc_r+0x88>
 8003e6e:	4629      	mov	r1, r5
 8003e70:	4630      	mov	r0, r6
 8003e72:	f7ff ffbf 	bl	8003df4 <sbrk_aligned>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	4604      	mov	r4, r0
 8003e7a:	d158      	bne.n	8003f2e <_malloc_r+0xf6>
 8003e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e80:	4627      	mov	r7, r4
 8003e82:	2f00      	cmp	r7, #0
 8003e84:	d143      	bne.n	8003f0e <_malloc_r+0xd6>
 8003e86:	2c00      	cmp	r4, #0
 8003e88:	d04b      	beq.n	8003f22 <_malloc_r+0xea>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	4639      	mov	r1, r7
 8003e8e:	4630      	mov	r0, r6
 8003e90:	eb04 0903 	add.w	r9, r4, r3
 8003e94:	f000 fc5c 	bl	8004750 <_sbrk_r>
 8003e98:	4581      	cmp	r9, r0
 8003e9a:	d142      	bne.n	8003f22 <_malloc_r+0xea>
 8003e9c:	6821      	ldr	r1, [r4, #0]
 8003e9e:	1a6d      	subs	r5, r5, r1
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f7ff ffa6 	bl	8003df4 <sbrk_aligned>
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d03a      	beq.n	8003f22 <_malloc_r+0xea>
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	442b      	add	r3, r5
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	bb62      	cbnz	r2, 8003f14 <_malloc_r+0xdc>
 8003eba:	f8c8 7000 	str.w	r7, [r8]
 8003ebe:	e00f      	b.n	8003ee0 <_malloc_r+0xa8>
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	1b52      	subs	r2, r2, r5
 8003ec4:	d420      	bmi.n	8003f08 <_malloc_r+0xd0>
 8003ec6:	2a0b      	cmp	r2, #11
 8003ec8:	d917      	bls.n	8003efa <_malloc_r+0xc2>
 8003eca:	1961      	adds	r1, r4, r5
 8003ecc:	42a3      	cmp	r3, r4
 8003ece:	6025      	str	r5, [r4, #0]
 8003ed0:	bf18      	it	ne
 8003ed2:	6059      	strne	r1, [r3, #4]
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	bf08      	it	eq
 8003ed8:	f8c8 1000 	streq.w	r1, [r8]
 8003edc:	5162      	str	r2, [r4, r5]
 8003ede:	604b      	str	r3, [r1, #4]
 8003ee0:	4630      	mov	r0, r6
 8003ee2:	f000 f82f 	bl	8003f44 <__malloc_unlock>
 8003ee6:	f104 000b 	add.w	r0, r4, #11
 8003eea:	1d23      	adds	r3, r4, #4
 8003eec:	f020 0007 	bic.w	r0, r0, #7
 8003ef0:	1ac2      	subs	r2, r0, r3
 8003ef2:	bf1c      	itt	ne
 8003ef4:	1a1b      	subne	r3, r3, r0
 8003ef6:	50a3      	strne	r3, [r4, r2]
 8003ef8:	e7af      	b.n	8003e5a <_malloc_r+0x22>
 8003efa:	6862      	ldr	r2, [r4, #4]
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	bf0c      	ite	eq
 8003f00:	f8c8 2000 	streq.w	r2, [r8]
 8003f04:	605a      	strne	r2, [r3, #4]
 8003f06:	e7eb      	b.n	8003ee0 <_malloc_r+0xa8>
 8003f08:	4623      	mov	r3, r4
 8003f0a:	6864      	ldr	r4, [r4, #4]
 8003f0c:	e7ae      	b.n	8003e6c <_malloc_r+0x34>
 8003f0e:	463c      	mov	r4, r7
 8003f10:	687f      	ldr	r7, [r7, #4]
 8003f12:	e7b6      	b.n	8003e82 <_malloc_r+0x4a>
 8003f14:	461a      	mov	r2, r3
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	d1fb      	bne.n	8003f14 <_malloc_r+0xdc>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	6053      	str	r3, [r2, #4]
 8003f20:	e7de      	b.n	8003ee0 <_malloc_r+0xa8>
 8003f22:	230c      	movs	r3, #12
 8003f24:	6033      	str	r3, [r6, #0]
 8003f26:	4630      	mov	r0, r6
 8003f28:	f000 f80c 	bl	8003f44 <__malloc_unlock>
 8003f2c:	e794      	b.n	8003e58 <_malloc_r+0x20>
 8003f2e:	6005      	str	r5, [r0, #0]
 8003f30:	e7d6      	b.n	8003ee0 <_malloc_r+0xa8>
 8003f32:	bf00      	nop
 8003f34:	20000384 	.word	0x20000384

08003f38 <__malloc_lock>:
 8003f38:	4801      	ldr	r0, [pc, #4]	@ (8003f40 <__malloc_lock+0x8>)
 8003f3a:	f7ff bf0e 	b.w	8003d5a <__retarget_lock_acquire_recursive>
 8003f3e:	bf00      	nop
 8003f40:	2000037c 	.word	0x2000037c

08003f44 <__malloc_unlock>:
 8003f44:	4801      	ldr	r0, [pc, #4]	@ (8003f4c <__malloc_unlock+0x8>)
 8003f46:	f7ff bf09 	b.w	8003d5c <__retarget_lock_release_recursive>
 8003f4a:	bf00      	nop
 8003f4c:	2000037c 	.word	0x2000037c

08003f50 <__sfputc_r>:
 8003f50:	6893      	ldr	r3, [r2, #8]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	b410      	push	{r4}
 8003f58:	6093      	str	r3, [r2, #8]
 8003f5a:	da08      	bge.n	8003f6e <__sfputc_r+0x1e>
 8003f5c:	6994      	ldr	r4, [r2, #24]
 8003f5e:	42a3      	cmp	r3, r4
 8003f60:	db01      	blt.n	8003f66 <__sfputc_r+0x16>
 8003f62:	290a      	cmp	r1, #10
 8003f64:	d103      	bne.n	8003f6e <__sfputc_r+0x1e>
 8003f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f6a:	f7ff bde8 	b.w	8003b3e <__swbuf_r>
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	1c58      	adds	r0, r3, #1
 8003f72:	6010      	str	r0, [r2, #0]
 8003f74:	7019      	strb	r1, [r3, #0]
 8003f76:	4608      	mov	r0, r1
 8003f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <__sfputs_r>:
 8003f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f80:	4606      	mov	r6, r0
 8003f82:	460f      	mov	r7, r1
 8003f84:	4614      	mov	r4, r2
 8003f86:	18d5      	adds	r5, r2, r3
 8003f88:	42ac      	cmp	r4, r5
 8003f8a:	d101      	bne.n	8003f90 <__sfputs_r+0x12>
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	e007      	b.n	8003fa0 <__sfputs_r+0x22>
 8003f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f94:	463a      	mov	r2, r7
 8003f96:	4630      	mov	r0, r6
 8003f98:	f7ff ffda 	bl	8003f50 <__sfputc_r>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d1f3      	bne.n	8003f88 <__sfputs_r+0xa>
 8003fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fa4 <_vfiprintf_r>:
 8003fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa8:	460d      	mov	r5, r1
 8003faa:	b09d      	sub	sp, #116	@ 0x74
 8003fac:	4614      	mov	r4, r2
 8003fae:	4698      	mov	r8, r3
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	b118      	cbz	r0, 8003fbc <_vfiprintf_r+0x18>
 8003fb4:	6a03      	ldr	r3, [r0, #32]
 8003fb6:	b90b      	cbnz	r3, 8003fbc <_vfiprintf_r+0x18>
 8003fb8:	f7ff fcd8 	bl	800396c <__sinit>
 8003fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fbe:	07d9      	lsls	r1, r3, #31
 8003fc0:	d405      	bmi.n	8003fce <_vfiprintf_r+0x2a>
 8003fc2:	89ab      	ldrh	r3, [r5, #12]
 8003fc4:	059a      	lsls	r2, r3, #22
 8003fc6:	d402      	bmi.n	8003fce <_vfiprintf_r+0x2a>
 8003fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fca:	f7ff fec6 	bl	8003d5a <__retarget_lock_acquire_recursive>
 8003fce:	89ab      	ldrh	r3, [r5, #12]
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	d501      	bpl.n	8003fd8 <_vfiprintf_r+0x34>
 8003fd4:	692b      	ldr	r3, [r5, #16]
 8003fd6:	b99b      	cbnz	r3, 8004000 <_vfiprintf_r+0x5c>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4630      	mov	r0, r6
 8003fdc:	f7ff fdee 	bl	8003bbc <__swsetup_r>
 8003fe0:	b170      	cbz	r0, 8004000 <_vfiprintf_r+0x5c>
 8003fe2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fe4:	07dc      	lsls	r4, r3, #31
 8003fe6:	d504      	bpl.n	8003ff2 <_vfiprintf_r+0x4e>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	b01d      	add	sp, #116	@ 0x74
 8003fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff2:	89ab      	ldrh	r3, [r5, #12]
 8003ff4:	0598      	lsls	r0, r3, #22
 8003ff6:	d4f7      	bmi.n	8003fe8 <_vfiprintf_r+0x44>
 8003ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ffa:	f7ff feaf 	bl	8003d5c <__retarget_lock_release_recursive>
 8003ffe:	e7f3      	b.n	8003fe8 <_vfiprintf_r+0x44>
 8004000:	2300      	movs	r3, #0
 8004002:	9309      	str	r3, [sp, #36]	@ 0x24
 8004004:	2320      	movs	r3, #32
 8004006:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800400a:	f8cd 800c 	str.w	r8, [sp, #12]
 800400e:	2330      	movs	r3, #48	@ 0x30
 8004010:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80041c0 <_vfiprintf_r+0x21c>
 8004014:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004018:	f04f 0901 	mov.w	r9, #1
 800401c:	4623      	mov	r3, r4
 800401e:	469a      	mov	sl, r3
 8004020:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004024:	b10a      	cbz	r2, 800402a <_vfiprintf_r+0x86>
 8004026:	2a25      	cmp	r2, #37	@ 0x25
 8004028:	d1f9      	bne.n	800401e <_vfiprintf_r+0x7a>
 800402a:	ebba 0b04 	subs.w	fp, sl, r4
 800402e:	d00b      	beq.n	8004048 <_vfiprintf_r+0xa4>
 8004030:	465b      	mov	r3, fp
 8004032:	4622      	mov	r2, r4
 8004034:	4629      	mov	r1, r5
 8004036:	4630      	mov	r0, r6
 8004038:	f7ff ffa1 	bl	8003f7e <__sfputs_r>
 800403c:	3001      	adds	r0, #1
 800403e:	f000 80a7 	beq.w	8004190 <_vfiprintf_r+0x1ec>
 8004042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004044:	445a      	add	r2, fp
 8004046:	9209      	str	r2, [sp, #36]	@ 0x24
 8004048:	f89a 3000 	ldrb.w	r3, [sl]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 809f 	beq.w	8004190 <_vfiprintf_r+0x1ec>
 8004052:	2300      	movs	r3, #0
 8004054:	f04f 32ff 	mov.w	r2, #4294967295
 8004058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800405c:	f10a 0a01 	add.w	sl, sl, #1
 8004060:	9304      	str	r3, [sp, #16]
 8004062:	9307      	str	r3, [sp, #28]
 8004064:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004068:	931a      	str	r3, [sp, #104]	@ 0x68
 800406a:	4654      	mov	r4, sl
 800406c:	2205      	movs	r2, #5
 800406e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004072:	4853      	ldr	r0, [pc, #332]	@ (80041c0 <_vfiprintf_r+0x21c>)
 8004074:	f7fc f8b4 	bl	80001e0 <memchr>
 8004078:	9a04      	ldr	r2, [sp, #16]
 800407a:	b9d8      	cbnz	r0, 80040b4 <_vfiprintf_r+0x110>
 800407c:	06d1      	lsls	r1, r2, #27
 800407e:	bf44      	itt	mi
 8004080:	2320      	movmi	r3, #32
 8004082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004086:	0713      	lsls	r3, r2, #28
 8004088:	bf44      	itt	mi
 800408a:	232b      	movmi	r3, #43	@ 0x2b
 800408c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004090:	f89a 3000 	ldrb.w	r3, [sl]
 8004094:	2b2a      	cmp	r3, #42	@ 0x2a
 8004096:	d015      	beq.n	80040c4 <_vfiprintf_r+0x120>
 8004098:	9a07      	ldr	r2, [sp, #28]
 800409a:	4654      	mov	r4, sl
 800409c:	2000      	movs	r0, #0
 800409e:	f04f 0c0a 	mov.w	ip, #10
 80040a2:	4621      	mov	r1, r4
 80040a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040a8:	3b30      	subs	r3, #48	@ 0x30
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	d94b      	bls.n	8004146 <_vfiprintf_r+0x1a2>
 80040ae:	b1b0      	cbz	r0, 80040de <_vfiprintf_r+0x13a>
 80040b0:	9207      	str	r2, [sp, #28]
 80040b2:	e014      	b.n	80040de <_vfiprintf_r+0x13a>
 80040b4:	eba0 0308 	sub.w	r3, r0, r8
 80040b8:	fa09 f303 	lsl.w	r3, r9, r3
 80040bc:	4313      	orrs	r3, r2
 80040be:	9304      	str	r3, [sp, #16]
 80040c0:	46a2      	mov	sl, r4
 80040c2:	e7d2      	b.n	800406a <_vfiprintf_r+0xc6>
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	1d19      	adds	r1, r3, #4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	9103      	str	r1, [sp, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bfbb      	ittet	lt
 80040d0:	425b      	neglt	r3, r3
 80040d2:	f042 0202 	orrlt.w	r2, r2, #2
 80040d6:	9307      	strge	r3, [sp, #28]
 80040d8:	9307      	strlt	r3, [sp, #28]
 80040da:	bfb8      	it	lt
 80040dc:	9204      	strlt	r2, [sp, #16]
 80040de:	7823      	ldrb	r3, [r4, #0]
 80040e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80040e2:	d10a      	bne.n	80040fa <_vfiprintf_r+0x156>
 80040e4:	7863      	ldrb	r3, [r4, #1]
 80040e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80040e8:	d132      	bne.n	8004150 <_vfiprintf_r+0x1ac>
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	1d1a      	adds	r2, r3, #4
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	9203      	str	r2, [sp, #12]
 80040f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040f6:	3402      	adds	r4, #2
 80040f8:	9305      	str	r3, [sp, #20]
 80040fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80041d0 <_vfiprintf_r+0x22c>
 80040fe:	7821      	ldrb	r1, [r4, #0]
 8004100:	2203      	movs	r2, #3
 8004102:	4650      	mov	r0, sl
 8004104:	f7fc f86c 	bl	80001e0 <memchr>
 8004108:	b138      	cbz	r0, 800411a <_vfiprintf_r+0x176>
 800410a:	9b04      	ldr	r3, [sp, #16]
 800410c:	eba0 000a 	sub.w	r0, r0, sl
 8004110:	2240      	movs	r2, #64	@ 0x40
 8004112:	4082      	lsls	r2, r0
 8004114:	4313      	orrs	r3, r2
 8004116:	3401      	adds	r4, #1
 8004118:	9304      	str	r3, [sp, #16]
 800411a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411e:	4829      	ldr	r0, [pc, #164]	@ (80041c4 <_vfiprintf_r+0x220>)
 8004120:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004124:	2206      	movs	r2, #6
 8004126:	f7fc f85b 	bl	80001e0 <memchr>
 800412a:	2800      	cmp	r0, #0
 800412c:	d03f      	beq.n	80041ae <_vfiprintf_r+0x20a>
 800412e:	4b26      	ldr	r3, [pc, #152]	@ (80041c8 <_vfiprintf_r+0x224>)
 8004130:	bb1b      	cbnz	r3, 800417a <_vfiprintf_r+0x1d6>
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	3307      	adds	r3, #7
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	3308      	adds	r3, #8
 800413c:	9303      	str	r3, [sp, #12]
 800413e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004140:	443b      	add	r3, r7
 8004142:	9309      	str	r3, [sp, #36]	@ 0x24
 8004144:	e76a      	b.n	800401c <_vfiprintf_r+0x78>
 8004146:	fb0c 3202 	mla	r2, ip, r2, r3
 800414a:	460c      	mov	r4, r1
 800414c:	2001      	movs	r0, #1
 800414e:	e7a8      	b.n	80040a2 <_vfiprintf_r+0xfe>
 8004150:	2300      	movs	r3, #0
 8004152:	3401      	adds	r4, #1
 8004154:	9305      	str	r3, [sp, #20]
 8004156:	4619      	mov	r1, r3
 8004158:	f04f 0c0a 	mov.w	ip, #10
 800415c:	4620      	mov	r0, r4
 800415e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004162:	3a30      	subs	r2, #48	@ 0x30
 8004164:	2a09      	cmp	r2, #9
 8004166:	d903      	bls.n	8004170 <_vfiprintf_r+0x1cc>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0c6      	beq.n	80040fa <_vfiprintf_r+0x156>
 800416c:	9105      	str	r1, [sp, #20]
 800416e:	e7c4      	b.n	80040fa <_vfiprintf_r+0x156>
 8004170:	fb0c 2101 	mla	r1, ip, r1, r2
 8004174:	4604      	mov	r4, r0
 8004176:	2301      	movs	r3, #1
 8004178:	e7f0      	b.n	800415c <_vfiprintf_r+0x1b8>
 800417a:	ab03      	add	r3, sp, #12
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	462a      	mov	r2, r5
 8004180:	4b12      	ldr	r3, [pc, #72]	@ (80041cc <_vfiprintf_r+0x228>)
 8004182:	a904      	add	r1, sp, #16
 8004184:	4630      	mov	r0, r6
 8004186:	f3af 8000 	nop.w
 800418a:	4607      	mov	r7, r0
 800418c:	1c78      	adds	r0, r7, #1
 800418e:	d1d6      	bne.n	800413e <_vfiprintf_r+0x19a>
 8004190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004192:	07d9      	lsls	r1, r3, #31
 8004194:	d405      	bmi.n	80041a2 <_vfiprintf_r+0x1fe>
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	059a      	lsls	r2, r3, #22
 800419a:	d402      	bmi.n	80041a2 <_vfiprintf_r+0x1fe>
 800419c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800419e:	f7ff fddd 	bl	8003d5c <__retarget_lock_release_recursive>
 80041a2:	89ab      	ldrh	r3, [r5, #12]
 80041a4:	065b      	lsls	r3, r3, #25
 80041a6:	f53f af1f 	bmi.w	8003fe8 <_vfiprintf_r+0x44>
 80041aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041ac:	e71e      	b.n	8003fec <_vfiprintf_r+0x48>
 80041ae:	ab03      	add	r3, sp, #12
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	462a      	mov	r2, r5
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <_vfiprintf_r+0x228>)
 80041b6:	a904      	add	r1, sp, #16
 80041b8:	4630      	mov	r0, r6
 80041ba:	f000 f879 	bl	80042b0 <_printf_i>
 80041be:	e7e4      	b.n	800418a <_vfiprintf_r+0x1e6>
 80041c0:	080047f4 	.word	0x080047f4
 80041c4:	080047fe 	.word	0x080047fe
 80041c8:	00000000 	.word	0x00000000
 80041cc:	08003f7f 	.word	0x08003f7f
 80041d0:	080047fa 	.word	0x080047fa

080041d4 <_printf_common>:
 80041d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d8:	4616      	mov	r6, r2
 80041da:	4698      	mov	r8, r3
 80041dc:	688a      	ldr	r2, [r1, #8]
 80041de:	690b      	ldr	r3, [r1, #16]
 80041e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041e4:	4293      	cmp	r3, r2
 80041e6:	bfb8      	it	lt
 80041e8:	4613      	movlt	r3, r2
 80041ea:	6033      	str	r3, [r6, #0]
 80041ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041f0:	4607      	mov	r7, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	b10a      	cbz	r2, 80041fa <_printf_common+0x26>
 80041f6:	3301      	adds	r3, #1
 80041f8:	6033      	str	r3, [r6, #0]
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	0699      	lsls	r1, r3, #26
 80041fe:	bf42      	ittt	mi
 8004200:	6833      	ldrmi	r3, [r6, #0]
 8004202:	3302      	addmi	r3, #2
 8004204:	6033      	strmi	r3, [r6, #0]
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	f015 0506 	ands.w	r5, r5, #6
 800420c:	d106      	bne.n	800421c <_printf_common+0x48>
 800420e:	f104 0a19 	add.w	sl, r4, #25
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	6832      	ldr	r2, [r6, #0]
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	42ab      	cmp	r3, r5
 800421a:	dc26      	bgt.n	800426a <_printf_common+0x96>
 800421c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	3b00      	subs	r3, #0
 8004224:	bf18      	it	ne
 8004226:	2301      	movne	r3, #1
 8004228:	0692      	lsls	r2, r2, #26
 800422a:	d42b      	bmi.n	8004284 <_printf_common+0xb0>
 800422c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004230:	4641      	mov	r1, r8
 8004232:	4638      	mov	r0, r7
 8004234:	47c8      	blx	r9
 8004236:	3001      	adds	r0, #1
 8004238:	d01e      	beq.n	8004278 <_printf_common+0xa4>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	6922      	ldr	r2, [r4, #16]
 800423e:	f003 0306 	and.w	r3, r3, #6
 8004242:	2b04      	cmp	r3, #4
 8004244:	bf02      	ittt	eq
 8004246:	68e5      	ldreq	r5, [r4, #12]
 8004248:	6833      	ldreq	r3, [r6, #0]
 800424a:	1aed      	subeq	r5, r5, r3
 800424c:	68a3      	ldr	r3, [r4, #8]
 800424e:	bf0c      	ite	eq
 8004250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004254:	2500      	movne	r5, #0
 8004256:	4293      	cmp	r3, r2
 8004258:	bfc4      	itt	gt
 800425a:	1a9b      	subgt	r3, r3, r2
 800425c:	18ed      	addgt	r5, r5, r3
 800425e:	2600      	movs	r6, #0
 8004260:	341a      	adds	r4, #26
 8004262:	42b5      	cmp	r5, r6
 8004264:	d11a      	bne.n	800429c <_printf_common+0xc8>
 8004266:	2000      	movs	r0, #0
 8004268:	e008      	b.n	800427c <_printf_common+0xa8>
 800426a:	2301      	movs	r3, #1
 800426c:	4652      	mov	r2, sl
 800426e:	4641      	mov	r1, r8
 8004270:	4638      	mov	r0, r7
 8004272:	47c8      	blx	r9
 8004274:	3001      	adds	r0, #1
 8004276:	d103      	bne.n	8004280 <_printf_common+0xac>
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004280:	3501      	adds	r5, #1
 8004282:	e7c6      	b.n	8004212 <_printf_common+0x3e>
 8004284:	18e1      	adds	r1, r4, r3
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	2030      	movs	r0, #48	@ 0x30
 800428a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800428e:	4422      	add	r2, r4
 8004290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004298:	3302      	adds	r3, #2
 800429a:	e7c7      	b.n	800422c <_printf_common+0x58>
 800429c:	2301      	movs	r3, #1
 800429e:	4622      	mov	r2, r4
 80042a0:	4641      	mov	r1, r8
 80042a2:	4638      	mov	r0, r7
 80042a4:	47c8      	blx	r9
 80042a6:	3001      	adds	r0, #1
 80042a8:	d0e6      	beq.n	8004278 <_printf_common+0xa4>
 80042aa:	3601      	adds	r6, #1
 80042ac:	e7d9      	b.n	8004262 <_printf_common+0x8e>
	...

080042b0 <_printf_i>:
 80042b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	7e0f      	ldrb	r7, [r1, #24]
 80042b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042b8:	2f78      	cmp	r7, #120	@ 0x78
 80042ba:	4691      	mov	r9, r2
 80042bc:	4680      	mov	r8, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	469a      	mov	sl, r3
 80042c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042c6:	d807      	bhi.n	80042d8 <_printf_i+0x28>
 80042c8:	2f62      	cmp	r7, #98	@ 0x62
 80042ca:	d80a      	bhi.n	80042e2 <_printf_i+0x32>
 80042cc:	2f00      	cmp	r7, #0
 80042ce:	f000 80d2 	beq.w	8004476 <_printf_i+0x1c6>
 80042d2:	2f58      	cmp	r7, #88	@ 0x58
 80042d4:	f000 80b9 	beq.w	800444a <_printf_i+0x19a>
 80042d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042e0:	e03a      	b.n	8004358 <_printf_i+0xa8>
 80042e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042e6:	2b15      	cmp	r3, #21
 80042e8:	d8f6      	bhi.n	80042d8 <_printf_i+0x28>
 80042ea:	a101      	add	r1, pc, #4	@ (adr r1, 80042f0 <_printf_i+0x40>)
 80042ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042f0:	08004349 	.word	0x08004349
 80042f4:	0800435d 	.word	0x0800435d
 80042f8:	080042d9 	.word	0x080042d9
 80042fc:	080042d9 	.word	0x080042d9
 8004300:	080042d9 	.word	0x080042d9
 8004304:	080042d9 	.word	0x080042d9
 8004308:	0800435d 	.word	0x0800435d
 800430c:	080042d9 	.word	0x080042d9
 8004310:	080042d9 	.word	0x080042d9
 8004314:	080042d9 	.word	0x080042d9
 8004318:	080042d9 	.word	0x080042d9
 800431c:	0800445d 	.word	0x0800445d
 8004320:	08004387 	.word	0x08004387
 8004324:	08004417 	.word	0x08004417
 8004328:	080042d9 	.word	0x080042d9
 800432c:	080042d9 	.word	0x080042d9
 8004330:	0800447f 	.word	0x0800447f
 8004334:	080042d9 	.word	0x080042d9
 8004338:	08004387 	.word	0x08004387
 800433c:	080042d9 	.word	0x080042d9
 8004340:	080042d9 	.word	0x080042d9
 8004344:	0800441f 	.word	0x0800441f
 8004348:	6833      	ldr	r3, [r6, #0]
 800434a:	1d1a      	adds	r2, r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6032      	str	r2, [r6, #0]
 8004350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004358:	2301      	movs	r3, #1
 800435a:	e09d      	b.n	8004498 <_printf_i+0x1e8>
 800435c:	6833      	ldr	r3, [r6, #0]
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	1d19      	adds	r1, r3, #4
 8004362:	6031      	str	r1, [r6, #0]
 8004364:	0606      	lsls	r6, r0, #24
 8004366:	d501      	bpl.n	800436c <_printf_i+0xbc>
 8004368:	681d      	ldr	r5, [r3, #0]
 800436a:	e003      	b.n	8004374 <_printf_i+0xc4>
 800436c:	0645      	lsls	r5, r0, #25
 800436e:	d5fb      	bpl.n	8004368 <_printf_i+0xb8>
 8004370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004374:	2d00      	cmp	r5, #0
 8004376:	da03      	bge.n	8004380 <_printf_i+0xd0>
 8004378:	232d      	movs	r3, #45	@ 0x2d
 800437a:	426d      	negs	r5, r5
 800437c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004380:	4859      	ldr	r0, [pc, #356]	@ (80044e8 <_printf_i+0x238>)
 8004382:	230a      	movs	r3, #10
 8004384:	e011      	b.n	80043aa <_printf_i+0xfa>
 8004386:	6821      	ldr	r1, [r4, #0]
 8004388:	6833      	ldr	r3, [r6, #0]
 800438a:	0608      	lsls	r0, r1, #24
 800438c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004390:	d402      	bmi.n	8004398 <_printf_i+0xe8>
 8004392:	0649      	lsls	r1, r1, #25
 8004394:	bf48      	it	mi
 8004396:	b2ad      	uxthmi	r5, r5
 8004398:	2f6f      	cmp	r7, #111	@ 0x6f
 800439a:	4853      	ldr	r0, [pc, #332]	@ (80044e8 <_printf_i+0x238>)
 800439c:	6033      	str	r3, [r6, #0]
 800439e:	bf14      	ite	ne
 80043a0:	230a      	movne	r3, #10
 80043a2:	2308      	moveq	r3, #8
 80043a4:	2100      	movs	r1, #0
 80043a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043aa:	6866      	ldr	r6, [r4, #4]
 80043ac:	60a6      	str	r6, [r4, #8]
 80043ae:	2e00      	cmp	r6, #0
 80043b0:	bfa2      	ittt	ge
 80043b2:	6821      	ldrge	r1, [r4, #0]
 80043b4:	f021 0104 	bicge.w	r1, r1, #4
 80043b8:	6021      	strge	r1, [r4, #0]
 80043ba:	b90d      	cbnz	r5, 80043c0 <_printf_i+0x110>
 80043bc:	2e00      	cmp	r6, #0
 80043be:	d04b      	beq.n	8004458 <_printf_i+0x1a8>
 80043c0:	4616      	mov	r6, r2
 80043c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80043c6:	fb03 5711 	mls	r7, r3, r1, r5
 80043ca:	5dc7      	ldrb	r7, [r0, r7]
 80043cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043d0:	462f      	mov	r7, r5
 80043d2:	42bb      	cmp	r3, r7
 80043d4:	460d      	mov	r5, r1
 80043d6:	d9f4      	bls.n	80043c2 <_printf_i+0x112>
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d10b      	bne.n	80043f4 <_printf_i+0x144>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	07df      	lsls	r7, r3, #31
 80043e0:	d508      	bpl.n	80043f4 <_printf_i+0x144>
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	6861      	ldr	r1, [r4, #4]
 80043e6:	4299      	cmp	r1, r3
 80043e8:	bfde      	ittt	le
 80043ea:	2330      	movle	r3, #48	@ 0x30
 80043ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043f4:	1b92      	subs	r2, r2, r6
 80043f6:	6122      	str	r2, [r4, #16]
 80043f8:	f8cd a000 	str.w	sl, [sp]
 80043fc:	464b      	mov	r3, r9
 80043fe:	aa03      	add	r2, sp, #12
 8004400:	4621      	mov	r1, r4
 8004402:	4640      	mov	r0, r8
 8004404:	f7ff fee6 	bl	80041d4 <_printf_common>
 8004408:	3001      	adds	r0, #1
 800440a:	d14a      	bne.n	80044a2 <_printf_i+0x1f2>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	b004      	add	sp, #16
 8004412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	f043 0320 	orr.w	r3, r3, #32
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	4833      	ldr	r0, [pc, #204]	@ (80044ec <_printf_i+0x23c>)
 8004420:	2778      	movs	r7, #120	@ 0x78
 8004422:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	6831      	ldr	r1, [r6, #0]
 800442a:	061f      	lsls	r7, r3, #24
 800442c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004430:	d402      	bmi.n	8004438 <_printf_i+0x188>
 8004432:	065f      	lsls	r7, r3, #25
 8004434:	bf48      	it	mi
 8004436:	b2ad      	uxthmi	r5, r5
 8004438:	6031      	str	r1, [r6, #0]
 800443a:	07d9      	lsls	r1, r3, #31
 800443c:	bf44      	itt	mi
 800443e:	f043 0320 	orrmi.w	r3, r3, #32
 8004442:	6023      	strmi	r3, [r4, #0]
 8004444:	b11d      	cbz	r5, 800444e <_printf_i+0x19e>
 8004446:	2310      	movs	r3, #16
 8004448:	e7ac      	b.n	80043a4 <_printf_i+0xf4>
 800444a:	4827      	ldr	r0, [pc, #156]	@ (80044e8 <_printf_i+0x238>)
 800444c:	e7e9      	b.n	8004422 <_printf_i+0x172>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	f023 0320 	bic.w	r3, r3, #32
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	e7f6      	b.n	8004446 <_printf_i+0x196>
 8004458:	4616      	mov	r6, r2
 800445a:	e7bd      	b.n	80043d8 <_printf_i+0x128>
 800445c:	6833      	ldr	r3, [r6, #0]
 800445e:	6825      	ldr	r5, [r4, #0]
 8004460:	6961      	ldr	r1, [r4, #20]
 8004462:	1d18      	adds	r0, r3, #4
 8004464:	6030      	str	r0, [r6, #0]
 8004466:	062e      	lsls	r6, r5, #24
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	d501      	bpl.n	8004470 <_printf_i+0x1c0>
 800446c:	6019      	str	r1, [r3, #0]
 800446e:	e002      	b.n	8004476 <_printf_i+0x1c6>
 8004470:	0668      	lsls	r0, r5, #25
 8004472:	d5fb      	bpl.n	800446c <_printf_i+0x1bc>
 8004474:	8019      	strh	r1, [r3, #0]
 8004476:	2300      	movs	r3, #0
 8004478:	6123      	str	r3, [r4, #16]
 800447a:	4616      	mov	r6, r2
 800447c:	e7bc      	b.n	80043f8 <_printf_i+0x148>
 800447e:	6833      	ldr	r3, [r6, #0]
 8004480:	1d1a      	adds	r2, r3, #4
 8004482:	6032      	str	r2, [r6, #0]
 8004484:	681e      	ldr	r6, [r3, #0]
 8004486:	6862      	ldr	r2, [r4, #4]
 8004488:	2100      	movs	r1, #0
 800448a:	4630      	mov	r0, r6
 800448c:	f7fb fea8 	bl	80001e0 <memchr>
 8004490:	b108      	cbz	r0, 8004496 <_printf_i+0x1e6>
 8004492:	1b80      	subs	r0, r0, r6
 8004494:	6060      	str	r0, [r4, #4]
 8004496:	6863      	ldr	r3, [r4, #4]
 8004498:	6123      	str	r3, [r4, #16]
 800449a:	2300      	movs	r3, #0
 800449c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044a0:	e7aa      	b.n	80043f8 <_printf_i+0x148>
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	4632      	mov	r2, r6
 80044a6:	4649      	mov	r1, r9
 80044a8:	4640      	mov	r0, r8
 80044aa:	47d0      	blx	sl
 80044ac:	3001      	adds	r0, #1
 80044ae:	d0ad      	beq.n	800440c <_printf_i+0x15c>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	079b      	lsls	r3, r3, #30
 80044b4:	d413      	bmi.n	80044de <_printf_i+0x22e>
 80044b6:	68e0      	ldr	r0, [r4, #12]
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	4298      	cmp	r0, r3
 80044bc:	bfb8      	it	lt
 80044be:	4618      	movlt	r0, r3
 80044c0:	e7a6      	b.n	8004410 <_printf_i+0x160>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4632      	mov	r2, r6
 80044c6:	4649      	mov	r1, r9
 80044c8:	4640      	mov	r0, r8
 80044ca:	47d0      	blx	sl
 80044cc:	3001      	adds	r0, #1
 80044ce:	d09d      	beq.n	800440c <_printf_i+0x15c>
 80044d0:	3501      	adds	r5, #1
 80044d2:	68e3      	ldr	r3, [r4, #12]
 80044d4:	9903      	ldr	r1, [sp, #12]
 80044d6:	1a5b      	subs	r3, r3, r1
 80044d8:	42ab      	cmp	r3, r5
 80044da:	dcf2      	bgt.n	80044c2 <_printf_i+0x212>
 80044dc:	e7eb      	b.n	80044b6 <_printf_i+0x206>
 80044de:	2500      	movs	r5, #0
 80044e0:	f104 0619 	add.w	r6, r4, #25
 80044e4:	e7f5      	b.n	80044d2 <_printf_i+0x222>
 80044e6:	bf00      	nop
 80044e8:	08004805 	.word	0x08004805
 80044ec:	08004816 	.word	0x08004816

080044f0 <__sflush_r>:
 80044f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f8:	0716      	lsls	r6, r2, #28
 80044fa:	4605      	mov	r5, r0
 80044fc:	460c      	mov	r4, r1
 80044fe:	d454      	bmi.n	80045aa <__sflush_r+0xba>
 8004500:	684b      	ldr	r3, [r1, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	dc02      	bgt.n	800450c <__sflush_r+0x1c>
 8004506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	dd48      	ble.n	800459e <__sflush_r+0xae>
 800450c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800450e:	2e00      	cmp	r6, #0
 8004510:	d045      	beq.n	800459e <__sflush_r+0xae>
 8004512:	2300      	movs	r3, #0
 8004514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004518:	682f      	ldr	r7, [r5, #0]
 800451a:	6a21      	ldr	r1, [r4, #32]
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	d030      	beq.n	8004582 <__sflush_r+0x92>
 8004520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004522:	89a3      	ldrh	r3, [r4, #12]
 8004524:	0759      	lsls	r1, r3, #29
 8004526:	d505      	bpl.n	8004534 <__sflush_r+0x44>
 8004528:	6863      	ldr	r3, [r4, #4]
 800452a:	1ad2      	subs	r2, r2, r3
 800452c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800452e:	b10b      	cbz	r3, 8004534 <__sflush_r+0x44>
 8004530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004532:	1ad2      	subs	r2, r2, r3
 8004534:	2300      	movs	r3, #0
 8004536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004538:	6a21      	ldr	r1, [r4, #32]
 800453a:	4628      	mov	r0, r5
 800453c:	47b0      	blx	r6
 800453e:	1c43      	adds	r3, r0, #1
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	d106      	bne.n	8004552 <__sflush_r+0x62>
 8004544:	6829      	ldr	r1, [r5, #0]
 8004546:	291d      	cmp	r1, #29
 8004548:	d82b      	bhi.n	80045a2 <__sflush_r+0xb2>
 800454a:	4a2a      	ldr	r2, [pc, #168]	@ (80045f4 <__sflush_r+0x104>)
 800454c:	410a      	asrs	r2, r1
 800454e:	07d6      	lsls	r6, r2, #31
 8004550:	d427      	bmi.n	80045a2 <__sflush_r+0xb2>
 8004552:	2200      	movs	r2, #0
 8004554:	6062      	str	r2, [r4, #4]
 8004556:	04d9      	lsls	r1, r3, #19
 8004558:	6922      	ldr	r2, [r4, #16]
 800455a:	6022      	str	r2, [r4, #0]
 800455c:	d504      	bpl.n	8004568 <__sflush_r+0x78>
 800455e:	1c42      	adds	r2, r0, #1
 8004560:	d101      	bne.n	8004566 <__sflush_r+0x76>
 8004562:	682b      	ldr	r3, [r5, #0]
 8004564:	b903      	cbnz	r3, 8004568 <__sflush_r+0x78>
 8004566:	6560      	str	r0, [r4, #84]	@ 0x54
 8004568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800456a:	602f      	str	r7, [r5, #0]
 800456c:	b1b9      	cbz	r1, 800459e <__sflush_r+0xae>
 800456e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004572:	4299      	cmp	r1, r3
 8004574:	d002      	beq.n	800457c <__sflush_r+0x8c>
 8004576:	4628      	mov	r0, r5
 8004578:	f7ff fbf2 	bl	8003d60 <_free_r>
 800457c:	2300      	movs	r3, #0
 800457e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004580:	e00d      	b.n	800459e <__sflush_r+0xae>
 8004582:	2301      	movs	r3, #1
 8004584:	4628      	mov	r0, r5
 8004586:	47b0      	blx	r6
 8004588:	4602      	mov	r2, r0
 800458a:	1c50      	adds	r0, r2, #1
 800458c:	d1c9      	bne.n	8004522 <__sflush_r+0x32>
 800458e:	682b      	ldr	r3, [r5, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0c6      	beq.n	8004522 <__sflush_r+0x32>
 8004594:	2b1d      	cmp	r3, #29
 8004596:	d001      	beq.n	800459c <__sflush_r+0xac>
 8004598:	2b16      	cmp	r3, #22
 800459a:	d11e      	bne.n	80045da <__sflush_r+0xea>
 800459c:	602f      	str	r7, [r5, #0]
 800459e:	2000      	movs	r0, #0
 80045a0:	e022      	b.n	80045e8 <__sflush_r+0xf8>
 80045a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045a6:	b21b      	sxth	r3, r3
 80045a8:	e01b      	b.n	80045e2 <__sflush_r+0xf2>
 80045aa:	690f      	ldr	r7, [r1, #16]
 80045ac:	2f00      	cmp	r7, #0
 80045ae:	d0f6      	beq.n	800459e <__sflush_r+0xae>
 80045b0:	0793      	lsls	r3, r2, #30
 80045b2:	680e      	ldr	r6, [r1, #0]
 80045b4:	bf08      	it	eq
 80045b6:	694b      	ldreq	r3, [r1, #20]
 80045b8:	600f      	str	r7, [r1, #0]
 80045ba:	bf18      	it	ne
 80045bc:	2300      	movne	r3, #0
 80045be:	eba6 0807 	sub.w	r8, r6, r7
 80045c2:	608b      	str	r3, [r1, #8]
 80045c4:	f1b8 0f00 	cmp.w	r8, #0
 80045c8:	dde9      	ble.n	800459e <__sflush_r+0xae>
 80045ca:	6a21      	ldr	r1, [r4, #32]
 80045cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80045ce:	4643      	mov	r3, r8
 80045d0:	463a      	mov	r2, r7
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b0      	blx	r6
 80045d6:	2800      	cmp	r0, #0
 80045d8:	dc08      	bgt.n	80045ec <__sflush_r+0xfc>
 80045da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045e2:	81a3      	strh	r3, [r4, #12]
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ec:	4407      	add	r7, r0
 80045ee:	eba8 0800 	sub.w	r8, r8, r0
 80045f2:	e7e7      	b.n	80045c4 <__sflush_r+0xd4>
 80045f4:	dfbffffe 	.word	0xdfbffffe

080045f8 <_fflush_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	690b      	ldr	r3, [r1, #16]
 80045fc:	4605      	mov	r5, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	b913      	cbnz	r3, 8004608 <_fflush_r+0x10>
 8004602:	2500      	movs	r5, #0
 8004604:	4628      	mov	r0, r5
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	b118      	cbz	r0, 8004612 <_fflush_r+0x1a>
 800460a:	6a03      	ldr	r3, [r0, #32]
 800460c:	b90b      	cbnz	r3, 8004612 <_fflush_r+0x1a>
 800460e:	f7ff f9ad 	bl	800396c <__sinit>
 8004612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f3      	beq.n	8004602 <_fflush_r+0xa>
 800461a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800461c:	07d0      	lsls	r0, r2, #31
 800461e:	d404      	bmi.n	800462a <_fflush_r+0x32>
 8004620:	0599      	lsls	r1, r3, #22
 8004622:	d402      	bmi.n	800462a <_fflush_r+0x32>
 8004624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004626:	f7ff fb98 	bl	8003d5a <__retarget_lock_acquire_recursive>
 800462a:	4628      	mov	r0, r5
 800462c:	4621      	mov	r1, r4
 800462e:	f7ff ff5f 	bl	80044f0 <__sflush_r>
 8004632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004634:	07da      	lsls	r2, r3, #31
 8004636:	4605      	mov	r5, r0
 8004638:	d4e4      	bmi.n	8004604 <_fflush_r+0xc>
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	059b      	lsls	r3, r3, #22
 800463e:	d4e1      	bmi.n	8004604 <_fflush_r+0xc>
 8004640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004642:	f7ff fb8b 	bl	8003d5c <__retarget_lock_release_recursive>
 8004646:	e7dd      	b.n	8004604 <_fflush_r+0xc>

08004648 <__swhatbuf_r>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	460c      	mov	r4, r1
 800464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004650:	2900      	cmp	r1, #0
 8004652:	b096      	sub	sp, #88	@ 0x58
 8004654:	4615      	mov	r5, r2
 8004656:	461e      	mov	r6, r3
 8004658:	da0d      	bge.n	8004676 <__swhatbuf_r+0x2e>
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	bf14      	ite	ne
 8004666:	2340      	movne	r3, #64	@ 0x40
 8004668:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800466c:	2000      	movs	r0, #0
 800466e:	6031      	str	r1, [r6, #0]
 8004670:	602b      	str	r3, [r5, #0]
 8004672:	b016      	add	sp, #88	@ 0x58
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	466a      	mov	r2, sp
 8004678:	f000 f848 	bl	800470c <_fstat_r>
 800467c:	2800      	cmp	r0, #0
 800467e:	dbec      	blt.n	800465a <__swhatbuf_r+0x12>
 8004680:	9901      	ldr	r1, [sp, #4]
 8004682:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004686:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800468a:	4259      	negs	r1, r3
 800468c:	4159      	adcs	r1, r3
 800468e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004692:	e7eb      	b.n	800466c <__swhatbuf_r+0x24>

08004694 <__smakebuf_r>:
 8004694:	898b      	ldrh	r3, [r1, #12]
 8004696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004698:	079d      	lsls	r5, r3, #30
 800469a:	4606      	mov	r6, r0
 800469c:	460c      	mov	r4, r1
 800469e:	d507      	bpl.n	80046b0 <__smakebuf_r+0x1c>
 80046a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	6123      	str	r3, [r4, #16]
 80046a8:	2301      	movs	r3, #1
 80046aa:	6163      	str	r3, [r4, #20]
 80046ac:	b003      	add	sp, #12
 80046ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b0:	ab01      	add	r3, sp, #4
 80046b2:	466a      	mov	r2, sp
 80046b4:	f7ff ffc8 	bl	8004648 <__swhatbuf_r>
 80046b8:	9f00      	ldr	r7, [sp, #0]
 80046ba:	4605      	mov	r5, r0
 80046bc:	4639      	mov	r1, r7
 80046be:	4630      	mov	r0, r6
 80046c0:	f7ff fbba 	bl	8003e38 <_malloc_r>
 80046c4:	b948      	cbnz	r0, 80046da <__smakebuf_r+0x46>
 80046c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ca:	059a      	lsls	r2, r3, #22
 80046cc:	d4ee      	bmi.n	80046ac <__smakebuf_r+0x18>
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	81a3      	strh	r3, [r4, #12]
 80046d8:	e7e2      	b.n	80046a0 <__smakebuf_r+0xc>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	6020      	str	r0, [r4, #0]
 80046de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	9b01      	ldr	r3, [sp, #4]
 80046e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046ea:	b15b      	cbz	r3, 8004704 <__smakebuf_r+0x70>
 80046ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f0:	4630      	mov	r0, r6
 80046f2:	f000 f81d 	bl	8004730 <_isatty_r>
 80046f6:	b128      	cbz	r0, 8004704 <__smakebuf_r+0x70>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	431d      	orrs	r5, r3
 8004708:	81a5      	strh	r5, [r4, #12]
 800470a:	e7cf      	b.n	80046ac <__smakebuf_r+0x18>

0800470c <_fstat_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4d07      	ldr	r5, [pc, #28]	@ (800472c <_fstat_r+0x20>)
 8004710:	2300      	movs	r3, #0
 8004712:	4604      	mov	r4, r0
 8004714:	4608      	mov	r0, r1
 8004716:	4611      	mov	r1, r2
 8004718:	602b      	str	r3, [r5, #0]
 800471a:	f7fc fb0c 	bl	8000d36 <_fstat>
 800471e:	1c43      	adds	r3, r0, #1
 8004720:	d102      	bne.n	8004728 <_fstat_r+0x1c>
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	b103      	cbz	r3, 8004728 <_fstat_r+0x1c>
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	bd38      	pop	{r3, r4, r5, pc}
 800472a:	bf00      	nop
 800472c:	20000378 	.word	0x20000378

08004730 <_isatty_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d06      	ldr	r5, [pc, #24]	@ (800474c <_isatty_r+0x1c>)
 8004734:	2300      	movs	r3, #0
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7fc fb0b 	bl	8000d56 <_isatty>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_isatty_r+0x1a>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_isatty_r+0x1a>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	20000378 	.word	0x20000378

08004750 <_sbrk_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4d06      	ldr	r5, [pc, #24]	@ (800476c <_sbrk_r+0x1c>)
 8004754:	2300      	movs	r3, #0
 8004756:	4604      	mov	r4, r0
 8004758:	4608      	mov	r0, r1
 800475a:	602b      	str	r3, [r5, #0]
 800475c:	f7fc fb14 	bl	8000d88 <_sbrk>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_sbrk_r+0x1a>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_sbrk_r+0x1a>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	20000378 	.word	0x20000378

08004770 <_init>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr

0800477c <_fini>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr
