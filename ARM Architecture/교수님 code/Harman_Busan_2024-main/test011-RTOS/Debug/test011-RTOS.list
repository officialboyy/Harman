
test011-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006974  08006974  00007974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b10  08006b10  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b10  08006b10  00007b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b18  08006b18  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b18  08006b18  00007b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b1c  08006b1c  00007b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006b20  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004260  2000006c  08006b8c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042cc  08006b8c  000082cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d65  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003412  00000000  00000000  0001de01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00021218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6e  00000000  00000000  000224c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192d8  00000000  00000000  0002332e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151d5  00000000  00000000  0003c606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000990c4  00000000  00000000  000517db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea89f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f8  00000000  00000000  000ea8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000efddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800695c 	.word	0x0800695c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800695c 	.word	0x0800695c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000088 	.word	0x20000088
 80005a0:	20000128 	.word	0x20000128

080005a4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
int IsHolding = 0;
int timer = 0, lpn = 0;
char dum[50];
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B4_Pin)
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	2b10      	cmp	r3, #16
 80005b2:	d115      	bne.n	80005e0 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		Outs("EXTI occured ...!--0\r");
 80005b4:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <HAL_GPIO_EXTI_Callback+0x44>)
 80005b6:	f000 faf3 	bl	8000ba0 <Outs>
		IsHolding = !IsHolding;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <HAL_GPIO_EXTI_Callback+0x48>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	bf0c      	ite	eq
 80005c2:	2301      	moveq	r3, #1
 80005c4:	2300      	movne	r3, #0
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <HAL_GPIO_EXTI_Callback+0x48>)
 80005cc:	601a      	str	r2, [r3, #0]
		if(IsHolding) osSemaphoreRelease(myBinarySem01Handle);
 80005ce:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <HAL_GPIO_EXTI_Callback+0x48>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d004      	beq.n	80005e0 <HAL_GPIO_EXTI_Callback+0x3c>
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fee6 	bl	80033ac <osSemaphoreRelease>
	}
	//else if(GPIO_Pin == B1_Pin)
	//{
	//}
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08006974 	.word	0x08006974
 80005ec:	200003c8 	.word	0x200003c8
 80005f0:	200003c4 	.word	0x200003c4

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b098      	sub	sp, #96	@ 0x60
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fd57 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f861 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f955 	bl	80008b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f929 	bl	800085c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800060a:	f000 f8d9 	bl	80007c0 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800060e:	f000 f8c3 	bl	8000798 <MX_NVIC_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000612:	2300      	movs	r3, #0
 8000614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000616:	2300      	movs	r3, #0
 8000618:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800061a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800061e:	2101      	movs	r1, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fe42 	bl	80032aa <osSemaphoreCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a1f      	ldr	r2, [pc, #124]	@ (80006a8 <main+0xb4>)
 800062a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartTask01, osPriorityNormal, 0, 128);
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <main+0xb8>)
 800062e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000640:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fdcf 	bl	80031ea <osThreadCreate>
 800064c:	4603      	mov	r3, r0
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <main+0xbc>)
 8000650:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityLow, 0, 128);
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <main+0xc0>)
 8000654:	f107 0420 	add.w	r4, r7, #32
 8000658:	461d      	mov	r5, r3
 800065a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fdbc 	bl	80031ea <osThreadCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <main+0xc4>)
 8000676:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <main+0xc8>)
 800067a:	1d3c      	adds	r4, r7, #4
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fdab 	bl	80031ea <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <main+0xcc>)
 8000698:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //while(osSemaphoreWait(myBinarySem01Handle, 0) != osOK);
  ProgramStart();
 800069a:	f000 faa5 	bl	8000be8 <ProgramStart>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f002 fd9d 	bl	80031dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0xae>
 80006a6:	bf00      	nop
 80006a8:	200003c4 	.word	0x200003c4
 80006ac:	08006998 	.word	0x08006998
 80006b0:	200003b8 	.word	0x200003b8
 80006b4:	080069c0 	.word	0x080069c0
 80006b8:	200003bc 	.word	0x200003bc
 80006bc:	080069e8 	.word	0x080069e8
 80006c0:	200003c0 	.word	0x200003c0

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	@ 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fb5a 	bl	8005d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	@ (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	@ (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000734:	2310      	movs	r3, #16
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000738:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800073c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073e:	2304      	movs	r3, #4
 8000740:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000742:	2304      	movs	r3, #4
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f000 ffde 	bl	800170c <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000756:	f000 fa0b 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fa40 	bl	8001bfc <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f9f5 	bl	8000b70 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2106      	movs	r1, #6
 80007a0:	200a      	movs	r0, #10
 80007a2:	f000 fda1 	bl	80012e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007a6:	200a      	movs	r0, #10
 80007a8:	f000 fdba 	bl	8001320 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5+1, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2106      	movs	r1, #6
 80007b0:	2028      	movs	r0, #40	@ 0x28
 80007b2:	f000 fd99 	bl	80012e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b6:	2028      	movs	r0, #40	@ 0x28
 80007b8:	f000 fdb2 	bl	8001320 <HAL_NVIC_EnableIRQ>
  //HAL_NVIC_SetPriority(EXTI15_10_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY+1, 0);
  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_TIM3_Init+0x94>)
 80007de:	4a1e      	ldr	r2, [pc, #120]	@ (8000858 <MX_TIM3_Init+0x98>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_TIM3_Init+0x94>)
 80007e4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80007e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_TIM3_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = (10000/3)-1;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_TIM3_Init+0x94>)
 80007f2:	f640 5204 	movw	r2, #3332	@ 0xd04
 80007f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_TIM3_Init+0x94>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MX_TIM3_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000804:	4813      	ldr	r0, [pc, #76]	@ (8000854 <MX_TIM3_Init+0x94>)
 8000806:	f001 fc4b 	bl	80020a0 <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000810:	f000 f9ae 	bl	8000b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <MX_TIM3_Init+0x94>)
 8000822:	f001 fe0e 	bl	8002442 <HAL_TIM_ConfigClockSource>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800082c:	f000 f9a0 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_TIM3_Init+0x94>)
 800083e:	f002 f815 	bl	800286c <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000848:	f000 f992 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000328 	.word	0x20000328
 8000858:	40000400 	.word	0x40000400

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_USART2_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000894:	f002 f86c 	bl	8002970 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 f967 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000370 	.word	0x20000370
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b3e      	ldr	r3, [pc, #248]	@ (80009c4 <MX_GPIO_Init+0x114>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a3d      	ldr	r2, [pc, #244]	@ (80009c4 <MX_GPIO_Init+0x114>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b3b      	ldr	r3, [pc, #236]	@ (80009c4 <MX_GPIO_Init+0x114>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b37      	ldr	r3, [pc, #220]	@ (80009c4 <MX_GPIO_Init+0x114>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a36      	ldr	r2, [pc, #216]	@ (80009c4 <MX_GPIO_Init+0x114>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <MX_GPIO_Init+0x114>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b30      	ldr	r3, [pc, #192]	@ (80009c4 <MX_GPIO_Init+0x114>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a2f      	ldr	r2, [pc, #188]	@ (80009c4 <MX_GPIO_Init+0x114>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b2d      	ldr	r3, [pc, #180]	@ (80009c4 <MX_GPIO_Init+0x114>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <MX_GPIO_Init+0x114>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a28      	ldr	r2, [pc, #160]	@ (80009c4 <MX_GPIO_Init+0x114>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <MX_GPIO_Init+0x114>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|A10_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800093c:	4822      	ldr	r0, [pc, #136]	@ (80009c8 <MX_GPIO_Init+0x118>)
 800093e:	f000 fe99 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B3_Pin|B5_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2128      	movs	r1, #40	@ 0x28
 8000946:	4821      	ldr	r0, [pc, #132]	@ (80009cc <MX_GPIO_Init+0x11c>)
 8000948:	f000 fe94 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000952:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	481b      	ldr	r0, [pc, #108]	@ (80009d0 <MX_GPIO_Init+0x120>)
 8000964:	f000 fcea 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin A10_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|A10_Pin;
 8000968:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <MX_GPIO_Init+0x118>)
 8000982:	f000 fcdb 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : B3_Pin B5_Pin */
  GPIO_InitStruct.Pin = B3_Pin|B5_Pin;
 8000986:	2328      	movs	r3, #40	@ 0x28
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <MX_GPIO_Init+0x11c>)
 800099e:	f000 fccd 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pin : B4_Pin */
  GPIO_InitStruct.Pin = B4_Pin;
 80009a2:	2310      	movs	r3, #16
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B4_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_GPIO_Init+0x11c>)
 80009b8:	f000 fcc0 	bl	800133c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	@ 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020800 	.word	0x40020800

080009d4 <StartTask01>:
  * @retval None
  */
int tn1 = 0;
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <StartTask01+0x58>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fc94 	bl	8003310 <osSemaphoreWait>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d119      	bne.n	8000a22 <StartTask01+0x4e>
	  {
		  HAL_GPIO_TogglePin(A10_GPIO_Port, A10_Pin);
 80009ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f2:	480f      	ldr	r0, [pc, #60]	@ (8000a30 <StartTask01+0x5c>)
 80009f4:	f000 fe57 	bl	80016a6 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80009f8:	2064      	movs	r0, #100	@ 0x64
 80009fa:	f000 fb99 	bl	8001130 <HAL_Delay>
		  printf("Process in Task01 --- %d\r\n",tn1++);
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <StartTask01+0x60>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	490b      	ldr	r1, [pc, #44]	@ (8000a34 <StartTask01+0x60>)
 8000a06:	600a      	str	r2, [r1, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <StartTask01+0x64>)
 8000a0c:	f005 f876 	bl	8005afc <iprintf>
		  if(!IsHolding) osSemaphoreRelease(myBinarySem01Handle);
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <StartTask01+0x68>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d104      	bne.n	8000a22 <StartTask01+0x4e>
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <StartTask01+0x58>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fcc5 	bl	80033ac <osSemaphoreRelease>
	  }
	  osDelay(1);
 8000a22:	2001      	movs	r0, #1
 8000a24:	f002 fc2d 	bl	8003282 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a28:	e7d8      	b.n	80009dc <StartTask01+0x8>
 8000a2a:	bf00      	nop
 8000a2c:	200003c4 	.word	0x200003c4
 8000a30:	40020000 	.word	0x40020000
 8000a34:	200003d0 	.word	0x200003d0
 8000a38:	08006a04 	.word	0x08006a04
 8000a3c:	200003c8 	.word	0x200003c8

08000a40 <StartTask02>:
* @retval None
*/
int tn2 = 0;
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <StartTask02+0x54>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fc5e 	bl	8003310 <osSemaphoreWait>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d118      	bne.n	8000a8c <StartTask02+0x4c>
	  {
		  HAL_GPIO_TogglePin(B3_GPIO_Port, B3_Pin);
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <StartTask02+0x58>)
 8000a5e:	f000 fe22 	bl	80016a6 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000a62:	2064      	movs	r0, #100	@ 0x64
 8000a64:	f000 fb64 	bl	8001130 <HAL_Delay>
		  printf("Process in Task02 --- %d\r\n",tn2++);
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <StartTask02+0x5c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	490b      	ldr	r1, [pc, #44]	@ (8000a9c <StartTask02+0x5c>)
 8000a70:	600a      	str	r2, [r1, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	480a      	ldr	r0, [pc, #40]	@ (8000aa0 <StartTask02+0x60>)
 8000a76:	f005 f841 	bl	8005afc <iprintf>
		  if(!IsHolding) osSemaphoreRelease(myBinarySem01Handle);
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <StartTask02+0x64>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d104      	bne.n	8000a8c <StartTask02+0x4c>
 8000a82:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <StartTask02+0x54>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 fc90 	bl	80033ac <osSemaphoreRelease>
	  }
	  osDelay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f002 fbf8 	bl	8003282 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a92:	e7d9      	b.n	8000a48 <StartTask02+0x8>
 8000a94:	200003c4 	.word	0x200003c4
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	200003d4 	.word	0x200003d4
 8000aa0:	08006a20 	.word	0x08006a20
 8000aa4:	200003c8 	.word	0x200003c8

08000aa8 <StartTask03>:
* @retval None
*/
int tn3 = 0;
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <StartTask03+0x54>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fc2a 	bl	8003310 <osSemaphoreWait>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d118      	bne.n	8000af4 <StartTask03+0x4c>
	  {
		  HAL_GPIO_TogglePin(B5_GPIO_Port, B5_Pin);
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <StartTask03+0x58>)
 8000ac6:	f000 fdee 	bl	80016a6 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000aca:	2064      	movs	r0, #100	@ 0x64
 8000acc:	f000 fb30 	bl	8001130 <HAL_Delay>
		  printf("Process in Task03 --------%d\r\n", tn3++);
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <StartTask03+0x5c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	490b      	ldr	r1, [pc, #44]	@ (8000b04 <StartTask03+0x5c>)
 8000ad8:	600a      	str	r2, [r1, #0]
 8000ada:	4619      	mov	r1, r3
 8000adc:	480a      	ldr	r0, [pc, #40]	@ (8000b08 <StartTask03+0x60>)
 8000ade:	f005 f80d 	bl	8005afc <iprintf>
		  if(!IsHolding) osSemaphoreRelease(myBinarySem01Handle);
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <StartTask03+0x64>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d104      	bne.n	8000af4 <StartTask03+0x4c>
 8000aea:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <StartTask03+0x54>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 fc5c 	bl	80033ac <osSemaphoreRelease>
	  }
	  osDelay(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f002 fbc4 	bl	8003282 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000afa:	e7d9      	b.n	8000ab0 <StartTask03+0x8>
 8000afc:	200003c4 	.word	0x200003c4
 8000b00:	40020400 	.word	0x40020400
 8000b04:	200003d8 	.word	0x200003d8
 8000b08:	08006a3c 	.word	0x08006a3c
 8000b0c:	200003c8 	.word	0x200003c8

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d102      	bne.n	8000b28 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000b22:	f000 fae5 	bl	80010f0 <HAL_IncTick>
	printf("Semaphore released in Timer3\r\n");
	osSemaphoreRelease(myBinarySem01Handle);
  }

  /* USER CODE END Callback 1 */
}
 8000b26:	e012      	b.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x3e>
  else if(htim->Instance == TIM3) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10d      	bne.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x3e>
	HAL_TIM_Base_Stop_IT(&htim3); timer = 0;
 8000b32:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b34:	f001 fb66 	bl	8002204 <HAL_TIM_Base_Stop_IT>
 8000b38:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
	printf("Semaphore released in Timer3\r\n");
 8000b3e:	480a      	ldr	r0, [pc, #40]	@ (8000b68 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b40:	f005 f844 	bl	8005bcc <puts>
	osSemaphoreRelease(myBinarySem01Handle);
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fc2f 	bl	80033ac <osSemaphoreRelease>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40014000 	.word	0x40014000
 8000b5c:	40000400 	.word	0x40000400
 8000b60:	20000328 	.word	0x20000328
 8000b64:	200003cc 	.word	0x200003cc
 8000b68:	08006a5c 	.word	0x08006a5c
 8000b6c:	200003c4 	.word	0x200003c4

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <Error_Handler+0x8>

08000b7c <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000b84:	1d39      	adds	r1, r7, #4
 8000b86:	230a      	movs	r3, #10
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <__io_putchar+0x20>)
 8000b8c:	f001 ff40 	bl	8002a10 <HAL_UART_Transmit>
	return ch;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000370 	.word	0x20000370

08000ba0 <Outs>:

void Outs(char *s)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	//while(1)
	//{
	//	if(*s != 0) { __io_putchar(*s); s++; }
	//	else break;
	//}
	while(*s) (*s != '\r') ? __io_putchar(*s++) :
 8000ba8:	e015      	b.n	8000bd6 <Outs+0x36>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b0d      	cmp	r3, #13
 8000bb0:	d007      	beq.n	8000bc2 <Outs+0x22>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ffde 	bl	8000b7c <__io_putchar>
 8000bc0:	e009      	b.n	8000bd6 <Outs+0x36>
			                (__io_putchar(*s++),__io_putchar('\n'));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ffd6 	bl	8000b7c <__io_putchar>
 8000bd0:	200a      	movs	r0, #10
 8000bd2:	f7ff ffd3 	bl	8000b7c <__io_putchar>
	while(*s) (*s != '\r') ? __io_putchar(*s++) :
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1e5      	bne.n	8000baa <Outs+0xa>
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <ProgramStart>:
	//HAL_ADC_PollForConversion(&hadc1, 10);
	//return HAL_ADC_GetValue(&hadc1);
}

void ProgramStart()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	printf("\033[2J");	// screen clear
 8000bec:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <ProgramStart+0x28>)
 8000bee:	f004 ff85 	bl	8005afc <iprintf>
	printf("\033[1;1H");	// Move cursor pos to (1,1)
 8000bf2:	4808      	ldr	r0, [pc, #32]	@ (8000c14 <ProgramStart+0x2c>)
 8000bf4:	f004 ff82 	bl	8005afc <iprintf>
	printf("Program Started");
 8000bf8:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <ProgramStart+0x30>)
 8000bfa:	f004 ff7f 	bl	8005afc <iprintf>
	Wait(1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 f80c 	bl	8000c1c <Wait>
	printf("\033[2J");	// screen clear
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <ProgramStart+0x28>)
 8000c06:	f004 ff79 	bl	8005afc <iprintf>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08006a7c 	.word	0x08006a7c
 8000c14:	08006a84 	.word	0x08006a84
 8000c18:	08006a8c 	.word	0x08006a8c

08000c1c <Wait>:

void Wait(int o)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if(o) printf("Press Blue button to continue\r\n");
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <Wait+0x14>
 8000c2a:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <Wait+0x30>)
 8000c2c:	f004 ffce 	bl	8005bcc <puts>
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 8000c30:	bf00      	nop
 8000c32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c36:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <Wait+0x34>)
 8000c38:	f000 fd04 	bl	8001644 <HAL_GPIO_ReadPin>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1f7      	bne.n	8000c32 <Wait+0x16>
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	08006a9c 	.word	0x08006a9c
 8000c50:	40020800 	.word	0x40020800

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <HAL_MspInit+0x54>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	4a11      	ldr	r2, [pc, #68]	@ (8000ca8 <HAL_MspInit+0x54>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <HAL_MspInit+0x54>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_MspInit+0x54>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_MspInit+0x54>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x54>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	210f      	movs	r1, #15
 8000c96:	f06f 0001 	mvn.w	r0, #1
 8000c9a:	f000 fb25 	bl	80012e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <HAL_TIM_Base_MspInit+0x48>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d115      	bne.n	8000cea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x4c>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2105      	movs	r1, #5
 8000cde:	201d      	movs	r0, #29
 8000ce0:	f000 fb02 	bl	80012e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ce4:	201d      	movs	r0, #29
 8000ce6:	f000 fb1b 	bl	8001320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40000400 	.word	0x40000400
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	@ (8000d80 <HAL_UART_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12b      	bne.n	8000d76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	4a17      	ldr	r2, [pc, #92]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d56:	230c      	movs	r3, #12
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d66:	2307      	movs	r3, #7
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <HAL_UART_MspInit+0x8c>)
 8000d72:	f000 fae3 	bl	800133c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	@ 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	@ 0x30
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e5c <HAL_InitTick+0xd0>)
 8000da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da4:	4a2d      	ldr	r2, [pc, #180]	@ (8000e5c <HAL_InitTick+0xd0>)
 8000da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000daa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dac:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <HAL_InitTick+0xd0>)
 8000dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db8:	f107 020c 	add.w	r2, r7, #12
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 f93a 	bl	800203c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dc8:	f001 f924 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 8000dcc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd0:	4a23      	ldr	r2, [pc, #140]	@ (8000e60 <HAL_InitTick+0xd4>)
 8000dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd6:	0c9b      	lsrs	r3, r3, #18
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <HAL_InitTick+0xd8>)
 8000dde:	4a22      	ldr	r2, [pc, #136]	@ (8000e68 <HAL_InitTick+0xdc>)
 8000de0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000de2:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <HAL_InitTick+0xd8>)
 8000de4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000de8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000dea:	4a1e      	ldr	r2, [pc, #120]	@ (8000e64 <HAL_InitTick+0xd8>)
 8000dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dee:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <HAL_InitTick+0xd8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <HAL_InitTick+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <HAL_InitTick+0xd8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000e02:	4818      	ldr	r0, [pc, #96]	@ (8000e64 <HAL_InitTick+0xd8>)
 8000e04:	f001 f94c 	bl	80020a0 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d11b      	bne.n	8000e4e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000e16:	4813      	ldr	r0, [pc, #76]	@ (8000e64 <HAL_InitTick+0xd8>)
 8000e18:	f001 f992 	bl	8002140 <HAL_TIM_Base_Start_IT>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d111      	bne.n	8000e4e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000e2a:	2018      	movs	r0, #24
 8000e2c:	f000 fa78 	bl	8001320 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	d808      	bhi.n	8000e48 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000e36:	2200      	movs	r2, #0
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	2018      	movs	r0, #24
 8000e3c:	f000 fa54 	bl	80012e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e40:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_InitTick+0xe0>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e002      	b.n	8000e4e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3730      	adds	r7, #48	@ 0x30
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	431bde83 	.word	0x431bde83
 8000e64:	200003dc 	.word	0x200003dc
 8000e68:	40014000 	.word	0x40014000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <NMI_Handler+0x4>

08000e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <MemManage_Handler+0x4>

08000e88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B4_Pin);
 8000eaa:	2010      	movs	r0, #16
 8000eac:	f000 fc16 	bl	80016dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000eba:	f001 f9d2 	bl	8002262 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200003dc 	.word	0x200003dc

08000ec8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <TIM3_IRQHandler+0x10>)
 8000ece:	f001 f9c8 	bl	8002262 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000328 	.word	0x20000328

08000edc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ee0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ee4:	f000 fbfa 	bl	80016dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e00a      	b.n	8000f14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000efe:	f3af 8000 	nop.w
 8000f02:	4601      	mov	r1, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	b2ca      	uxtb	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf0      	blt.n	8000efe <_read+0x12>
  }

  return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e009      	b.n	8000f4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe1b 	bl	8000b7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf1      	blt.n	8000f38 <_write+0x12>
  }
  return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_close>:

int _close(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f86:	605a      	str	r2, [r3, #4]
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_isatty>:

int _isatty(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f004 ff6c 	bl	8005ed4 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20020000 	.word	0x20020000
 8001028:	00000400 	.word	0x00000400
 800102c:	20000424 	.word	0x20000424
 8001030:	200042d0 	.word	0x200042d0

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001090 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105c:	f7ff ffea 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	@ (8001094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	@ (8001098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	@ (80010a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001086:	f004 ff2b 	bl	8005ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fab3 	bl	80005f4 <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800109c:	08006b20 	.word	0x08006b20
  ldr r2, =_sbss
 80010a0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010a4:	200042cc 	.word	0x200042cc

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f8fc 	bl	80012d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	200f      	movs	r0, #15
 80010dc:	f7ff fe56 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fdb8 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	20000428 	.word	0x20000428

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000428 	.word	0x20000428

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	@ (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	@ (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	@ (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ff4c 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fa:	f7ff ff61 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 80012fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	f7ff ffb1 	bl	800126c <NVIC_EncodePriority>
 800130a:	4602      	mov	r2, r0
 800130c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff80 	bl	8001218 <__NVIC_SetPriority>
}
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff54 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	@ 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	e159      	b.n	800160c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001358:	2201      	movs	r2, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	429a      	cmp	r2, r3
 8001372:	f040 8148 	bne.w	8001606 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b01      	cmp	r3, #1
 8001380:	d005      	beq.n	800138e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138a:	2b02      	cmp	r3, #2
 800138c:	d130      	bne.n	80013f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2203      	movs	r2, #3
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c4:	2201      	movs	r2, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 0201 	and.w	r2, r3, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d017      	beq.n	800142c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d123      	bne.n	8001480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	08da      	lsrs	r2, r3, #3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3208      	adds	r2, #8
 8001440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	220f      	movs	r2, #15
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	69b9      	ldr	r1, [r7, #24]
 800147c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0203 	and.w	r2, r3, #3
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80a2 	beq.w	8001606 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b57      	ldr	r3, [pc, #348]	@ (8001624 <HAL_GPIO_Init+0x2e8>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a56      	ldr	r2, [pc, #344]	@ (8001624 <HAL_GPIO_Init+0x2e8>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b54      	ldr	r3, [pc, #336]	@ (8001624 <HAL_GPIO_Init+0x2e8>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014de:	4a52      	ldr	r2, [pc, #328]	@ (8001628 <HAL_GPIO_Init+0x2ec>)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a49      	ldr	r2, [pc, #292]	@ (800162c <HAL_GPIO_Init+0x2f0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0x202>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a48      	ldr	r2, [pc, #288]	@ (8001630 <HAL_GPIO_Init+0x2f4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x1fe>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a47      	ldr	r2, [pc, #284]	@ (8001634 <HAL_GPIO_Init+0x2f8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x1fa>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a46      	ldr	r2, [pc, #280]	@ (8001638 <HAL_GPIO_Init+0x2fc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x1f6>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a45      	ldr	r2, [pc, #276]	@ (800163c <HAL_GPIO_Init+0x300>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x1f2>
 800152a:	2304      	movs	r3, #4
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x204>
 800152e:	2307      	movs	r3, #7
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x204>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x204>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x204>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x204>
 800153e:	2300      	movs	r3, #0
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001550:	4935      	ldr	r1, [pc, #212]	@ (8001628 <HAL_GPIO_Init+0x2ec>)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155e:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <HAL_GPIO_Init+0x304>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001582:	4a2f      	ldr	r2, [pc, #188]	@ (8001640 <HAL_GPIO_Init+0x304>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001588:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <HAL_GPIO_Init+0x304>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ac:	4a24      	ldr	r2, [pc, #144]	@ (8001640 <HAL_GPIO_Init+0x304>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015b2:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <HAL_GPIO_Init+0x304>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001640 <HAL_GPIO_Init+0x304>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015dc:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <HAL_GPIO_Init+0x304>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001600:	4a0f      	ldr	r2, [pc, #60]	@ (8001640 <HAL_GPIO_Init+0x304>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3301      	adds	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b0f      	cmp	r3, #15
 8001610:	f67f aea2 	bls.w	8001358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3724      	adds	r7, #36	@ 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40013800 	.word	0x40013800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40013c00 	.word	0x40013c00

08001644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e001      	b.n	8001666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016b8:	887a      	ldrh	r2, [r7, #2]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4013      	ands	r3, r2
 80016be:	041a      	lsls	r2, r3, #16
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	400b      	ands	r3, r1
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	619a      	str	r2, [r3, #24]
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff52 	bl	80005a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e267      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d075      	beq.n	8001816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800172a:	4b88      	ldr	r3, [pc, #544]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d00c      	beq.n	8001750 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b85      	ldr	r3, [pc, #532]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173e:	2b08      	cmp	r3, #8
 8001740:	d112      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b82      	ldr	r3, [pc, #520]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800174e:	d10b      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	4b7e      	ldr	r3, [pc, #504]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05b      	beq.n	8001814 <HAL_RCC_OscConfig+0x108>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d157      	bne.n	8001814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e242      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x74>
 8001772:	4b76      	ldr	r3, [pc, #472]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a75      	ldr	r2, [pc, #468]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e01d      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x98>
 800178a:	4b70      	ldr	r3, [pc, #448]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6f      	ldr	r2, [pc, #444]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b6d      	ldr	r3, [pc, #436]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6c      	ldr	r2, [pc, #432]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 80017a4:	4b69      	ldr	r3, [pc, #420]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a68      	ldr	r2, [pc, #416]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b66      	ldr	r3, [pc, #408]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a65      	ldr	r2, [pc, #404]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fca8 	bl	8001118 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fca4 	bl	8001118 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	@ 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e207      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0xc0>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc94 	bl	8001118 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fc90 	bl	8001118 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1f3      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b51      	ldr	r3, [pc, #324]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0xe8>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d063      	beq.n	80018ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001822:	4b4a      	ldr	r3, [pc, #296]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b47      	ldr	r3, [pc, #284]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001836:	2b08      	cmp	r3, #8
 8001838:	d11c      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b44      	ldr	r3, [pc, #272]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b41      	ldr	r3, [pc, #260]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1c7      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4937      	ldr	r1, [pc, #220]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e03a      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fc49 	bl	8001118 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fc45 	bl	8001118 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1a8      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4925      	ldr	r1, [pc, #148]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fc28 	bl	8001118 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fc24 	bl	8001118 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e187      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d036      	beq.n	8001964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fc08 	bl	8001118 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fc04 	bl	8001118 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e167      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x200>
 800192a:	e01b      	b.n	8001964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fbf1 	bl	8001118 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	e00e      	b.n	8001958 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fbed 	bl	8001118 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d907      	bls.n	8001958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e150      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 800194c:	40023800 	.word	0x40023800
 8001950:	42470000 	.word	0x42470000
 8001954:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b88      	ldr	r3, [pc, #544]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ea      	bne.n	800193a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 8097 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b81      	ldr	r3, [pc, #516]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b7d      	ldr	r3, [pc, #500]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b7a      	ldr	r3, [pc, #488]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b77      	ldr	r3, [pc, #476]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b74      	ldr	r3, [pc, #464]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a73      	ldr	r2, [pc, #460]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fbad 	bl	8001118 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fba9 	bl	8001118 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e10c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2ea>
 80019e8:	4b64      	ldr	r3, [pc, #400]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ec:	4a63      	ldr	r2, [pc, #396]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f4:	e01c      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x30c>
 80019fe:	4b5f      	ldr	r3, [pc, #380]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a02:	4a5e      	ldr	r2, [pc, #376]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 8001a18:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1c:	4a57      	ldr	r2, [pc, #348]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a24:	4b55      	ldr	r3, [pc, #340]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a28:	4a54      	ldr	r2, [pc, #336]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d015      	beq.n	8001a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff fb6e 	bl	8001118 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff fb6a 	bl	8001118 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0cb      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	4b49      	ldr	r3, [pc, #292]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ee      	beq.n	8001a40 <HAL_RCC_OscConfig+0x334>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff fb58 	bl	8001118 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fb54 	bl	8001118 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0b5      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	4b3e      	ldr	r3, [pc, #248]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b39      	ldr	r3, [pc, #228]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a38      	ldr	r2, [pc, #224]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a1 	beq.w	8001bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d05c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d141      	bne.n	8001b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb28 	bl	8001118 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff fb24 	bl	8001118 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e087      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	491b      	ldr	r1, [pc, #108]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fafd 	bl	8001118 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff faf9 	bl	8001118 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e05c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x416>
 8001b40:	e054      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fae6 	bl	8001118 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fae2 	bl	8001118 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e045      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x444>
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e038      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000
 8001b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ec>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d028      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d121      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d11a      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0cc      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b68      	ldr	r3, [pc, #416]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d90c      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b65      	ldr	r3, [pc, #404]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b63      	ldr	r3, [pc, #396]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c50:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a58      	ldr	r2, [pc, #352]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c68:	4b53      	ldr	r3, [pc, #332]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b50      	ldr	r3, [pc, #320]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	494d      	ldr	r1, [pc, #308]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d044      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b47      	ldr	r3, [pc, #284]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b3f      	ldr	r3, [pc, #252]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e067      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4934      	ldr	r1, [pc, #208]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff fa14 	bl	8001118 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7ff fa10 	bl	8001118 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e04f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d20c      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4916      	ldr	r1, [pc, #88]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490e      	ldr	r1, [pc, #56]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d82:	f000 f821 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490a      	ldr	r1, [pc, #40]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fff2 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08006ac4 	.word	0x08006ac4
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dcc:	b094      	sub	sp, #80	@ 0x50
 8001dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dd8:	2300      	movs	r3, #0
 8001dda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de0:	4b79      	ldr	r3, [pc, #484]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d00d      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x40>
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	f200 80e1 	bhi.w	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x34>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfa:	e0db      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b73      	ldr	r3, [pc, #460]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001e00:	e0db      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e02:	4b73      	ldr	r3, [pc, #460]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e06:	e0d8      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e12:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	2200      	movs	r2, #0
 8001e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	0159      	lsls	r1, r3, #5
 8001e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4c:	0150      	lsls	r0, r2, #5
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4621      	mov	r1, r4
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	6139      	str	r1, [r7, #16]
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e6c:	4659      	mov	r1, fp
 8001e6e:	018b      	lsls	r3, r1, #6
 8001e70:	4651      	mov	r1, sl
 8001e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e76:	4651      	mov	r1, sl
 8001e78:	018a      	lsls	r2, r1, #6
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e80:	4659      	mov	r1, fp
 8001e82:	eb63 0901 	sbc.w	r9, r3, r1
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e9a:	4690      	mov	r8, r2
 8001e9c:	4699      	mov	r9, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	eb18 0303 	adds.w	r3, r8, r3
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	eb49 0303 	adc.w	r3, r9, r3
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	024b      	lsls	r3, r1, #9
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	024a      	lsls	r2, r1, #9
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ed8:	f7fe f9d2 	bl	8000280 <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ee4:	e058      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	4b38      	ldr	r3, [pc, #224]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	099b      	lsrs	r3, r3, #6
 8001eec:	2200      	movs	r2, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f00:	4642      	mov	r2, r8
 8001f02:	464b      	mov	r3, r9
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f12:	0150      	lsls	r0, r2, #5
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4641      	mov	r1, r8
 8001f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f1e:	4649      	mov	r1, r9
 8001f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f38:	ebb2 040a 	subs.w	r4, r2, sl
 8001f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	00eb      	lsls	r3, r5, #3
 8001f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4e:	00e2      	lsls	r2, r4, #3
 8001f50:	4614      	mov	r4, r2
 8001f52:	461d      	mov	r5, r3
 8001f54:	4643      	mov	r3, r8
 8001f56:	18e3      	adds	r3, r4, r3
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	eb45 0303 	adc.w	r3, r5, r3
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	028b      	lsls	r3, r1, #10
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f78:	4621      	mov	r1, r4
 8001f7a:	028a      	lsls	r2, r1, #10
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	61fa      	str	r2, [r7, #28]
 8001f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f8c:	f7fe f978 	bl	8000280 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001fa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb2:	e002      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3750      	adds	r7, #80	@ 0x50
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	007a1200 	.word	0x007a1200

08001fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000000 	.word	0x20000000

08001fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ff0:	f7ff fff0 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	0a9b      	lsrs	r3, r3, #10
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4903      	ldr	r1, [pc, #12]	@ (8002010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	08006ad4 	.word	0x08006ad4

08002014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002018:	f7ff ffdc 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0b5b      	lsrs	r3, r3, #13
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4903      	ldr	r1, [pc, #12]	@ (8002038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	08006ad4 	.word	0x08006ad4

0800203c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	220f      	movs	r2, #15
 800204a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <HAL_RCC_GetClockConfig+0x60>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0207 	and.w	r2, r3, #7
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e041      	b.n	8002136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe fdf0 	bl	8000cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f000 fa9e 	bl	8002620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d001      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e044      	b.n	80021e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d018      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002182:	d013      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1a      	ldr	r2, [pc, #104]	@ (80021f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00e      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a19      	ldr	r2, [pc, #100]	@ (80021f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d009      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a17      	ldr	r2, [pc, #92]	@ (80021fc <HAL_TIM_Base_Start_IT+0xbc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d004      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x6c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a16      	ldr	r2, [pc, #88]	@ (8002200 <HAL_TIM_Base_Start_IT+0xc0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d111      	bne.n	80021d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d010      	beq.n	80021e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ce:	e007      	b.n	80021e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000c00 	.word	0x40000c00
 8002200:	40014000 	.word	0x40014000

08002204 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6a1a      	ldr	r2, [r3, #32]
 8002222:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10f      	bne.n	800224c <HAL_TIM_Base_Stop_IT+0x48>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	f240 4344 	movw	r3, #1092	@ 0x444
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_TIM_Base_Stop_IT+0x48>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01b      	beq.n	80022c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f06f 0202 	mvn.w	r2, #2
 8002296:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f999 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 80022b2:	e005      	b.n	80022c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f98b 	bl	80025d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f99c 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01b      	beq.n	8002312 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f06f 0204 	mvn.w	r2, #4
 80022e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f973 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 80022fe:	e005      	b.n	800230c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f965 	bl	80025d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f976 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d01b      	beq.n	800235e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f06f 0208 	mvn.w	r2, #8
 800232e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2204      	movs	r2, #4
 8002334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f94d 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 800234a:	e005      	b.n	8002358 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f93f 	bl	80025d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f950 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01b      	beq.n	80023aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f06f 0210 	mvn.w	r2, #16
 800237a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2208      	movs	r2, #8
 8002380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f927 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 8002396:	e005      	b.n	80023a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f919 	bl	80025d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f92a 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f06f 0201 	mvn.w	r2, #1
 80023c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7fe fba1 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00c      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fab5 	bl	800295c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800240e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f8fb 	bl	800260c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00c      	beq.n	800243a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f06f 0220 	mvn.w	r2, #32
 8002432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fa87 	bl	8002948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_TIM_ConfigClockSource+0x1c>
 800245a:	2302      	movs	r3, #2
 800245c:	e0b4      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x186>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800247c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002484:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002496:	d03e      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0xd4>
 8002498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800249c:	f200 8087 	bhi.w	80025ae <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a4:	f000 8086 	beq.w	80025b4 <HAL_TIM_ConfigClockSource+0x172>
 80024a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ac:	d87f      	bhi.n	80025ae <HAL_TIM_ConfigClockSource+0x16c>
 80024ae:	2b70      	cmp	r3, #112	@ 0x70
 80024b0:	d01a      	beq.n	80024e8 <HAL_TIM_ConfigClockSource+0xa6>
 80024b2:	2b70      	cmp	r3, #112	@ 0x70
 80024b4:	d87b      	bhi.n	80025ae <HAL_TIM_ConfigClockSource+0x16c>
 80024b6:	2b60      	cmp	r3, #96	@ 0x60
 80024b8:	d050      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x11a>
 80024ba:	2b60      	cmp	r3, #96	@ 0x60
 80024bc:	d877      	bhi.n	80025ae <HAL_TIM_ConfigClockSource+0x16c>
 80024be:	2b50      	cmp	r3, #80	@ 0x50
 80024c0:	d03c      	beq.n	800253c <HAL_TIM_ConfigClockSource+0xfa>
 80024c2:	2b50      	cmp	r3, #80	@ 0x50
 80024c4:	d873      	bhi.n	80025ae <HAL_TIM_ConfigClockSource+0x16c>
 80024c6:	2b40      	cmp	r3, #64	@ 0x40
 80024c8:	d058      	beq.n	800257c <HAL_TIM_ConfigClockSource+0x13a>
 80024ca:	2b40      	cmp	r3, #64	@ 0x40
 80024cc:	d86f      	bhi.n	80025ae <HAL_TIM_ConfigClockSource+0x16c>
 80024ce:	2b30      	cmp	r3, #48	@ 0x30
 80024d0:	d064      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x15a>
 80024d2:	2b30      	cmp	r3, #48	@ 0x30
 80024d4:	d86b      	bhi.n	80025ae <HAL_TIM_ConfigClockSource+0x16c>
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d060      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x15a>
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d867      	bhi.n	80025ae <HAL_TIM_ConfigClockSource+0x16c>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d05c      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x15a>
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d05a      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x15a>
 80024e6:	e062      	b.n	80025ae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024f8:	f000 f998 	bl	800282c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800250a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	609a      	str	r2, [r3, #8]
      break;
 8002514:	e04f      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002526:	f000 f981 	bl	800282c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002538:	609a      	str	r2, [r3, #8]
      break;
 800253a:	e03c      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002548:	461a      	mov	r2, r3
 800254a:	f000 f8f5 	bl	8002738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2150      	movs	r1, #80	@ 0x50
 8002554:	4618      	mov	r0, r3
 8002556:	f000 f94e 	bl	80027f6 <TIM_ITRx_SetConfig>
      break;
 800255a:	e02c      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002568:	461a      	mov	r2, r3
 800256a:	f000 f914 	bl	8002796 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2160      	movs	r1, #96	@ 0x60
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f93e 	bl	80027f6 <TIM_ITRx_SetConfig>
      break;
 800257a:	e01c      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002588:	461a      	mov	r2, r3
 800258a:	f000 f8d5 	bl	8002738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2140      	movs	r1, #64	@ 0x40
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f92e 	bl	80027f6 <TIM_ITRx_SetConfig>
      break;
 800259a:	e00c      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f000 f925 	bl	80027f6 <TIM_ITRx_SetConfig>
      break;
 80025ac:	e003      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      break;
 80025b2:	e000      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3a      	ldr	r2, [pc, #232]	@ (800271c <TIM_Base_SetConfig+0xfc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00f      	beq.n	8002658 <TIM_Base_SetConfig+0x38>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800263e:	d00b      	beq.n	8002658 <TIM_Base_SetConfig+0x38>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a37      	ldr	r2, [pc, #220]	@ (8002720 <TIM_Base_SetConfig+0x100>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <TIM_Base_SetConfig+0x38>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a36      	ldr	r2, [pc, #216]	@ (8002724 <TIM_Base_SetConfig+0x104>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x38>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a35      	ldr	r2, [pc, #212]	@ (8002728 <TIM_Base_SetConfig+0x108>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2b      	ldr	r2, [pc, #172]	@ (800271c <TIM_Base_SetConfig+0xfc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01b      	beq.n	80026aa <TIM_Base_SetConfig+0x8a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002678:	d017      	beq.n	80026aa <TIM_Base_SetConfig+0x8a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a28      	ldr	r2, [pc, #160]	@ (8002720 <TIM_Base_SetConfig+0x100>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <TIM_Base_SetConfig+0x8a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a27      	ldr	r2, [pc, #156]	@ (8002724 <TIM_Base_SetConfig+0x104>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00f      	beq.n	80026aa <TIM_Base_SetConfig+0x8a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a26      	ldr	r2, [pc, #152]	@ (8002728 <TIM_Base_SetConfig+0x108>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00b      	beq.n	80026aa <TIM_Base_SetConfig+0x8a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a25      	ldr	r2, [pc, #148]	@ (800272c <TIM_Base_SetConfig+0x10c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <TIM_Base_SetConfig+0x8a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a24      	ldr	r2, [pc, #144]	@ (8002730 <TIM_Base_SetConfig+0x110>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d003      	beq.n	80026aa <TIM_Base_SetConfig+0x8a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a23      	ldr	r2, [pc, #140]	@ (8002734 <TIM_Base_SetConfig+0x114>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d108      	bne.n	80026bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0e      	ldr	r2, [pc, #56]	@ (800271c <TIM_Base_SetConfig+0xfc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d103      	bne.n	80026f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f023 0201 	bic.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	611a      	str	r2, [r3, #16]
  }
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40010000 	.word	0x40010000
 8002720:	40000400 	.word	0x40000400
 8002724:	40000800 	.word	0x40000800
 8002728:	40000c00 	.word	0x40000c00
 800272c:	40014000 	.word	0x40014000
 8002730:	40014400 	.word	0x40014400
 8002734:	40014800 	.word	0x40014800

08002738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0201 	bic.w	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f023 030a 	bic.w	r3, r3, #10
 8002774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	621a      	str	r2, [r3, #32]
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002796:	b480      	push	{r7}
 8002798:	b087      	sub	sp, #28
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f023 0210 	bic.w	r2, r3, #16
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	031b      	lsls	r3, r3, #12
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	621a      	str	r2, [r3, #32]
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800280c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	f043 0307 	orr.w	r3, r3, #7
 8002818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	021a      	lsls	r2, r3, #8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	431a      	orrs	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4313      	orrs	r3, r2
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002880:	2302      	movs	r3, #2
 8002882:	e050      	b.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d018      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d0:	d013      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a16      	ldr	r2, [pc, #88]	@ (800293c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a15      	ldr	r2, [pc, #84]	@ (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a13      	ldr	r2, [pc, #76]	@ (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10c      	bne.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40014000 	.word	0x40014000

08002948 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e042      	b.n	8002a08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe f9b0 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	@ 0x24
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f973 	bl	8002ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	@ 0x28
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d175      	bne.n	8002b1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_UART_Transmit+0x2c>
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e06e      	b.n	8002b1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2221      	movs	r2, #33	@ 0x21
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fb63 	bl	8001118 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	88fa      	ldrh	r2, [r7, #6]
 8002a5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a68:	d108      	bne.n	8002a7c <HAL_UART_Transmit+0x6c>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d104      	bne.n	8002a7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	e003      	b.n	8002a84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a84:	e02e      	b.n	8002ae4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2180      	movs	r1, #128	@ 0x80
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f848 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e03a      	b.n	8002b1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10b      	bne.n	8002ac6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002abc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	e007      	b.n	8002ad6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1cb      	bne.n	8002a86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2140      	movs	r1, #64	@ 0x40
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f814 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e006      	b.n	8002b1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b36:	e03b      	b.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d037      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b40:	f7fe faea 	bl	8001118 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	6a3a      	ldr	r2, [r7, #32]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d302      	bcc.n	8002b56 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e03a      	b.n	8002bd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d023      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b80      	cmp	r3, #128	@ 0x80
 8002b6c:	d020      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b40      	cmp	r3, #64	@ 0x40
 8002b72:	d01d      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d116      	bne.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f81d 	bl	8002bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e00f      	b.n	8002bd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d0b4      	beq.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b095      	sub	sp, #84	@ 0x54
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c00:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e5      	bne.n	8002be0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3314      	adds	r3, #20
 8002c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3314      	adds	r3, #20
 8002c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c3c:	e841 2300 	strex	r3, r2, [r1]
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e5      	bne.n	8002c14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d119      	bne.n	8002c84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f023 0310 	bic.w	r3, r3, #16
 8002c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c70:	61ba      	str	r2, [r7, #24]
 8002c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6979      	ldr	r1, [r7, #20]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e5      	bne.n	8002c50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c92:	bf00      	nop
 8002c94:	3754      	adds	r7, #84	@ 0x54
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca4:	b0c0      	sub	sp, #256	@ 0x100
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbc:	68d9      	ldr	r1, [r3, #12]
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	ea40 0301 	orr.w	r3, r0, r1
 8002cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cf8:	f021 010c 	bic.w	r1, r1, #12
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d06:	430b      	orrs	r3, r1
 8002d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1a:	6999      	ldr	r1, [r3, #24]
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	ea40 0301 	orr.w	r3, r0, r1
 8002d26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8002f6c <UART_SetConfig+0x2cc>)
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d005      	beq.n	8002d40 <UART_SetConfig+0xa0>
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f70 <UART_SetConfig+0x2d0>)
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d104      	bne.n	8002d4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d40:	f7ff f968 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 8002d44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d48:	e003      	b.n	8002d52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d4a:	f7ff f94f 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002d4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d5c:	f040 810c 	bne.w	8002f78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d72:	4622      	mov	r2, r4
 8002d74:	462b      	mov	r3, r5
 8002d76:	1891      	adds	r1, r2, r2
 8002d78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d7a:	415b      	adcs	r3, r3
 8002d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d82:	4621      	mov	r1, r4
 8002d84:	eb12 0801 	adds.w	r8, r2, r1
 8002d88:	4629      	mov	r1, r5
 8002d8a:	eb43 0901 	adc.w	r9, r3, r1
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002da2:	4690      	mov	r8, r2
 8002da4:	4699      	mov	r9, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	eb18 0303 	adds.w	r3, r8, r3
 8002dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002db0:	462b      	mov	r3, r5
 8002db2:	eb49 0303 	adc.w	r3, r9, r3
 8002db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002dc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dce:	460b      	mov	r3, r1
 8002dd0:	18db      	adds	r3, r3, r3
 8002dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	eb42 0303 	adc.w	r3, r2, r3
 8002dda:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ddc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002de0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002de4:	f7fd fa4c 	bl	8000280 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4b61      	ldr	r3, [pc, #388]	@ (8002f74 <UART_SetConfig+0x2d4>)
 8002dee:	fba3 2302 	umull	r2, r3, r3, r2
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	011c      	lsls	r4, r3, #4
 8002df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e08:	4642      	mov	r2, r8
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	1891      	adds	r1, r2, r2
 8002e0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e10:	415b      	adcs	r3, r3
 8002e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e18:	4641      	mov	r1, r8
 8002e1a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e1e:	4649      	mov	r1, r9
 8002e20:	eb43 0b01 	adc.w	fp, r3, r1
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e38:	4692      	mov	sl, r2
 8002e3a:	469b      	mov	fp, r3
 8002e3c:	4643      	mov	r3, r8
 8002e3e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb4b 0303 	adc.w	r3, fp, r3
 8002e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e64:	460b      	mov	r3, r1
 8002e66:	18db      	adds	r3, r3, r3
 8002e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	eb42 0303 	adc.w	r3, r2, r3
 8002e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e7a:	f7fd fa01 	bl	8000280 <__aeabi_uldivmod>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <UART_SetConfig+0x2d4>)
 8002e86:	fba3 2301 	umull	r2, r3, r3, r1
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2264      	movs	r2, #100	@ 0x64
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	1acb      	subs	r3, r1, r3
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e9a:	4b36      	ldr	r3, [pc, #216]	@ (8002f74 <UART_SetConfig+0x2d4>)
 8002e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ea8:	441c      	add	r4, r3
 8002eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002eb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002eb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	464b      	mov	r3, r9
 8002ec0:	1891      	adds	r1, r2, r2
 8002ec2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ec4:	415b      	adcs	r3, r3
 8002ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ecc:	4641      	mov	r1, r8
 8002ece:	1851      	adds	r1, r2, r1
 8002ed0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	414b      	adcs	r3, r1
 8002ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	00cb      	lsls	r3, r1, #3
 8002ee8:	4651      	mov	r1, sl
 8002eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eee:	4651      	mov	r1, sl
 8002ef0:	00ca      	lsls	r2, r1, #3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4642      	mov	r2, r8
 8002efa:	189b      	adds	r3, r3, r2
 8002efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f00:	464b      	mov	r3, r9
 8002f02:	460a      	mov	r2, r1
 8002f04:	eb42 0303 	adc.w	r3, r2, r3
 8002f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f20:	460b      	mov	r3, r1
 8002f22:	18db      	adds	r3, r3, r3
 8002f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f26:	4613      	mov	r3, r2
 8002f28:	eb42 0303 	adc.w	r3, r2, r3
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f36:	f7fd f9a3 	bl	8000280 <__aeabi_uldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <UART_SetConfig+0x2d4>)
 8002f40:	fba3 1302 	umull	r1, r3, r3, r2
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	2164      	movs	r1, #100	@ 0x64
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	3332      	adds	r3, #50	@ 0x32
 8002f52:	4a08      	ldr	r2, [pc, #32]	@ (8002f74 <UART_SetConfig+0x2d4>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	f003 0207 	and.w	r2, r3, #7
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4422      	add	r2, r4
 8002f66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f68:	e106      	b.n	8003178 <UART_SetConfig+0x4d8>
 8002f6a:	bf00      	nop
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	40011400 	.word	0x40011400
 8002f74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f8a:	4642      	mov	r2, r8
 8002f8c:	464b      	mov	r3, r9
 8002f8e:	1891      	adds	r1, r2, r2
 8002f90:	6239      	str	r1, [r7, #32]
 8002f92:	415b      	adcs	r3, r3
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	1854      	adds	r4, r2, r1
 8002f9e:	4649      	mov	r1, r9
 8002fa0:	eb43 0501 	adc.w	r5, r3, r1
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	00eb      	lsls	r3, r5, #3
 8002fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb2:	00e2      	lsls	r2, r4, #3
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	4643      	mov	r3, r8
 8002fba:	18e3      	adds	r3, r4, r3
 8002fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fc0:	464b      	mov	r3, r9
 8002fc2:	eb45 0303 	adc.w	r3, r5, r3
 8002fc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	008b      	lsls	r3, r1, #2
 8002fea:	4621      	mov	r1, r4
 8002fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	008a      	lsls	r2, r1, #2
 8002ff4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ff8:	f7fd f942 	bl	8000280 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4b60      	ldr	r3, [pc, #384]	@ (8003184 <UART_SetConfig+0x4e4>)
 8003002:	fba3 2302 	umull	r2, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	011c      	lsls	r4, r3, #4
 800300a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800300e:	2200      	movs	r2, #0
 8003010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003014:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003018:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	1891      	adds	r1, r2, r2
 8003022:	61b9      	str	r1, [r7, #24]
 8003024:	415b      	adcs	r3, r3
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800302c:	4641      	mov	r1, r8
 800302e:	1851      	adds	r1, r2, r1
 8003030:	6139      	str	r1, [r7, #16]
 8003032:	4649      	mov	r1, r9
 8003034:	414b      	adcs	r3, r1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003044:	4659      	mov	r1, fp
 8003046:	00cb      	lsls	r3, r1, #3
 8003048:	4651      	mov	r1, sl
 800304a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304e:	4651      	mov	r1, sl
 8003050:	00ca      	lsls	r2, r1, #3
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	4603      	mov	r3, r0
 8003058:	4642      	mov	r2, r8
 800305a:	189b      	adds	r3, r3, r2
 800305c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003060:	464b      	mov	r3, r9
 8003062:	460a      	mov	r2, r1
 8003064:	eb42 0303 	adc.w	r3, r2, r3
 8003068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003076:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003084:	4649      	mov	r1, r9
 8003086:	008b      	lsls	r3, r1, #2
 8003088:	4641      	mov	r1, r8
 800308a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800308e:	4641      	mov	r1, r8
 8003090:	008a      	lsls	r2, r1, #2
 8003092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003096:	f7fd f8f3 	bl	8000280 <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	4b38      	ldr	r3, [pc, #224]	@ (8003184 <UART_SetConfig+0x4e4>)
 80030a2:	fba3 2301 	umull	r2, r3, r3, r1
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2264      	movs	r2, #100	@ 0x64
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	1acb      	subs	r3, r1, r3
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	3332      	adds	r3, #50	@ 0x32
 80030b4:	4a33      	ldr	r2, [pc, #204]	@ (8003184 <UART_SetConfig+0x4e4>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c0:	441c      	add	r4, r3
 80030c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030c6:	2200      	movs	r2, #0
 80030c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80030ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80030cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030d0:	4642      	mov	r2, r8
 80030d2:	464b      	mov	r3, r9
 80030d4:	1891      	adds	r1, r2, r2
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	415b      	adcs	r3, r3
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030e0:	4641      	mov	r1, r8
 80030e2:	1851      	adds	r1, r2, r1
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	4649      	mov	r1, r9
 80030e8:	414b      	adcs	r3, r1
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030f8:	4659      	mov	r1, fp
 80030fa:	00cb      	lsls	r3, r1, #3
 80030fc:	4651      	mov	r1, sl
 80030fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003102:	4651      	mov	r1, sl
 8003104:	00ca      	lsls	r2, r1, #3
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	4603      	mov	r3, r0
 800310c:	4642      	mov	r2, r8
 800310e:	189b      	adds	r3, r3, r2
 8003110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003112:	464b      	mov	r3, r9
 8003114:	460a      	mov	r2, r1
 8003116:	eb42 0303 	adc.w	r3, r2, r3
 800311a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	663b      	str	r3, [r7, #96]	@ 0x60
 8003126:	667a      	str	r2, [r7, #100]	@ 0x64
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003134:	4649      	mov	r1, r9
 8003136:	008b      	lsls	r3, r1, #2
 8003138:	4641      	mov	r1, r8
 800313a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800313e:	4641      	mov	r1, r8
 8003140:	008a      	lsls	r2, r1, #2
 8003142:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003146:	f7fd f89b 	bl	8000280 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4b0d      	ldr	r3, [pc, #52]	@ (8003184 <UART_SetConfig+0x4e4>)
 8003150:	fba3 1302 	umull	r1, r3, r3, r2
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	2164      	movs	r1, #100	@ 0x64
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	3332      	adds	r3, #50	@ 0x32
 8003162:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <UART_SetConfig+0x4e4>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4422      	add	r2, r4
 8003176:	609a      	str	r2, [r3, #8]
}
 8003178:	bf00      	nop
 800317a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800317e:	46bd      	mov	sp, r7
 8003180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003184:	51eb851f 	.word	0x51eb851f

08003188 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800319a:	2b84      	cmp	r3, #132	@ 0x84
 800319c:	d005      	beq.n	80031aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800319e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	3303      	adds	r3, #3
 80031a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80031aa:	68fb      	ldr	r3, [r7, #12]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031be:	f3ef 8305 	mrs	r3, IPSR
 80031c2:	607b      	str	r3, [r7, #4]
  return(result);
 80031c4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80031e0:	f001 f942 	bl	8004468 <vTaskStartScheduler>
  
  return osOK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	bd80      	pop	{r7, pc}

080031ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80031ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ec:	b089      	sub	sp, #36	@ 0x24
 80031ee:	af04      	add	r7, sp, #16
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <osThreadCreate+0x54>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01c      	beq.n	800323e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685c      	ldr	r4, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691e      	ldr	r6, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ffb6 	bl	8003188 <makeFreeRtosPriority>
 800321c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003226:	9202      	str	r2, [sp, #8]
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	9100      	str	r1, [sp, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4632      	mov	r2, r6
 8003230:	4629      	mov	r1, r5
 8003232:	4620      	mov	r0, r4
 8003234:	f000 ff32 	bl	800409c <xTaskCreateStatic>
 8003238:	4603      	mov	r3, r0
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e01c      	b.n	8003278 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685c      	ldr	r4, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800324a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff98 	bl	8003188 <makeFreeRtosPriority>
 8003258:	4602      	mov	r2, r0
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	9200      	str	r2, [sp, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	4632      	mov	r2, r6
 8003266:	4629      	mov	r1, r5
 8003268:	4620      	mov	r0, r4
 800326a:	f000 ff77 	bl	800415c <xTaskCreate>
 800326e:	4603      	mov	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d001      	beq.n	8003278 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003278:	68fb      	ldr	r3, [r7, #12]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003282 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <osDelay+0x16>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	e000      	b.n	800329a <osDelay+0x18>
 8003298:	2301      	movs	r3, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f8ae 	bl	80043fc <vTaskDelay>
  
  return osOK;
 80032a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af02      	add	r7, sp, #8
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00f      	beq.n	80032dc <osSemaphoreCreate+0x32>
    if (count == 1) {
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d10a      	bne.n	80032d8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2203      	movs	r2, #3
 80032c8:	9200      	str	r2, [sp, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	2001      	movs	r0, #1
 80032d0:	f000 f9c0 	bl	8003654 <xQueueGenericCreateStatic>
 80032d4:	4603      	mov	r3, r0
 80032d6:	e016      	b.n	8003306 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	e014      	b.n	8003306 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d110      	bne.n	8003304 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80032e2:	2203      	movs	r2, #3
 80032e4:	2100      	movs	r1, #0
 80032e6:	2001      	movs	r0, #1
 80032e8:	f000 fa31 	bl	800374e <xQueueGenericCreate>
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <osSemaphoreCreate+0x56>
 80032f4:	2300      	movs	r3, #0
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fa82 	bl	8003804 <xQueueGenericSend>
      return sema;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	e000      	b.n	8003306 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003304:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	e03a      	b.n	800339e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d103      	bne.n	800333c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003334:	f04f 33ff 	mov.w	r3, #4294967295
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e009      	b.n	8003350 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <osSemaphoreWait+0x40>
      ticks = 1;
 800334c:	2301      	movs	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003350:	f7ff ff32 	bl	80031b8 <inHandlerMode>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d017      	beq.n	800338a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800335a:	f107 0308 	add.w	r3, r7, #8
 800335e:	461a      	mov	r2, r3
 8003360:	2100      	movs	r1, #0
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fcf0 	bl	8003d48 <xQueueReceiveFromISR>
 8003368:	4603      	mov	r3, r0
 800336a:	2b01      	cmp	r3, #1
 800336c:	d001      	beq.n	8003372 <osSemaphoreWait+0x62>
      return osErrorOS;
 800336e:	23ff      	movs	r3, #255	@ 0xff
 8003370:	e015      	b.n	800339e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d011      	beq.n	800339c <osSemaphoreWait+0x8c>
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <osSemaphoreWait+0x98>)
 800337a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	e008      	b.n	800339c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800338a:	68f9      	ldr	r1, [r7, #12]
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fbcb 	bl	8003b28 <xQueueSemaphoreTake>
 8003392:	4603      	mov	r3, r0
 8003394:	2b01      	cmp	r3, #1
 8003396:	d001      	beq.n	800339c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003398:	23ff      	movs	r3, #255	@ 0xff
 800339a:	e000      	b.n	800339e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000ed04 	.word	0xe000ed04

080033ac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80033bc:	f7ff fefc 	bl	80031b8 <inHandlerMode>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	4619      	mov	r1, r3
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fb1b 	bl	8003a08 <xQueueGiveFromISR>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d001      	beq.n	80033dc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80033d8:	23ff      	movs	r3, #255	@ 0xff
 80033da:	e017      	b.n	800340c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d013      	beq.n	800340a <osSemaphoreRelease+0x5e>
 80033e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <osSemaphoreRelease+0x68>)
 80033e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	e00a      	b.n	800340a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80033f4:	2300      	movs	r3, #0
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa02 	bl	8003804 <xQueueGenericSend>
 8003400:	4603      	mov	r3, r0
 8003402:	2b01      	cmp	r3, #1
 8003404:	d001      	beq.n	800340a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003406:	23ff      	movs	r3, #255	@ 0xff
 8003408:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f103 0208 	add.w	r2, r3, #8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f103 0208 	add.w	r2, r3, #8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f103 0208 	add.w	r2, r3, #8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d103      	bne.n	80034da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e00c      	b.n	80034f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3308      	adds	r3, #8
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	e002      	b.n	80034e8 <vListInsert+0x2e>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d2f6      	bcs.n	80034e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6892      	ldr	r2, [r2, #8]
 8003542:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6852      	ldr	r2, [r2, #4]
 800354c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d103      	bne.n	8003560 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	1e5a      	subs	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035ac:	f001 fed4 	bl	8005358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	68f9      	ldr	r1, [r7, #12]
 80035ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	441a      	add	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	3b01      	subs	r3, #1
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	441a      	add	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	22ff      	movs	r2, #255	@ 0xff
 80035f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	22ff      	movs	r2, #255	@ 0xff
 80035f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d114      	bne.n	800362c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01a      	beq.n	8003640 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3310      	adds	r3, #16
 800360e:	4618      	mov	r0, r3
 8003610:	f001 f984 	bl	800491c <xTaskRemoveFromEventList>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800361a:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <xQueueGenericReset+0xd0>)
 800361c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	e009      	b.n	8003640 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3310      	adds	r3, #16
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fef1 	bl	8003418 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3324      	adds	r3, #36	@ 0x24
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff feec 	bl	8003418 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003640:	f001 febc 	bl	80053bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003644:	2301      	movs	r3, #1
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08e      	sub	sp, #56	@ 0x38
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	e7fd      	b.n	800369a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <xQueueGenericCreateStatic+0x56>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <xQueueGenericCreateStatic+0x5a>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <xQueueGenericCreateStatic+0x5c>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <xQueueGenericCreateStatic+0x84>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <xQueueGenericCreateStatic+0x88>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <xQueueGenericCreateStatic+0x8a>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	61fb      	str	r3, [r7, #28]
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	e7fd      	b.n	80036f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036fa:	2348      	movs	r3, #72	@ 0x48
 80036fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b48      	cmp	r3, #72	@ 0x48
 8003702:	d00b      	beq.n	800371c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	61bb      	str	r3, [r7, #24]
}
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800371c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003730:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f840 	bl	80037c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003746:	4618      	mov	r0, r3
 8003748:	3730      	adds	r7, #48	@ 0x30
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800374e:	b580      	push	{r7, lr}
 8003750:	b08a      	sub	sp, #40	@ 0x28
 8003752:	af02      	add	r7, sp, #8
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	4613      	mov	r3, r2
 800375a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	613b      	str	r3, [r7, #16]
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	e7fd      	b.n	8003776 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3348      	adds	r3, #72	@ 0x48
 8003788:	4618      	mov	r0, r3
 800378a:	f001 ff07 	bl	800559c <pvPortMalloc>
 800378e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d011      	beq.n	80037ba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	3348      	adds	r3, #72	@ 0x48
 800379e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037a8:	79fa      	ldrb	r2, [r7, #7]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	4613      	mov	r3, r2
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f805 	bl	80037c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037ba:	69bb      	ldr	r3, [r7, #24]
	}
 80037bc:	4618      	mov	r0, r3
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d103      	bne.n	80037e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e002      	b.n	80037e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037f2:	2101      	movs	r1, #1
 80037f4:	69b8      	ldr	r0, [r7, #24]
 80037f6:	f7ff fec3 	bl	8003580 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08e      	sub	sp, #56	@ 0x38
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003812:	2300      	movs	r3, #0
 8003814:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <xQueueGenericSend+0x34>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	e7fd      	b.n	8003834 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <xQueueGenericSend+0x42>
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <xQueueGenericSend+0x46>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <xQueueGenericSend+0x48>
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <xQueueGenericSend+0x64>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	e7fd      	b.n	8003864 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d103      	bne.n	8003876 <xQueueGenericSend+0x72>
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <xQueueGenericSend+0x76>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <xQueueGenericSend+0x78>
 800387a:	2300      	movs	r3, #0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <xQueueGenericSend+0x94>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	623b      	str	r3, [r7, #32]
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003898:	f001 fa06 	bl	8004ca8 <xTaskGetSchedulerState>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <xQueueGenericSend+0xa4>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <xQueueGenericSend+0xa8>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <xQueueGenericSend+0xaa>
 80038ac:	2300      	movs	r3, #0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <xQueueGenericSend+0xc6>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	61fb      	str	r3, [r7, #28]
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	e7fd      	b.n	80038c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038ca:	f001 fd45 	bl	8005358 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <xQueueGenericSend+0xdc>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d129      	bne.n	8003934 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038e6:	f000 fac9 	bl	8003e7c <prvCopyDataToQueue>
 80038ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d010      	beq.n	8003916 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f6:	3324      	adds	r3, #36	@ 0x24
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f80f 	bl	800491c <xTaskRemoveFromEventList>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003904:	4b3f      	ldr	r3, [pc, #252]	@ (8003a04 <xQueueGenericSend+0x200>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	e00a      	b.n	800392c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800391c:	4b39      	ldr	r3, [pc, #228]	@ (8003a04 <xQueueGenericSend+0x200>)
 800391e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800392c:	f001 fd46 	bl	80053bc <vPortExitCritical>
				return pdPASS;
 8003930:	2301      	movs	r3, #1
 8003932:	e063      	b.n	80039fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800393a:	f001 fd3f 	bl	80053bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800393e:	2300      	movs	r3, #0
 8003940:	e05c      	b.n	80039fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f849 	bl	80049e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003952:	2301      	movs	r3, #1
 8003954:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003956:	f001 fd31 	bl	80053bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800395a:	f000 fdef 	bl	800453c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800395e:	f001 fcfb 	bl	8005358 <vPortEnterCritical>
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003968:	b25b      	sxtb	r3, r3
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d103      	bne.n	8003978 <xQueueGenericSend+0x174>
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800397e:	b25b      	sxtb	r3, r3
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d103      	bne.n	800398e <xQueueGenericSend+0x18a>
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800398e:	f001 fd15 	bl	80053bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003992:	1d3a      	adds	r2, r7, #4
 8003994:	f107 0314 	add.w	r3, r7, #20
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f001 f838 	bl	8004a10 <xTaskCheckForTimeOut>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d124      	bne.n	80039f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039a8:	f000 fb60 	bl	800406c <prvIsQueueFull>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b4:	3310      	adds	r3, #16
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 ff88 	bl	80048d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039c2:	f000 faeb 	bl	8003f9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039c6:	f000 fdc7 	bl	8004558 <xTaskResumeAll>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f47f af7c 	bne.w	80038ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80039d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <xQueueGenericSend+0x200>)
 80039d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	e772      	b.n	80038ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039e6:	f000 fad9 	bl	8003f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039ea:	f000 fdb5 	bl	8004558 <xTaskResumeAll>
 80039ee:	e76c      	b.n	80038ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039f2:	f000 fad3 	bl	8003f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039f6:	f000 fdaf 	bl	8004558 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3738      	adds	r7, #56	@ 0x38
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	e000ed04 	.word	0xe000ed04

08003a08 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08e      	sub	sp, #56	@ 0x38
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	623b      	str	r3, [r7, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00b      	beq.n	8003a54 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	61fb      	str	r3, [r7, #28]
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <xQueueGiveFromISR+0x5c>
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <xQueueGiveFromISR+0x60>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <xQueueGiveFromISR+0x62>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	61bb      	str	r3, [r7, #24]
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a86:	f001 fd47 	bl	8005518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a8a:	f3ef 8211 	mrs	r2, BASEPRI
 8003a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	617a      	str	r2, [r7, #20]
 8003aa0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003aa2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aaa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d22b      	bcs.n	8003b0e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d112      	bne.n	8003af8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003adc:	3324      	adds	r3, #36	@ 0x24
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 ff1c 	bl	800491c <xTaskRemoveFromEventList>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00e      	beq.n	8003b08 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e007      	b.n	8003b08 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003afc:	3301      	adds	r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	b25a      	sxtb	r2, r3
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b0c:	e001      	b.n	8003b12 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b14:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3738      	adds	r7, #56	@ 0x38
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08e      	sub	sp, #56	@ 0x38
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	623b      	str	r3, [r7, #32]
}
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00b      	beq.n	8003b7c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	61fb      	str	r3, [r7, #28]
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b7c:	f001 f894 	bl	8004ca8 <xTaskGetSchedulerState>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <xQueueSemaphoreTake+0x64>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <xQueueSemaphoreTake+0x68>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <xQueueSemaphoreTake+0x6a>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	61bb      	str	r3, [r7, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	e7fd      	b.n	8003baa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bae:	f001 fbd3 	bl	8005358 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d024      	beq.n	8003c08 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	1e5a      	subs	r2, r3, #1
 8003bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003bce:	f001 fa17 	bl	8005000 <pvTaskIncrementMutexHeldCount>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00f      	beq.n	8003c00 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be2:	3310      	adds	r3, #16
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fe99 	bl	800491c <xTaskRemoveFromEventList>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bf0:	4b54      	ldr	r3, [pc, #336]	@ (8003d44 <xQueueSemaphoreTake+0x21c>)
 8003bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c00:	f001 fbdc 	bl	80053bc <vPortExitCritical>
				return pdPASS;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e098      	b.n	8003d3a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d112      	bne.n	8003c34 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	617b      	str	r3, [r7, #20]
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c2c:	f001 fbc6 	bl	80053bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e082      	b.n	8003d3a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c3a:	f107 030c 	add.w	r3, r7, #12
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fed0 	bl	80049e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c48:	f001 fbb8 	bl	80053bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c4c:	f000 fc76 	bl	800453c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c50:	f001 fb82 	bl	8005358 <vPortEnterCritical>
 8003c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c5a:	b25b      	sxtb	r3, r3
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d103      	bne.n	8003c6a <xQueueSemaphoreTake+0x142>
 8003c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d103      	bne.n	8003c80 <xQueueSemaphoreTake+0x158>
 8003c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c80:	f001 fb9c 	bl	80053bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c84:	463a      	mov	r2, r7
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 febf 	bl	8004a10 <xTaskCheckForTimeOut>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d132      	bne.n	8003cfe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c9a:	f000 f9d1 	bl	8004040 <prvIsQueueEmpty>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d026      	beq.n	8003cf2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003cac:	f001 fb54 	bl	8005358 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 f815 	bl	8004ce4 <xTaskPriorityInherit>
 8003cba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003cbc:	f001 fb7e 	bl	80053bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc2:	3324      	adds	r3, #36	@ 0x24
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fe01 	bl	80048d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cd0:	f000 f964 	bl	8003f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cd4:	f000 fc40 	bl	8004558 <xTaskResumeAll>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f47f af67 	bne.w	8003bae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003ce0:	4b18      	ldr	r3, [pc, #96]	@ (8003d44 <xQueueSemaphoreTake+0x21c>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	e75d      	b.n	8003bae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003cf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cf4:	f000 f952 	bl	8003f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cf8:	f000 fc2e 	bl	8004558 <xTaskResumeAll>
 8003cfc:	e757      	b.n	8003bae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003cfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d00:	f000 f94c 	bl	8003f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d04:	f000 fc28 	bl	8004558 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d0a:	f000 f999 	bl	8004040 <prvIsQueueEmpty>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f43f af4c 	beq.w	8003bae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003d1c:	f001 fb1c 	bl	8005358 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d22:	f000 f893 	bl	8003e4c <prvGetDisinheritPriorityAfterTimeout>
 8003d26:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 f8d6 	bl	8004ee0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d34:	f001 fb42 	bl	80053bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3738      	adds	r7, #56	@ 0x38
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08e      	sub	sp, #56	@ 0x38
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	623b      	str	r3, [r7, #32]
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	e7fd      	b.n	8003d72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d103      	bne.n	8003d84 <xQueueReceiveFromISR+0x3c>
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <xQueueReceiveFromISR+0x40>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <xQueueReceiveFromISR+0x42>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	61fb      	str	r3, [r7, #28]
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	e7fd      	b.n	8003da2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003da6:	f001 fbb7 	bl	8005518 <vPortValidateInterruptPriority>
	__asm volatile
 8003daa:	f3ef 8211 	mrs	r2, BASEPRI
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	61ba      	str	r2, [r7, #24]
 8003dc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003dc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d02f      	beq.n	8003e32 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003de0:	f000 f8b6 	bl	8003f50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de6:	1e5a      	subs	r2, r3, #1
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003dec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d112      	bne.n	8003e1c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	3310      	adds	r3, #16
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fd8a 	bl	800491c <xTaskRemoveFromEventList>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00e      	beq.n	8003e2c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e007      	b.n	8003e2c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e20:	3301      	adds	r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	b25a      	sxtb	r2, r3
 8003e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e30:	e001      	b.n	8003e36 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f383 8811 	msr	BASEPRI, r3
}
 8003e40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3738      	adds	r7, #56	@ 0x38
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d006      	beq.n	8003e6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1c3 0307 	rsb	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	e001      	b.n	8003e6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
	}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d14d      	bne.n	8003f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 ff92 	bl	8004dd0 <xTaskPriorityDisinherit>
 8003eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	e043      	b.n	8003f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d119      	bne.n	8003ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6858      	ldr	r0, [r3, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	f002 f831 	bl	8005f2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	441a      	add	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d32b      	bcc.n	8003f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	e026      	b.n	8003f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68d8      	ldr	r0, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	f002 f817 	bl	8005f2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	425b      	negs	r3, r3
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d207      	bcs.n	8003f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	425b      	negs	r3, r3
 8003f26:	441a      	add	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d105      	bne.n	8003f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003f46:	697b      	ldr	r3, [r7, #20]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d018      	beq.n	8003f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	441a      	add	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d303      	bcc.n	8003f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68d9      	ldr	r1, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6838      	ldr	r0, [r7, #0]
 8003f90:	f001 ffcd 	bl	8005f2e <memcpy>
	}
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fa4:	f001 f9d8 	bl	8005358 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fb0:	e011      	b.n	8003fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d012      	beq.n	8003fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3324      	adds	r3, #36	@ 0x24
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fcac 	bl	800491c <xTaskRemoveFromEventList>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fca:	f000 fd85 	bl	8004ad8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	dce9      	bgt.n	8003fb2 <prvUnlockQueue+0x16>
 8003fde:	e000      	b.n	8003fe2 <prvUnlockQueue+0x46>
					break;
 8003fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	22ff      	movs	r2, #255	@ 0xff
 8003fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003fea:	f001 f9e7 	bl	80053bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fee:	f001 f9b3 	bl	8005358 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ffa:	e011      	b.n	8004020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d012      	beq.n	800402a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3310      	adds	r3, #16
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fc87 	bl	800491c <xTaskRemoveFromEventList>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004014:	f000 fd60 	bl	8004ad8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004018:	7bbb      	ldrb	r3, [r7, #14]
 800401a:	3b01      	subs	r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004024:	2b00      	cmp	r3, #0
 8004026:	dce9      	bgt.n	8003ffc <prvUnlockQueue+0x60>
 8004028:	e000      	b.n	800402c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800402a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	22ff      	movs	r2, #255	@ 0xff
 8004030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004034:	f001 f9c2 	bl	80053bc <vPortExitCritical>
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004048:	f001 f986 	bl	8005358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e001      	b.n	800405e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800405e:	f001 f9ad 	bl	80053bc <vPortExitCritical>

	return xReturn;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004074:	f001 f970 	bl	8005358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004080:	429a      	cmp	r2, r3
 8004082:	d102      	bne.n	800408a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e001      	b.n	800408e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800408e:	f001 f995 	bl	80053bc <vPortExitCritical>

	return xReturn;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08e      	sub	sp, #56	@ 0x38
 80040a0:	af04      	add	r7, sp, #16
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	623b      	str	r3, [r7, #32]
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	61fb      	str	r3, [r7, #28]
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040e6:	23a0      	movs	r3, #160	@ 0xa0
 80040e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80040ee:	d00b      	beq.n	8004108 <xTaskCreateStatic+0x6c>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	61bb      	str	r3, [r7, #24]
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004108:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01e      	beq.n	800414e <xTaskCreateStatic+0xb2>
 8004110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01b      	beq.n	800414e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	2202      	movs	r2, #2
 8004124:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004128:	2300      	movs	r3, #0
 800412a:	9303      	str	r3, [sp, #12]
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	9302      	str	r3, [sp, #8]
 8004130:	f107 0314 	add.w	r3, r7, #20
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f851 	bl	80041e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004146:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004148:	f000 f8ee 	bl	8004328 <prvAddNewTaskToReadyList>
 800414c:	e001      	b.n	8004152 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004152:	697b      	ldr	r3, [r7, #20]
	}
 8004154:	4618      	mov	r0, r3
 8004156:	3728      	adds	r7, #40	@ 0x28
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	@ 0x30
 8004160:	af04      	add	r7, sp, #16
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4618      	mov	r0, r3
 8004172:	f001 fa13 	bl	800559c <pvPortMalloc>
 8004176:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00e      	beq.n	800419c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800417e:	20a0      	movs	r0, #160	@ 0xa0
 8004180:	f001 fa0c 	bl	800559c <pvPortMalloc>
 8004184:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30
 8004192:	e005      	b.n	80041a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	f001 facf 	bl	8005738 <vPortFree>
 800419a:	e001      	b.n	80041a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d017      	beq.n	80041d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	2300      	movs	r3, #0
 80041b2:	9303      	str	r3, [sp, #12]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	9302      	str	r3, [sp, #8]
 80041b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f80f 	bl	80041e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ca:	69f8      	ldr	r0, [r7, #28]
 80041cc:	f000 f8ac 	bl	8004328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041d0:	2301      	movs	r3, #1
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	e002      	b.n	80041dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041dc:	69bb      	ldr	r3, [r7, #24]
	}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004200:	3b01      	subs	r3, #1
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f023 0307 	bic.w	r3, r3, #7
 800420e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	617b      	str	r3, [r7, #20]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01f      	beq.n	8004278 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e012      	b.n	8004264 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	7819      	ldrb	r1, [r3, #0]
 8004246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	3334      	adds	r3, #52	@ 0x34
 800424e:	460a      	mov	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	4413      	add	r3, r2
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3301      	adds	r3, #1
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b0f      	cmp	r3, #15
 8004268:	d9e9      	bls.n	800423e <prvInitialiseNewTask+0x56>
 800426a:	e000      	b.n	800426e <prvInitialiseNewTask+0x86>
			{
				break;
 800426c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004276:	e003      	b.n	8004280 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	2b06      	cmp	r3, #6
 8004284:	d901      	bls.n	800428a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004286:	2306      	movs	r3, #6
 8004288:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800428e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	2200      	movs	r2, #0
 800429a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	3304      	adds	r3, #4
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff f8d9 	bl	8003458 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	3318      	adds	r3, #24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f8d4 	bl	8003458 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	f1c3 0207 	rsb	r2, r3, #7
 80042bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	334c      	adds	r3, #76	@ 0x4c
 80042da:	224c      	movs	r2, #76	@ 0x4c
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 fd54 	bl	8005d8c <memset>
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e6:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <prvInitialiseNewTask+0x134>)
 80042e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80042ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004320 <prvInitialiseNewTask+0x138>)
 80042ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004324 <prvInitialiseNewTask+0x13c>)
 80042f4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	69b8      	ldr	r0, [r7, #24]
 80042fc:	f000 fefa 	bl	80050f4 <pxPortInitialiseStack>
 8004300:	4602      	mov	r2, r0
 8004302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004304:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004312:	bf00      	nop
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20004180 	.word	0x20004180
 8004320:	200041e8 	.word	0x200041e8
 8004324:	20004250 	.word	0x20004250

08004328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004330:	f001 f812 	bl	8005358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004334:	4b2a      	ldr	r3, [pc, #168]	@ (80043e0 <prvAddNewTaskToReadyList+0xb8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a29      	ldr	r2, [pc, #164]	@ (80043e0 <prvAddNewTaskToReadyList+0xb8>)
 800433c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800433e:	4b29      	ldr	r3, [pc, #164]	@ (80043e4 <prvAddNewTaskToReadyList+0xbc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004346:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <prvAddNewTaskToReadyList+0xbc>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800434c:	4b24      	ldr	r3, [pc, #144]	@ (80043e0 <prvAddNewTaskToReadyList+0xb8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d110      	bne.n	8004376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004354:	f000 fbe4 	bl	8004b20 <prvInitialiseTaskLists>
 8004358:	e00d      	b.n	8004376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800435a:	4b23      	ldr	r3, [pc, #140]	@ (80043e8 <prvAddNewTaskToReadyList+0xc0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004362:	4b20      	ldr	r3, [pc, #128]	@ (80043e4 <prvAddNewTaskToReadyList+0xbc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	429a      	cmp	r2, r3
 800436e:	d802      	bhi.n	8004376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004370:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <prvAddNewTaskToReadyList+0xbc>)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004376:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <prvAddNewTaskToReadyList+0xc4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	4a1b      	ldr	r2, [pc, #108]	@ (80043ec <prvAddNewTaskToReadyList+0xc4>)
 800437e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	2201      	movs	r2, #1
 8004386:	409a      	lsls	r2, r3
 8004388:	4b19      	ldr	r3, [pc, #100]	@ (80043f0 <prvAddNewTaskToReadyList+0xc8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4313      	orrs	r3, r2
 800438e:	4a18      	ldr	r2, [pc, #96]	@ (80043f0 <prvAddNewTaskToReadyList+0xc8>)
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <prvAddNewTaskToReadyList+0xcc>)
 80043a0:	441a      	add	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7ff f862 	bl	8003472 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043ae:	f001 f805 	bl	80053bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043b2:	4b0d      	ldr	r3, [pc, #52]	@ (80043e8 <prvAddNewTaskToReadyList+0xc0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00e      	beq.n	80043d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ba:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <prvAddNewTaskToReadyList+0xbc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d207      	bcs.n	80043d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043c8:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <prvAddNewTaskToReadyList+0xd0>)
 80043ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	2000052c 	.word	0x2000052c
 80043e4:	2000042c 	.word	0x2000042c
 80043e8:	20000538 	.word	0x20000538
 80043ec:	20000548 	.word	0x20000548
 80043f0:	20000534 	.word	0x20000534
 80043f4:	20000430 	.word	0x20000430
 80043f8:	e000ed04 	.word	0xe000ed04

080043fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d018      	beq.n	8004440 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800440e:	4b14      	ldr	r3, [pc, #80]	@ (8004460 <vTaskDelay+0x64>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <vTaskDelay+0x32>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60bb      	str	r3, [r7, #8]
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	e7fd      	b.n	800442a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800442e:	f000 f885 	bl	800453c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004432:	2100      	movs	r1, #0
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fdf7 	bl	8005028 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800443a:	f000 f88d 	bl	8004558 <xTaskResumeAll>
 800443e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004446:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <vTaskDelay+0x68>)
 8004448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004456:	bf00      	nop
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000554 	.word	0x20000554
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	@ 0x28
 800446c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004476:	463a      	mov	r2, r7
 8004478:	1d39      	adds	r1, r7, #4
 800447a:	f107 0308 	add.w	r3, r7, #8
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc f876 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004484:	6839      	ldr	r1, [r7, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	9202      	str	r2, [sp, #8]
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	2300      	movs	r3, #0
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2300      	movs	r3, #0
 8004494:	460a      	mov	r2, r1
 8004496:	4921      	ldr	r1, [pc, #132]	@ (800451c <vTaskStartScheduler+0xb4>)
 8004498:	4821      	ldr	r0, [pc, #132]	@ (8004520 <vTaskStartScheduler+0xb8>)
 800449a:	f7ff fdff 	bl	800409c <xTaskCreateStatic>
 800449e:	4603      	mov	r3, r0
 80044a0:	4a20      	ldr	r2, [pc, #128]	@ (8004524 <vTaskStartScheduler+0xbc>)
 80044a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004524 <vTaskStartScheduler+0xbc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044ac:	2301      	movs	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e001      	b.n	80044b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d11b      	bne.n	80044f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	613b      	str	r3, [r7, #16]
}
 80044ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044d0:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <vTaskStartScheduler+0xc0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	334c      	adds	r3, #76	@ 0x4c
 80044d6:	4a15      	ldr	r2, [pc, #84]	@ (800452c <vTaskStartScheduler+0xc4>)
 80044d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044da:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <vTaskStartScheduler+0xc8>)
 80044dc:	f04f 32ff 	mov.w	r2, #4294967295
 80044e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044e2:	4b14      	ldr	r3, [pc, #80]	@ (8004534 <vTaskStartScheduler+0xcc>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044e8:	4b13      	ldr	r3, [pc, #76]	@ (8004538 <vTaskStartScheduler+0xd0>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ee:	f000 fe8f 	bl	8005210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044f2:	e00f      	b.n	8004514 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d10b      	bne.n	8004514 <vTaskStartScheduler+0xac>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60fb      	str	r3, [r7, #12]
}
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <vTaskStartScheduler+0xa8>
}
 8004514:	bf00      	nop
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	08006abc 	.word	0x08006abc
 8004520:	08004af1 	.word	0x08004af1
 8004524:	20000550 	.word	0x20000550
 8004528:	2000042c 	.word	0x2000042c
 800452c:	2000001c 	.word	0x2000001c
 8004530:	2000054c 	.word	0x2000054c
 8004534:	20000538 	.word	0x20000538
 8004538:	20000530 	.word	0x20000530

0800453c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <vTaskSuspendAll+0x18>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3301      	adds	r3, #1
 8004546:	4a03      	ldr	r2, [pc, #12]	@ (8004554 <vTaskSuspendAll+0x18>)
 8004548:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800454a:	bf00      	nop
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	20000554 	.word	0x20000554

08004558 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004566:	4b42      	ldr	r3, [pc, #264]	@ (8004670 <xTaskResumeAll+0x118>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <xTaskResumeAll+0x2e>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	603b      	str	r3, [r7, #0]
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	e7fd      	b.n	8004582 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004586:	f000 fee7 	bl	8005358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800458a:	4b39      	ldr	r3, [pc, #228]	@ (8004670 <xTaskResumeAll+0x118>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3b01      	subs	r3, #1
 8004590:	4a37      	ldr	r2, [pc, #220]	@ (8004670 <xTaskResumeAll+0x118>)
 8004592:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004594:	4b36      	ldr	r3, [pc, #216]	@ (8004670 <xTaskResumeAll+0x118>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d161      	bne.n	8004660 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800459c:	4b35      	ldr	r3, [pc, #212]	@ (8004674 <xTaskResumeAll+0x11c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d05d      	beq.n	8004660 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045a4:	e02e      	b.n	8004604 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045a6:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <xTaskResumeAll+0x120>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3318      	adds	r3, #24
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe ffba 	bl	800352c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe ffb5 	bl	800352c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	2201      	movs	r2, #1
 80045c8:	409a      	lsls	r2, r3
 80045ca:	4b2c      	ldr	r3, [pc, #176]	@ (800467c <xTaskResumeAll+0x124>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	4a2a      	ldr	r2, [pc, #168]	@ (800467c <xTaskResumeAll+0x124>)
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4a27      	ldr	r2, [pc, #156]	@ (8004680 <xTaskResumeAll+0x128>)
 80045e2:	441a      	add	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f7fe ff41 	bl	8003472 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f4:	4b23      	ldr	r3, [pc, #140]	@ (8004684 <xTaskResumeAll+0x12c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045fe:	4b22      	ldr	r3, [pc, #136]	@ (8004688 <xTaskResumeAll+0x130>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004604:	4b1c      	ldr	r3, [pc, #112]	@ (8004678 <xTaskResumeAll+0x120>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1cc      	bne.n	80045a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004612:	f000 fb29 	bl	8004c68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004616:	4b1d      	ldr	r3, [pc, #116]	@ (800468c <xTaskResumeAll+0x134>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d010      	beq.n	8004644 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004622:	f000 f837 	bl	8004694 <xTaskIncrementTick>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800462c:	4b16      	ldr	r3, [pc, #88]	@ (8004688 <xTaskResumeAll+0x130>)
 800462e:	2201      	movs	r2, #1
 8004630:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3b01      	subs	r3, #1
 8004636:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f1      	bne.n	8004622 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800463e:	4b13      	ldr	r3, [pc, #76]	@ (800468c <xTaskResumeAll+0x134>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004644:	4b10      	ldr	r3, [pc, #64]	@ (8004688 <xTaskResumeAll+0x130>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800464c:	2301      	movs	r3, #1
 800464e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <xTaskResumeAll+0x138>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004660:	f000 feac 	bl	80053bc <vPortExitCritical>

	return xAlreadyYielded;
 8004664:	68bb      	ldr	r3, [r7, #8]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000554 	.word	0x20000554
 8004674:	2000052c 	.word	0x2000052c
 8004678:	200004ec 	.word	0x200004ec
 800467c:	20000534 	.word	0x20000534
 8004680:	20000430 	.word	0x20000430
 8004684:	2000042c 	.word	0x2000042c
 8004688:	20000540 	.word	0x20000540
 800468c:	2000053c 	.word	0x2000053c
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800469e:	4b4f      	ldr	r3, [pc, #316]	@ (80047dc <xTaskIncrementTick+0x148>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 808f 	bne.w	80047c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046a8:	4b4d      	ldr	r3, [pc, #308]	@ (80047e0 <xTaskIncrementTick+0x14c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3301      	adds	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046b0:	4a4b      	ldr	r2, [pc, #300]	@ (80047e0 <xTaskIncrementTick+0x14c>)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d121      	bne.n	8004700 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80046bc:	4b49      	ldr	r3, [pc, #292]	@ (80047e4 <xTaskIncrementTick+0x150>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <xTaskIncrementTick+0x4a>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	603b      	str	r3, [r7, #0]
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	e7fd      	b.n	80046da <xTaskIncrementTick+0x46>
 80046de:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <xTaskIncrementTick+0x150>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	4b40      	ldr	r3, [pc, #256]	@ (80047e8 <xTaskIncrementTick+0x154>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a3e      	ldr	r2, [pc, #248]	@ (80047e4 <xTaskIncrementTick+0x150>)
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4a3e      	ldr	r2, [pc, #248]	@ (80047e8 <xTaskIncrementTick+0x154>)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4b3e      	ldr	r3, [pc, #248]	@ (80047ec <xTaskIncrementTick+0x158>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	4a3c      	ldr	r2, [pc, #240]	@ (80047ec <xTaskIncrementTick+0x158>)
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	f000 fab4 	bl	8004c68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004700:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <xTaskIncrementTick+0x15c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	429a      	cmp	r2, r3
 8004708:	d348      	bcc.n	800479c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800470a:	4b36      	ldr	r3, [pc, #216]	@ (80047e4 <xTaskIncrementTick+0x150>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004714:	4b36      	ldr	r3, [pc, #216]	@ (80047f0 <xTaskIncrementTick+0x15c>)
 8004716:	f04f 32ff 	mov.w	r2, #4294967295
 800471a:	601a      	str	r2, [r3, #0]
					break;
 800471c:	e03e      	b.n	800479c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800471e:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <xTaskIncrementTick+0x150>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	429a      	cmp	r2, r3
 8004734:	d203      	bcs.n	800473e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004736:	4a2e      	ldr	r2, [pc, #184]	@ (80047f0 <xTaskIncrementTick+0x15c>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800473c:	e02e      	b.n	800479c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	3304      	adds	r3, #4
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe fef2 	bl	800352c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	3318      	adds	r3, #24
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fee9 	bl	800352c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	2201      	movs	r2, #1
 8004760:	409a      	lsls	r2, r3
 8004762:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <xTaskIncrementTick+0x160>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4313      	orrs	r3, r2
 8004768:	4a22      	ldr	r2, [pc, #136]	@ (80047f4 <xTaskIncrementTick+0x160>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4a1f      	ldr	r2, [pc, #124]	@ (80047f8 <xTaskIncrementTick+0x164>)
 800477a:	441a      	add	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7fe fe75 	bl	8003472 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478c:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <xTaskIncrementTick+0x168>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	429a      	cmp	r2, r3
 8004794:	d3b9      	bcc.n	800470a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800479a:	e7b6      	b.n	800470a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800479c:	4b17      	ldr	r3, [pc, #92]	@ (80047fc <xTaskIncrementTick+0x168>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a2:	4915      	ldr	r1, [pc, #84]	@ (80047f8 <xTaskIncrementTick+0x164>)
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d901      	bls.n	80047b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047b8:	4b11      	ldr	r3, [pc, #68]	@ (8004800 <xTaskIncrementTick+0x16c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	e004      	b.n	80047d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004804 <xTaskIncrementTick+0x170>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004804 <xTaskIncrementTick+0x170>)
 80047ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047d0:	697b      	ldr	r3, [r7, #20]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000554 	.word	0x20000554
 80047e0:	20000530 	.word	0x20000530
 80047e4:	200004e4 	.word	0x200004e4
 80047e8:	200004e8 	.word	0x200004e8
 80047ec:	20000544 	.word	0x20000544
 80047f0:	2000054c 	.word	0x2000054c
 80047f4:	20000534 	.word	0x20000534
 80047f8:	20000430 	.word	0x20000430
 80047fc:	2000042c 	.word	0x2000042c
 8004800:	20000540 	.word	0x20000540
 8004804:	2000053c 	.word	0x2000053c

08004808 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800480e:	4b2a      	ldr	r3, [pc, #168]	@ (80048b8 <vTaskSwitchContext+0xb0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004816:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <vTaskSwitchContext+0xb4>)
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800481c:	e045      	b.n	80048aa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800481e:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <vTaskSwitchContext+0xb4>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004824:	4b26      	ldr	r3, [pc, #152]	@ (80048c0 <vTaskSwitchContext+0xb8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	fab3 f383 	clz	r3, r3
 8004830:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004832:	7afb      	ldrb	r3, [r7, #11]
 8004834:	f1c3 031f 	rsb	r3, r3, #31
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	4922      	ldr	r1, [pc, #136]	@ (80048c4 <vTaskSwitchContext+0xbc>)
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <vTaskSwitchContext+0x5e>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	607b      	str	r3, [r7, #4]
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <vTaskSwitchContext+0x5a>
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4a14      	ldr	r2, [pc, #80]	@ (80048c4 <vTaskSwitchContext+0xbc>)
 8004872:	4413      	add	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	3308      	adds	r3, #8
 8004888:	429a      	cmp	r2, r3
 800488a:	d104      	bne.n	8004896 <vTaskSwitchContext+0x8e>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <vTaskSwitchContext+0xc0>)
 800489e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048a0:	4b09      	ldr	r3, [pc, #36]	@ (80048c8 <vTaskSwitchContext+0xc0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	334c      	adds	r3, #76	@ 0x4c
 80048a6:	4a09      	ldr	r2, [pc, #36]	@ (80048cc <vTaskSwitchContext+0xc4>)
 80048a8:	6013      	str	r3, [r2, #0]
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000554 	.word	0x20000554
 80048bc:	20000540 	.word	0x20000540
 80048c0:	20000534 	.word	0x20000534
 80048c4:	20000430 	.word	0x20000430
 80048c8:	2000042c 	.word	0x2000042c
 80048cc:	2000001c 	.word	0x2000001c

080048d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048f8:	4b07      	ldr	r3, [pc, #28]	@ (8004918 <vTaskPlaceOnEventList+0x48>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3318      	adds	r3, #24
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fe fdda 	bl	80034ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004906:	2101      	movs	r1, #1
 8004908:	6838      	ldr	r0, [r7, #0]
 800490a:	f000 fb8d 	bl	8005028 <prvAddCurrentTaskToDelayedList>
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	2000042c 	.word	0x2000042c

0800491c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60fb      	str	r3, [r7, #12]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	3318      	adds	r3, #24
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fdec 	bl	800352c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004954:	4b1d      	ldr	r3, [pc, #116]	@ (80049cc <xTaskRemoveFromEventList+0xb0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11c      	bne.n	8004996 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	3304      	adds	r3, #4
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe fde3 	bl	800352c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496a:	2201      	movs	r2, #1
 800496c:	409a      	lsls	r2, r3
 800496e:	4b18      	ldr	r3, [pc, #96]	@ (80049d0 <xTaskRemoveFromEventList+0xb4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4313      	orrs	r3, r2
 8004974:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <xTaskRemoveFromEventList+0xb4>)
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4a13      	ldr	r2, [pc, #76]	@ (80049d4 <xTaskRemoveFromEventList+0xb8>)
 8004986:	441a      	add	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f7fe fd6f 	bl	8003472 <vListInsertEnd>
 8004994:	e005      	b.n	80049a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	3318      	adds	r3, #24
 800499a:	4619      	mov	r1, r3
 800499c:	480e      	ldr	r0, [pc, #56]	@ (80049d8 <xTaskRemoveFromEventList+0xbc>)
 800499e:	f7fe fd68 	bl	8003472 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a6:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <xTaskRemoveFromEventList+0xc0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d905      	bls.n	80049bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <xTaskRemoveFromEventList+0xc4>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e001      	b.n	80049c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049c0:	697b      	ldr	r3, [r7, #20]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20000554 	.word	0x20000554
 80049d0:	20000534 	.word	0x20000534
 80049d4:	20000430 	.word	0x20000430
 80049d8:	200004ec 	.word	0x200004ec
 80049dc:	2000042c 	.word	0x2000042c
 80049e0:	20000540 	.word	0x20000540

080049e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049ec:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <vTaskInternalSetTimeOutState+0x24>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <vTaskInternalSetTimeOutState+0x28>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	605a      	str	r2, [r3, #4]
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	20000544 	.word	0x20000544
 8004a0c:	20000530 	.word	0x20000530

08004a10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	613b      	str	r3, [r7, #16]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	60fb      	str	r3, [r7, #12]
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	e7fd      	b.n	8004a52 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004a56:	f000 fc7f 	bl	8005358 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <xTaskCheckForTimeOut+0xc0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d102      	bne.n	8004a7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	e023      	b.n	8004ac2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <xTaskCheckForTimeOut+0xc4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d007      	beq.n	8004a96 <xTaskCheckForTimeOut+0x86>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	e015      	b.n	8004ac2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d20b      	bcs.n	8004ab8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ff99 	bl	80049e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	e004      	b.n	8004ac2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ac2:	f000 fc7b 	bl	80053bc <vPortExitCritical>

	return xReturn;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000530 	.word	0x20000530
 8004ad4:	20000544 	.word	0x20000544

08004ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004adc:	4b03      	ldr	r3, [pc, #12]	@ (8004aec <vTaskMissedYield+0x14>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	20000540 	.word	0x20000540

08004af0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004af8:	f000 f852 	bl	8004ba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004afc:	4b06      	ldr	r3, [pc, #24]	@ (8004b18 <prvIdleTask+0x28>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d9f9      	bls.n	8004af8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b04:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <prvIdleTask+0x2c>)
 8004b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b14:	e7f0      	b.n	8004af8 <prvIdleTask+0x8>
 8004b16:	bf00      	nop
 8004b18:	20000430 	.word	0x20000430
 8004b1c:	e000ed04 	.word	0xe000ed04

08004b20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	e00c      	b.n	8004b46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4a12      	ldr	r2, [pc, #72]	@ (8004b80 <prvInitialiseTaskLists+0x60>)
 8004b38:	4413      	add	r3, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fc6c 	bl	8003418 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3301      	adds	r3, #1
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b06      	cmp	r3, #6
 8004b4a:	d9ef      	bls.n	8004b2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b4c:	480d      	ldr	r0, [pc, #52]	@ (8004b84 <prvInitialiseTaskLists+0x64>)
 8004b4e:	f7fe fc63 	bl	8003418 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b52:	480d      	ldr	r0, [pc, #52]	@ (8004b88 <prvInitialiseTaskLists+0x68>)
 8004b54:	f7fe fc60 	bl	8003418 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b58:	480c      	ldr	r0, [pc, #48]	@ (8004b8c <prvInitialiseTaskLists+0x6c>)
 8004b5a:	f7fe fc5d 	bl	8003418 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b5e:	480c      	ldr	r0, [pc, #48]	@ (8004b90 <prvInitialiseTaskLists+0x70>)
 8004b60:	f7fe fc5a 	bl	8003418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b64:	480b      	ldr	r0, [pc, #44]	@ (8004b94 <prvInitialiseTaskLists+0x74>)
 8004b66:	f7fe fc57 	bl	8003418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <prvInitialiseTaskLists+0x78>)
 8004b6c:	4a05      	ldr	r2, [pc, #20]	@ (8004b84 <prvInitialiseTaskLists+0x64>)
 8004b6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <prvInitialiseTaskLists+0x7c>)
 8004b72:	4a05      	ldr	r2, [pc, #20]	@ (8004b88 <prvInitialiseTaskLists+0x68>)
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000430 	.word	0x20000430
 8004b84:	200004bc 	.word	0x200004bc
 8004b88:	200004d0 	.word	0x200004d0
 8004b8c:	200004ec 	.word	0x200004ec
 8004b90:	20000500 	.word	0x20000500
 8004b94:	20000518 	.word	0x20000518
 8004b98:	200004e4 	.word	0x200004e4
 8004b9c:	200004e8 	.word	0x200004e8

08004ba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ba6:	e019      	b.n	8004bdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ba8:	f000 fbd6 	bl	8005358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bac:	4b10      	ldr	r3, [pc, #64]	@ (8004bf0 <prvCheckTasksWaitingTermination+0x50>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe fcb7 	bl	800352c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <prvCheckTasksWaitingTermination+0x54>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf4 <prvCheckTasksWaitingTermination+0x54>)
 8004bc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <prvCheckTasksWaitingTermination+0x58>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf8 <prvCheckTasksWaitingTermination+0x58>)
 8004bd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bd2:	f000 fbf3 	bl	80053bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f810 	bl	8004bfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <prvCheckTasksWaitingTermination+0x58>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e1      	bne.n	8004ba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000500 	.word	0x20000500
 8004bf4:	2000052c 	.word	0x2000052c
 8004bf8:	20000514 	.word	0x20000514

08004bfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	334c      	adds	r3, #76	@ 0x4c
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 f8d7 	bl	8005dbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fd8b 	bl	8005738 <vPortFree>
				vPortFree( pxTCB );
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fd88 	bl	8005738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c28:	e019      	b.n	8004c5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d103      	bne.n	8004c3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fd7f 	bl	8005738 <vPortFree>
	}
 8004c3a:	e010      	b.n	8004c5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d00b      	beq.n	8004c5e <prvDeleteTCB+0x62>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	60fb      	str	r3, [r7, #12]
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	e7fd      	b.n	8004c5a <prvDeleteTCB+0x5e>
	}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <prvResetNextTaskUnblockTime+0x38>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca4 <prvResetNextTaskUnblockTime+0x3c>)
 8004c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c80:	e008      	b.n	8004c94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c82:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <prvResetNextTaskUnblockTime+0x38>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a04      	ldr	r2, [pc, #16]	@ (8004ca4 <prvResetNextTaskUnblockTime+0x3c>)
 8004c92:	6013      	str	r3, [r2, #0]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	200004e4 	.word	0x200004e4
 8004ca4:	2000054c 	.word	0x2000054c

08004ca8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <xTaskGetSchedulerState+0x34>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	e008      	b.n	8004cce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cbc:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <xTaskGetSchedulerState+0x38>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	607b      	str	r3, [r7, #4]
 8004cc8:	e001      	b.n	8004cce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cce:	687b      	ldr	r3, [r7, #4]
	}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	20000538 	.word	0x20000538
 8004ce0:	20000554 	.word	0x20000554

08004ce4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d05e      	beq.n	8004db8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfe:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <xTaskPriorityInherit+0xe0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d24e      	bcs.n	8004da6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	db06      	blt.n	8004d1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d10:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc4 <xTaskPriorityInherit+0xe0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	f1c3 0207 	rsb	r2, r3, #7
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6959      	ldr	r1, [r3, #20]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4a26      	ldr	r2, [pc, #152]	@ (8004dc8 <xTaskPriorityInherit+0xe4>)
 8004d30:	4413      	add	r3, r2
 8004d32:	4299      	cmp	r1, r3
 8004d34:	d12f      	bne.n	8004d96 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe fbf6 	bl	800352c <uxListRemove>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43da      	mvns	r2, r3
 8004d52:	4b1e      	ldr	r3, [pc, #120]	@ (8004dcc <xTaskPriorityInherit+0xe8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4013      	ands	r3, r2
 8004d58:	4a1c      	ldr	r2, [pc, #112]	@ (8004dcc <xTaskPriorityInherit+0xe8>)
 8004d5a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d5c:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <xTaskPriorityInherit+0xe0>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <xTaskPriorityInherit+0xe8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	4a15      	ldr	r2, [pc, #84]	@ (8004dcc <xTaskPriorityInherit+0xe8>)
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4a10      	ldr	r2, [pc, #64]	@ (8004dc8 <xTaskPriorityInherit+0xe4>)
 8004d86:	441a      	add	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f7fe fb6f 	bl	8003472 <vListInsertEnd>
 8004d94:	e004      	b.n	8004da0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <xTaskPriorityInherit+0xe0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e008      	b.n	8004db8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004daa:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <xTaskPriorityInherit+0xe0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d201      	bcs.n	8004db8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004db4:	2301      	movs	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004db8:	68fb      	ldr	r3, [r7, #12]
	}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2000042c 	.word	0x2000042c
 8004dc8:	20000430 	.word	0x20000430
 8004dcc:	20000534 	.word	0x20000534

08004dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d070      	beq.n	8004ec8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004de6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed4 <xTaskPriorityDisinherit+0x104>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d00b      	beq.n	8004e08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60bb      	str	r3, [r7, #8]
}
 8004e22:	bf00      	nop
 8004e24:	bf00      	nop
 8004e26:	e7fd      	b.n	8004e24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e2c:	1e5a      	subs	r2, r3, #1
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d044      	beq.n	8004ec8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d140      	bne.n	8004ec8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fb6e 	bl	800352c <uxListRemove>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d115      	bne.n	8004e82 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5a:	491f      	ldr	r1, [pc, #124]	@ (8004ed8 <xTaskPriorityDisinherit+0x108>)
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <xTaskPriorityDisinherit+0xb2>
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	2201      	movs	r2, #1
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43da      	mvns	r2, r3
 8004e78:	4b18      	ldr	r3, [pc, #96]	@ (8004edc <xTaskPriorityDisinherit+0x10c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	4a17      	ldr	r2, [pc, #92]	@ (8004edc <xTaskPriorityDisinherit+0x10c>)
 8004e80:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	f1c3 0207 	rsb	r2, r3, #7
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <xTaskPriorityDisinherit+0x10c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8004edc <xTaskPriorityDisinherit+0x10c>)
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4a08      	ldr	r2, [pc, #32]	@ (8004ed8 <xTaskPriorityDisinherit+0x108>)
 8004eb6:	441a      	add	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f7fe fad7 	bl	8003472 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ec8:	697b      	ldr	r3, [r7, #20]
	}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	2000042c 	.word	0x2000042c
 8004ed8:	20000430 	.word	0x20000430
 8004edc:	20000534 	.word	0x20000534

08004ee0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d079      	beq.n	8004fec <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10b      	bne.n	8004f18 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	60fb      	str	r3, [r7, #12]
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d902      	bls.n	8004f28 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	e002      	b.n	8004f2e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d059      	beq.n	8004fec <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d154      	bne.n	8004fec <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f42:	4b2c      	ldr	r3, [pc, #176]	@ (8004ff4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d10b      	bne.n	8004f64 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	60bb      	str	r3, [r7, #8]
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	db04      	blt.n	8004f82 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f1c3 0207 	rsb	r2, r3, #7
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	6959      	ldr	r1, [r3, #20]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004f92:	4413      	add	r3, r2
 8004f94:	4299      	cmp	r1, r3
 8004f96:	d129      	bne.n	8004fec <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fe fac5 	bl	800352c <uxListRemove>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	2201      	movs	r2, #1
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43da      	mvns	r2, r3
 8004fb4:	4b11      	ldr	r3, [pc, #68]	@ (8004ffc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	4a10      	ldr	r2, [pc, #64]	@ (8004ffc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004fbc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8004ffc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4a06      	ldr	r2, [pc, #24]	@ (8004ff8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004fde:	441a      	add	r2, r3
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fe fa43 	bl	8003472 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fec:	bf00      	nop
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	2000042c 	.word	0x2000042c
 8004ff8:	20000430 	.word	0x20000430
 8004ffc:	20000534 	.word	0x20000534

08005000 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005004:	4b07      	ldr	r3, [pc, #28]	@ (8005024 <pvTaskIncrementMutexHeldCount+0x24>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800500c:	4b05      	ldr	r3, [pc, #20]	@ (8005024 <pvTaskIncrementMutexHeldCount+0x24>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005012:	3201      	adds	r2, #1
 8005014:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005016:	4b03      	ldr	r3, [pc, #12]	@ (8005024 <pvTaskIncrementMutexHeldCount+0x24>)
 8005018:	681b      	ldr	r3, [r3, #0]
	}
 800501a:	4618      	mov	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	2000042c 	.word	0x2000042c

08005028 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005032:	4b29      	ldr	r3, [pc, #164]	@ (80050d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005038:	4b28      	ldr	r3, [pc, #160]	@ (80050dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3304      	adds	r3, #4
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe fa74 	bl	800352c <uxListRemove>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800504a:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	2201      	movs	r2, #1
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43da      	mvns	r2, r3
 8005058:	4b21      	ldr	r3, [pc, #132]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4013      	ands	r3, r2
 800505e:	4a20      	ldr	r2, [pc, #128]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005060:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d10a      	bne.n	8005080 <prvAddCurrentTaskToDelayedList+0x58>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d007      	beq.n	8005080 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005070:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	481a      	ldr	r0, [pc, #104]	@ (80050e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800507a:	f7fe f9fa 	bl	8003472 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800507e:	e026      	b.n	80050ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005088:	4b14      	ldr	r3, [pc, #80]	@ (80050dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	429a      	cmp	r2, r3
 8005096:	d209      	bcs.n	80050ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005098:	4b13      	ldr	r3, [pc, #76]	@ (80050e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4b0f      	ldr	r3, [pc, #60]	@ (80050dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fe fa08 	bl	80034ba <vListInsert>
}
 80050aa:	e010      	b.n	80050ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ac:	4b0f      	ldr	r3, [pc, #60]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f7fe f9fe 	bl	80034ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050be:	4b0c      	ldr	r3, [pc, #48]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d202      	bcs.n	80050ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050c8:	4a09      	ldr	r2, [pc, #36]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6013      	str	r3, [r2, #0]
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000530 	.word	0x20000530
 80050dc:	2000042c 	.word	0x2000042c
 80050e0:	20000534 	.word	0x20000534
 80050e4:	20000518 	.word	0x20000518
 80050e8:	200004e8 	.word	0x200004e8
 80050ec:	200004e4 	.word	0x200004e4
 80050f0:	2000054c 	.word	0x2000054c

080050f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3b04      	subs	r3, #4
 8005104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800510c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3b04      	subs	r3, #4
 8005112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f023 0201 	bic.w	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b04      	subs	r3, #4
 8005122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005124:	4a0c      	ldr	r2, [pc, #48]	@ (8005158 <pxPortInitialiseStack+0x64>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3b14      	subs	r3, #20
 800512e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3b04      	subs	r3, #4
 800513a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f06f 0202 	mvn.w	r2, #2
 8005142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3b20      	subs	r3, #32
 8005148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800514a:	68fb      	ldr	r3, [r7, #12]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	0800515d 	.word	0x0800515d

0800515c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005166:	4b13      	ldr	r3, [pc, #76]	@ (80051b4 <prvTaskExitError+0x58>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d00b      	beq.n	8005188 <prvTaskExitError+0x2c>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <prvTaskExitError+0x28>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	60bb      	str	r3, [r7, #8]
}
 800519a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800519c:	bf00      	nop
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0fc      	beq.n	800519e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	2000000c 	.word	0x2000000c
	...

080051c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051c0:	4b07      	ldr	r3, [pc, #28]	@ (80051e0 <pxCurrentTCBConst2>)
 80051c2:	6819      	ldr	r1, [r3, #0]
 80051c4:	6808      	ldr	r0, [r1, #0]
 80051c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ca:	f380 8809 	msr	PSP, r0
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f380 8811 	msr	BASEPRI, r0
 80051da:	4770      	bx	lr
 80051dc:	f3af 8000 	nop.w

080051e0 <pxCurrentTCBConst2>:
 80051e0:	2000042c 	.word	0x2000042c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop

080051e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051e8:	4808      	ldr	r0, [pc, #32]	@ (800520c <prvPortStartFirstTask+0x24>)
 80051ea:	6800      	ldr	r0, [r0, #0]
 80051ec:	6800      	ldr	r0, [r0, #0]
 80051ee:	f380 8808 	msr	MSP, r0
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8814 	msr	CONTROL, r0
 80051fa:	b662      	cpsie	i
 80051fc:	b661      	cpsie	f
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	df00      	svc	0
 8005208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800520a:	bf00      	nop
 800520c:	e000ed08 	.word	0xe000ed08

08005210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005216:	4b47      	ldr	r3, [pc, #284]	@ (8005334 <xPortStartScheduler+0x124>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a47      	ldr	r2, [pc, #284]	@ (8005338 <xPortStartScheduler+0x128>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10b      	bne.n	8005238 <xPortStartScheduler+0x28>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	613b      	str	r3, [r7, #16]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005238:	4b3e      	ldr	r3, [pc, #248]	@ (8005334 <xPortStartScheduler+0x124>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a3f      	ldr	r2, [pc, #252]	@ (800533c <xPortStartScheduler+0x12c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10b      	bne.n	800525a <xPortStartScheduler+0x4a>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	60fb      	str	r3, [r7, #12]
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	e7fd      	b.n	8005256 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800525a:	4b39      	ldr	r3, [pc, #228]	@ (8005340 <xPortStartScheduler+0x130>)
 800525c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	22ff      	movs	r2, #255	@ 0xff
 800526a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800527c:	b2da      	uxtb	r2, r3
 800527e:	4b31      	ldr	r3, [pc, #196]	@ (8005344 <xPortStartScheduler+0x134>)
 8005280:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005282:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <xPortStartScheduler+0x138>)
 8005284:	2207      	movs	r2, #7
 8005286:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005288:	e009      	b.n	800529e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800528a:	4b2f      	ldr	r3, [pc, #188]	@ (8005348 <xPortStartScheduler+0x138>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3b01      	subs	r3, #1
 8005290:	4a2d      	ldr	r2, [pc, #180]	@ (8005348 <xPortStartScheduler+0x138>)
 8005292:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a6:	2b80      	cmp	r3, #128	@ 0x80
 80052a8:	d0ef      	beq.n	800528a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052aa:	4b27      	ldr	r3, [pc, #156]	@ (8005348 <xPortStartScheduler+0x138>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1c3 0307 	rsb	r3, r3, #7
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d00b      	beq.n	80052ce <xPortStartScheduler+0xbe>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60bb      	str	r3, [r7, #8]
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <xPortStartScheduler+0x138>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005348 <xPortStartScheduler+0x138>)
 80052d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005348 <xPortStartScheduler+0x138>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052e0:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <xPortStartScheduler+0x138>)
 80052e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052ec:	4b17      	ldr	r3, [pc, #92]	@ (800534c <xPortStartScheduler+0x13c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a16      	ldr	r2, [pc, #88]	@ (800534c <xPortStartScheduler+0x13c>)
 80052f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052f8:	4b14      	ldr	r3, [pc, #80]	@ (800534c <xPortStartScheduler+0x13c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a13      	ldr	r2, [pc, #76]	@ (800534c <xPortStartScheduler+0x13c>)
 80052fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005302:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005304:	f000 f8da 	bl	80054bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005308:	4b11      	ldr	r3, [pc, #68]	@ (8005350 <xPortStartScheduler+0x140>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800530e:	f000 f8f9 	bl	8005504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005312:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <xPortStartScheduler+0x144>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a0f      	ldr	r2, [pc, #60]	@ (8005354 <xPortStartScheduler+0x144>)
 8005318:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800531c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800531e:	f7ff ff63 	bl	80051e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005322:	f7ff fa71 	bl	8004808 <vTaskSwitchContext>
	prvTaskExitError();
 8005326:	f7ff ff19 	bl	800515c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	e000ed00 	.word	0xe000ed00
 8005338:	410fc271 	.word	0x410fc271
 800533c:	410fc270 	.word	0x410fc270
 8005340:	e000e400 	.word	0xe000e400
 8005344:	20000558 	.word	0x20000558
 8005348:	2000055c 	.word	0x2000055c
 800534c:	e000ed20 	.word	0xe000ed20
 8005350:	2000000c 	.word	0x2000000c
 8005354:	e000ef34 	.word	0xe000ef34

08005358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	607b      	str	r3, [r7, #4]
}
 8005370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005372:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <vPortEnterCritical+0x5c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	4a0e      	ldr	r2, [pc, #56]	@ (80053b4 <vPortEnterCritical+0x5c>)
 800537a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800537c:	4b0d      	ldr	r3, [pc, #52]	@ (80053b4 <vPortEnterCritical+0x5c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d110      	bne.n	80053a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005384:	4b0c      	ldr	r3, [pc, #48]	@ (80053b8 <vPortEnterCritical+0x60>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	603b      	str	r3, [r7, #0]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <vPortEnterCritical+0x4a>
	}
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	2000000c 	.word	0x2000000c
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053c2:	4b12      	ldr	r3, [pc, #72]	@ (800540c <vPortExitCritical+0x50>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <vPortExitCritical+0x26>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	607b      	str	r3, [r7, #4]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053e2:	4b0a      	ldr	r3, [pc, #40]	@ (800540c <vPortExitCritical+0x50>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	4a08      	ldr	r2, [pc, #32]	@ (800540c <vPortExitCritical+0x50>)
 80053ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053ec:	4b07      	ldr	r3, [pc, #28]	@ (800540c <vPortExitCritical+0x50>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <vPortExitCritical+0x44>
 80053f4:	2300      	movs	r3, #0
 80053f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f383 8811 	msr	BASEPRI, r3
}
 80053fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	2000000c 	.word	0x2000000c

08005410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005410:	f3ef 8009 	mrs	r0, PSP
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	4b15      	ldr	r3, [pc, #84]	@ (8005470 <pxCurrentTCBConst>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	f01e 0f10 	tst.w	lr, #16
 8005420:	bf08      	it	eq
 8005422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542a:	6010      	str	r0, [r2, #0]
 800542c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005434:	f380 8811 	msr	BASEPRI, r0
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f7ff f9e2 	bl	8004808 <vTaskSwitchContext>
 8005444:	f04f 0000 	mov.w	r0, #0
 8005448:	f380 8811 	msr	BASEPRI, r0
 800544c:	bc09      	pop	{r0, r3}
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	6808      	ldr	r0, [r1, #0]
 8005452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005456:	f01e 0f10 	tst.w	lr, #16
 800545a:	bf08      	it	eq
 800545c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005460:	f380 8809 	msr	PSP, r0
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	f3af 8000 	nop.w

08005470 <pxCurrentTCBConst>:
 8005470:	2000042c 	.word	0x2000042c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	607b      	str	r3, [r7, #4]
}
 8005490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005492:	f7ff f8ff 	bl	8004694 <xTaskIncrementTick>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800549c:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <SysTick_Handler+0x40>)
 800549e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	2300      	movs	r3, #0
 80054a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f383 8811 	msr	BASEPRI, r3
}
 80054ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <vPortSetupTimerInterrupt+0x34>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054c6:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <vPortSetupTimerInterrupt+0x38>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054cc:	4b0a      	ldr	r3, [pc, #40]	@ (80054f8 <vPortSetupTimerInterrupt+0x3c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <vPortSetupTimerInterrupt+0x40>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	099b      	lsrs	r3, r3, #6
 80054d8:	4a09      	ldr	r2, [pc, #36]	@ (8005500 <vPortSetupTimerInterrupt+0x44>)
 80054da:	3b01      	subs	r3, #1
 80054dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054de:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <vPortSetupTimerInterrupt+0x34>)
 80054e0:	2207      	movs	r2, #7
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	e000e010 	.word	0xe000e010
 80054f4:	e000e018 	.word	0xe000e018
 80054f8:	20000000 	.word	0x20000000
 80054fc:	10624dd3 	.word	0x10624dd3
 8005500:	e000e014 	.word	0xe000e014

08005504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005504:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005514 <vPortEnableVFP+0x10>
 8005508:	6801      	ldr	r1, [r0, #0]
 800550a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800550e:	6001      	str	r1, [r0, #0]
 8005510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005512:	bf00      	nop
 8005514:	e000ed88 	.word	0xe000ed88

08005518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800551e:	f3ef 8305 	mrs	r3, IPSR
 8005522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b0f      	cmp	r3, #15
 8005528:	d915      	bls.n	8005556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800552a:	4a18      	ldr	r2, [pc, #96]	@ (800558c <vPortValidateInterruptPriority+0x74>)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005534:	4b16      	ldr	r3, [pc, #88]	@ (8005590 <vPortValidateInterruptPriority+0x78>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	7afa      	ldrb	r2, [r7, #11]
 800553a:	429a      	cmp	r2, r3
 800553c:	d20b      	bcs.n	8005556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	607b      	str	r3, [r7, #4]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005556:	4b0f      	ldr	r3, [pc, #60]	@ (8005594 <vPortValidateInterruptPriority+0x7c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800555e:	4b0e      	ldr	r3, [pc, #56]	@ (8005598 <vPortValidateInterruptPriority+0x80>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d90b      	bls.n	800557e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	603b      	str	r3, [r7, #0]
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	e7fd      	b.n	800557a <vPortValidateInterruptPriority+0x62>
	}
 800557e:	bf00      	nop
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	e000e3f0 	.word	0xe000e3f0
 8005590:	20000558 	.word	0x20000558
 8005594:	e000ed0c 	.word	0xe000ed0c
 8005598:	2000055c 	.word	0x2000055c

0800559c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	@ 0x28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055a8:	f7fe ffc8 	bl	800453c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005720 <pvPortMalloc+0x184>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055b4:	f000 f924 	bl	8005800 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005724 <pvPortMalloc+0x188>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f040 8095 	bne.w	80056f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01e      	beq.n	800560a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055cc:	2208      	movs	r2, #8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4413      	add	r3, r2
 80055d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d015      	beq.n	800560a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f023 0307 	bic.w	r3, r3, #7
 80055e4:	3308      	adds	r3, #8
 80055e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <pvPortMalloc+0x6e>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	617b      	str	r3, [r7, #20]
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop
 8005608:	e7fd      	b.n	8005606 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d06f      	beq.n	80056f0 <pvPortMalloc+0x154>
 8005610:	4b45      	ldr	r3, [pc, #276]	@ (8005728 <pvPortMalloc+0x18c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d86a      	bhi.n	80056f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800561a:	4b44      	ldr	r3, [pc, #272]	@ (800572c <pvPortMalloc+0x190>)
 800561c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800561e:	4b43      	ldr	r3, [pc, #268]	@ (800572c <pvPortMalloc+0x190>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005624:	e004      	b.n	8005630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d903      	bls.n	8005642 <pvPortMalloc+0xa6>
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f1      	bne.n	8005626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005642:	4b37      	ldr	r3, [pc, #220]	@ (8005720 <pvPortMalloc+0x184>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005648:	429a      	cmp	r2, r3
 800564a:	d051      	beq.n	80056f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2208      	movs	r2, #8
 8005652:	4413      	add	r3, r2
 8005654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	1ad2      	subs	r2, r2, r3
 8005666:	2308      	movs	r3, #8
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	429a      	cmp	r2, r3
 800566c:	d920      	bls.n	80056b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800566e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <pvPortMalloc+0xfc>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	613b      	str	r3, [r7, #16]
}
 8005692:	bf00      	nop
 8005694:	bf00      	nop
 8005696:	e7fd      	b.n	8005694 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1ad2      	subs	r2, r2, r3
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056aa:	69b8      	ldr	r0, [r7, #24]
 80056ac:	f000 f90a 	bl	80058c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005728 <pvPortMalloc+0x18c>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005728 <pvPortMalloc+0x18c>)
 80056bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056be:	4b1a      	ldr	r3, [pc, #104]	@ (8005728 <pvPortMalloc+0x18c>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005730 <pvPortMalloc+0x194>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d203      	bcs.n	80056d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ca:	4b17      	ldr	r3, [pc, #92]	@ (8005728 <pvPortMalloc+0x18c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a18      	ldr	r2, [pc, #96]	@ (8005730 <pvPortMalloc+0x194>)
 80056d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	4b13      	ldr	r3, [pc, #76]	@ (8005724 <pvPortMalloc+0x188>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	431a      	orrs	r2, r3
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056e6:	4b13      	ldr	r3, [pc, #76]	@ (8005734 <pvPortMalloc+0x198>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3301      	adds	r3, #1
 80056ec:	4a11      	ldr	r2, [pc, #68]	@ (8005734 <pvPortMalloc+0x198>)
 80056ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056f0:	f7fe ff32 	bl	8004558 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <pvPortMalloc+0x17a>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	60fb      	str	r3, [r7, #12]
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	e7fd      	b.n	8005712 <pvPortMalloc+0x176>
	return pvReturn;
 8005716:	69fb      	ldr	r3, [r7, #28]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3728      	adds	r7, #40	@ 0x28
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20004168 	.word	0x20004168
 8005724:	2000417c 	.word	0x2000417c
 8005728:	2000416c 	.word	0x2000416c
 800572c:	20004160 	.word	0x20004160
 8005730:	20004170 	.word	0x20004170
 8005734:	20004174 	.word	0x20004174

08005738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d04f      	beq.n	80057ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800574a:	2308      	movs	r3, #8
 800574c:	425b      	negs	r3, r3
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4413      	add	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	4b25      	ldr	r3, [pc, #148]	@ (80057f4 <vPortFree+0xbc>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4013      	ands	r3, r2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <vPortFree+0x46>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60fb      	str	r3, [r7, #12]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <vPortFree+0x66>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60bb      	str	r3, [r7, #8]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	4b14      	ldr	r3, [pc, #80]	@ (80057f4 <vPortFree+0xbc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01e      	beq.n	80057ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d11a      	bne.n	80057ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	4b0e      	ldr	r3, [pc, #56]	@ (80057f4 <vPortFree+0xbc>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	43db      	mvns	r3, r3
 80057be:	401a      	ands	r2, r3
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057c4:	f7fe feba 	bl	800453c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <vPortFree+0xc0>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4413      	add	r3, r2
 80057d2:	4a09      	ldr	r2, [pc, #36]	@ (80057f8 <vPortFree+0xc0>)
 80057d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057d6:	6938      	ldr	r0, [r7, #16]
 80057d8:	f000 f874 	bl	80058c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057dc:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <vPortFree+0xc4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3301      	adds	r3, #1
 80057e2:	4a06      	ldr	r2, [pc, #24]	@ (80057fc <vPortFree+0xc4>)
 80057e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057e6:	f7fe feb7 	bl	8004558 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057ea:	bf00      	nop
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	2000417c 	.word	0x2000417c
 80057f8:	2000416c 	.word	0x2000416c
 80057fc:	20004178 	.word	0x20004178

08005800 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005806:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800580a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800580c:	4b27      	ldr	r3, [pc, #156]	@ (80058ac <prvHeapInit+0xac>)
 800580e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3307      	adds	r3, #7
 800581e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	4a1f      	ldr	r2, [pc, #124]	@ (80058ac <prvHeapInit+0xac>)
 8005830:	4413      	add	r3, r2
 8005832:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005838:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <prvHeapInit+0xb0>)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800583e:	4b1c      	ldr	r3, [pc, #112]	@ (80058b0 <prvHeapInit+0xb0>)
 8005840:	2200      	movs	r2, #0
 8005842:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4413      	add	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800584c:	2208      	movs	r2, #8
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0307 	bic.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a15      	ldr	r2, [pc, #84]	@ (80058b4 <prvHeapInit+0xb4>)
 8005860:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005862:	4b14      	ldr	r3, [pc, #80]	@ (80058b4 <prvHeapInit+0xb4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800586a:	4b12      	ldr	r3, [pc, #72]	@ (80058b4 <prvHeapInit+0xb4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	1ad2      	subs	r2, r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005880:	4b0c      	ldr	r3, [pc, #48]	@ (80058b4 <prvHeapInit+0xb4>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4a0a      	ldr	r2, [pc, #40]	@ (80058b8 <prvHeapInit+0xb8>)
 800588e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	4a09      	ldr	r2, [pc, #36]	@ (80058bc <prvHeapInit+0xbc>)
 8005896:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005898:	4b09      	ldr	r3, [pc, #36]	@ (80058c0 <prvHeapInit+0xc0>)
 800589a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800589e:	601a      	str	r2, [r3, #0]
}
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	20000560 	.word	0x20000560
 80058b0:	20004160 	.word	0x20004160
 80058b4:	20004168 	.word	0x20004168
 80058b8:	20004170 	.word	0x20004170
 80058bc:	2000416c 	.word	0x2000416c
 80058c0:	2000417c 	.word	0x2000417c

080058c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058cc:	4b28      	ldr	r3, [pc, #160]	@ (8005970 <prvInsertBlockIntoFreeList+0xac>)
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e002      	b.n	80058d8 <prvInsertBlockIntoFreeList+0x14>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d8f7      	bhi.n	80058d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	4413      	add	r3, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d108      	bne.n	8005906 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	441a      	add	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d118      	bne.n	800594c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4b15      	ldr	r3, [pc, #84]	@ (8005974 <prvInsertBlockIntoFreeList+0xb0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d00d      	beq.n	8005942 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	441a      	add	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e008      	b.n	8005954 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005942:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <prvInsertBlockIntoFreeList+0xb0>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e003      	b.n	8005954 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d002      	beq.n	8005962 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20004160 	.word	0x20004160
 8005974:	20004168 	.word	0x20004168

08005978 <std>:
 8005978:	2300      	movs	r3, #0
 800597a:	b510      	push	{r4, lr}
 800597c:	4604      	mov	r4, r0
 800597e:	e9c0 3300 	strd	r3, r3, [r0]
 8005982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005986:	6083      	str	r3, [r0, #8]
 8005988:	8181      	strh	r1, [r0, #12]
 800598a:	6643      	str	r3, [r0, #100]	@ 0x64
 800598c:	81c2      	strh	r2, [r0, #14]
 800598e:	6183      	str	r3, [r0, #24]
 8005990:	4619      	mov	r1, r3
 8005992:	2208      	movs	r2, #8
 8005994:	305c      	adds	r0, #92	@ 0x5c
 8005996:	f000 f9f9 	bl	8005d8c <memset>
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x58>)
 800599c:	6263      	str	r3, [r4, #36]	@ 0x24
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <std+0x5c>)
 80059a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <std+0x60>)
 80059a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <std+0x64>)
 80059a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80059aa:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <std+0x68>)
 80059ac:	6224      	str	r4, [r4, #32]
 80059ae:	429c      	cmp	r4, r3
 80059b0:	d006      	beq.n	80059c0 <std+0x48>
 80059b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059b6:	4294      	cmp	r4, r2
 80059b8:	d002      	beq.n	80059c0 <std+0x48>
 80059ba:	33d0      	adds	r3, #208	@ 0xd0
 80059bc:	429c      	cmp	r4, r3
 80059be:	d105      	bne.n	80059cc <std+0x54>
 80059c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c8:	f000 baae 	b.w	8005f28 <__retarget_lock_init_recursive>
 80059cc:	bd10      	pop	{r4, pc}
 80059ce:	bf00      	nop
 80059d0:	08005bdd 	.word	0x08005bdd
 80059d4:	08005bff 	.word	0x08005bff
 80059d8:	08005c37 	.word	0x08005c37
 80059dc:	08005c5b 	.word	0x08005c5b
 80059e0:	20004180 	.word	0x20004180

080059e4 <stdio_exit_handler>:
 80059e4:	4a02      	ldr	r2, [pc, #8]	@ (80059f0 <stdio_exit_handler+0xc>)
 80059e6:	4903      	ldr	r1, [pc, #12]	@ (80059f4 <stdio_exit_handler+0x10>)
 80059e8:	4803      	ldr	r0, [pc, #12]	@ (80059f8 <stdio_exit_handler+0x14>)
 80059ea:	f000 b869 	b.w	8005ac0 <_fwalk_sglue>
 80059ee:	bf00      	nop
 80059f0:	20000010 	.word	0x20000010
 80059f4:	080067e5 	.word	0x080067e5
 80059f8:	20000020 	.word	0x20000020

080059fc <cleanup_stdio>:
 80059fc:	6841      	ldr	r1, [r0, #4]
 80059fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <cleanup_stdio+0x34>)
 8005a00:	4299      	cmp	r1, r3
 8005a02:	b510      	push	{r4, lr}
 8005a04:	4604      	mov	r4, r0
 8005a06:	d001      	beq.n	8005a0c <cleanup_stdio+0x10>
 8005a08:	f000 feec 	bl	80067e4 <_fflush_r>
 8005a0c:	68a1      	ldr	r1, [r4, #8]
 8005a0e:	4b09      	ldr	r3, [pc, #36]	@ (8005a34 <cleanup_stdio+0x38>)
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d002      	beq.n	8005a1a <cleanup_stdio+0x1e>
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 fee5 	bl	80067e4 <_fflush_r>
 8005a1a:	68e1      	ldr	r1, [r4, #12]
 8005a1c:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <cleanup_stdio+0x3c>)
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	d004      	beq.n	8005a2c <cleanup_stdio+0x30>
 8005a22:	4620      	mov	r0, r4
 8005a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a28:	f000 bedc 	b.w	80067e4 <_fflush_r>
 8005a2c:	bd10      	pop	{r4, pc}
 8005a2e:	bf00      	nop
 8005a30:	20004180 	.word	0x20004180
 8005a34:	200041e8 	.word	0x200041e8
 8005a38:	20004250 	.word	0x20004250

08005a3c <global_stdio_init.part.0>:
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <global_stdio_init.part.0+0x30>)
 8005a40:	4c0b      	ldr	r4, [pc, #44]	@ (8005a70 <global_stdio_init.part.0+0x34>)
 8005a42:	4a0c      	ldr	r2, [pc, #48]	@ (8005a74 <global_stdio_init.part.0+0x38>)
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	4620      	mov	r0, r4
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2104      	movs	r1, #4
 8005a4c:	f7ff ff94 	bl	8005978 <std>
 8005a50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a54:	2201      	movs	r2, #1
 8005a56:	2109      	movs	r1, #9
 8005a58:	f7ff ff8e 	bl	8005978 <std>
 8005a5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a60:	2202      	movs	r2, #2
 8005a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a66:	2112      	movs	r1, #18
 8005a68:	f7ff bf86 	b.w	8005978 <std>
 8005a6c:	200042b8 	.word	0x200042b8
 8005a70:	20004180 	.word	0x20004180
 8005a74:	080059e5 	.word	0x080059e5

08005a78 <__sfp_lock_acquire>:
 8005a78:	4801      	ldr	r0, [pc, #4]	@ (8005a80 <__sfp_lock_acquire+0x8>)
 8005a7a:	f000 ba56 	b.w	8005f2a <__retarget_lock_acquire_recursive>
 8005a7e:	bf00      	nop
 8005a80:	200042c1 	.word	0x200042c1

08005a84 <__sfp_lock_release>:
 8005a84:	4801      	ldr	r0, [pc, #4]	@ (8005a8c <__sfp_lock_release+0x8>)
 8005a86:	f000 ba51 	b.w	8005f2c <__retarget_lock_release_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	200042c1 	.word	0x200042c1

08005a90 <__sinit>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	4604      	mov	r4, r0
 8005a94:	f7ff fff0 	bl	8005a78 <__sfp_lock_acquire>
 8005a98:	6a23      	ldr	r3, [r4, #32]
 8005a9a:	b11b      	cbz	r3, 8005aa4 <__sinit+0x14>
 8005a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa0:	f7ff bff0 	b.w	8005a84 <__sfp_lock_release>
 8005aa4:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <__sinit+0x28>)
 8005aa6:	6223      	str	r3, [r4, #32]
 8005aa8:	4b04      	ldr	r3, [pc, #16]	@ (8005abc <__sinit+0x2c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f5      	bne.n	8005a9c <__sinit+0xc>
 8005ab0:	f7ff ffc4 	bl	8005a3c <global_stdio_init.part.0>
 8005ab4:	e7f2      	b.n	8005a9c <__sinit+0xc>
 8005ab6:	bf00      	nop
 8005ab8:	080059fd 	.word	0x080059fd
 8005abc:	200042b8 	.word	0x200042b8

08005ac0 <_fwalk_sglue>:
 8005ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac4:	4607      	mov	r7, r0
 8005ac6:	4688      	mov	r8, r1
 8005ac8:	4614      	mov	r4, r2
 8005aca:	2600      	movs	r6, #0
 8005acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ad4:	d505      	bpl.n	8005ae2 <_fwalk_sglue+0x22>
 8005ad6:	6824      	ldr	r4, [r4, #0]
 8005ad8:	2c00      	cmp	r4, #0
 8005ada:	d1f7      	bne.n	8005acc <_fwalk_sglue+0xc>
 8005adc:	4630      	mov	r0, r6
 8005ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ae2:	89ab      	ldrh	r3, [r5, #12]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d907      	bls.n	8005af8 <_fwalk_sglue+0x38>
 8005ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aec:	3301      	adds	r3, #1
 8005aee:	d003      	beq.n	8005af8 <_fwalk_sglue+0x38>
 8005af0:	4629      	mov	r1, r5
 8005af2:	4638      	mov	r0, r7
 8005af4:	47c0      	blx	r8
 8005af6:	4306      	orrs	r6, r0
 8005af8:	3568      	adds	r5, #104	@ 0x68
 8005afa:	e7e9      	b.n	8005ad0 <_fwalk_sglue+0x10>

08005afc <iprintf>:
 8005afc:	b40f      	push	{r0, r1, r2, r3}
 8005afe:	b507      	push	{r0, r1, r2, lr}
 8005b00:	4906      	ldr	r1, [pc, #24]	@ (8005b1c <iprintf+0x20>)
 8005b02:	ab04      	add	r3, sp, #16
 8005b04:	6808      	ldr	r0, [r1, #0]
 8005b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b0a:	6881      	ldr	r1, [r0, #8]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	f000 fb3f 	bl	8006190 <_vfiprintf_r>
 8005b12:	b003      	add	sp, #12
 8005b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b18:	b004      	add	sp, #16
 8005b1a:	4770      	bx	lr
 8005b1c:	2000001c 	.word	0x2000001c

08005b20 <_puts_r>:
 8005b20:	6a03      	ldr	r3, [r0, #32]
 8005b22:	b570      	push	{r4, r5, r6, lr}
 8005b24:	6884      	ldr	r4, [r0, #8]
 8005b26:	4605      	mov	r5, r0
 8005b28:	460e      	mov	r6, r1
 8005b2a:	b90b      	cbnz	r3, 8005b30 <_puts_r+0x10>
 8005b2c:	f7ff ffb0 	bl	8005a90 <__sinit>
 8005b30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b32:	07db      	lsls	r3, r3, #31
 8005b34:	d405      	bmi.n	8005b42 <_puts_r+0x22>
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	0598      	lsls	r0, r3, #22
 8005b3a:	d402      	bmi.n	8005b42 <_puts_r+0x22>
 8005b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b3e:	f000 f9f4 	bl	8005f2a <__retarget_lock_acquire_recursive>
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	0719      	lsls	r1, r3, #28
 8005b46:	d502      	bpl.n	8005b4e <_puts_r+0x2e>
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d135      	bne.n	8005bba <_puts_r+0x9a>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 f8c5 	bl	8005ce0 <__swsetup_r>
 8005b56:	b380      	cbz	r0, 8005bba <_puts_r+0x9a>
 8005b58:	f04f 35ff 	mov.w	r5, #4294967295
 8005b5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b5e:	07da      	lsls	r2, r3, #31
 8005b60:	d405      	bmi.n	8005b6e <_puts_r+0x4e>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	059b      	lsls	r3, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_puts_r+0x4e>
 8005b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b6a:	f000 f9df 	bl	8005f2c <__retarget_lock_release_recursive>
 8005b6e:	4628      	mov	r0, r5
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da04      	bge.n	8005b80 <_puts_r+0x60>
 8005b76:	69a2      	ldr	r2, [r4, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	dc17      	bgt.n	8005bac <_puts_r+0x8c>
 8005b7c:	290a      	cmp	r1, #10
 8005b7e:	d015      	beq.n	8005bac <_puts_r+0x8c>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	6022      	str	r2, [r4, #0]
 8005b86:	7019      	strb	r1, [r3, #0]
 8005b88:	68a3      	ldr	r3, [r4, #8]
 8005b8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	60a3      	str	r3, [r4, #8]
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d1ed      	bne.n	8005b72 <_puts_r+0x52>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da11      	bge.n	8005bbe <_puts_r+0x9e>
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	210a      	movs	r1, #10
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 f85f 	bl	8005c62 <__swbuf_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d0d7      	beq.n	8005b58 <_puts_r+0x38>
 8005ba8:	250a      	movs	r5, #10
 8005baa:	e7d7      	b.n	8005b5c <_puts_r+0x3c>
 8005bac:	4622      	mov	r2, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 f857 	bl	8005c62 <__swbuf_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d1e7      	bne.n	8005b88 <_puts_r+0x68>
 8005bb8:	e7ce      	b.n	8005b58 <_puts_r+0x38>
 8005bba:	3e01      	subs	r6, #1
 8005bbc:	e7e4      	b.n	8005b88 <_puts_r+0x68>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	6022      	str	r2, [r4, #0]
 8005bc4:	220a      	movs	r2, #10
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	e7ee      	b.n	8005ba8 <_puts_r+0x88>
	...

08005bcc <puts>:
 8005bcc:	4b02      	ldr	r3, [pc, #8]	@ (8005bd8 <puts+0xc>)
 8005bce:	4601      	mov	r1, r0
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	f7ff bfa5 	b.w	8005b20 <_puts_r>
 8005bd6:	bf00      	nop
 8005bd8:	2000001c 	.word	0x2000001c

08005bdc <__sread>:
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	460c      	mov	r4, r1
 8005be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be4:	f000 f952 	bl	8005e8c <_read_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	bfab      	itete	ge
 8005bec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bee:	89a3      	ldrhlt	r3, [r4, #12]
 8005bf0:	181b      	addge	r3, r3, r0
 8005bf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bf6:	bfac      	ite	ge
 8005bf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bfa:	81a3      	strhlt	r3, [r4, #12]
 8005bfc:	bd10      	pop	{r4, pc}

08005bfe <__swrite>:
 8005bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c02:	461f      	mov	r7, r3
 8005c04:	898b      	ldrh	r3, [r1, #12]
 8005c06:	05db      	lsls	r3, r3, #23
 8005c08:	4605      	mov	r5, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	d505      	bpl.n	8005c1c <__swrite+0x1e>
 8005c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c14:	2302      	movs	r3, #2
 8005c16:	2200      	movs	r2, #0
 8005c18:	f000 f926 	bl	8005e68 <_lseek_r>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	4632      	mov	r2, r6
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c32:	f000 b93d 	b.w	8005eb0 <_write_r>

08005c36 <__sseek>:
 8005c36:	b510      	push	{r4, lr}
 8005c38:	460c      	mov	r4, r1
 8005c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3e:	f000 f913 	bl	8005e68 <_lseek_r>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	bf15      	itete	ne
 8005c48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c52:	81a3      	strheq	r3, [r4, #12]
 8005c54:	bf18      	it	ne
 8005c56:	81a3      	strhne	r3, [r4, #12]
 8005c58:	bd10      	pop	{r4, pc}

08005c5a <__sclose>:
 8005c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5e:	f000 b89d 	b.w	8005d9c <_close_r>

08005c62 <__swbuf_r>:
 8005c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c64:	460e      	mov	r6, r1
 8005c66:	4614      	mov	r4, r2
 8005c68:	4605      	mov	r5, r0
 8005c6a:	b118      	cbz	r0, 8005c74 <__swbuf_r+0x12>
 8005c6c:	6a03      	ldr	r3, [r0, #32]
 8005c6e:	b90b      	cbnz	r3, 8005c74 <__swbuf_r+0x12>
 8005c70:	f7ff ff0e 	bl	8005a90 <__sinit>
 8005c74:	69a3      	ldr	r3, [r4, #24]
 8005c76:	60a3      	str	r3, [r4, #8]
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	071a      	lsls	r2, r3, #28
 8005c7c:	d501      	bpl.n	8005c82 <__swbuf_r+0x20>
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	b943      	cbnz	r3, 8005c94 <__swbuf_r+0x32>
 8005c82:	4621      	mov	r1, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	f000 f82b 	bl	8005ce0 <__swsetup_r>
 8005c8a:	b118      	cbz	r0, 8005c94 <__swbuf_r+0x32>
 8005c8c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c90:	4638      	mov	r0, r7
 8005c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	6922      	ldr	r2, [r4, #16]
 8005c98:	1a98      	subs	r0, r3, r2
 8005c9a:	6963      	ldr	r3, [r4, #20]
 8005c9c:	b2f6      	uxtb	r6, r6
 8005c9e:	4283      	cmp	r3, r0
 8005ca0:	4637      	mov	r7, r6
 8005ca2:	dc05      	bgt.n	8005cb0 <__swbuf_r+0x4e>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fd9c 	bl	80067e4 <_fflush_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d1ed      	bne.n	8005c8c <__swbuf_r+0x2a>
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	60a3      	str	r3, [r4, #8]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	6022      	str	r2, [r4, #0]
 8005cbc:	701e      	strb	r6, [r3, #0]
 8005cbe:	6962      	ldr	r2, [r4, #20]
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d004      	beq.n	8005cd0 <__swbuf_r+0x6e>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	07db      	lsls	r3, r3, #31
 8005cca:	d5e1      	bpl.n	8005c90 <__swbuf_r+0x2e>
 8005ccc:	2e0a      	cmp	r6, #10
 8005cce:	d1df      	bne.n	8005c90 <__swbuf_r+0x2e>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f000 fd86 	bl	80067e4 <_fflush_r>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d0d9      	beq.n	8005c90 <__swbuf_r+0x2e>
 8005cdc:	e7d6      	b.n	8005c8c <__swbuf_r+0x2a>
	...

08005ce0 <__swsetup_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4b29      	ldr	r3, [pc, #164]	@ (8005d88 <__swsetup_r+0xa8>)
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	460c      	mov	r4, r1
 8005cea:	b118      	cbz	r0, 8005cf4 <__swsetup_r+0x14>
 8005cec:	6a03      	ldr	r3, [r0, #32]
 8005cee:	b90b      	cbnz	r3, 8005cf4 <__swsetup_r+0x14>
 8005cf0:	f7ff fece 	bl	8005a90 <__sinit>
 8005cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf8:	0719      	lsls	r1, r3, #28
 8005cfa:	d422      	bmi.n	8005d42 <__swsetup_r+0x62>
 8005cfc:	06da      	lsls	r2, r3, #27
 8005cfe:	d407      	bmi.n	8005d10 <__swsetup_r+0x30>
 8005d00:	2209      	movs	r2, #9
 8005d02:	602a      	str	r2, [r5, #0]
 8005d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d08:	81a3      	strh	r3, [r4, #12]
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	e033      	b.n	8005d78 <__swsetup_r+0x98>
 8005d10:	0758      	lsls	r0, r3, #29
 8005d12:	d512      	bpl.n	8005d3a <__swsetup_r+0x5a>
 8005d14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d16:	b141      	cbz	r1, 8005d2a <__swsetup_r+0x4a>
 8005d18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d1c:	4299      	cmp	r1, r3
 8005d1e:	d002      	beq.n	8005d26 <__swsetup_r+0x46>
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f913 	bl	8005f4c <_free_r>
 8005d26:	2300      	movs	r3, #0
 8005d28:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	2300      	movs	r3, #0
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f043 0308 	orr.w	r3, r3, #8
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	b94b      	cbnz	r3, 8005d5a <__swsetup_r+0x7a>
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d50:	d003      	beq.n	8005d5a <__swsetup_r+0x7a>
 8005d52:	4621      	mov	r1, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 fd93 	bl	8006880 <__smakebuf_r>
 8005d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d5e:	f013 0201 	ands.w	r2, r3, #1
 8005d62:	d00a      	beq.n	8005d7a <__swsetup_r+0x9a>
 8005d64:	2200      	movs	r2, #0
 8005d66:	60a2      	str	r2, [r4, #8]
 8005d68:	6962      	ldr	r2, [r4, #20]
 8005d6a:	4252      	negs	r2, r2
 8005d6c:	61a2      	str	r2, [r4, #24]
 8005d6e:	6922      	ldr	r2, [r4, #16]
 8005d70:	b942      	cbnz	r2, 8005d84 <__swsetup_r+0xa4>
 8005d72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d76:	d1c5      	bne.n	8005d04 <__swsetup_r+0x24>
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	0799      	lsls	r1, r3, #30
 8005d7c:	bf58      	it	pl
 8005d7e:	6962      	ldrpl	r2, [r4, #20]
 8005d80:	60a2      	str	r2, [r4, #8]
 8005d82:	e7f4      	b.n	8005d6e <__swsetup_r+0x8e>
 8005d84:	2000      	movs	r0, #0
 8005d86:	e7f7      	b.n	8005d78 <__swsetup_r+0x98>
 8005d88:	2000001c 	.word	0x2000001c

08005d8c <memset>:
 8005d8c:	4402      	add	r2, r0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d100      	bne.n	8005d96 <memset+0xa>
 8005d94:	4770      	bx	lr
 8005d96:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9a:	e7f9      	b.n	8005d90 <memset+0x4>

08005d9c <_close_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d06      	ldr	r5, [pc, #24]	@ (8005db8 <_close_r+0x1c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fb f8d9 	bl	8000f5e <_close>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_close_r+0x1a>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_close_r+0x1a>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	200042bc 	.word	0x200042bc

08005dbc <_reclaim_reent>:
 8005dbc:	4b29      	ldr	r3, [pc, #164]	@ (8005e64 <_reclaim_reent+0xa8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4283      	cmp	r3, r0
 8005dc2:	b570      	push	{r4, r5, r6, lr}
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	d04b      	beq.n	8005e60 <_reclaim_reent+0xa4>
 8005dc8:	69c3      	ldr	r3, [r0, #28]
 8005dca:	b1ab      	cbz	r3, 8005df8 <_reclaim_reent+0x3c>
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	b16b      	cbz	r3, 8005dec <_reclaim_reent+0x30>
 8005dd0:	2500      	movs	r5, #0
 8005dd2:	69e3      	ldr	r3, [r4, #28]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	5959      	ldr	r1, [r3, r5]
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	d13b      	bne.n	8005e54 <_reclaim_reent+0x98>
 8005ddc:	3504      	adds	r5, #4
 8005dde:	2d80      	cmp	r5, #128	@ 0x80
 8005de0:	d1f7      	bne.n	8005dd2 <_reclaim_reent+0x16>
 8005de2:	69e3      	ldr	r3, [r4, #28]
 8005de4:	4620      	mov	r0, r4
 8005de6:	68d9      	ldr	r1, [r3, #12]
 8005de8:	f000 f8b0 	bl	8005f4c <_free_r>
 8005dec:	69e3      	ldr	r3, [r4, #28]
 8005dee:	6819      	ldr	r1, [r3, #0]
 8005df0:	b111      	cbz	r1, 8005df8 <_reclaim_reent+0x3c>
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 f8aa 	bl	8005f4c <_free_r>
 8005df8:	6961      	ldr	r1, [r4, #20]
 8005dfa:	b111      	cbz	r1, 8005e02 <_reclaim_reent+0x46>
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f000 f8a5 	bl	8005f4c <_free_r>
 8005e02:	69e1      	ldr	r1, [r4, #28]
 8005e04:	b111      	cbz	r1, 8005e0c <_reclaim_reent+0x50>
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 f8a0 	bl	8005f4c <_free_r>
 8005e0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e0e:	b111      	cbz	r1, 8005e16 <_reclaim_reent+0x5a>
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 f89b 	bl	8005f4c <_free_r>
 8005e16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e18:	b111      	cbz	r1, 8005e20 <_reclaim_reent+0x64>
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 f896 	bl	8005f4c <_free_r>
 8005e20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005e22:	b111      	cbz	r1, 8005e2a <_reclaim_reent+0x6e>
 8005e24:	4620      	mov	r0, r4
 8005e26:	f000 f891 	bl	8005f4c <_free_r>
 8005e2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005e2c:	b111      	cbz	r1, 8005e34 <_reclaim_reent+0x78>
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 f88c 	bl	8005f4c <_free_r>
 8005e34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005e36:	b111      	cbz	r1, 8005e3e <_reclaim_reent+0x82>
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 f887 	bl	8005f4c <_free_r>
 8005e3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005e40:	b111      	cbz	r1, 8005e48 <_reclaim_reent+0x8c>
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 f882 	bl	8005f4c <_free_r>
 8005e48:	6a23      	ldr	r3, [r4, #32]
 8005e4a:	b14b      	cbz	r3, 8005e60 <_reclaim_reent+0xa4>
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e52:	4718      	bx	r3
 8005e54:	680e      	ldr	r6, [r1, #0]
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 f878 	bl	8005f4c <_free_r>
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	e7bb      	b.n	8005dd8 <_reclaim_reent+0x1c>
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
 8005e62:	bf00      	nop
 8005e64:	2000001c 	.word	0x2000001c

08005e68 <_lseek_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d07      	ldr	r5, [pc, #28]	@ (8005e88 <_lseek_r+0x20>)
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	4608      	mov	r0, r1
 8005e70:	4611      	mov	r1, r2
 8005e72:	2200      	movs	r2, #0
 8005e74:	602a      	str	r2, [r5, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f7fb f898 	bl	8000fac <_lseek>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	d102      	bne.n	8005e86 <_lseek_r+0x1e>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	b103      	cbz	r3, 8005e86 <_lseek_r+0x1e>
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
 8005e88:	200042bc 	.word	0x200042bc

08005e8c <_read_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4d07      	ldr	r5, [pc, #28]	@ (8005eac <_read_r+0x20>)
 8005e90:	4604      	mov	r4, r0
 8005e92:	4608      	mov	r0, r1
 8005e94:	4611      	mov	r1, r2
 8005e96:	2200      	movs	r2, #0
 8005e98:	602a      	str	r2, [r5, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f7fb f826 	bl	8000eec <_read>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_read_r+0x1e>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_read_r+0x1e>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	200042bc 	.word	0x200042bc

08005eb0 <_write_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d07      	ldr	r5, [pc, #28]	@ (8005ed0 <_write_r+0x20>)
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	4611      	mov	r1, r2
 8005eba:	2200      	movs	r2, #0
 8005ebc:	602a      	str	r2, [r5, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f7fb f831 	bl	8000f26 <_write>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_write_r+0x1e>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_write_r+0x1e>
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	200042bc 	.word	0x200042bc

08005ed4 <__errno>:
 8005ed4:	4b01      	ldr	r3, [pc, #4]	@ (8005edc <__errno+0x8>)
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	2000001c 	.word	0x2000001c

08005ee0 <__libc_init_array>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8005f18 <__libc_init_array+0x38>)
 8005ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8005f1c <__libc_init_array+0x3c>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	2600      	movs	r6, #0
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	d109      	bne.n	8005f04 <__libc_init_array+0x24>
 8005ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8005f20 <__libc_init_array+0x40>)
 8005ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8005f24 <__libc_init_array+0x44>)
 8005ef4:	f000 fd32 	bl	800695c <_init>
 8005ef8:	1b64      	subs	r4, r4, r5
 8005efa:	10a4      	asrs	r4, r4, #2
 8005efc:	2600      	movs	r6, #0
 8005efe:	42a6      	cmp	r6, r4
 8005f00:	d105      	bne.n	8005f0e <__libc_init_array+0x2e>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f08:	4798      	blx	r3
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7ee      	b.n	8005eec <__libc_init_array+0xc>
 8005f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f12:	4798      	blx	r3
 8005f14:	3601      	adds	r6, #1
 8005f16:	e7f2      	b.n	8005efe <__libc_init_array+0x1e>
 8005f18:	08006b18 	.word	0x08006b18
 8005f1c:	08006b18 	.word	0x08006b18
 8005f20:	08006b18 	.word	0x08006b18
 8005f24:	08006b1c 	.word	0x08006b1c

08005f28 <__retarget_lock_init_recursive>:
 8005f28:	4770      	bx	lr

08005f2a <__retarget_lock_acquire_recursive>:
 8005f2a:	4770      	bx	lr

08005f2c <__retarget_lock_release_recursive>:
 8005f2c:	4770      	bx	lr

08005f2e <memcpy>:
 8005f2e:	440a      	add	r2, r1
 8005f30:	4291      	cmp	r1, r2
 8005f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f36:	d100      	bne.n	8005f3a <memcpy+0xc>
 8005f38:	4770      	bx	lr
 8005f3a:	b510      	push	{r4, lr}
 8005f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f44:	4291      	cmp	r1, r2
 8005f46:	d1f9      	bne.n	8005f3c <memcpy+0xe>
 8005f48:	bd10      	pop	{r4, pc}
	...

08005f4c <_free_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4605      	mov	r5, r0
 8005f50:	2900      	cmp	r1, #0
 8005f52:	d041      	beq.n	8005fd8 <_free_r+0x8c>
 8005f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f58:	1f0c      	subs	r4, r1, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bfb8      	it	lt
 8005f5e:	18e4      	addlt	r4, r4, r3
 8005f60:	f000 f8e0 	bl	8006124 <__malloc_lock>
 8005f64:	4a1d      	ldr	r2, [pc, #116]	@ (8005fdc <_free_r+0x90>)
 8005f66:	6813      	ldr	r3, [r2, #0]
 8005f68:	b933      	cbnz	r3, 8005f78 <_free_r+0x2c>
 8005f6a:	6063      	str	r3, [r4, #4]
 8005f6c:	6014      	str	r4, [r2, #0]
 8005f6e:	4628      	mov	r0, r5
 8005f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f74:	f000 b8dc 	b.w	8006130 <__malloc_unlock>
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	d908      	bls.n	8005f8e <_free_r+0x42>
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	1821      	adds	r1, r4, r0
 8005f80:	428b      	cmp	r3, r1
 8005f82:	bf01      	itttt	eq
 8005f84:	6819      	ldreq	r1, [r3, #0]
 8005f86:	685b      	ldreq	r3, [r3, #4]
 8005f88:	1809      	addeq	r1, r1, r0
 8005f8a:	6021      	streq	r1, [r4, #0]
 8005f8c:	e7ed      	b.n	8005f6a <_free_r+0x1e>
 8005f8e:	461a      	mov	r2, r3
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	b10b      	cbz	r3, 8005f98 <_free_r+0x4c>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d9fa      	bls.n	8005f8e <_free_r+0x42>
 8005f98:	6811      	ldr	r1, [r2, #0]
 8005f9a:	1850      	adds	r0, r2, r1
 8005f9c:	42a0      	cmp	r0, r4
 8005f9e:	d10b      	bne.n	8005fb8 <_free_r+0x6c>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	4401      	add	r1, r0
 8005fa4:	1850      	adds	r0, r2, r1
 8005fa6:	4283      	cmp	r3, r0
 8005fa8:	6011      	str	r1, [r2, #0]
 8005faa:	d1e0      	bne.n	8005f6e <_free_r+0x22>
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	6053      	str	r3, [r2, #4]
 8005fb2:	4408      	add	r0, r1
 8005fb4:	6010      	str	r0, [r2, #0]
 8005fb6:	e7da      	b.n	8005f6e <_free_r+0x22>
 8005fb8:	d902      	bls.n	8005fc0 <_free_r+0x74>
 8005fba:	230c      	movs	r3, #12
 8005fbc:	602b      	str	r3, [r5, #0]
 8005fbe:	e7d6      	b.n	8005f6e <_free_r+0x22>
 8005fc0:	6820      	ldr	r0, [r4, #0]
 8005fc2:	1821      	adds	r1, r4, r0
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	bf04      	itt	eq
 8005fc8:	6819      	ldreq	r1, [r3, #0]
 8005fca:	685b      	ldreq	r3, [r3, #4]
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	bf04      	itt	eq
 8005fd0:	1809      	addeq	r1, r1, r0
 8005fd2:	6021      	streq	r1, [r4, #0]
 8005fd4:	6054      	str	r4, [r2, #4]
 8005fd6:	e7ca      	b.n	8005f6e <_free_r+0x22>
 8005fd8:	bd38      	pop	{r3, r4, r5, pc}
 8005fda:	bf00      	nop
 8005fdc:	200042c8 	.word	0x200042c8

08005fe0 <sbrk_aligned>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4e0f      	ldr	r6, [pc, #60]	@ (8006020 <sbrk_aligned+0x40>)
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	6831      	ldr	r1, [r6, #0]
 8005fe8:	4605      	mov	r5, r0
 8005fea:	b911      	cbnz	r1, 8005ff2 <sbrk_aligned+0x12>
 8005fec:	f000 fca6 	bl	800693c <_sbrk_r>
 8005ff0:	6030      	str	r0, [r6, #0]
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 fca1 	bl	800693c <_sbrk_r>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	d103      	bne.n	8006006 <sbrk_aligned+0x26>
 8005ffe:	f04f 34ff 	mov.w	r4, #4294967295
 8006002:	4620      	mov	r0, r4
 8006004:	bd70      	pop	{r4, r5, r6, pc}
 8006006:	1cc4      	adds	r4, r0, #3
 8006008:	f024 0403 	bic.w	r4, r4, #3
 800600c:	42a0      	cmp	r0, r4
 800600e:	d0f8      	beq.n	8006002 <sbrk_aligned+0x22>
 8006010:	1a21      	subs	r1, r4, r0
 8006012:	4628      	mov	r0, r5
 8006014:	f000 fc92 	bl	800693c <_sbrk_r>
 8006018:	3001      	adds	r0, #1
 800601a:	d1f2      	bne.n	8006002 <sbrk_aligned+0x22>
 800601c:	e7ef      	b.n	8005ffe <sbrk_aligned+0x1e>
 800601e:	bf00      	nop
 8006020:	200042c4 	.word	0x200042c4

08006024 <_malloc_r>:
 8006024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006028:	1ccd      	adds	r5, r1, #3
 800602a:	f025 0503 	bic.w	r5, r5, #3
 800602e:	3508      	adds	r5, #8
 8006030:	2d0c      	cmp	r5, #12
 8006032:	bf38      	it	cc
 8006034:	250c      	movcc	r5, #12
 8006036:	2d00      	cmp	r5, #0
 8006038:	4606      	mov	r6, r0
 800603a:	db01      	blt.n	8006040 <_malloc_r+0x1c>
 800603c:	42a9      	cmp	r1, r5
 800603e:	d904      	bls.n	800604a <_malloc_r+0x26>
 8006040:	230c      	movs	r3, #12
 8006042:	6033      	str	r3, [r6, #0]
 8006044:	2000      	movs	r0, #0
 8006046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800604a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006120 <_malloc_r+0xfc>
 800604e:	f000 f869 	bl	8006124 <__malloc_lock>
 8006052:	f8d8 3000 	ldr.w	r3, [r8]
 8006056:	461c      	mov	r4, r3
 8006058:	bb44      	cbnz	r4, 80060ac <_malloc_r+0x88>
 800605a:	4629      	mov	r1, r5
 800605c:	4630      	mov	r0, r6
 800605e:	f7ff ffbf 	bl	8005fe0 <sbrk_aligned>
 8006062:	1c43      	adds	r3, r0, #1
 8006064:	4604      	mov	r4, r0
 8006066:	d158      	bne.n	800611a <_malloc_r+0xf6>
 8006068:	f8d8 4000 	ldr.w	r4, [r8]
 800606c:	4627      	mov	r7, r4
 800606e:	2f00      	cmp	r7, #0
 8006070:	d143      	bne.n	80060fa <_malloc_r+0xd6>
 8006072:	2c00      	cmp	r4, #0
 8006074:	d04b      	beq.n	800610e <_malloc_r+0xea>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	4639      	mov	r1, r7
 800607a:	4630      	mov	r0, r6
 800607c:	eb04 0903 	add.w	r9, r4, r3
 8006080:	f000 fc5c 	bl	800693c <_sbrk_r>
 8006084:	4581      	cmp	r9, r0
 8006086:	d142      	bne.n	800610e <_malloc_r+0xea>
 8006088:	6821      	ldr	r1, [r4, #0]
 800608a:	1a6d      	subs	r5, r5, r1
 800608c:	4629      	mov	r1, r5
 800608e:	4630      	mov	r0, r6
 8006090:	f7ff ffa6 	bl	8005fe0 <sbrk_aligned>
 8006094:	3001      	adds	r0, #1
 8006096:	d03a      	beq.n	800610e <_malloc_r+0xea>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	442b      	add	r3, r5
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	f8d8 3000 	ldr.w	r3, [r8]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	bb62      	cbnz	r2, 8006100 <_malloc_r+0xdc>
 80060a6:	f8c8 7000 	str.w	r7, [r8]
 80060aa:	e00f      	b.n	80060cc <_malloc_r+0xa8>
 80060ac:	6822      	ldr	r2, [r4, #0]
 80060ae:	1b52      	subs	r2, r2, r5
 80060b0:	d420      	bmi.n	80060f4 <_malloc_r+0xd0>
 80060b2:	2a0b      	cmp	r2, #11
 80060b4:	d917      	bls.n	80060e6 <_malloc_r+0xc2>
 80060b6:	1961      	adds	r1, r4, r5
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	6025      	str	r5, [r4, #0]
 80060bc:	bf18      	it	ne
 80060be:	6059      	strne	r1, [r3, #4]
 80060c0:	6863      	ldr	r3, [r4, #4]
 80060c2:	bf08      	it	eq
 80060c4:	f8c8 1000 	streq.w	r1, [r8]
 80060c8:	5162      	str	r2, [r4, r5]
 80060ca:	604b      	str	r3, [r1, #4]
 80060cc:	4630      	mov	r0, r6
 80060ce:	f000 f82f 	bl	8006130 <__malloc_unlock>
 80060d2:	f104 000b 	add.w	r0, r4, #11
 80060d6:	1d23      	adds	r3, r4, #4
 80060d8:	f020 0007 	bic.w	r0, r0, #7
 80060dc:	1ac2      	subs	r2, r0, r3
 80060de:	bf1c      	itt	ne
 80060e0:	1a1b      	subne	r3, r3, r0
 80060e2:	50a3      	strne	r3, [r4, r2]
 80060e4:	e7af      	b.n	8006046 <_malloc_r+0x22>
 80060e6:	6862      	ldr	r2, [r4, #4]
 80060e8:	42a3      	cmp	r3, r4
 80060ea:	bf0c      	ite	eq
 80060ec:	f8c8 2000 	streq.w	r2, [r8]
 80060f0:	605a      	strne	r2, [r3, #4]
 80060f2:	e7eb      	b.n	80060cc <_malloc_r+0xa8>
 80060f4:	4623      	mov	r3, r4
 80060f6:	6864      	ldr	r4, [r4, #4]
 80060f8:	e7ae      	b.n	8006058 <_malloc_r+0x34>
 80060fa:	463c      	mov	r4, r7
 80060fc:	687f      	ldr	r7, [r7, #4]
 80060fe:	e7b6      	b.n	800606e <_malloc_r+0x4a>
 8006100:	461a      	mov	r2, r3
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	42a3      	cmp	r3, r4
 8006106:	d1fb      	bne.n	8006100 <_malloc_r+0xdc>
 8006108:	2300      	movs	r3, #0
 800610a:	6053      	str	r3, [r2, #4]
 800610c:	e7de      	b.n	80060cc <_malloc_r+0xa8>
 800610e:	230c      	movs	r3, #12
 8006110:	6033      	str	r3, [r6, #0]
 8006112:	4630      	mov	r0, r6
 8006114:	f000 f80c 	bl	8006130 <__malloc_unlock>
 8006118:	e794      	b.n	8006044 <_malloc_r+0x20>
 800611a:	6005      	str	r5, [r0, #0]
 800611c:	e7d6      	b.n	80060cc <_malloc_r+0xa8>
 800611e:	bf00      	nop
 8006120:	200042c8 	.word	0x200042c8

08006124 <__malloc_lock>:
 8006124:	4801      	ldr	r0, [pc, #4]	@ (800612c <__malloc_lock+0x8>)
 8006126:	f7ff bf00 	b.w	8005f2a <__retarget_lock_acquire_recursive>
 800612a:	bf00      	nop
 800612c:	200042c0 	.word	0x200042c0

08006130 <__malloc_unlock>:
 8006130:	4801      	ldr	r0, [pc, #4]	@ (8006138 <__malloc_unlock+0x8>)
 8006132:	f7ff befb 	b.w	8005f2c <__retarget_lock_release_recursive>
 8006136:	bf00      	nop
 8006138:	200042c0 	.word	0x200042c0

0800613c <__sfputc_r>:
 800613c:	6893      	ldr	r3, [r2, #8]
 800613e:	3b01      	subs	r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	b410      	push	{r4}
 8006144:	6093      	str	r3, [r2, #8]
 8006146:	da08      	bge.n	800615a <__sfputc_r+0x1e>
 8006148:	6994      	ldr	r4, [r2, #24]
 800614a:	42a3      	cmp	r3, r4
 800614c:	db01      	blt.n	8006152 <__sfputc_r+0x16>
 800614e:	290a      	cmp	r1, #10
 8006150:	d103      	bne.n	800615a <__sfputc_r+0x1e>
 8006152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006156:	f7ff bd84 	b.w	8005c62 <__swbuf_r>
 800615a:	6813      	ldr	r3, [r2, #0]
 800615c:	1c58      	adds	r0, r3, #1
 800615e:	6010      	str	r0, [r2, #0]
 8006160:	7019      	strb	r1, [r3, #0]
 8006162:	4608      	mov	r0, r1
 8006164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006168:	4770      	bx	lr

0800616a <__sfputs_r>:
 800616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616c:	4606      	mov	r6, r0
 800616e:	460f      	mov	r7, r1
 8006170:	4614      	mov	r4, r2
 8006172:	18d5      	adds	r5, r2, r3
 8006174:	42ac      	cmp	r4, r5
 8006176:	d101      	bne.n	800617c <__sfputs_r+0x12>
 8006178:	2000      	movs	r0, #0
 800617a:	e007      	b.n	800618c <__sfputs_r+0x22>
 800617c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006180:	463a      	mov	r2, r7
 8006182:	4630      	mov	r0, r6
 8006184:	f7ff ffda 	bl	800613c <__sfputc_r>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d1f3      	bne.n	8006174 <__sfputs_r+0xa>
 800618c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006190 <_vfiprintf_r>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	460d      	mov	r5, r1
 8006196:	b09d      	sub	sp, #116	@ 0x74
 8006198:	4614      	mov	r4, r2
 800619a:	4698      	mov	r8, r3
 800619c:	4606      	mov	r6, r0
 800619e:	b118      	cbz	r0, 80061a8 <_vfiprintf_r+0x18>
 80061a0:	6a03      	ldr	r3, [r0, #32]
 80061a2:	b90b      	cbnz	r3, 80061a8 <_vfiprintf_r+0x18>
 80061a4:	f7ff fc74 	bl	8005a90 <__sinit>
 80061a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061aa:	07d9      	lsls	r1, r3, #31
 80061ac:	d405      	bmi.n	80061ba <_vfiprintf_r+0x2a>
 80061ae:	89ab      	ldrh	r3, [r5, #12]
 80061b0:	059a      	lsls	r2, r3, #22
 80061b2:	d402      	bmi.n	80061ba <_vfiprintf_r+0x2a>
 80061b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061b6:	f7ff feb8 	bl	8005f2a <__retarget_lock_acquire_recursive>
 80061ba:	89ab      	ldrh	r3, [r5, #12]
 80061bc:	071b      	lsls	r3, r3, #28
 80061be:	d501      	bpl.n	80061c4 <_vfiprintf_r+0x34>
 80061c0:	692b      	ldr	r3, [r5, #16]
 80061c2:	b99b      	cbnz	r3, 80061ec <_vfiprintf_r+0x5c>
 80061c4:	4629      	mov	r1, r5
 80061c6:	4630      	mov	r0, r6
 80061c8:	f7ff fd8a 	bl	8005ce0 <__swsetup_r>
 80061cc:	b170      	cbz	r0, 80061ec <_vfiprintf_r+0x5c>
 80061ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061d0:	07dc      	lsls	r4, r3, #31
 80061d2:	d504      	bpl.n	80061de <_vfiprintf_r+0x4e>
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	b01d      	add	sp, #116	@ 0x74
 80061da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061de:	89ab      	ldrh	r3, [r5, #12]
 80061e0:	0598      	lsls	r0, r3, #22
 80061e2:	d4f7      	bmi.n	80061d4 <_vfiprintf_r+0x44>
 80061e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061e6:	f7ff fea1 	bl	8005f2c <__retarget_lock_release_recursive>
 80061ea:	e7f3      	b.n	80061d4 <_vfiprintf_r+0x44>
 80061ec:	2300      	movs	r3, #0
 80061ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80061f0:	2320      	movs	r3, #32
 80061f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80061fa:	2330      	movs	r3, #48	@ 0x30
 80061fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80063ac <_vfiprintf_r+0x21c>
 8006200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006204:	f04f 0901 	mov.w	r9, #1
 8006208:	4623      	mov	r3, r4
 800620a:	469a      	mov	sl, r3
 800620c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006210:	b10a      	cbz	r2, 8006216 <_vfiprintf_r+0x86>
 8006212:	2a25      	cmp	r2, #37	@ 0x25
 8006214:	d1f9      	bne.n	800620a <_vfiprintf_r+0x7a>
 8006216:	ebba 0b04 	subs.w	fp, sl, r4
 800621a:	d00b      	beq.n	8006234 <_vfiprintf_r+0xa4>
 800621c:	465b      	mov	r3, fp
 800621e:	4622      	mov	r2, r4
 8006220:	4629      	mov	r1, r5
 8006222:	4630      	mov	r0, r6
 8006224:	f7ff ffa1 	bl	800616a <__sfputs_r>
 8006228:	3001      	adds	r0, #1
 800622a:	f000 80a7 	beq.w	800637c <_vfiprintf_r+0x1ec>
 800622e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006230:	445a      	add	r2, fp
 8006232:	9209      	str	r2, [sp, #36]	@ 0x24
 8006234:	f89a 3000 	ldrb.w	r3, [sl]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 809f 	beq.w	800637c <_vfiprintf_r+0x1ec>
 800623e:	2300      	movs	r3, #0
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006248:	f10a 0a01 	add.w	sl, sl, #1
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	9307      	str	r3, [sp, #28]
 8006250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006254:	931a      	str	r3, [sp, #104]	@ 0x68
 8006256:	4654      	mov	r4, sl
 8006258:	2205      	movs	r2, #5
 800625a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625e:	4853      	ldr	r0, [pc, #332]	@ (80063ac <_vfiprintf_r+0x21c>)
 8006260:	f7f9 ffbe 	bl	80001e0 <memchr>
 8006264:	9a04      	ldr	r2, [sp, #16]
 8006266:	b9d8      	cbnz	r0, 80062a0 <_vfiprintf_r+0x110>
 8006268:	06d1      	lsls	r1, r2, #27
 800626a:	bf44      	itt	mi
 800626c:	2320      	movmi	r3, #32
 800626e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006272:	0713      	lsls	r3, r2, #28
 8006274:	bf44      	itt	mi
 8006276:	232b      	movmi	r3, #43	@ 0x2b
 8006278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800627c:	f89a 3000 	ldrb.w	r3, [sl]
 8006280:	2b2a      	cmp	r3, #42	@ 0x2a
 8006282:	d015      	beq.n	80062b0 <_vfiprintf_r+0x120>
 8006284:	9a07      	ldr	r2, [sp, #28]
 8006286:	4654      	mov	r4, sl
 8006288:	2000      	movs	r0, #0
 800628a:	f04f 0c0a 	mov.w	ip, #10
 800628e:	4621      	mov	r1, r4
 8006290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006294:	3b30      	subs	r3, #48	@ 0x30
 8006296:	2b09      	cmp	r3, #9
 8006298:	d94b      	bls.n	8006332 <_vfiprintf_r+0x1a2>
 800629a:	b1b0      	cbz	r0, 80062ca <_vfiprintf_r+0x13a>
 800629c:	9207      	str	r2, [sp, #28]
 800629e:	e014      	b.n	80062ca <_vfiprintf_r+0x13a>
 80062a0:	eba0 0308 	sub.w	r3, r0, r8
 80062a4:	fa09 f303 	lsl.w	r3, r9, r3
 80062a8:	4313      	orrs	r3, r2
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	46a2      	mov	sl, r4
 80062ae:	e7d2      	b.n	8006256 <_vfiprintf_r+0xc6>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	1d19      	adds	r1, r3, #4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	9103      	str	r1, [sp, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bfbb      	ittet	lt
 80062bc:	425b      	neglt	r3, r3
 80062be:	f042 0202 	orrlt.w	r2, r2, #2
 80062c2:	9307      	strge	r3, [sp, #28]
 80062c4:	9307      	strlt	r3, [sp, #28]
 80062c6:	bfb8      	it	lt
 80062c8:	9204      	strlt	r2, [sp, #16]
 80062ca:	7823      	ldrb	r3, [r4, #0]
 80062cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80062ce:	d10a      	bne.n	80062e6 <_vfiprintf_r+0x156>
 80062d0:	7863      	ldrb	r3, [r4, #1]
 80062d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062d4:	d132      	bne.n	800633c <_vfiprintf_r+0x1ac>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	1d1a      	adds	r2, r3, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	9203      	str	r2, [sp, #12]
 80062de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062e2:	3402      	adds	r4, #2
 80062e4:	9305      	str	r3, [sp, #20]
 80062e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063bc <_vfiprintf_r+0x22c>
 80062ea:	7821      	ldrb	r1, [r4, #0]
 80062ec:	2203      	movs	r2, #3
 80062ee:	4650      	mov	r0, sl
 80062f0:	f7f9 ff76 	bl	80001e0 <memchr>
 80062f4:	b138      	cbz	r0, 8006306 <_vfiprintf_r+0x176>
 80062f6:	9b04      	ldr	r3, [sp, #16]
 80062f8:	eba0 000a 	sub.w	r0, r0, sl
 80062fc:	2240      	movs	r2, #64	@ 0x40
 80062fe:	4082      	lsls	r2, r0
 8006300:	4313      	orrs	r3, r2
 8006302:	3401      	adds	r4, #1
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630a:	4829      	ldr	r0, [pc, #164]	@ (80063b0 <_vfiprintf_r+0x220>)
 800630c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006310:	2206      	movs	r2, #6
 8006312:	f7f9 ff65 	bl	80001e0 <memchr>
 8006316:	2800      	cmp	r0, #0
 8006318:	d03f      	beq.n	800639a <_vfiprintf_r+0x20a>
 800631a:	4b26      	ldr	r3, [pc, #152]	@ (80063b4 <_vfiprintf_r+0x224>)
 800631c:	bb1b      	cbnz	r3, 8006366 <_vfiprintf_r+0x1d6>
 800631e:	9b03      	ldr	r3, [sp, #12]
 8006320:	3307      	adds	r3, #7
 8006322:	f023 0307 	bic.w	r3, r3, #7
 8006326:	3308      	adds	r3, #8
 8006328:	9303      	str	r3, [sp, #12]
 800632a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632c:	443b      	add	r3, r7
 800632e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006330:	e76a      	b.n	8006208 <_vfiprintf_r+0x78>
 8006332:	fb0c 3202 	mla	r2, ip, r2, r3
 8006336:	460c      	mov	r4, r1
 8006338:	2001      	movs	r0, #1
 800633a:	e7a8      	b.n	800628e <_vfiprintf_r+0xfe>
 800633c:	2300      	movs	r3, #0
 800633e:	3401      	adds	r4, #1
 8006340:	9305      	str	r3, [sp, #20]
 8006342:	4619      	mov	r1, r3
 8006344:	f04f 0c0a 	mov.w	ip, #10
 8006348:	4620      	mov	r0, r4
 800634a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800634e:	3a30      	subs	r2, #48	@ 0x30
 8006350:	2a09      	cmp	r2, #9
 8006352:	d903      	bls.n	800635c <_vfiprintf_r+0x1cc>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0c6      	beq.n	80062e6 <_vfiprintf_r+0x156>
 8006358:	9105      	str	r1, [sp, #20]
 800635a:	e7c4      	b.n	80062e6 <_vfiprintf_r+0x156>
 800635c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006360:	4604      	mov	r4, r0
 8006362:	2301      	movs	r3, #1
 8006364:	e7f0      	b.n	8006348 <_vfiprintf_r+0x1b8>
 8006366:	ab03      	add	r3, sp, #12
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	462a      	mov	r2, r5
 800636c:	4b12      	ldr	r3, [pc, #72]	@ (80063b8 <_vfiprintf_r+0x228>)
 800636e:	a904      	add	r1, sp, #16
 8006370:	4630      	mov	r0, r6
 8006372:	f3af 8000 	nop.w
 8006376:	4607      	mov	r7, r0
 8006378:	1c78      	adds	r0, r7, #1
 800637a:	d1d6      	bne.n	800632a <_vfiprintf_r+0x19a>
 800637c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800637e:	07d9      	lsls	r1, r3, #31
 8006380:	d405      	bmi.n	800638e <_vfiprintf_r+0x1fe>
 8006382:	89ab      	ldrh	r3, [r5, #12]
 8006384:	059a      	lsls	r2, r3, #22
 8006386:	d402      	bmi.n	800638e <_vfiprintf_r+0x1fe>
 8006388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800638a:	f7ff fdcf 	bl	8005f2c <__retarget_lock_release_recursive>
 800638e:	89ab      	ldrh	r3, [r5, #12]
 8006390:	065b      	lsls	r3, r3, #25
 8006392:	f53f af1f 	bmi.w	80061d4 <_vfiprintf_r+0x44>
 8006396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006398:	e71e      	b.n	80061d8 <_vfiprintf_r+0x48>
 800639a:	ab03      	add	r3, sp, #12
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	462a      	mov	r2, r5
 80063a0:	4b05      	ldr	r3, [pc, #20]	@ (80063b8 <_vfiprintf_r+0x228>)
 80063a2:	a904      	add	r1, sp, #16
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 f879 	bl	800649c <_printf_i>
 80063aa:	e7e4      	b.n	8006376 <_vfiprintf_r+0x1e6>
 80063ac:	08006adc 	.word	0x08006adc
 80063b0:	08006ae6 	.word	0x08006ae6
 80063b4:	00000000 	.word	0x00000000
 80063b8:	0800616b 	.word	0x0800616b
 80063bc:	08006ae2 	.word	0x08006ae2

080063c0 <_printf_common>:
 80063c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c4:	4616      	mov	r6, r2
 80063c6:	4698      	mov	r8, r3
 80063c8:	688a      	ldr	r2, [r1, #8]
 80063ca:	690b      	ldr	r3, [r1, #16]
 80063cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063d0:	4293      	cmp	r3, r2
 80063d2:	bfb8      	it	lt
 80063d4:	4613      	movlt	r3, r2
 80063d6:	6033      	str	r3, [r6, #0]
 80063d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063dc:	4607      	mov	r7, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	b10a      	cbz	r2, 80063e6 <_printf_common+0x26>
 80063e2:	3301      	adds	r3, #1
 80063e4:	6033      	str	r3, [r6, #0]
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	0699      	lsls	r1, r3, #26
 80063ea:	bf42      	ittt	mi
 80063ec:	6833      	ldrmi	r3, [r6, #0]
 80063ee:	3302      	addmi	r3, #2
 80063f0:	6033      	strmi	r3, [r6, #0]
 80063f2:	6825      	ldr	r5, [r4, #0]
 80063f4:	f015 0506 	ands.w	r5, r5, #6
 80063f8:	d106      	bne.n	8006408 <_printf_common+0x48>
 80063fa:	f104 0a19 	add.w	sl, r4, #25
 80063fe:	68e3      	ldr	r3, [r4, #12]
 8006400:	6832      	ldr	r2, [r6, #0]
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	42ab      	cmp	r3, r5
 8006406:	dc26      	bgt.n	8006456 <_printf_common+0x96>
 8006408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	3b00      	subs	r3, #0
 8006410:	bf18      	it	ne
 8006412:	2301      	movne	r3, #1
 8006414:	0692      	lsls	r2, r2, #26
 8006416:	d42b      	bmi.n	8006470 <_printf_common+0xb0>
 8006418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800641c:	4641      	mov	r1, r8
 800641e:	4638      	mov	r0, r7
 8006420:	47c8      	blx	r9
 8006422:	3001      	adds	r0, #1
 8006424:	d01e      	beq.n	8006464 <_printf_common+0xa4>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	6922      	ldr	r2, [r4, #16]
 800642a:	f003 0306 	and.w	r3, r3, #6
 800642e:	2b04      	cmp	r3, #4
 8006430:	bf02      	ittt	eq
 8006432:	68e5      	ldreq	r5, [r4, #12]
 8006434:	6833      	ldreq	r3, [r6, #0]
 8006436:	1aed      	subeq	r5, r5, r3
 8006438:	68a3      	ldr	r3, [r4, #8]
 800643a:	bf0c      	ite	eq
 800643c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006440:	2500      	movne	r5, #0
 8006442:	4293      	cmp	r3, r2
 8006444:	bfc4      	itt	gt
 8006446:	1a9b      	subgt	r3, r3, r2
 8006448:	18ed      	addgt	r5, r5, r3
 800644a:	2600      	movs	r6, #0
 800644c:	341a      	adds	r4, #26
 800644e:	42b5      	cmp	r5, r6
 8006450:	d11a      	bne.n	8006488 <_printf_common+0xc8>
 8006452:	2000      	movs	r0, #0
 8006454:	e008      	b.n	8006468 <_printf_common+0xa8>
 8006456:	2301      	movs	r3, #1
 8006458:	4652      	mov	r2, sl
 800645a:	4641      	mov	r1, r8
 800645c:	4638      	mov	r0, r7
 800645e:	47c8      	blx	r9
 8006460:	3001      	adds	r0, #1
 8006462:	d103      	bne.n	800646c <_printf_common+0xac>
 8006464:	f04f 30ff 	mov.w	r0, #4294967295
 8006468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646c:	3501      	adds	r5, #1
 800646e:	e7c6      	b.n	80063fe <_printf_common+0x3e>
 8006470:	18e1      	adds	r1, r4, r3
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	2030      	movs	r0, #48	@ 0x30
 8006476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800647a:	4422      	add	r2, r4
 800647c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006484:	3302      	adds	r3, #2
 8006486:	e7c7      	b.n	8006418 <_printf_common+0x58>
 8006488:	2301      	movs	r3, #1
 800648a:	4622      	mov	r2, r4
 800648c:	4641      	mov	r1, r8
 800648e:	4638      	mov	r0, r7
 8006490:	47c8      	blx	r9
 8006492:	3001      	adds	r0, #1
 8006494:	d0e6      	beq.n	8006464 <_printf_common+0xa4>
 8006496:	3601      	adds	r6, #1
 8006498:	e7d9      	b.n	800644e <_printf_common+0x8e>
	...

0800649c <_printf_i>:
 800649c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	7e0f      	ldrb	r7, [r1, #24]
 80064a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064a4:	2f78      	cmp	r7, #120	@ 0x78
 80064a6:	4691      	mov	r9, r2
 80064a8:	4680      	mov	r8, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	469a      	mov	sl, r3
 80064ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064b2:	d807      	bhi.n	80064c4 <_printf_i+0x28>
 80064b4:	2f62      	cmp	r7, #98	@ 0x62
 80064b6:	d80a      	bhi.n	80064ce <_printf_i+0x32>
 80064b8:	2f00      	cmp	r7, #0
 80064ba:	f000 80d2 	beq.w	8006662 <_printf_i+0x1c6>
 80064be:	2f58      	cmp	r7, #88	@ 0x58
 80064c0:	f000 80b9 	beq.w	8006636 <_printf_i+0x19a>
 80064c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064cc:	e03a      	b.n	8006544 <_printf_i+0xa8>
 80064ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064d2:	2b15      	cmp	r3, #21
 80064d4:	d8f6      	bhi.n	80064c4 <_printf_i+0x28>
 80064d6:	a101      	add	r1, pc, #4	@ (adr r1, 80064dc <_printf_i+0x40>)
 80064d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064dc:	08006535 	.word	0x08006535
 80064e0:	08006549 	.word	0x08006549
 80064e4:	080064c5 	.word	0x080064c5
 80064e8:	080064c5 	.word	0x080064c5
 80064ec:	080064c5 	.word	0x080064c5
 80064f0:	080064c5 	.word	0x080064c5
 80064f4:	08006549 	.word	0x08006549
 80064f8:	080064c5 	.word	0x080064c5
 80064fc:	080064c5 	.word	0x080064c5
 8006500:	080064c5 	.word	0x080064c5
 8006504:	080064c5 	.word	0x080064c5
 8006508:	08006649 	.word	0x08006649
 800650c:	08006573 	.word	0x08006573
 8006510:	08006603 	.word	0x08006603
 8006514:	080064c5 	.word	0x080064c5
 8006518:	080064c5 	.word	0x080064c5
 800651c:	0800666b 	.word	0x0800666b
 8006520:	080064c5 	.word	0x080064c5
 8006524:	08006573 	.word	0x08006573
 8006528:	080064c5 	.word	0x080064c5
 800652c:	080064c5 	.word	0x080064c5
 8006530:	0800660b 	.word	0x0800660b
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	1d1a      	adds	r2, r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6032      	str	r2, [r6, #0]
 800653c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006544:	2301      	movs	r3, #1
 8006546:	e09d      	b.n	8006684 <_printf_i+0x1e8>
 8006548:	6833      	ldr	r3, [r6, #0]
 800654a:	6820      	ldr	r0, [r4, #0]
 800654c:	1d19      	adds	r1, r3, #4
 800654e:	6031      	str	r1, [r6, #0]
 8006550:	0606      	lsls	r6, r0, #24
 8006552:	d501      	bpl.n	8006558 <_printf_i+0xbc>
 8006554:	681d      	ldr	r5, [r3, #0]
 8006556:	e003      	b.n	8006560 <_printf_i+0xc4>
 8006558:	0645      	lsls	r5, r0, #25
 800655a:	d5fb      	bpl.n	8006554 <_printf_i+0xb8>
 800655c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006560:	2d00      	cmp	r5, #0
 8006562:	da03      	bge.n	800656c <_printf_i+0xd0>
 8006564:	232d      	movs	r3, #45	@ 0x2d
 8006566:	426d      	negs	r5, r5
 8006568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800656c:	4859      	ldr	r0, [pc, #356]	@ (80066d4 <_printf_i+0x238>)
 800656e:	230a      	movs	r3, #10
 8006570:	e011      	b.n	8006596 <_printf_i+0xfa>
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	6833      	ldr	r3, [r6, #0]
 8006576:	0608      	lsls	r0, r1, #24
 8006578:	f853 5b04 	ldr.w	r5, [r3], #4
 800657c:	d402      	bmi.n	8006584 <_printf_i+0xe8>
 800657e:	0649      	lsls	r1, r1, #25
 8006580:	bf48      	it	mi
 8006582:	b2ad      	uxthmi	r5, r5
 8006584:	2f6f      	cmp	r7, #111	@ 0x6f
 8006586:	4853      	ldr	r0, [pc, #332]	@ (80066d4 <_printf_i+0x238>)
 8006588:	6033      	str	r3, [r6, #0]
 800658a:	bf14      	ite	ne
 800658c:	230a      	movne	r3, #10
 800658e:	2308      	moveq	r3, #8
 8006590:	2100      	movs	r1, #0
 8006592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006596:	6866      	ldr	r6, [r4, #4]
 8006598:	60a6      	str	r6, [r4, #8]
 800659a:	2e00      	cmp	r6, #0
 800659c:	bfa2      	ittt	ge
 800659e:	6821      	ldrge	r1, [r4, #0]
 80065a0:	f021 0104 	bicge.w	r1, r1, #4
 80065a4:	6021      	strge	r1, [r4, #0]
 80065a6:	b90d      	cbnz	r5, 80065ac <_printf_i+0x110>
 80065a8:	2e00      	cmp	r6, #0
 80065aa:	d04b      	beq.n	8006644 <_printf_i+0x1a8>
 80065ac:	4616      	mov	r6, r2
 80065ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80065b2:	fb03 5711 	mls	r7, r3, r1, r5
 80065b6:	5dc7      	ldrb	r7, [r0, r7]
 80065b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065bc:	462f      	mov	r7, r5
 80065be:	42bb      	cmp	r3, r7
 80065c0:	460d      	mov	r5, r1
 80065c2:	d9f4      	bls.n	80065ae <_printf_i+0x112>
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d10b      	bne.n	80065e0 <_printf_i+0x144>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	07df      	lsls	r7, r3, #31
 80065cc:	d508      	bpl.n	80065e0 <_printf_i+0x144>
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	6861      	ldr	r1, [r4, #4]
 80065d2:	4299      	cmp	r1, r3
 80065d4:	bfde      	ittt	le
 80065d6:	2330      	movle	r3, #48	@ 0x30
 80065d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065e0:	1b92      	subs	r2, r2, r6
 80065e2:	6122      	str	r2, [r4, #16]
 80065e4:	f8cd a000 	str.w	sl, [sp]
 80065e8:	464b      	mov	r3, r9
 80065ea:	aa03      	add	r2, sp, #12
 80065ec:	4621      	mov	r1, r4
 80065ee:	4640      	mov	r0, r8
 80065f0:	f7ff fee6 	bl	80063c0 <_printf_common>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d14a      	bne.n	800668e <_printf_i+0x1f2>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	b004      	add	sp, #16
 80065fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	f043 0320 	orr.w	r3, r3, #32
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	4833      	ldr	r0, [pc, #204]	@ (80066d8 <_printf_i+0x23c>)
 800660c:	2778      	movs	r7, #120	@ 0x78
 800660e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	6831      	ldr	r1, [r6, #0]
 8006616:	061f      	lsls	r7, r3, #24
 8006618:	f851 5b04 	ldr.w	r5, [r1], #4
 800661c:	d402      	bmi.n	8006624 <_printf_i+0x188>
 800661e:	065f      	lsls	r7, r3, #25
 8006620:	bf48      	it	mi
 8006622:	b2ad      	uxthmi	r5, r5
 8006624:	6031      	str	r1, [r6, #0]
 8006626:	07d9      	lsls	r1, r3, #31
 8006628:	bf44      	itt	mi
 800662a:	f043 0320 	orrmi.w	r3, r3, #32
 800662e:	6023      	strmi	r3, [r4, #0]
 8006630:	b11d      	cbz	r5, 800663a <_printf_i+0x19e>
 8006632:	2310      	movs	r3, #16
 8006634:	e7ac      	b.n	8006590 <_printf_i+0xf4>
 8006636:	4827      	ldr	r0, [pc, #156]	@ (80066d4 <_printf_i+0x238>)
 8006638:	e7e9      	b.n	800660e <_printf_i+0x172>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	f023 0320 	bic.w	r3, r3, #32
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	e7f6      	b.n	8006632 <_printf_i+0x196>
 8006644:	4616      	mov	r6, r2
 8006646:	e7bd      	b.n	80065c4 <_printf_i+0x128>
 8006648:	6833      	ldr	r3, [r6, #0]
 800664a:	6825      	ldr	r5, [r4, #0]
 800664c:	6961      	ldr	r1, [r4, #20]
 800664e:	1d18      	adds	r0, r3, #4
 8006650:	6030      	str	r0, [r6, #0]
 8006652:	062e      	lsls	r6, r5, #24
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	d501      	bpl.n	800665c <_printf_i+0x1c0>
 8006658:	6019      	str	r1, [r3, #0]
 800665a:	e002      	b.n	8006662 <_printf_i+0x1c6>
 800665c:	0668      	lsls	r0, r5, #25
 800665e:	d5fb      	bpl.n	8006658 <_printf_i+0x1bc>
 8006660:	8019      	strh	r1, [r3, #0]
 8006662:	2300      	movs	r3, #0
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	4616      	mov	r6, r2
 8006668:	e7bc      	b.n	80065e4 <_printf_i+0x148>
 800666a:	6833      	ldr	r3, [r6, #0]
 800666c:	1d1a      	adds	r2, r3, #4
 800666e:	6032      	str	r2, [r6, #0]
 8006670:	681e      	ldr	r6, [r3, #0]
 8006672:	6862      	ldr	r2, [r4, #4]
 8006674:	2100      	movs	r1, #0
 8006676:	4630      	mov	r0, r6
 8006678:	f7f9 fdb2 	bl	80001e0 <memchr>
 800667c:	b108      	cbz	r0, 8006682 <_printf_i+0x1e6>
 800667e:	1b80      	subs	r0, r0, r6
 8006680:	6060      	str	r0, [r4, #4]
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	2300      	movs	r3, #0
 8006688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800668c:	e7aa      	b.n	80065e4 <_printf_i+0x148>
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	4632      	mov	r2, r6
 8006692:	4649      	mov	r1, r9
 8006694:	4640      	mov	r0, r8
 8006696:	47d0      	blx	sl
 8006698:	3001      	adds	r0, #1
 800669a:	d0ad      	beq.n	80065f8 <_printf_i+0x15c>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	079b      	lsls	r3, r3, #30
 80066a0:	d413      	bmi.n	80066ca <_printf_i+0x22e>
 80066a2:	68e0      	ldr	r0, [r4, #12]
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	4298      	cmp	r0, r3
 80066a8:	bfb8      	it	lt
 80066aa:	4618      	movlt	r0, r3
 80066ac:	e7a6      	b.n	80065fc <_printf_i+0x160>
 80066ae:	2301      	movs	r3, #1
 80066b0:	4632      	mov	r2, r6
 80066b2:	4649      	mov	r1, r9
 80066b4:	4640      	mov	r0, r8
 80066b6:	47d0      	blx	sl
 80066b8:	3001      	adds	r0, #1
 80066ba:	d09d      	beq.n	80065f8 <_printf_i+0x15c>
 80066bc:	3501      	adds	r5, #1
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	9903      	ldr	r1, [sp, #12]
 80066c2:	1a5b      	subs	r3, r3, r1
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	dcf2      	bgt.n	80066ae <_printf_i+0x212>
 80066c8:	e7eb      	b.n	80066a2 <_printf_i+0x206>
 80066ca:	2500      	movs	r5, #0
 80066cc:	f104 0619 	add.w	r6, r4, #25
 80066d0:	e7f5      	b.n	80066be <_printf_i+0x222>
 80066d2:	bf00      	nop
 80066d4:	08006aed 	.word	0x08006aed
 80066d8:	08006afe 	.word	0x08006afe

080066dc <__sflush_r>:
 80066dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e4:	0716      	lsls	r6, r2, #28
 80066e6:	4605      	mov	r5, r0
 80066e8:	460c      	mov	r4, r1
 80066ea:	d454      	bmi.n	8006796 <__sflush_r+0xba>
 80066ec:	684b      	ldr	r3, [r1, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	dc02      	bgt.n	80066f8 <__sflush_r+0x1c>
 80066f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd48      	ble.n	800678a <__sflush_r+0xae>
 80066f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066fa:	2e00      	cmp	r6, #0
 80066fc:	d045      	beq.n	800678a <__sflush_r+0xae>
 80066fe:	2300      	movs	r3, #0
 8006700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006704:	682f      	ldr	r7, [r5, #0]
 8006706:	6a21      	ldr	r1, [r4, #32]
 8006708:	602b      	str	r3, [r5, #0]
 800670a:	d030      	beq.n	800676e <__sflush_r+0x92>
 800670c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	0759      	lsls	r1, r3, #29
 8006712:	d505      	bpl.n	8006720 <__sflush_r+0x44>
 8006714:	6863      	ldr	r3, [r4, #4]
 8006716:	1ad2      	subs	r2, r2, r3
 8006718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800671a:	b10b      	cbz	r3, 8006720 <__sflush_r+0x44>
 800671c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	2300      	movs	r3, #0
 8006722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006724:	6a21      	ldr	r1, [r4, #32]
 8006726:	4628      	mov	r0, r5
 8006728:	47b0      	blx	r6
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	d106      	bne.n	800673e <__sflush_r+0x62>
 8006730:	6829      	ldr	r1, [r5, #0]
 8006732:	291d      	cmp	r1, #29
 8006734:	d82b      	bhi.n	800678e <__sflush_r+0xb2>
 8006736:	4a2a      	ldr	r2, [pc, #168]	@ (80067e0 <__sflush_r+0x104>)
 8006738:	410a      	asrs	r2, r1
 800673a:	07d6      	lsls	r6, r2, #31
 800673c:	d427      	bmi.n	800678e <__sflush_r+0xb2>
 800673e:	2200      	movs	r2, #0
 8006740:	6062      	str	r2, [r4, #4]
 8006742:	04d9      	lsls	r1, r3, #19
 8006744:	6922      	ldr	r2, [r4, #16]
 8006746:	6022      	str	r2, [r4, #0]
 8006748:	d504      	bpl.n	8006754 <__sflush_r+0x78>
 800674a:	1c42      	adds	r2, r0, #1
 800674c:	d101      	bne.n	8006752 <__sflush_r+0x76>
 800674e:	682b      	ldr	r3, [r5, #0]
 8006750:	b903      	cbnz	r3, 8006754 <__sflush_r+0x78>
 8006752:	6560      	str	r0, [r4, #84]	@ 0x54
 8006754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006756:	602f      	str	r7, [r5, #0]
 8006758:	b1b9      	cbz	r1, 800678a <__sflush_r+0xae>
 800675a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800675e:	4299      	cmp	r1, r3
 8006760:	d002      	beq.n	8006768 <__sflush_r+0x8c>
 8006762:	4628      	mov	r0, r5
 8006764:	f7ff fbf2 	bl	8005f4c <_free_r>
 8006768:	2300      	movs	r3, #0
 800676a:	6363      	str	r3, [r4, #52]	@ 0x34
 800676c:	e00d      	b.n	800678a <__sflush_r+0xae>
 800676e:	2301      	movs	r3, #1
 8006770:	4628      	mov	r0, r5
 8006772:	47b0      	blx	r6
 8006774:	4602      	mov	r2, r0
 8006776:	1c50      	adds	r0, r2, #1
 8006778:	d1c9      	bne.n	800670e <__sflush_r+0x32>
 800677a:	682b      	ldr	r3, [r5, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0c6      	beq.n	800670e <__sflush_r+0x32>
 8006780:	2b1d      	cmp	r3, #29
 8006782:	d001      	beq.n	8006788 <__sflush_r+0xac>
 8006784:	2b16      	cmp	r3, #22
 8006786:	d11e      	bne.n	80067c6 <__sflush_r+0xea>
 8006788:	602f      	str	r7, [r5, #0]
 800678a:	2000      	movs	r0, #0
 800678c:	e022      	b.n	80067d4 <__sflush_r+0xf8>
 800678e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006792:	b21b      	sxth	r3, r3
 8006794:	e01b      	b.n	80067ce <__sflush_r+0xf2>
 8006796:	690f      	ldr	r7, [r1, #16]
 8006798:	2f00      	cmp	r7, #0
 800679a:	d0f6      	beq.n	800678a <__sflush_r+0xae>
 800679c:	0793      	lsls	r3, r2, #30
 800679e:	680e      	ldr	r6, [r1, #0]
 80067a0:	bf08      	it	eq
 80067a2:	694b      	ldreq	r3, [r1, #20]
 80067a4:	600f      	str	r7, [r1, #0]
 80067a6:	bf18      	it	ne
 80067a8:	2300      	movne	r3, #0
 80067aa:	eba6 0807 	sub.w	r8, r6, r7
 80067ae:	608b      	str	r3, [r1, #8]
 80067b0:	f1b8 0f00 	cmp.w	r8, #0
 80067b4:	dde9      	ble.n	800678a <__sflush_r+0xae>
 80067b6:	6a21      	ldr	r1, [r4, #32]
 80067b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067ba:	4643      	mov	r3, r8
 80067bc:	463a      	mov	r2, r7
 80067be:	4628      	mov	r0, r5
 80067c0:	47b0      	blx	r6
 80067c2:	2800      	cmp	r0, #0
 80067c4:	dc08      	bgt.n	80067d8 <__sflush_r+0xfc>
 80067c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d8:	4407      	add	r7, r0
 80067da:	eba8 0800 	sub.w	r8, r8, r0
 80067de:	e7e7      	b.n	80067b0 <__sflush_r+0xd4>
 80067e0:	dfbffffe 	.word	0xdfbffffe

080067e4 <_fflush_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	690b      	ldr	r3, [r1, #16]
 80067e8:	4605      	mov	r5, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	b913      	cbnz	r3, 80067f4 <_fflush_r+0x10>
 80067ee:	2500      	movs	r5, #0
 80067f0:	4628      	mov	r0, r5
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	b118      	cbz	r0, 80067fe <_fflush_r+0x1a>
 80067f6:	6a03      	ldr	r3, [r0, #32]
 80067f8:	b90b      	cbnz	r3, 80067fe <_fflush_r+0x1a>
 80067fa:	f7ff f949 	bl	8005a90 <__sinit>
 80067fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0f3      	beq.n	80067ee <_fflush_r+0xa>
 8006806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006808:	07d0      	lsls	r0, r2, #31
 800680a:	d404      	bmi.n	8006816 <_fflush_r+0x32>
 800680c:	0599      	lsls	r1, r3, #22
 800680e:	d402      	bmi.n	8006816 <_fflush_r+0x32>
 8006810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006812:	f7ff fb8a 	bl	8005f2a <__retarget_lock_acquire_recursive>
 8006816:	4628      	mov	r0, r5
 8006818:	4621      	mov	r1, r4
 800681a:	f7ff ff5f 	bl	80066dc <__sflush_r>
 800681e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006820:	07da      	lsls	r2, r3, #31
 8006822:	4605      	mov	r5, r0
 8006824:	d4e4      	bmi.n	80067f0 <_fflush_r+0xc>
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	059b      	lsls	r3, r3, #22
 800682a:	d4e1      	bmi.n	80067f0 <_fflush_r+0xc>
 800682c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800682e:	f7ff fb7d 	bl	8005f2c <__retarget_lock_release_recursive>
 8006832:	e7dd      	b.n	80067f0 <_fflush_r+0xc>

08006834 <__swhatbuf_r>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	460c      	mov	r4, r1
 8006838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683c:	2900      	cmp	r1, #0
 800683e:	b096      	sub	sp, #88	@ 0x58
 8006840:	4615      	mov	r5, r2
 8006842:	461e      	mov	r6, r3
 8006844:	da0d      	bge.n	8006862 <__swhatbuf_r+0x2e>
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800684c:	f04f 0100 	mov.w	r1, #0
 8006850:	bf14      	ite	ne
 8006852:	2340      	movne	r3, #64	@ 0x40
 8006854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006858:	2000      	movs	r0, #0
 800685a:	6031      	str	r1, [r6, #0]
 800685c:	602b      	str	r3, [r5, #0]
 800685e:	b016      	add	sp, #88	@ 0x58
 8006860:	bd70      	pop	{r4, r5, r6, pc}
 8006862:	466a      	mov	r2, sp
 8006864:	f000 f848 	bl	80068f8 <_fstat_r>
 8006868:	2800      	cmp	r0, #0
 800686a:	dbec      	blt.n	8006846 <__swhatbuf_r+0x12>
 800686c:	9901      	ldr	r1, [sp, #4]
 800686e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006876:	4259      	negs	r1, r3
 8006878:	4159      	adcs	r1, r3
 800687a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800687e:	e7eb      	b.n	8006858 <__swhatbuf_r+0x24>

08006880 <__smakebuf_r>:
 8006880:	898b      	ldrh	r3, [r1, #12]
 8006882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006884:	079d      	lsls	r5, r3, #30
 8006886:	4606      	mov	r6, r0
 8006888:	460c      	mov	r4, r1
 800688a:	d507      	bpl.n	800689c <__smakebuf_r+0x1c>
 800688c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	2301      	movs	r3, #1
 8006896:	6163      	str	r3, [r4, #20]
 8006898:	b003      	add	sp, #12
 800689a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800689c:	ab01      	add	r3, sp, #4
 800689e:	466a      	mov	r2, sp
 80068a0:	f7ff ffc8 	bl	8006834 <__swhatbuf_r>
 80068a4:	9f00      	ldr	r7, [sp, #0]
 80068a6:	4605      	mov	r5, r0
 80068a8:	4639      	mov	r1, r7
 80068aa:	4630      	mov	r0, r6
 80068ac:	f7ff fbba 	bl	8006024 <_malloc_r>
 80068b0:	b948      	cbnz	r0, 80068c6 <__smakebuf_r+0x46>
 80068b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b6:	059a      	lsls	r2, r3, #22
 80068b8:	d4ee      	bmi.n	8006898 <__smakebuf_r+0x18>
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	f043 0302 	orr.w	r3, r3, #2
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	e7e2      	b.n	800688c <__smakebuf_r+0xc>
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	6020      	str	r0, [r4, #0]
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	9b01      	ldr	r3, [sp, #4]
 80068d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80068d6:	b15b      	cbz	r3, 80068f0 <__smakebuf_r+0x70>
 80068d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f81d 	bl	800691c <_isatty_r>
 80068e2:	b128      	cbz	r0, 80068f0 <__smakebuf_r+0x70>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	f023 0303 	bic.w	r3, r3, #3
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	431d      	orrs	r5, r3
 80068f4:	81a5      	strh	r5, [r4, #12]
 80068f6:	e7cf      	b.n	8006898 <__smakebuf_r+0x18>

080068f8 <_fstat_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d07      	ldr	r5, [pc, #28]	@ (8006918 <_fstat_r+0x20>)
 80068fc:	2300      	movs	r3, #0
 80068fe:	4604      	mov	r4, r0
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	f7fa fb36 	bl	8000f76 <_fstat>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	d102      	bne.n	8006914 <_fstat_r+0x1c>
 800690e:	682b      	ldr	r3, [r5, #0]
 8006910:	b103      	cbz	r3, 8006914 <_fstat_r+0x1c>
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	bd38      	pop	{r3, r4, r5, pc}
 8006916:	bf00      	nop
 8006918:	200042bc 	.word	0x200042bc

0800691c <_isatty_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d06      	ldr	r5, [pc, #24]	@ (8006938 <_isatty_r+0x1c>)
 8006920:	2300      	movs	r3, #0
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	602b      	str	r3, [r5, #0]
 8006928:	f7fa fb35 	bl	8000f96 <_isatty>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_isatty_r+0x1a>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b103      	cbz	r3, 8006936 <_isatty_r+0x1a>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	200042bc 	.word	0x200042bc

0800693c <_sbrk_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4d06      	ldr	r5, [pc, #24]	@ (8006958 <_sbrk_r+0x1c>)
 8006940:	2300      	movs	r3, #0
 8006942:	4604      	mov	r4, r0
 8006944:	4608      	mov	r0, r1
 8006946:	602b      	str	r3, [r5, #0]
 8006948:	f7fa fb3e 	bl	8000fc8 <_sbrk>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d102      	bne.n	8006956 <_sbrk_r+0x1a>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b103      	cbz	r3, 8006956 <_sbrk_r+0x1a>
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	200042bc 	.word	0x200042bc

0800695c <_init>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	bf00      	nop
 8006960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006962:	bc08      	pop	{r3}
 8006964:	469e      	mov	lr, r3
 8006966:	4770      	bx	lr

08006968 <_fini>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	bf00      	nop
 800696c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696e:	bc08      	pop	{r3}
 8006970:	469e      	mov	lr, r3
 8006972:	4770      	bx	lr
