
test007-ADC03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae8  08004ae8  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ae8  08004ae8  00005ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af0  08004af0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00005af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004af4  08004af4  00005af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004af8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001248  20000068  08004b60  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012b0  08004b60  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaa7  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002294  00000000  00000000  00014b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00016dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aea  00000000  00000000  00017bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018667  00000000  00000000  000186c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001067e  00000000  00000000  00030d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc3f  00000000  00000000  000413a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcfe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004258  00000000  00000000  000dd02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e1284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a1c 	.word	0x08004a1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004a1c 	.word	0x08004a1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fc6e 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f840 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9a0 	bl	80008c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000580:	f000 f97e 	bl	8000880 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f952 	bl	800082c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000588:	f000 f8a2 	bl	80006d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800058c:	f000 f900 	bl	8000790 <MX_TIM2_Init>
  //printf("sizeof(short) : %d\n", sizeof(short));
  //printf("sizeof(float) : %d\n", sizeof(float));
  //printf("sizeof(double) : %d\n", sizeof(double));
  //while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed

  ProgramStart();
 8000590:	f000 fa1c 	bl	80009cc <ProgramStart>
  HAL_TIM_Base_Start(&htim2);
 8000594:	4813      	ldr	r0, [pc, #76]	@ (80005e4 <main+0x74>)
 8000596:	f002 fbf1 	bl	8002d7c <HAL_TIM_Base_Start>
  //short buf[2];
  HAL_ADC_Start_DMA(&hadc1, &dma, 2);
 800059a:	2202      	movs	r2, #2
 800059c:	4912      	ldr	r1, [pc, #72]	@ (80005e8 <main+0x78>)
 800059e:	4813      	ldr	r0, [pc, #76]	@ (80005ec <main+0x7c>)
 80005a0:	f000 fd0e 	bl	8000fc0 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("ACD(6,7) : (%d,%d)      \r\n", dma.adc[0], dma.adc[1]);
 80005a4:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <main+0x78>)
 80005a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005aa:	4619      	mov	r1, r3
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <main+0x78>)
 80005ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005b2:	461a      	mov	r2, r3
 80005b4:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <main+0x80>)
 80005b6:	f003 fb65 	bl	8003c84 <iprintf>
	if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == 0)
 80005ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005be:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <main+0x84>)
 80005c0:	f001 fec2 	bl	8002348 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d105      	bne.n	80005d6 <main+0x66>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2120      	movs	r1, #32
 80005ce:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <main+0x88>)
 80005d0:	f001 fed2 	bl	8002378 <HAL_GPIO_WritePin>
 80005d4:	e7e6      	b.n	80005a4 <main+0x34>
	else
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <main+0x88>)
 80005dc:	f001 fecc 	bl	8002378 <HAL_GPIO_WritePin>
  {
 80005e0:	e7e0      	b.n	80005a4 <main+0x34>
 80005e2:	bf00      	nop
 80005e4:	2000012c 	.word	0x2000012c
 80005e8:	200001bc 	.word	0x200001bc
 80005ec:	20000084 	.word	0x20000084
 80005f0:	08004a34 	.word	0x08004a34
 80005f4:	40020800 	.word	0x40020800
 80005f8:	40020000 	.word	0x40020000

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fc82 	bl	8003f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800066c:	2310      	movs	r3, #16
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067a:	2304      	movs	r3, #4
 800067c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fe92 	bl	80023ac <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068e:	f000 f985 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 f8f4 	bl	800289c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ba:	f000 f96f 	bl	800099c <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e2:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <MX_ADC1_Init+0xb8>)
 80006e4:	4a29      	ldr	r2, [pc, #164]	@ (800078c <MX_ADC1_Init+0xbc>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_ADC1_Init+0xb8>)
 80006ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <MX_ADC1_Init+0xb8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006f6:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <MX_ADC1_Init+0xb8>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_ADC1_Init+0xb8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000702:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <MX_ADC1_Init+0xb8>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_ADC1_Init+0xb8>)
 800070c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000710:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000712:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_ADC1_Init+0xb8>)
 8000714:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071a:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_ADC1_Init+0xb8>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000720:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_ADC1_Init+0xb8>)
 8000722:	2202      	movs	r2, #2
 8000724:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_ADC1_Init+0xb8>)
 8000728:	2201      	movs	r2, #1
 800072a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_ADC1_Init+0xb8>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000734:	4814      	ldr	r0, [pc, #80]	@ (8000788 <MX_ADC1_Init+0xb8>)
 8000736:	f000 fbff 	bl	8000f38 <HAL_ADC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000740:	f000 f92c 	bl	800099c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000744:	2306      	movs	r3, #6
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <MX_ADC1_Init+0xb8>)
 8000756:	f000 fd41 	bl	80011dc <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000760:	f000 f91c 	bl	800099c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000764:	2307      	movs	r3, #7
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_ADC1_Init+0xb8>)
 8000772:	f000 fd33 	bl	80011dc <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800077c:	f000 f90e 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000084 	.word	0x20000084
 800078c:	40012000 	.word	0x40012000

08000790 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <MX_TIM2_Init+0x98>)
 80007ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_TIM2_Init+0x98>)
 80007b6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80007ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_TIM2_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_TIM2_Init+0x98>)
 80007c4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_TIM2_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_TIM2_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d6:	4814      	ldr	r0, [pc, #80]	@ (8000828 <MX_TIM2_Init+0x98>)
 80007d8:	f002 fa80 	bl	8002cdc <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007e2:	f000 f8db 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4619      	mov	r1, r3
 80007f2:	480d      	ldr	r0, [pc, #52]	@ (8000828 <MX_TIM2_Init+0x98>)
 80007f4:	f002 fb1c 	bl	8002e30 <HAL_TIM_ConfigClockSource>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007fe:	f000 f8cd 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000802:	2320      	movs	r3, #32
 8000804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	@ (8000828 <MX_TIM2_Init+0x98>)
 8000810:	f002 fcfc 	bl	800320c <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800081a:	f000 f8bf 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000012c 	.word	0x2000012c

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f002 fd40 	bl	80032e8 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f895 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000174 	.word	0x20000174
 800087c:	40004400 	.word	0x40004400

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_DMA_Init+0x3c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a0b      	ldr	r2, [pc, #44]	@ (80008bc <MX_DMA_Init+0x3c>)
 8000890:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_DMA_Init+0x3c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2038      	movs	r0, #56	@ 0x38
 80008a8:	f001 f823 	bl	80018f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008ac:	2038      	movs	r0, #56	@ 0x38
 80008ae:	f001 f83c 	bl	800192a <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2c      	ldr	r2, [pc, #176]	@ (8000990 <MX_GPIO_Init+0xd0>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000990 <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a25      	ldr	r2, [pc, #148]	@ (8000990 <MX_GPIO_Init+0xd0>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a1e      	ldr	r2, [pc, #120]	@ (8000990 <MX_GPIO_Init+0xd0>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a17      	ldr	r2, [pc, #92]	@ (8000990 <MX_GPIO_Init+0xd0>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	4812      	ldr	r0, [pc, #72]	@ (8000994 <MX_GPIO_Init+0xd4>)
 800094c:	f001 fd14 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000956:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	480c      	ldr	r0, [pc, #48]	@ (8000998 <MX_GPIO_Init+0xd8>)
 8000968:	f001 fb6a 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800096c:	2320      	movs	r3, #32
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_GPIO_Init+0xd4>)
 8000984:	f001 fb5c 	bl	8002040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	@ 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000
 8000998:	40020800 	.word	0x40020800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <__io_putchar>:
extern ADC_HandleTypeDef hadc1;
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 80009b0:	1d39      	adds	r1, r7, #4
 80009b2:	230a      	movs	r3, #10
 80009b4:	2201      	movs	r2, #1
 80009b6:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <__io_putchar+0x20>)
 80009b8:	f002 fce6 	bl	8003388 <HAL_UART_Transmit>
	return ch;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000174 	.word	0x20000174

080009cc <ProgramStart>:
	HAL_ADC_PollForConversion(&hadc1, 10);
	return HAL_ADC_GetValue(&hadc1);
}

void ProgramStart()
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	printf("\033[2J");	// screen clear
 80009d0:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <ProgramStart+0x34>)
 80009d2:	f003 f957 	bl	8003c84 <iprintf>
	printf("\033[1;1H");	// Move cursor pos to (1,1)
 80009d6:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <ProgramStart+0x38>)
 80009d8:	f003 f954 	bl	8003c84 <iprintf>
	printf("Program Started....Press Blue button to continue\r\n");
 80009dc:	480a      	ldr	r0, [pc, #40]	@ (8000a08 <ProgramStart+0x3c>)
 80009de:	f003 f9b9 	bl	8003d54 <puts>
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 80009e2:	bf00      	nop
 80009e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e8:	4808      	ldr	r0, [pc, #32]	@ (8000a0c <ProgramStart+0x40>)
 80009ea:	f001 fcad 	bl	8002348 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f7      	bne.n	80009e4 <ProgramStart+0x18>
	printf("\033[2J");	// screen clear
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <ProgramStart+0x34>)
 80009f6:	f003 f945 	bl	8003c84 <iprintf>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	08004a50 	.word	0x08004a50
 8000a04:	08004a58 	.word	0x08004a58
 8000a08:	08004a60 	.word	0x08004a60
 8000a0c:	40020800 	.word	0x40020800

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4e:	2007      	movs	r0, #7
 8000a50:	f000 ff44 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b3c <HAL_ADC_MspInit+0xdc>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d157      	bne.n	8000b32 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <HAL_ADC_MspInit+0xe0>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b40 <HAL_ADC_MspInit+0xe0>)
 8000a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a92:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <HAL_ADC_MspInit+0xe0>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b27      	ldr	r3, [pc, #156]	@ (8000b40 <HAL_ADC_MspInit+0xe0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a26      	ldr	r2, [pc, #152]	@ (8000b40 <HAL_ADC_MspInit+0xe0>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b24      	ldr	r3, [pc, #144]	@ (8000b40 <HAL_ADC_MspInit+0xe0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aba:	23c0      	movs	r3, #192	@ 0xc0
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	481d      	ldr	r0, [pc, #116]	@ (8000b44 <HAL_ADC_MspInit+0xe4>)
 8000ace:	f001 fab7 	bl	8002040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b4c <HAL_ADC_MspInit+0xec>)
 8000ad6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000aec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000af4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000afc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000b04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b16:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000b18:	f000 ff22 	bl	8001960 <HAL_DMA_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b22:	f7ff ff3b 	bl	800099c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000b2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b2c:	4a06      	ldr	r2, [pc, #24]	@ (8000b48 <HAL_ADC_MspInit+0xe8>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40012000 	.word	0x40012000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	200000cc 	.word	0x200000cc
 8000b4c:	40026410 	.word	0x40026410

08000b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b60:	d10d      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_TIM_Base_MspInit+0x3c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_TIM_Base_MspInit+0x3c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_TIM_Base_MspInit+0x3c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	@ (8000c14 <HAL_UART_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <HAL_UART_MspInit+0x8c>)
 8000c06:	f001 fa1b 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <NMI_Handler+0x4>

08000c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <MemManage_Handler+0x4>

08000c38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c76:	f000 f93f 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <DMA2_Stream0_IRQHandler+0x10>)
 8000c86:	f000 ff71 	bl	8001b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000cc 	.word	0x200000cc

08000c94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e00a      	b.n	8000cbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca6:	f3af 8000 	nop.w
 8000caa:	4601      	mov	r1, r0
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	b2ca      	uxtb	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf0      	blt.n	8000ca6 <_read+0x12>
  }

  return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e009      	b.n	8000cf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fe5d 	bl	80009a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf1      	blt.n	8000ce0 <_write+0x12>
  }
  return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_close>:

int _close(int file)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_isatty>:

int _isatty(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f003 f906 	bl	8003fb0 <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20020000 	.word	0x20020000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	2000115c 	.word	0x2000115c
 8000dd8:	200012b0 	.word	0x200012b0

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e04:	f7ff ffea 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f003 f8c5 	bl	8003fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fb9d 	bl	8000570 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e44:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 8000e48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e4c:	200012b0 	.word	0x200012b0

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 fd2d 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fdc2 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fd45 	bl	8001946 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 fd0d 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	@ (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20001160 	.word	0x20001160

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20001160 	.word	0x20001160

08000f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e033      	b.n	8000fb6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d109      	bne.n	8000f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff fd82 	bl	8000a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d118      	bne.n	8000fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f7e:	f023 0302 	bic.w	r3, r3, #2
 8000f82:	f043 0202 	orr.w	r2, r3, #2
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 fa58 	bl	8001440 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f023 0303 	bic.w	r3, r3, #3
 8000f9e:	f043 0201 	orr.w	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fa6:	e001      	b.n	8000fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Start_DMA+0x1e>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e0ce      	b.n	800117c <HAL_ADC_Start_DMA+0x1bc>
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d018      	beq.n	8001026 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0201 	orr.w	r2, r2, #1
 8001002:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001004:	4b5f      	ldr	r3, [pc, #380]	@ (8001184 <HAL_ADC_Start_DMA+0x1c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a5f      	ldr	r2, [pc, #380]	@ (8001188 <HAL_ADC_Start_DMA+0x1c8>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	0c9a      	lsrs	r2, r3, #18
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001018:	e002      	b.n	8001020 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	3b01      	subs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f9      	bne.n	800101a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001034:	d107      	bne.n	8001046 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001044:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b01      	cmp	r3, #1
 8001052:	f040 8086 	bne.w	8001162 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001074:	2b00      	cmp	r3, #0
 8001076:	d007      	beq.n	8001088 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001080:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001094:	d106      	bne.n	80010a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109a:	f023 0206 	bic.w	r2, r3, #6
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80010a2:	e002      	b.n	80010aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010b2:	4b36      	ldr	r3, [pc, #216]	@ (800118c <HAL_ADC_Start_DMA+0x1cc>)
 80010b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ba:	4a35      	ldr	r2, [pc, #212]	@ (8001190 <HAL_ADC_Start_DMA+0x1d0>)
 80010bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c2:	4a34      	ldr	r2, [pc, #208]	@ (8001194 <HAL_ADC_Start_DMA+0x1d4>)
 80010c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ca:	4a33      	ldr	r2, [pc, #204]	@ (8001198 <HAL_ADC_Start_DMA+0x1d8>)
 80010cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80010e6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010f6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	334c      	adds	r3, #76	@ 0x4c
 8001102:	4619      	mov	r1, r3
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f000 fcd8 	bl	8001abc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10f      	bne.n	8001138 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d129      	bne.n	800117a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	e020      	b.n	800117a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	@ (800119c <HAL_ADC_Start_DMA+0x1dc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d11b      	bne.n	800117a <HAL_ADC_Start_DMA+0x1ba>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d114      	bne.n	800117a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	e00b      	b.n	800117a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f043 0210 	orr.w	r2, r3, #16
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f043 0201 	orr.w	r2, r3, #1
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000
 8001188:	431bde83 	.word	0x431bde83
 800118c:	40012300 	.word	0x40012300
 8001190:	08001639 	.word	0x08001639
 8001194:	080016f3 	.word	0x080016f3
 8001198:	0800170f 	.word	0x0800170f
 800119c:	40012000 	.word	0x40012000

080011a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1c>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e113      	b.n	8001420 <HAL_ADC_ConfigChannel+0x244>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b09      	cmp	r3, #9
 8001206:	d925      	bls.n	8001254 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68d9      	ldr	r1, [r3, #12]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	3b1e      	subs	r3, #30
 800121e:	2207      	movs	r2, #7
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43da      	mvns	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	400a      	ands	r2, r1
 800122c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68d9      	ldr	r1, [r3, #12]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	4603      	mov	r3, r0
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4403      	add	r3, r0
 8001246:	3b1e      	subs	r3, #30
 8001248:	409a      	lsls	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	e022      	b.n	800129a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6919      	ldr	r1, [r3, #16]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	2207      	movs	r2, #7
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	400a      	ands	r2, r1
 8001276:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6919      	ldr	r1, [r3, #16]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	4603      	mov	r3, r0
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4403      	add	r3, r0
 8001290:	409a      	lsls	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d824      	bhi.n	80012ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	3b05      	subs	r3, #5
 80012b4:	221f      	movs	r2, #31
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	400a      	ands	r2, r1
 80012c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	3b05      	subs	r3, #5
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ea:	e04c      	b.n	8001386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d824      	bhi.n	800133e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	3b23      	subs	r3, #35	@ 0x23
 8001306:	221f      	movs	r2, #31
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43da      	mvns	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	400a      	ands	r2, r1
 8001314:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	3b23      	subs	r3, #35	@ 0x23
 8001330:	fa00 f203 	lsl.w	r2, r0, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	631a      	str	r2, [r3, #48]	@ 0x30
 800133c:	e023      	b.n	8001386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	3b41      	subs	r3, #65	@ 0x41
 8001350:	221f      	movs	r2, #31
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	400a      	ands	r2, r1
 800135e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	3b41      	subs	r3, #65	@ 0x41
 800137a:	fa00 f203 	lsl.w	r2, r0, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001386:	4b29      	ldr	r3, [pc, #164]	@ (800142c <HAL_ADC_ConfigChannel+0x250>)
 8001388:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a28      	ldr	r2, [pc, #160]	@ (8001430 <HAL_ADC_ConfigChannel+0x254>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d10f      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1d8>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b12      	cmp	r3, #18
 800139a:	d10b      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001430 <HAL_ADC_ConfigChannel+0x254>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12b      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x23a>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001434 <HAL_ADC_ConfigChannel+0x258>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d003      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x1f4>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b11      	cmp	r3, #17
 80013ce:	d122      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <HAL_ADC_ConfigChannel+0x258>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d111      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <HAL_ADC_ConfigChannel+0x25c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a11      	ldr	r2, [pc, #68]	@ (800143c <HAL_ADC_ConfigChannel+0x260>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	0c9a      	lsrs	r2, r3, #18
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001408:	e002      	b.n	8001410 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3b01      	subs	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f9      	bne.n	800140a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40012300 	.word	0x40012300
 8001430:	40012000 	.word	0x40012000
 8001434:	10000012 	.word	0x10000012
 8001438:	20000000 	.word	0x20000000
 800143c:	431bde83 	.word	0x431bde83

08001440 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001448:	4b79      	ldr	r3, [pc, #484]	@ (8001630 <ADC_Init+0x1f0>)
 800144a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	431a      	orrs	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	021a      	lsls	r2, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6899      	ldr	r1, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d2:	4a58      	ldr	r2, [pc, #352]	@ (8001634 <ADC_Init+0x1f4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d022      	beq.n	800151e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6899      	ldr	r1, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6899      	ldr	r1, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	e00f      	b.n	800153e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800152c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800153c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0202 	bic.w	r2, r2, #2
 800154c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7e1b      	ldrb	r3, [r3, #24]
 8001558:	005a      	lsls	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01b      	beq.n	80015a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800157a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800158a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6859      	ldr	r1, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	3b01      	subs	r3, #1
 8001598:	035a      	lsls	r2, r3, #13
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	e007      	b.n	80015b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	051a      	lsls	r2, r3, #20
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015f6:	025a      	lsls	r2, r3, #9
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800160e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6899      	ldr	r1, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	029a      	lsls	r2, r3, #10
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	609a      	str	r2, [r3, #8]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40012300 	.word	0x40012300
 8001634:	0f000001 	.word	0x0f000001

08001638 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001644:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800164e:	2b00      	cmp	r3, #0
 8001650:	d13c      	bne.n	80016cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d12b      	bne.n	80016c4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001670:	2b00      	cmp	r3, #0
 8001672:	d127      	bne.n	80016c4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800168c:	2b00      	cmp	r3, #0
 800168e:	d119      	bne.n	80016c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0220 	bic.w	r2, r2, #32
 800169e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff fd6b 	bl	80011a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016ca:	e00e      	b.n	80016ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff fd75 	bl	80011c8 <HAL_ADC_ErrorCallback>
}
 80016de:	e004      	b.n	80016ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016fe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff fd57 	bl	80011b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2240      	movs	r2, #64	@ 0x40
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f043 0204 	orr.w	r2, r3, #4
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff fd4a 	bl	80011c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	@ (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	@ (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff8e 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff29 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff3e 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff8e 	bl	8001830 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5d 	bl	80017dc <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff31 	bl	80017a0 <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fad8 	bl	8000f20 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e099      	b.n	8001ab0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199c:	e00f      	b.n	80019be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199e:	f7ff fabf 	bl	8000f20 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d908      	bls.n	80019be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2220      	movs	r2, #32
 80019b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2203      	movs	r2, #3
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e078      	b.n	8001ab0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e8      	bne.n	800199e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <HAL_DMA_Init+0x158>)
 80019d8:	4013      	ands	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d107      	bne.n	8001a28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	4313      	orrs	r3, r2
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f023 0307 	bic.w	r3, r3, #7
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d117      	bne.n	8001a82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00e      	beq.n	8001a82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fa6f 	bl	8001f48 <DMA_CheckFifoParam>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2240      	movs	r2, #64	@ 0x40
 8001a74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e016      	b.n	8001ab0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fa26 	bl	8001edc <DMA_CalcBaseAndBitshift>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a98:	223f      	movs	r2, #63	@ 0x3f
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	f010803f 	.word	0xf010803f

08001abc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_DMA_Start_IT+0x26>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e040      	b.n	8001b64 <HAL_DMA_Start_IT+0xa8>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d12f      	bne.n	8001b56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f9b8 	bl	8001e80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b14:	223f      	movs	r2, #63	@ 0x3f
 8001b16:	409a      	lsls	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0216 	orr.w	r2, r2, #22
 8001b2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0208 	orr.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e005      	b.n	8001b62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b78:	4b8e      	ldr	r3, [pc, #568]	@ (8001db4 <HAL_DMA_IRQHandler+0x248>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a8e      	ldr	r2, [pc, #568]	@ (8001db8 <HAL_DMA_IRQHandler+0x24c>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b96:	2208      	movs	r2, #8
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01a      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0204 	bic.w	r2, r2, #4
 8001bbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bdc:	2201      	movs	r2, #1
 8001bde:	409a      	lsls	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c06:	f043 0202 	orr.w	r2, r3, #2
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	2204      	movs	r2, #4
 8001c14:	409a      	lsls	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d012      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c30:	2204      	movs	r2, #4
 8001c32:	409a      	lsls	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3c:	f043 0204 	orr.w	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c48:	2210      	movs	r2, #16
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d043      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d03c      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c66:	2210      	movs	r2, #16
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d018      	beq.n	8001cae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d024      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
 8001c9a:	e01f      	b.n	8001cdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01b      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
 8001cac:	e016      	b.n	8001cdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d107      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0208 	bic.w	r2, r2, #8
 8001cca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 808f 	beq.w	8001e0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8087 	beq.w	8001e0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d02:	2220      	movs	r2, #32
 8001d04:	409a      	lsls	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d136      	bne.n	8001d84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0216 	bic.w	r2, r2, #22
 8001d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <HAL_DMA_IRQHandler+0x1da>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0208 	bic.w	r2, r2, #8
 8001d54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5a:	223f      	movs	r2, #63	@ 0x3f
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d07e      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	4798      	blx	r3
        }
        return;
 8001d82:	e079      	b.n	8001e78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01d      	beq.n	8001dce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10d      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d031      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
 8001db0:	e02c      	b.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
 8001db2:	bf00      	nop
 8001db4:	20000000 	.word	0x20000000
 8001db8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d023      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
 8001dcc:	e01e      	b.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0210 	bic.w	r2, r2, #16
 8001dea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d032      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d022      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2205      	movs	r2, #5
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d307      	bcc.n	8001e54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f2      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x2cc>
 8001e52:	e000      	b.n	8001e56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
 8001e76:	e000      	b.n	8001e7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e78:	bf00      	nop
    }
  }
}
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b40      	cmp	r3, #64	@ 0x40
 8001eac:	d108      	bne.n	8001ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ebe:	e007      	b.n	8001ed0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	3b10      	subs	r3, #16
 8001eec:	4a14      	ldr	r2, [pc, #80]	@ (8001f40 <DMA_CalcBaseAndBitshift+0x64>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ef6:	4a13      	ldr	r2, [pc, #76]	@ (8001f44 <DMA_CalcBaseAndBitshift+0x68>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d909      	bls.n	8001f1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	1d1a      	adds	r2, r3, #4
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f1c:	e007      	b.n	8001f2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	aaaaaaab 	.word	0xaaaaaaab
 8001f44:	08004aac 	.word	0x08004aac

08001f48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d11f      	bne.n	8001fa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d856      	bhi.n	8002016 <DMA_CheckFifoParam+0xce>
 8001f68:	a201      	add	r2, pc, #4	@ (adr r2, 8001f70 <DMA_CheckFifoParam+0x28>)
 8001f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6e:	bf00      	nop
 8001f70:	08001f81 	.word	0x08001f81
 8001f74:	08001f93 	.word	0x08001f93
 8001f78:	08001f81 	.word	0x08001f81
 8001f7c:	08002017 	.word	0x08002017
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d046      	beq.n	800201a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f90:	e043      	b.n	800201a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f9a:	d140      	bne.n	800201e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa0:	e03d      	b.n	800201e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001faa:	d121      	bne.n	8001ff0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d837      	bhi.n	8002022 <DMA_CheckFifoParam+0xda>
 8001fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb8 <DMA_CheckFifoParam+0x70>)
 8001fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb8:	08001fc9 	.word	0x08001fc9
 8001fbc:	08001fcf 	.word	0x08001fcf
 8001fc0:	08001fc9 	.word	0x08001fc9
 8001fc4:	08001fe1 	.word	0x08001fe1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
      break;
 8001fcc:	e030      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d025      	beq.n	8002026 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fde:	e022      	b.n	8002026 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fe8:	d11f      	bne.n	800202a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fee:	e01c      	b.n	800202a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d903      	bls.n	8001ffe <DMA_CheckFifoParam+0xb6>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d003      	beq.n	8002004 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ffc:	e018      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
      break;
 8002002:	e015      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00e      	beq.n	800202e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
      break;
 8002014:	e00b      	b.n	800202e <DMA_CheckFifoParam+0xe6>
      break;
 8002016:	bf00      	nop
 8002018:	e00a      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
 800201c:	e008      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 800201e:	bf00      	nop
 8002020:	e006      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
 8002024:	e004      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 8002026:	bf00      	nop
 8002028:	e002      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;   
 800202a:	bf00      	nop
 800202c:	e000      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 800202e:	bf00      	nop
    }
  } 
  
  return status; 
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	@ 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e159      	b.n	8002310 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 8148 	bne.w	800230a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	2b02      	cmp	r3, #2
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a2 	beq.w	800230a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b57      	ldr	r3, [pc, #348]	@ (8002328 <HAL_GPIO_Init+0x2e8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	4a56      	ldr	r2, [pc, #344]	@ (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d6:	4b54      	ldr	r3, [pc, #336]	@ (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a52      	ldr	r2, [pc, #328]	@ (800232c <HAL_GPIO_Init+0x2ec>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a49      	ldr	r2, [pc, #292]	@ (8002330 <HAL_GPIO_Init+0x2f0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x202>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a48      	ldr	r2, [pc, #288]	@ (8002334 <HAL_GPIO_Init+0x2f4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x1fe>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a47      	ldr	r2, [pc, #284]	@ (8002338 <HAL_GPIO_Init+0x2f8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x1fa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a46      	ldr	r2, [pc, #280]	@ (800233c <HAL_GPIO_Init+0x2fc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x1f6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a45      	ldr	r2, [pc, #276]	@ (8002340 <HAL_GPIO_Init+0x300>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x1f2>
 800222e:	2304      	movs	r3, #4
 8002230:	e008      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002232:	2307      	movs	r3, #7
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002236:	2303      	movs	r3, #3
 8002238:	e004      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223a:	2302      	movs	r3, #2
 800223c:	e002      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002242:	2300      	movs	r3, #0
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	f002 0203 	and.w	r2, r2, #3
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4093      	lsls	r3, r2
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002254:	4935      	ldr	r1, [pc, #212]	@ (800232c <HAL_GPIO_Init+0x2ec>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002262:	4b38      	ldr	r3, [pc, #224]	@ (8002344 <HAL_GPIO_Init+0x304>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002286:	4a2f      	ldr	r2, [pc, #188]	@ (8002344 <HAL_GPIO_Init+0x304>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800228c:	4b2d      	ldr	r3, [pc, #180]	@ (8002344 <HAL_GPIO_Init+0x304>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b0:	4a24      	ldr	r2, [pc, #144]	@ (8002344 <HAL_GPIO_Init+0x304>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_GPIO_Init+0x304>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022da:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <HAL_GPIO_Init+0x304>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e0:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <HAL_GPIO_Init+0x304>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002304:	4a0f      	ldr	r2, [pc, #60]	@ (8002344 <HAL_GPIO_Init+0x304>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3301      	adds	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b0f      	cmp	r3, #15
 8002314:	f67f aea2 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3724      	adds	r7, #36	@ 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40013800 	.word	0x40013800
 8002330:	40020000 	.word	0x40020000
 8002334:	40020400 	.word	0x40020400
 8002338:	40020800 	.word	0x40020800
 800233c:	40020c00 	.word	0x40020c00
 8002340:	40021000 	.word	0x40021000
 8002344:	40013c00 	.word	0x40013c00

08002348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e001      	b.n	800236a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002388:	787b      	ldrb	r3, [r7, #1]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002394:	e003      	b.n	800239e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	041a      	lsls	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	619a      	str	r2, [r3, #24]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e267      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d075      	beq.n	80024b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ca:	4b88      	ldr	r3, [pc, #544]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d00c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d6:	4b85      	ldr	r3, [pc, #532]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d112      	bne.n	8002408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e2:	4b82      	ldr	r3, [pc, #520]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ee:	d10b      	bne.n	8002408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	4b7e      	ldr	r3, [pc, #504]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d05b      	beq.n	80024b4 <HAL_RCC_OscConfig+0x108>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d157      	bne.n	80024b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e242      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002410:	d106      	bne.n	8002420 <HAL_RCC_OscConfig+0x74>
 8002412:	4b76      	ldr	r3, [pc, #472]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a75      	ldr	r2, [pc, #468]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e01d      	b.n	800245c <HAL_RCC_OscConfig+0xb0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x98>
 800242a:	4b70      	ldr	r3, [pc, #448]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6f      	ldr	r2, [pc, #444]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b6d      	ldr	r3, [pc, #436]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6c      	ldr	r2, [pc, #432]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0xb0>
 8002444:	4b69      	ldr	r3, [pc, #420]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a68      	ldr	r2, [pc, #416]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 800244a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b66      	ldr	r3, [pc, #408]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a65      	ldr	r2, [pc, #404]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800245a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fd5c 	bl	8000f20 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800246c:	f7fe fd58 	bl	8000f20 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	@ 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e207      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b5b      	ldr	r3, [pc, #364]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0xc0>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fd48 	bl	8000f20 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fd44 	bl	8000f20 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e1f3      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	4b51      	ldr	r3, [pc, #324]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0xe8>
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d063      	beq.n	800258a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024c2:	4b4a      	ldr	r3, [pc, #296]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b47      	ldr	r3, [pc, #284]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d11c      	bne.n	8002514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024da:	4b44      	ldr	r3, [pc, #272]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d116      	bne.n	8002514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	4b41      	ldr	r3, [pc, #260]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_RCC_OscConfig+0x152>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e1c7      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4b3b      	ldr	r3, [pc, #236]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4937      	ldr	r1, [pc, #220]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	e03a      	b.n	800258a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251c:	4b34      	ldr	r3, [pc, #208]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fcfd 	bl	8000f20 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252a:	f7fe fcf9 	bl	8000f20 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e1a8      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	4b2b      	ldr	r3, [pc, #172]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002548:	4b28      	ldr	r3, [pc, #160]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4925      	ldr	r1, [pc, #148]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]
 800255c:	e015      	b.n	800258a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fcdc 	bl	8000f20 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256c:	f7fe fcd8 	bl	8000f20 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e187      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d036      	beq.n	8002604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d016      	beq.n	80025cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <HAL_RCC_OscConfig+0x248>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe fcbc 	bl	8000f20 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ac:	f7fe fcb8 	bl	8000f20 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e167      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_RCC_OscConfig+0x240>)
 80025c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x200>
 80025ca:	e01b      	b.n	8002604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025cc:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <HAL_RCC_OscConfig+0x248>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fca5 	bl	8000f20 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	e00e      	b.n	80025f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025da:	f7fe fca1 	bl	8000f20 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d907      	bls.n	80025f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e150      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
 80025ec:	40023800 	.word	0x40023800
 80025f0:	42470000 	.word	0x42470000
 80025f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f8:	4b88      	ldr	r3, [pc, #544]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1ea      	bne.n	80025da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 8097 	beq.w	8002740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002616:	4b81      	ldr	r3, [pc, #516]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	4b7d      	ldr	r3, [pc, #500]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	4a7c      	ldr	r2, [pc, #496]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002630:	6413      	str	r3, [r2, #64]	@ 0x40
 8002632:	4b7a      	ldr	r3, [pc, #488]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	4b77      	ldr	r3, [pc, #476]	@ (8002820 <HAL_RCC_OscConfig+0x474>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d118      	bne.n	8002680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264e:	4b74      	ldr	r3, [pc, #464]	@ (8002820 <HAL_RCC_OscConfig+0x474>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a73      	ldr	r2, [pc, #460]	@ (8002820 <HAL_RCC_OscConfig+0x474>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265a:	f7fe fc61 	bl	8000f20 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002662:	f7fe fc5d 	bl	8000f20 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e10c      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	4b6a      	ldr	r3, [pc, #424]	@ (8002820 <HAL_RCC_OscConfig+0x474>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x2ea>
 8002688:	4b64      	ldr	r3, [pc, #400]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268c:	4a63      	ldr	r2, [pc, #396]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6713      	str	r3, [r2, #112]	@ 0x70
 8002694:	e01c      	b.n	80026d0 <HAL_RCC_OscConfig+0x324>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x30c>
 800269e:	4b5f      	ldr	r3, [pc, #380]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a2:	4a5e      	ldr	r2, [pc, #376]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026aa:	4b5c      	ldr	r3, [pc, #368]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ae:	4a5b      	ldr	r2, [pc, #364]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0x324>
 80026b8:	4b58      	ldr	r3, [pc, #352]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026bc:	4a57      	ldr	r2, [pc, #348]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c4:	4b55      	ldr	r3, [pc, #340]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c8:	4a54      	ldr	r2, [pc, #336]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80026ca:	f023 0304 	bic.w	r3, r3, #4
 80026ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d015      	beq.n	8002704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fc22 	bl	8000f20 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe fc1e 	bl	8000f20 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e0cb      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f6:	4b49      	ldr	r3, [pc, #292]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ee      	beq.n	80026e0 <HAL_RCC_OscConfig+0x334>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7fe fc0c 	bl	8000f20 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270a:	e00a      	b.n	8002722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe fc08 	bl	8000f20 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e0b5      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002722:	4b3e      	ldr	r3, [pc, #248]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1ee      	bne.n	800270c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272e:	7dfb      	ldrb	r3, [r7, #23]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002734:	4b39      	ldr	r3, [pc, #228]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	4a38      	ldr	r2, [pc, #224]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800273e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80a1 	beq.w	800288c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800274a:	4b34      	ldr	r3, [pc, #208]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d05c      	beq.n	8002810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d141      	bne.n	80027e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b31      	ldr	r3, [pc, #196]	@ (8002824 <HAL_RCC_OscConfig+0x478>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fbdc 	bl	8000f20 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe fbd8 	bl	8000f20 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e087      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	4b27      	ldr	r3, [pc, #156]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	019b      	lsls	r3, r3, #6
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	3b01      	subs	r3, #1
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	491b      	ldr	r1, [pc, #108]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_RCC_OscConfig+0x478>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7fe fbb1 	bl	8000f20 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe fbad 	bl	8000f20 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e05c      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d4:	4b11      	ldr	r3, [pc, #68]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x416>
 80027e0:	e054      	b.n	800288c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <HAL_RCC_OscConfig+0x478>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fb9a 	bl	8000f20 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fb96 	bl	8000f20 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e045      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_RCC_OscConfig+0x470>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x444>
 800280e:	e03d      	b.n	800288c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e038      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
 800281c:	40023800 	.word	0x40023800
 8002820:	40007000 	.word	0x40007000
 8002824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_RCC_OscConfig+0x4ec>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d028      	beq.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d121      	bne.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d11a      	bne.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002858:	4013      	ands	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800285e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002860:	4293      	cmp	r3, r2
 8002862:	d111      	bne.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	3b01      	subs	r3, #1
 8002872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800

0800289c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0cc      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b68      	ldr	r3, [pc, #416]	@ (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d90c      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b65      	ldr	r3, [pc, #404]	@ (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b63      	ldr	r3, [pc, #396]	@ (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0b8      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f0:	4b59      	ldr	r3, [pc, #356]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4a58      	ldr	r2, [pc, #352]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002908:	4b53      	ldr	r3, [pc, #332]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a52      	ldr	r2, [pc, #328]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b50      	ldr	r3, [pc, #320]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	494d      	ldr	r1, [pc, #308]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d044      	beq.n	80029bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b47      	ldr	r3, [pc, #284]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d119      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e07f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d003      	beq.n	800295a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002956:	2b03      	cmp	r3, #3
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e06f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e067      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297a:	4b37      	ldr	r3, [pc, #220]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4934      	ldr	r1, [pc, #208]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	4313      	orrs	r3, r2
 800298a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800298c:	f7fe fac8 	bl	8000f20 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7fe fac4 	bl	8000f20 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e04f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 020c 	and.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1eb      	bne.n	8002994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b25      	ldr	r3, [pc, #148]	@ (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d20c      	bcs.n	80029e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b22      	ldr	r3, [pc, #136]	@ (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e032      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4916      	ldr	r1, [pc, #88]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	490e      	ldr	r1, [pc, #56]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a22:	f000 f821 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a26:	4602      	mov	r2, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	490a      	ldr	r1, [pc, #40]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	5ccb      	ldrb	r3, [r1, r3]
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a3e:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fa28 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023c00 	.word	0x40023c00
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	08004a94 	.word	0x08004a94
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a6c:	b094      	sub	sp, #80	@ 0x50
 8002a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a74:	2300      	movs	r3, #0
 8002a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a78:	2300      	movs	r3, #0
 8002a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a80:	4b79      	ldr	r3, [pc, #484]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	f200 80e1 	bhi.w	8002c54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x34>
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a9a:	e0db      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b73      	ldr	r3, [pc, #460]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002aa0:	e0db      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aa2:	4b73      	ldr	r3, [pc, #460]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x208>)
 8002aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aa6:	e0d8      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ab0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	4b6a      	ldr	r3, [pc, #424]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ac8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ad6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	f04f 0000 	mov.w	r0, #0
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	0159      	lsls	r1, r3, #5
 8002ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aec:	0150      	lsls	r0, r2, #5
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4621      	mov	r1, r4
 8002af4:	1a51      	subs	r1, r2, r1
 8002af6:	6139      	str	r1, [r7, #16]
 8002af8:	4629      	mov	r1, r5
 8002afa:	eb63 0301 	sbc.w	r3, r3, r1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b0c:	4659      	mov	r1, fp
 8002b0e:	018b      	lsls	r3, r1, #6
 8002b10:	4651      	mov	r1, sl
 8002b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b16:	4651      	mov	r1, sl
 8002b18:	018a      	lsls	r2, r1, #6
 8002b1a:	4651      	mov	r1, sl
 8002b1c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b20:	4659      	mov	r1, fp
 8002b22:	eb63 0901 	sbc.w	r9, r3, r1
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b3a:	4690      	mov	r8, r2
 8002b3c:	4699      	mov	r9, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	eb18 0303 	adds.w	r3, r8, r3
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	462b      	mov	r3, r5
 8002b48:	eb49 0303 	adc.w	r3, r9, r3
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	024b      	lsls	r3, r1, #9
 8002b5e:	4621      	mov	r1, r4
 8002b60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b64:	4621      	mov	r1, r4
 8002b66:	024a      	lsls	r2, r1, #9
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b6e:	2200      	movs	r2, #0
 8002b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b78:	f7fd fb82 	bl	8000280 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4613      	mov	r3, r2
 8002b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b84:	e058      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b38      	ldr	r3, [pc, #224]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	4611      	mov	r1, r2
 8002b92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b96:	623b      	str	r3, [r7, #32]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	f04f 0000 	mov.w	r0, #0
 8002ba8:	f04f 0100 	mov.w	r1, #0
 8002bac:	0159      	lsls	r1, r3, #5
 8002bae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb2:	0150      	lsls	r0, r2, #5
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4641      	mov	r1, r8
 8002bba:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bd8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bdc:	eb63 050b 	sbc.w	r5, r3, fp
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	00eb      	lsls	r3, r5, #3
 8002bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bee:	00e2      	lsls	r2, r4, #3
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	461d      	mov	r5, r3
 8002bf4:	4643      	mov	r3, r8
 8002bf6:	18e3      	adds	r3, r4, r3
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	eb45 0303 	adc.w	r3, r5, r3
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c0e:	4629      	mov	r1, r5
 8002c10:	028b      	lsls	r3, r1, #10
 8002c12:	4621      	mov	r1, r4
 8002c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c18:	4621      	mov	r1, r4
 8002c1a:	028a      	lsls	r2, r1, #10
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c22:	2200      	movs	r2, #0
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	61fa      	str	r2, [r7, #28]
 8002c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c2c:	f7fd fb28 	bl	8000280 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4613      	mov	r3, r2
 8002c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	3301      	adds	r3, #1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002c48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c52:	e002      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3750      	adds	r7, #80	@ 0x50
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	007a1200 	.word	0x007a1200

08002c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000000 	.word	0x20000000

08002c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c90:	f7ff fff0 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0a9b      	lsrs	r3, r3, #10
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	@ (8002cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	08004aa4 	.word	0x08004aa4

08002cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cb8:	f7ff ffdc 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0b5b      	lsrs	r3, r3, #13
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4903      	ldr	r1, [pc, #12]	@ (8002cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	08004aa4 	.word	0x08004aa4

08002cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e041      	b.n	8002d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd ff24 	bl	8000b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f000 f950 	bl	8002fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d001      	beq.n	8002d94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e03c      	b.n	8002e0e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <HAL_TIM_Base_Start+0xa0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d018      	beq.n	8002dd8 <HAL_TIM_Base_Start+0x5c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dae:	d013      	beq.n	8002dd8 <HAL_TIM_Base_Start+0x5c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1a      	ldr	r2, [pc, #104]	@ (8002e20 <HAL_TIM_Base_Start+0xa4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00e      	beq.n	8002dd8 <HAL_TIM_Base_Start+0x5c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <HAL_TIM_Base_Start+0xa8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_TIM_Base_Start+0x5c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a17      	ldr	r2, [pc, #92]	@ (8002e28 <HAL_TIM_Base_Start+0xac>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_TIM_Base_Start+0x5c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a16      	ldr	r2, [pc, #88]	@ (8002e2c <HAL_TIM_Base_Start+0xb0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d111      	bne.n	8002dfc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d010      	beq.n	8002e0c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfa:	e007      	b.n	8002e0c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40000800 	.word	0x40000800
 8002e28:	40000c00 	.word	0x40000c00
 8002e2c:	40014000 	.word	0x40014000

08002e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_TIM_ConfigClockSource+0x1c>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e0b4      	b.n	8002fb6 <HAL_TIM_ConfigClockSource+0x186>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e84:	d03e      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0xd4>
 8002e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e8a:	f200 8087 	bhi.w	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e92:	f000 8086 	beq.w	8002fa2 <HAL_TIM_ConfigClockSource+0x172>
 8002e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e9a:	d87f      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002e9c:	2b70      	cmp	r3, #112	@ 0x70
 8002e9e:	d01a      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ea0:	2b70      	cmp	r3, #112	@ 0x70
 8002ea2:	d87b      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b60      	cmp	r3, #96	@ 0x60
 8002ea6:	d050      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x11a>
 8002ea8:	2b60      	cmp	r3, #96	@ 0x60
 8002eaa:	d877      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002eac:	2b50      	cmp	r3, #80	@ 0x50
 8002eae:	d03c      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0xfa>
 8002eb0:	2b50      	cmp	r3, #80	@ 0x50
 8002eb2:	d873      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002eb4:	2b40      	cmp	r3, #64	@ 0x40
 8002eb6:	d058      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x13a>
 8002eb8:	2b40      	cmp	r3, #64	@ 0x40
 8002eba:	d86f      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ebc:	2b30      	cmp	r3, #48	@ 0x30
 8002ebe:	d064      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x15a>
 8002ec0:	2b30      	cmp	r3, #48	@ 0x30
 8002ec2:	d86b      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d060      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x15a>
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d867      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05c      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x15a>
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d05a      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x15a>
 8002ed4:	e062      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ee6:	f000 f971 	bl	80031cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ef8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	609a      	str	r2, [r3, #8]
      break;
 8002f02:	e04f      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f14:	f000 f95a 	bl	80031cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f26:	609a      	str	r2, [r3, #8]
      break;
 8002f28:	e03c      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 f8ce 	bl	80030d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2150      	movs	r1, #80	@ 0x50
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f927 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002f48:	e02c      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f56:	461a      	mov	r2, r3
 8002f58:	f000 f8ed 	bl	8003136 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2160      	movs	r1, #96	@ 0x60
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f917 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002f68:	e01c      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f8ae 	bl	80030d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2140      	movs	r1, #64	@ 0x40
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f907 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002f88:	e00c      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f000 f8fe 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002f9a:	e003      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa0:	e000      	b.n	8002fa4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80030bc <TIM_Base_SetConfig+0xfc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00f      	beq.n	8002ff8 <TIM_Base_SetConfig+0x38>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fde:	d00b      	beq.n	8002ff8 <TIM_Base_SetConfig+0x38>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a37      	ldr	r2, [pc, #220]	@ (80030c0 <TIM_Base_SetConfig+0x100>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d007      	beq.n	8002ff8 <TIM_Base_SetConfig+0x38>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a36      	ldr	r2, [pc, #216]	@ (80030c4 <TIM_Base_SetConfig+0x104>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <TIM_Base_SetConfig+0x38>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a35      	ldr	r2, [pc, #212]	@ (80030c8 <TIM_Base_SetConfig+0x108>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d108      	bne.n	800300a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a2b      	ldr	r2, [pc, #172]	@ (80030bc <TIM_Base_SetConfig+0xfc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01b      	beq.n	800304a <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003018:	d017      	beq.n	800304a <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a28      	ldr	r2, [pc, #160]	@ (80030c0 <TIM_Base_SetConfig+0x100>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a27      	ldr	r2, [pc, #156]	@ (80030c4 <TIM_Base_SetConfig+0x104>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00f      	beq.n	800304a <TIM_Base_SetConfig+0x8a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a26      	ldr	r2, [pc, #152]	@ (80030c8 <TIM_Base_SetConfig+0x108>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00b      	beq.n	800304a <TIM_Base_SetConfig+0x8a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a25      	ldr	r2, [pc, #148]	@ (80030cc <TIM_Base_SetConfig+0x10c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <TIM_Base_SetConfig+0x8a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a24      	ldr	r2, [pc, #144]	@ (80030d0 <TIM_Base_SetConfig+0x110>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d003      	beq.n	800304a <TIM_Base_SetConfig+0x8a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a23      	ldr	r2, [pc, #140]	@ (80030d4 <TIM_Base_SetConfig+0x114>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d108      	bne.n	800305c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0e      	ldr	r2, [pc, #56]	@ (80030bc <TIM_Base_SetConfig+0xfc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d103      	bne.n	8003090 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d105      	bne.n	80030ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]
  }
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40000c00 	.word	0x40000c00
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40014400 	.word	0x40014400
 80030d4:	40014800 	.word	0x40014800

080030d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0201 	bic.w	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 030a 	bic.w	r3, r3, #10
 8003114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 0210 	bic.w	r2, r3, #16
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	031b      	lsls	r3, r3, #12
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003172:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	621a      	str	r2, [r3, #32]
}
 800318a:	bf00      	nop
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f043 0307 	orr.w	r3, r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	021a      	lsls	r2, r3, #8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	609a      	str	r2, [r3, #8]
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003220:	2302      	movs	r3, #2
 8003222:	e050      	b.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d018      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003270:	d013      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a18      	ldr	r2, [pc, #96]	@ (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00e      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a16      	ldr	r2, [pc, #88]	@ (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d009      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a15      	ldr	r2, [pc, #84]	@ (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d004      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a13      	ldr	r2, [pc, #76]	@ (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10c      	bne.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40000c00 	.word	0x40000c00
 80032e4:	40014000 	.word	0x40014000

080032e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e042      	b.n	8003380 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd fc3e 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	@ 0x24
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800332a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f973 	bl	8003618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	@ 0x28
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d175      	bne.n	8003494 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_UART_Transmit+0x2c>
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e06e      	b.n	8003496 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2221      	movs	r2, #33	@ 0x21
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033c6:	f7fd fdab 	bl	8000f20 <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e0:	d108      	bne.n	80033f4 <HAL_UART_Transmit+0x6c>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	e003      	b.n	80033fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033fc:	e02e      	b.n	800345c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	2180      	movs	r1, #128	@ 0x80
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f848 	bl	800349e <UART_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e03a      	b.n	8003496 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	3302      	adds	r3, #2
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	e007      	b.n	800344e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	3301      	adds	r3, #1
 800344c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1cb      	bne.n	80033fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2140      	movs	r1, #64	@ 0x40
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f814 	bl	800349e <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e006      	b.n	8003496 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ae:	e03b      	b.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d037      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b8:	f7fd fd32 	bl	8000f20 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	6a3a      	ldr	r2, [r7, #32]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d302      	bcc.n	80034ce <UART_WaitOnFlagUntilTimeout+0x30>
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e03a      	b.n	8003548 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d023      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d020      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b40      	cmp	r3, #64	@ 0x40
 80034ea:	d01d      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d116      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f81d 	bl	8003550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2208      	movs	r2, #8
 800351a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e00f      	b.n	8003548 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	429a      	cmp	r2, r3
 8003544:	d0b4      	beq.n	80034b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b095      	sub	sp, #84	@ 0x54
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800356e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003578:	643a      	str	r2, [r7, #64]	@ 0x40
 800357a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800357e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e5      	bne.n	8003558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3314      	adds	r3, #20
 8003592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	61fb      	str	r3, [r7, #28]
   return(result);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3314      	adds	r3, #20
 80035aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e5      	bne.n	800358c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d119      	bne.n	80035fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f023 0310 	bic.w	r3, r3, #16
 80035de:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e8:	61ba      	str	r2, [r7, #24]
 80035ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	6979      	ldr	r1, [r7, #20]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	613b      	str	r3, [r7, #16]
   return(result);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800360a:	bf00      	nop
 800360c:	3754      	adds	r7, #84	@ 0x54
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800361c:	b0c0      	sub	sp, #256	@ 0x100
 800361e:	af00      	add	r7, sp, #0
 8003620:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	68d9      	ldr	r1, [r3, #12]
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	ea40 0301 	orr.w	r3, r0, r1
 8003640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	431a      	orrs	r2, r3
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	431a      	orrs	r2, r3
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003670:	f021 010c 	bic.w	r1, r1, #12
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800367e:	430b      	orrs	r3, r1
 8003680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	6999      	ldr	r1, [r3, #24]
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	ea40 0301 	orr.w	r3, r0, r1
 800369e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b8f      	ldr	r3, [pc, #572]	@ (80038e4 <UART_SetConfig+0x2cc>)
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d005      	beq.n	80036b8 <UART_SetConfig+0xa0>
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b8d      	ldr	r3, [pc, #564]	@ (80038e8 <UART_SetConfig+0x2d0>)
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d104      	bne.n	80036c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036b8:	f7ff fafc 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 80036bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036c0:	e003      	b.n	80036ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036c2:	f7ff fae3 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 80036c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036d4:	f040 810c 	bne.w	80038f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036dc:	2200      	movs	r2, #0
 80036de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	1891      	adds	r1, r2, r2
 80036f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036f2:	415b      	adcs	r3, r3
 80036f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036fa:	4621      	mov	r1, r4
 80036fc:	eb12 0801 	adds.w	r8, r2, r1
 8003700:	4629      	mov	r1, r5
 8003702:	eb43 0901 	adc.w	r9, r3, r1
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800371a:	4690      	mov	r8, r2
 800371c:	4699      	mov	r9, r3
 800371e:	4623      	mov	r3, r4
 8003720:	eb18 0303 	adds.w	r3, r8, r3
 8003724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003728:	462b      	mov	r3, r5
 800372a:	eb49 0303 	adc.w	r3, r9, r3
 800372e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800373e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003746:	460b      	mov	r3, r1
 8003748:	18db      	adds	r3, r3, r3
 800374a:	653b      	str	r3, [r7, #80]	@ 0x50
 800374c:	4613      	mov	r3, r2
 800374e:	eb42 0303 	adc.w	r3, r2, r3
 8003752:	657b      	str	r3, [r7, #84]	@ 0x54
 8003754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003758:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800375c:	f7fc fd90 	bl	8000280 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4b61      	ldr	r3, [pc, #388]	@ (80038ec <UART_SetConfig+0x2d4>)
 8003766:	fba3 2302 	umull	r2, r3, r3, r2
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	011c      	lsls	r4, r3, #4
 800376e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003772:	2200      	movs	r2, #0
 8003774:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003778:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800377c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003780:	4642      	mov	r2, r8
 8003782:	464b      	mov	r3, r9
 8003784:	1891      	adds	r1, r2, r2
 8003786:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003788:	415b      	adcs	r3, r3
 800378a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800378c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003790:	4641      	mov	r1, r8
 8003792:	eb12 0a01 	adds.w	sl, r2, r1
 8003796:	4649      	mov	r1, r9
 8003798:	eb43 0b01 	adc.w	fp, r3, r1
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037b0:	4692      	mov	sl, r2
 80037b2:	469b      	mov	fp, r3
 80037b4:	4643      	mov	r3, r8
 80037b6:	eb1a 0303 	adds.w	r3, sl, r3
 80037ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037be:	464b      	mov	r3, r9
 80037c0:	eb4b 0303 	adc.w	r3, fp, r3
 80037c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037dc:	460b      	mov	r3, r1
 80037de:	18db      	adds	r3, r3, r3
 80037e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80037e2:	4613      	mov	r3, r2
 80037e4:	eb42 0303 	adc.w	r3, r2, r3
 80037e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037f2:	f7fc fd45 	bl	8000280 <__aeabi_uldivmod>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	4b3b      	ldr	r3, [pc, #236]	@ (80038ec <UART_SetConfig+0x2d4>)
 80037fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2264      	movs	r2, #100	@ 0x64
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	1acb      	subs	r3, r1, r3
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003812:	4b36      	ldr	r3, [pc, #216]	@ (80038ec <UART_SetConfig+0x2d4>)
 8003814:	fba3 2302 	umull	r2, r3, r3, r2
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003820:	441c      	add	r4, r3
 8003822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800382c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003830:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003834:	4642      	mov	r2, r8
 8003836:	464b      	mov	r3, r9
 8003838:	1891      	adds	r1, r2, r2
 800383a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800383c:	415b      	adcs	r3, r3
 800383e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003844:	4641      	mov	r1, r8
 8003846:	1851      	adds	r1, r2, r1
 8003848:	6339      	str	r1, [r7, #48]	@ 0x30
 800384a:	4649      	mov	r1, r9
 800384c:	414b      	adcs	r3, r1
 800384e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800385c:	4659      	mov	r1, fp
 800385e:	00cb      	lsls	r3, r1, #3
 8003860:	4651      	mov	r1, sl
 8003862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003866:	4651      	mov	r1, sl
 8003868:	00ca      	lsls	r2, r1, #3
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	4603      	mov	r3, r0
 8003870:	4642      	mov	r2, r8
 8003872:	189b      	adds	r3, r3, r2
 8003874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003878:	464b      	mov	r3, r9
 800387a:	460a      	mov	r2, r1
 800387c:	eb42 0303 	adc.w	r3, r2, r3
 8003880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003890:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003894:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003898:	460b      	mov	r3, r1
 800389a:	18db      	adds	r3, r3, r3
 800389c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800389e:	4613      	mov	r3, r2
 80038a0:	eb42 0303 	adc.w	r3, r2, r3
 80038a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038ae:	f7fc fce7 	bl	8000280 <__aeabi_uldivmod>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <UART_SetConfig+0x2d4>)
 80038b8:	fba3 1302 	umull	r1, r3, r3, r2
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	2164      	movs	r1, #100	@ 0x64
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	3332      	adds	r3, #50	@ 0x32
 80038ca:	4a08      	ldr	r2, [pc, #32]	@ (80038ec <UART_SetConfig+0x2d4>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	f003 0207 	and.w	r2, r3, #7
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4422      	add	r2, r4
 80038de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038e0:	e106      	b.n	8003af0 <UART_SetConfig+0x4d8>
 80038e2:	bf00      	nop
 80038e4:	40011000 	.word	0x40011000
 80038e8:	40011400 	.word	0x40011400
 80038ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003902:	4642      	mov	r2, r8
 8003904:	464b      	mov	r3, r9
 8003906:	1891      	adds	r1, r2, r2
 8003908:	6239      	str	r1, [r7, #32]
 800390a:	415b      	adcs	r3, r3
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
 800390e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003912:	4641      	mov	r1, r8
 8003914:	1854      	adds	r4, r2, r1
 8003916:	4649      	mov	r1, r9
 8003918:	eb43 0501 	adc.w	r5, r3, r1
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	00eb      	lsls	r3, r5, #3
 8003926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800392a:	00e2      	lsls	r2, r4, #3
 800392c:	4614      	mov	r4, r2
 800392e:	461d      	mov	r5, r3
 8003930:	4643      	mov	r3, r8
 8003932:	18e3      	adds	r3, r4, r3
 8003934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003938:	464b      	mov	r3, r9
 800393a:	eb45 0303 	adc.w	r3, r5, r3
 800393e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800394e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800395e:	4629      	mov	r1, r5
 8003960:	008b      	lsls	r3, r1, #2
 8003962:	4621      	mov	r1, r4
 8003964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003968:	4621      	mov	r1, r4
 800396a:	008a      	lsls	r2, r1, #2
 800396c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003970:	f7fc fc86 	bl	8000280 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4b60      	ldr	r3, [pc, #384]	@ (8003afc <UART_SetConfig+0x4e4>)
 800397a:	fba3 2302 	umull	r2, r3, r3, r2
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	011c      	lsls	r4, r3, #4
 8003982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003986:	2200      	movs	r2, #0
 8003988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800398c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003994:	4642      	mov	r2, r8
 8003996:	464b      	mov	r3, r9
 8003998:	1891      	adds	r1, r2, r2
 800399a:	61b9      	str	r1, [r7, #24]
 800399c:	415b      	adcs	r3, r3
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039a4:	4641      	mov	r1, r8
 80039a6:	1851      	adds	r1, r2, r1
 80039a8:	6139      	str	r1, [r7, #16]
 80039aa:	4649      	mov	r1, r9
 80039ac:	414b      	adcs	r3, r1
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039bc:	4659      	mov	r1, fp
 80039be:	00cb      	lsls	r3, r1, #3
 80039c0:	4651      	mov	r1, sl
 80039c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039c6:	4651      	mov	r1, sl
 80039c8:	00ca      	lsls	r2, r1, #3
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	4642      	mov	r2, r8
 80039d2:	189b      	adds	r3, r3, r2
 80039d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039d8:	464b      	mov	r3, r9
 80039da:	460a      	mov	r2, r1
 80039dc:	eb42 0303 	adc.w	r3, r2, r3
 80039e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039fc:	4649      	mov	r1, r9
 80039fe:	008b      	lsls	r3, r1, #2
 8003a00:	4641      	mov	r1, r8
 8003a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a06:	4641      	mov	r1, r8
 8003a08:	008a      	lsls	r2, r1, #2
 8003a0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a0e:	f7fc fc37 	bl	8000280 <__aeabi_uldivmod>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	4b38      	ldr	r3, [pc, #224]	@ (8003afc <UART_SetConfig+0x4e4>)
 8003a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2264      	movs	r2, #100	@ 0x64
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	1acb      	subs	r3, r1, r3
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	3332      	adds	r3, #50	@ 0x32
 8003a2c:	4a33      	ldr	r2, [pc, #204]	@ (8003afc <UART_SetConfig+0x4e4>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a38:	441c      	add	r4, r3
 8003a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3e:	2200      	movs	r2, #0
 8003a40:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a42:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	1891      	adds	r1, r2, r2
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	415b      	adcs	r3, r3
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a58:	4641      	mov	r1, r8
 8003a5a:	1851      	adds	r1, r2, r1
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	4649      	mov	r1, r9
 8003a60:	414b      	adcs	r3, r1
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a70:	4659      	mov	r1, fp
 8003a72:	00cb      	lsls	r3, r1, #3
 8003a74:	4651      	mov	r1, sl
 8003a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	00ca      	lsls	r2, r1, #3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	4642      	mov	r2, r8
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	eb42 0303 	adc.w	r3, r2, r3
 8003a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003aac:	4649      	mov	r1, r9
 8003aae:	008b      	lsls	r3, r1, #2
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	008a      	lsls	r2, r1, #2
 8003aba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003abe:	f7fc fbdf 	bl	8000280 <__aeabi_uldivmod>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <UART_SetConfig+0x4e4>)
 8003ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	2164      	movs	r1, #100	@ 0x64
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	3332      	adds	r3, #50	@ 0x32
 8003ada:	4a08      	ldr	r2, [pc, #32]	@ (8003afc <UART_SetConfig+0x4e4>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4422      	add	r2, r4
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	bf00      	nop
 8003af2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003af6:	46bd      	mov	sp, r7
 8003af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afc:	51eb851f 	.word	0x51eb851f

08003b00 <std>:
 8003b00:	2300      	movs	r3, #0
 8003b02:	b510      	push	{r4, lr}
 8003b04:	4604      	mov	r4, r0
 8003b06:	e9c0 3300 	strd	r3, r3, [r0]
 8003b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b0e:	6083      	str	r3, [r0, #8]
 8003b10:	8181      	strh	r1, [r0, #12]
 8003b12:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b14:	81c2      	strh	r2, [r0, #14]
 8003b16:	6183      	str	r3, [r0, #24]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	305c      	adds	r0, #92	@ 0x5c
 8003b1e:	f000 f9f9 	bl	8003f14 <memset>
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <std+0x58>)
 8003b24:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b26:	4b0d      	ldr	r3, [pc, #52]	@ (8003b5c <std+0x5c>)
 8003b28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <std+0x60>)
 8003b2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <std+0x64>)
 8003b30:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b32:	4b0d      	ldr	r3, [pc, #52]	@ (8003b68 <std+0x68>)
 8003b34:	6224      	str	r4, [r4, #32]
 8003b36:	429c      	cmp	r4, r3
 8003b38:	d006      	beq.n	8003b48 <std+0x48>
 8003b3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b3e:	4294      	cmp	r4, r2
 8003b40:	d002      	beq.n	8003b48 <std+0x48>
 8003b42:	33d0      	adds	r3, #208	@ 0xd0
 8003b44:	429c      	cmp	r4, r3
 8003b46:	d105      	bne.n	8003b54 <std+0x54>
 8003b48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b50:	f000 ba58 	b.w	8004004 <__retarget_lock_init_recursive>
 8003b54:	bd10      	pop	{r4, pc}
 8003b56:	bf00      	nop
 8003b58:	08003d65 	.word	0x08003d65
 8003b5c:	08003d87 	.word	0x08003d87
 8003b60:	08003dbf 	.word	0x08003dbf
 8003b64:	08003de3 	.word	0x08003de3
 8003b68:	20001164 	.word	0x20001164

08003b6c <stdio_exit_handler>:
 8003b6c:	4a02      	ldr	r2, [pc, #8]	@ (8003b78 <stdio_exit_handler+0xc>)
 8003b6e:	4903      	ldr	r1, [pc, #12]	@ (8003b7c <stdio_exit_handler+0x10>)
 8003b70:	4803      	ldr	r0, [pc, #12]	@ (8003b80 <stdio_exit_handler+0x14>)
 8003b72:	f000 b869 	b.w	8003c48 <_fwalk_sglue>
 8003b76:	bf00      	nop
 8003b78:	2000000c 	.word	0x2000000c
 8003b7c:	080048a5 	.word	0x080048a5
 8003b80:	2000001c 	.word	0x2000001c

08003b84 <cleanup_stdio>:
 8003b84:	6841      	ldr	r1, [r0, #4]
 8003b86:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <cleanup_stdio+0x34>)
 8003b88:	4299      	cmp	r1, r3
 8003b8a:	b510      	push	{r4, lr}
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	d001      	beq.n	8003b94 <cleanup_stdio+0x10>
 8003b90:	f000 fe88 	bl	80048a4 <_fflush_r>
 8003b94:	68a1      	ldr	r1, [r4, #8]
 8003b96:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <cleanup_stdio+0x38>)
 8003b98:	4299      	cmp	r1, r3
 8003b9a:	d002      	beq.n	8003ba2 <cleanup_stdio+0x1e>
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f000 fe81 	bl	80048a4 <_fflush_r>
 8003ba2:	68e1      	ldr	r1, [r4, #12]
 8003ba4:	4b06      	ldr	r3, [pc, #24]	@ (8003bc0 <cleanup_stdio+0x3c>)
 8003ba6:	4299      	cmp	r1, r3
 8003ba8:	d004      	beq.n	8003bb4 <cleanup_stdio+0x30>
 8003baa:	4620      	mov	r0, r4
 8003bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb0:	f000 be78 	b.w	80048a4 <_fflush_r>
 8003bb4:	bd10      	pop	{r4, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20001164 	.word	0x20001164
 8003bbc:	200011cc 	.word	0x200011cc
 8003bc0:	20001234 	.word	0x20001234

08003bc4 <global_stdio_init.part.0>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <global_stdio_init.part.0+0x30>)
 8003bc8:	4c0b      	ldr	r4, [pc, #44]	@ (8003bf8 <global_stdio_init.part.0+0x34>)
 8003bca:	4a0c      	ldr	r2, [pc, #48]	@ (8003bfc <global_stdio_init.part.0+0x38>)
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	4620      	mov	r0, r4
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	f7ff ff94 	bl	8003b00 <std>
 8003bd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003bdc:	2201      	movs	r2, #1
 8003bde:	2109      	movs	r1, #9
 8003be0:	f7ff ff8e 	bl	8003b00 <std>
 8003be4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003be8:	2202      	movs	r2, #2
 8003bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bee:	2112      	movs	r1, #18
 8003bf0:	f7ff bf86 	b.w	8003b00 <std>
 8003bf4:	2000129c 	.word	0x2000129c
 8003bf8:	20001164 	.word	0x20001164
 8003bfc:	08003b6d 	.word	0x08003b6d

08003c00 <__sfp_lock_acquire>:
 8003c00:	4801      	ldr	r0, [pc, #4]	@ (8003c08 <__sfp_lock_acquire+0x8>)
 8003c02:	f000 ba00 	b.w	8004006 <__retarget_lock_acquire_recursive>
 8003c06:	bf00      	nop
 8003c08:	200012a5 	.word	0x200012a5

08003c0c <__sfp_lock_release>:
 8003c0c:	4801      	ldr	r0, [pc, #4]	@ (8003c14 <__sfp_lock_release+0x8>)
 8003c0e:	f000 b9fb 	b.w	8004008 <__retarget_lock_release_recursive>
 8003c12:	bf00      	nop
 8003c14:	200012a5 	.word	0x200012a5

08003c18 <__sinit>:
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	f7ff fff0 	bl	8003c00 <__sfp_lock_acquire>
 8003c20:	6a23      	ldr	r3, [r4, #32]
 8003c22:	b11b      	cbz	r3, 8003c2c <__sinit+0x14>
 8003c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c28:	f7ff bff0 	b.w	8003c0c <__sfp_lock_release>
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <__sinit+0x28>)
 8003c2e:	6223      	str	r3, [r4, #32]
 8003c30:	4b04      	ldr	r3, [pc, #16]	@ (8003c44 <__sinit+0x2c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f5      	bne.n	8003c24 <__sinit+0xc>
 8003c38:	f7ff ffc4 	bl	8003bc4 <global_stdio_init.part.0>
 8003c3c:	e7f2      	b.n	8003c24 <__sinit+0xc>
 8003c3e:	bf00      	nop
 8003c40:	08003b85 	.word	0x08003b85
 8003c44:	2000129c 	.word	0x2000129c

08003c48 <_fwalk_sglue>:
 8003c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	4688      	mov	r8, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	2600      	movs	r6, #0
 8003c54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c58:	f1b9 0901 	subs.w	r9, r9, #1
 8003c5c:	d505      	bpl.n	8003c6a <_fwalk_sglue+0x22>
 8003c5e:	6824      	ldr	r4, [r4, #0]
 8003c60:	2c00      	cmp	r4, #0
 8003c62:	d1f7      	bne.n	8003c54 <_fwalk_sglue+0xc>
 8003c64:	4630      	mov	r0, r6
 8003c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c6a:	89ab      	ldrh	r3, [r5, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d907      	bls.n	8003c80 <_fwalk_sglue+0x38>
 8003c70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c74:	3301      	adds	r3, #1
 8003c76:	d003      	beq.n	8003c80 <_fwalk_sglue+0x38>
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	47c0      	blx	r8
 8003c7e:	4306      	orrs	r6, r0
 8003c80:	3568      	adds	r5, #104	@ 0x68
 8003c82:	e7e9      	b.n	8003c58 <_fwalk_sglue+0x10>

08003c84 <iprintf>:
 8003c84:	b40f      	push	{r0, r1, r2, r3}
 8003c86:	b507      	push	{r0, r1, r2, lr}
 8003c88:	4906      	ldr	r1, [pc, #24]	@ (8003ca4 <iprintf+0x20>)
 8003c8a:	ab04      	add	r3, sp, #16
 8003c8c:	6808      	ldr	r0, [r1, #0]
 8003c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c92:	6881      	ldr	r1, [r0, #8]
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	f000 fadb 	bl	8004250 <_vfiprintf_r>
 8003c9a:	b003      	add	sp, #12
 8003c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ca0:	b004      	add	sp, #16
 8003ca2:	4770      	bx	lr
 8003ca4:	20000018 	.word	0x20000018

08003ca8 <_puts_r>:
 8003ca8:	6a03      	ldr	r3, [r0, #32]
 8003caa:	b570      	push	{r4, r5, r6, lr}
 8003cac:	6884      	ldr	r4, [r0, #8]
 8003cae:	4605      	mov	r5, r0
 8003cb0:	460e      	mov	r6, r1
 8003cb2:	b90b      	cbnz	r3, 8003cb8 <_puts_r+0x10>
 8003cb4:	f7ff ffb0 	bl	8003c18 <__sinit>
 8003cb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cba:	07db      	lsls	r3, r3, #31
 8003cbc:	d405      	bmi.n	8003cca <_puts_r+0x22>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	0598      	lsls	r0, r3, #22
 8003cc2:	d402      	bmi.n	8003cca <_puts_r+0x22>
 8003cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cc6:	f000 f99e 	bl	8004006 <__retarget_lock_acquire_recursive>
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	0719      	lsls	r1, r3, #28
 8003cce:	d502      	bpl.n	8003cd6 <_puts_r+0x2e>
 8003cd0:	6923      	ldr	r3, [r4, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d135      	bne.n	8003d42 <_puts_r+0x9a>
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f000 f8c5 	bl	8003e68 <__swsetup_r>
 8003cde:	b380      	cbz	r0, 8003d42 <_puts_r+0x9a>
 8003ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8003ce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ce6:	07da      	lsls	r2, r3, #31
 8003ce8:	d405      	bmi.n	8003cf6 <_puts_r+0x4e>
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	059b      	lsls	r3, r3, #22
 8003cee:	d402      	bmi.n	8003cf6 <_puts_r+0x4e>
 8003cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cf2:	f000 f989 	bl	8004008 <__retarget_lock_release_recursive>
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	da04      	bge.n	8003d08 <_puts_r+0x60>
 8003cfe:	69a2      	ldr	r2, [r4, #24]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	dc17      	bgt.n	8003d34 <_puts_r+0x8c>
 8003d04:	290a      	cmp	r1, #10
 8003d06:	d015      	beq.n	8003d34 <_puts_r+0x8c>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	6022      	str	r2, [r4, #0]
 8003d0e:	7019      	strb	r1, [r3, #0]
 8003d10:	68a3      	ldr	r3, [r4, #8]
 8003d12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d16:	3b01      	subs	r3, #1
 8003d18:	60a3      	str	r3, [r4, #8]
 8003d1a:	2900      	cmp	r1, #0
 8003d1c:	d1ed      	bne.n	8003cfa <_puts_r+0x52>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da11      	bge.n	8003d46 <_puts_r+0x9e>
 8003d22:	4622      	mov	r2, r4
 8003d24:	210a      	movs	r1, #10
 8003d26:	4628      	mov	r0, r5
 8003d28:	f000 f85f 	bl	8003dea <__swbuf_r>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d0d7      	beq.n	8003ce0 <_puts_r+0x38>
 8003d30:	250a      	movs	r5, #10
 8003d32:	e7d7      	b.n	8003ce4 <_puts_r+0x3c>
 8003d34:	4622      	mov	r2, r4
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 f857 	bl	8003dea <__swbuf_r>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d1e7      	bne.n	8003d10 <_puts_r+0x68>
 8003d40:	e7ce      	b.n	8003ce0 <_puts_r+0x38>
 8003d42:	3e01      	subs	r6, #1
 8003d44:	e7e4      	b.n	8003d10 <_puts_r+0x68>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	220a      	movs	r2, #10
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e7ee      	b.n	8003d30 <_puts_r+0x88>
	...

08003d54 <puts>:
 8003d54:	4b02      	ldr	r3, [pc, #8]	@ (8003d60 <puts+0xc>)
 8003d56:	4601      	mov	r1, r0
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	f7ff bfa5 	b.w	8003ca8 <_puts_r>
 8003d5e:	bf00      	nop
 8003d60:	20000018 	.word	0x20000018

08003d64 <__sread>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	460c      	mov	r4, r1
 8003d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6c:	f000 f8fc 	bl	8003f68 <_read_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	bfab      	itete	ge
 8003d74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d76:	89a3      	ldrhlt	r3, [r4, #12]
 8003d78:	181b      	addge	r3, r3, r0
 8003d7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d7e:	bfac      	ite	ge
 8003d80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d82:	81a3      	strhlt	r3, [r4, #12]
 8003d84:	bd10      	pop	{r4, pc}

08003d86 <__swrite>:
 8003d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8a:	461f      	mov	r7, r3
 8003d8c:	898b      	ldrh	r3, [r1, #12]
 8003d8e:	05db      	lsls	r3, r3, #23
 8003d90:	4605      	mov	r5, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	4616      	mov	r6, r2
 8003d96:	d505      	bpl.n	8003da4 <__swrite+0x1e>
 8003d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f000 f8d0 	bl	8003f44 <_lseek_r>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	4632      	mov	r2, r6
 8003db2:	463b      	mov	r3, r7
 8003db4:	4628      	mov	r0, r5
 8003db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	f000 b8e7 	b.w	8003f8c <_write_r>

08003dbe <__sseek>:
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc6:	f000 f8bd 	bl	8003f44 <_lseek_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	bf15      	itete	ne
 8003dd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003dd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003dd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003dda:	81a3      	strheq	r3, [r4, #12]
 8003ddc:	bf18      	it	ne
 8003dde:	81a3      	strhne	r3, [r4, #12]
 8003de0:	bd10      	pop	{r4, pc}

08003de2 <__sclose>:
 8003de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de6:	f000 b89d 	b.w	8003f24 <_close_r>

08003dea <__swbuf_r>:
 8003dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dec:	460e      	mov	r6, r1
 8003dee:	4614      	mov	r4, r2
 8003df0:	4605      	mov	r5, r0
 8003df2:	b118      	cbz	r0, 8003dfc <__swbuf_r+0x12>
 8003df4:	6a03      	ldr	r3, [r0, #32]
 8003df6:	b90b      	cbnz	r3, 8003dfc <__swbuf_r+0x12>
 8003df8:	f7ff ff0e 	bl	8003c18 <__sinit>
 8003dfc:	69a3      	ldr	r3, [r4, #24]
 8003dfe:	60a3      	str	r3, [r4, #8]
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	071a      	lsls	r2, r3, #28
 8003e04:	d501      	bpl.n	8003e0a <__swbuf_r+0x20>
 8003e06:	6923      	ldr	r3, [r4, #16]
 8003e08:	b943      	cbnz	r3, 8003e1c <__swbuf_r+0x32>
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 f82b 	bl	8003e68 <__swsetup_r>
 8003e12:	b118      	cbz	r0, 8003e1c <__swbuf_r+0x32>
 8003e14:	f04f 37ff 	mov.w	r7, #4294967295
 8003e18:	4638      	mov	r0, r7
 8003e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	6922      	ldr	r2, [r4, #16]
 8003e20:	1a98      	subs	r0, r3, r2
 8003e22:	6963      	ldr	r3, [r4, #20]
 8003e24:	b2f6      	uxtb	r6, r6
 8003e26:	4283      	cmp	r3, r0
 8003e28:	4637      	mov	r7, r6
 8003e2a:	dc05      	bgt.n	8003e38 <__swbuf_r+0x4e>
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f000 fd38 	bl	80048a4 <_fflush_r>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d1ed      	bne.n	8003e14 <__swbuf_r+0x2a>
 8003e38:	68a3      	ldr	r3, [r4, #8]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	60a3      	str	r3, [r4, #8]
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	6022      	str	r2, [r4, #0]
 8003e44:	701e      	strb	r6, [r3, #0]
 8003e46:	6962      	ldr	r2, [r4, #20]
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d004      	beq.n	8003e58 <__swbuf_r+0x6e>
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	07db      	lsls	r3, r3, #31
 8003e52:	d5e1      	bpl.n	8003e18 <__swbuf_r+0x2e>
 8003e54:	2e0a      	cmp	r6, #10
 8003e56:	d1df      	bne.n	8003e18 <__swbuf_r+0x2e>
 8003e58:	4621      	mov	r1, r4
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	f000 fd22 	bl	80048a4 <_fflush_r>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d0d9      	beq.n	8003e18 <__swbuf_r+0x2e>
 8003e64:	e7d6      	b.n	8003e14 <__swbuf_r+0x2a>
	...

08003e68 <__swsetup_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	4b29      	ldr	r3, [pc, #164]	@ (8003f10 <__swsetup_r+0xa8>)
 8003e6c:	4605      	mov	r5, r0
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	460c      	mov	r4, r1
 8003e72:	b118      	cbz	r0, 8003e7c <__swsetup_r+0x14>
 8003e74:	6a03      	ldr	r3, [r0, #32]
 8003e76:	b90b      	cbnz	r3, 8003e7c <__swsetup_r+0x14>
 8003e78:	f7ff fece 	bl	8003c18 <__sinit>
 8003e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e80:	0719      	lsls	r1, r3, #28
 8003e82:	d422      	bmi.n	8003eca <__swsetup_r+0x62>
 8003e84:	06da      	lsls	r2, r3, #27
 8003e86:	d407      	bmi.n	8003e98 <__swsetup_r+0x30>
 8003e88:	2209      	movs	r2, #9
 8003e8a:	602a      	str	r2, [r5, #0]
 8003e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e90:	81a3      	strh	r3, [r4, #12]
 8003e92:	f04f 30ff 	mov.w	r0, #4294967295
 8003e96:	e033      	b.n	8003f00 <__swsetup_r+0x98>
 8003e98:	0758      	lsls	r0, r3, #29
 8003e9a:	d512      	bpl.n	8003ec2 <__swsetup_r+0x5a>
 8003e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e9e:	b141      	cbz	r1, 8003eb2 <__swsetup_r+0x4a>
 8003ea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	d002      	beq.n	8003eae <__swsetup_r+0x46>
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f000 f8af 	bl	800400c <_free_r>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6063      	str	r3, [r4, #4]
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	b94b      	cbnz	r3, 8003ee2 <__swsetup_r+0x7a>
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed8:	d003      	beq.n	8003ee2 <__swsetup_r+0x7a>
 8003eda:	4621      	mov	r1, r4
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 fd2f 	bl	8004940 <__smakebuf_r>
 8003ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ee6:	f013 0201 	ands.w	r2, r3, #1
 8003eea:	d00a      	beq.n	8003f02 <__swsetup_r+0x9a>
 8003eec:	2200      	movs	r2, #0
 8003eee:	60a2      	str	r2, [r4, #8]
 8003ef0:	6962      	ldr	r2, [r4, #20]
 8003ef2:	4252      	negs	r2, r2
 8003ef4:	61a2      	str	r2, [r4, #24]
 8003ef6:	6922      	ldr	r2, [r4, #16]
 8003ef8:	b942      	cbnz	r2, 8003f0c <__swsetup_r+0xa4>
 8003efa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003efe:	d1c5      	bne.n	8003e8c <__swsetup_r+0x24>
 8003f00:	bd38      	pop	{r3, r4, r5, pc}
 8003f02:	0799      	lsls	r1, r3, #30
 8003f04:	bf58      	it	pl
 8003f06:	6962      	ldrpl	r2, [r4, #20]
 8003f08:	60a2      	str	r2, [r4, #8]
 8003f0a:	e7f4      	b.n	8003ef6 <__swsetup_r+0x8e>
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	e7f7      	b.n	8003f00 <__swsetup_r+0x98>
 8003f10:	20000018 	.word	0x20000018

08003f14 <memset>:
 8003f14:	4402      	add	r2, r0
 8003f16:	4603      	mov	r3, r0
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d100      	bne.n	8003f1e <memset+0xa>
 8003f1c:	4770      	bx	lr
 8003f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f22:	e7f9      	b.n	8003f18 <memset+0x4>

08003f24 <_close_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4d06      	ldr	r5, [pc, #24]	@ (8003f40 <_close_r+0x1c>)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	f7fc fee9 	bl	8000d06 <_close>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d102      	bne.n	8003f3e <_close_r+0x1a>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	b103      	cbz	r3, 8003f3e <_close_r+0x1a>
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	200012a0 	.word	0x200012a0

08003f44 <_lseek_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d07      	ldr	r5, [pc, #28]	@ (8003f64 <_lseek_r+0x20>)
 8003f48:	4604      	mov	r4, r0
 8003f4a:	4608      	mov	r0, r1
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	602a      	str	r2, [r5, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f7fc fefe 	bl	8000d54 <_lseek>
 8003f58:	1c43      	adds	r3, r0, #1
 8003f5a:	d102      	bne.n	8003f62 <_lseek_r+0x1e>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	b103      	cbz	r3, 8003f62 <_lseek_r+0x1e>
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
 8003f64:	200012a0 	.word	0x200012a0

08003f68 <_read_r>:
 8003f68:	b538      	push	{r3, r4, r5, lr}
 8003f6a:	4d07      	ldr	r5, [pc, #28]	@ (8003f88 <_read_r+0x20>)
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	4608      	mov	r0, r1
 8003f70:	4611      	mov	r1, r2
 8003f72:	2200      	movs	r2, #0
 8003f74:	602a      	str	r2, [r5, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f7fc fe8c 	bl	8000c94 <_read>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_read_r+0x1e>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_read_r+0x1e>
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	200012a0 	.word	0x200012a0

08003f8c <_write_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4d07      	ldr	r5, [pc, #28]	@ (8003fac <_write_r+0x20>)
 8003f90:	4604      	mov	r4, r0
 8003f92:	4608      	mov	r0, r1
 8003f94:	4611      	mov	r1, r2
 8003f96:	2200      	movs	r2, #0
 8003f98:	602a      	str	r2, [r5, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f7fc fe97 	bl	8000cce <_write>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_write_r+0x1e>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_write_r+0x1e>
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	200012a0 	.word	0x200012a0

08003fb0 <__errno>:
 8003fb0:	4b01      	ldr	r3, [pc, #4]	@ (8003fb8 <__errno+0x8>)
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000018 	.word	0x20000018

08003fbc <__libc_init_array>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8003ff4 <__libc_init_array+0x38>)
 8003fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ff8 <__libc_init_array+0x3c>)
 8003fc2:	1b64      	subs	r4, r4, r5
 8003fc4:	10a4      	asrs	r4, r4, #2
 8003fc6:	2600      	movs	r6, #0
 8003fc8:	42a6      	cmp	r6, r4
 8003fca:	d109      	bne.n	8003fe0 <__libc_init_array+0x24>
 8003fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8003ffc <__libc_init_array+0x40>)
 8003fce:	4c0c      	ldr	r4, [pc, #48]	@ (8004000 <__libc_init_array+0x44>)
 8003fd0:	f000 fd24 	bl	8004a1c <_init>
 8003fd4:	1b64      	subs	r4, r4, r5
 8003fd6:	10a4      	asrs	r4, r4, #2
 8003fd8:	2600      	movs	r6, #0
 8003fda:	42a6      	cmp	r6, r4
 8003fdc:	d105      	bne.n	8003fea <__libc_init_array+0x2e>
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe4:	4798      	blx	r3
 8003fe6:	3601      	adds	r6, #1
 8003fe8:	e7ee      	b.n	8003fc8 <__libc_init_array+0xc>
 8003fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fee:	4798      	blx	r3
 8003ff0:	3601      	adds	r6, #1
 8003ff2:	e7f2      	b.n	8003fda <__libc_init_array+0x1e>
 8003ff4:	08004af0 	.word	0x08004af0
 8003ff8:	08004af0 	.word	0x08004af0
 8003ffc:	08004af0 	.word	0x08004af0
 8004000:	08004af4 	.word	0x08004af4

08004004 <__retarget_lock_init_recursive>:
 8004004:	4770      	bx	lr

08004006 <__retarget_lock_acquire_recursive>:
 8004006:	4770      	bx	lr

08004008 <__retarget_lock_release_recursive>:
 8004008:	4770      	bx	lr
	...

0800400c <_free_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4605      	mov	r5, r0
 8004010:	2900      	cmp	r1, #0
 8004012:	d041      	beq.n	8004098 <_free_r+0x8c>
 8004014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004018:	1f0c      	subs	r4, r1, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	bfb8      	it	lt
 800401e:	18e4      	addlt	r4, r4, r3
 8004020:	f000 f8e0 	bl	80041e4 <__malloc_lock>
 8004024:	4a1d      	ldr	r2, [pc, #116]	@ (800409c <_free_r+0x90>)
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	b933      	cbnz	r3, 8004038 <_free_r+0x2c>
 800402a:	6063      	str	r3, [r4, #4]
 800402c:	6014      	str	r4, [r2, #0]
 800402e:	4628      	mov	r0, r5
 8004030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004034:	f000 b8dc 	b.w	80041f0 <__malloc_unlock>
 8004038:	42a3      	cmp	r3, r4
 800403a:	d908      	bls.n	800404e <_free_r+0x42>
 800403c:	6820      	ldr	r0, [r4, #0]
 800403e:	1821      	adds	r1, r4, r0
 8004040:	428b      	cmp	r3, r1
 8004042:	bf01      	itttt	eq
 8004044:	6819      	ldreq	r1, [r3, #0]
 8004046:	685b      	ldreq	r3, [r3, #4]
 8004048:	1809      	addeq	r1, r1, r0
 800404a:	6021      	streq	r1, [r4, #0]
 800404c:	e7ed      	b.n	800402a <_free_r+0x1e>
 800404e:	461a      	mov	r2, r3
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	b10b      	cbz	r3, 8004058 <_free_r+0x4c>
 8004054:	42a3      	cmp	r3, r4
 8004056:	d9fa      	bls.n	800404e <_free_r+0x42>
 8004058:	6811      	ldr	r1, [r2, #0]
 800405a:	1850      	adds	r0, r2, r1
 800405c:	42a0      	cmp	r0, r4
 800405e:	d10b      	bne.n	8004078 <_free_r+0x6c>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	4401      	add	r1, r0
 8004064:	1850      	adds	r0, r2, r1
 8004066:	4283      	cmp	r3, r0
 8004068:	6011      	str	r1, [r2, #0]
 800406a:	d1e0      	bne.n	800402e <_free_r+0x22>
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	6053      	str	r3, [r2, #4]
 8004072:	4408      	add	r0, r1
 8004074:	6010      	str	r0, [r2, #0]
 8004076:	e7da      	b.n	800402e <_free_r+0x22>
 8004078:	d902      	bls.n	8004080 <_free_r+0x74>
 800407a:	230c      	movs	r3, #12
 800407c:	602b      	str	r3, [r5, #0]
 800407e:	e7d6      	b.n	800402e <_free_r+0x22>
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	1821      	adds	r1, r4, r0
 8004084:	428b      	cmp	r3, r1
 8004086:	bf04      	itt	eq
 8004088:	6819      	ldreq	r1, [r3, #0]
 800408a:	685b      	ldreq	r3, [r3, #4]
 800408c:	6063      	str	r3, [r4, #4]
 800408e:	bf04      	itt	eq
 8004090:	1809      	addeq	r1, r1, r0
 8004092:	6021      	streq	r1, [r4, #0]
 8004094:	6054      	str	r4, [r2, #4]
 8004096:	e7ca      	b.n	800402e <_free_r+0x22>
 8004098:	bd38      	pop	{r3, r4, r5, pc}
 800409a:	bf00      	nop
 800409c:	200012ac 	.word	0x200012ac

080040a0 <sbrk_aligned>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4e0f      	ldr	r6, [pc, #60]	@ (80040e0 <sbrk_aligned+0x40>)
 80040a4:	460c      	mov	r4, r1
 80040a6:	6831      	ldr	r1, [r6, #0]
 80040a8:	4605      	mov	r5, r0
 80040aa:	b911      	cbnz	r1, 80040b2 <sbrk_aligned+0x12>
 80040ac:	f000 fca6 	bl	80049fc <_sbrk_r>
 80040b0:	6030      	str	r0, [r6, #0]
 80040b2:	4621      	mov	r1, r4
 80040b4:	4628      	mov	r0, r5
 80040b6:	f000 fca1 	bl	80049fc <_sbrk_r>
 80040ba:	1c43      	adds	r3, r0, #1
 80040bc:	d103      	bne.n	80040c6 <sbrk_aligned+0x26>
 80040be:	f04f 34ff 	mov.w	r4, #4294967295
 80040c2:	4620      	mov	r0, r4
 80040c4:	bd70      	pop	{r4, r5, r6, pc}
 80040c6:	1cc4      	adds	r4, r0, #3
 80040c8:	f024 0403 	bic.w	r4, r4, #3
 80040cc:	42a0      	cmp	r0, r4
 80040ce:	d0f8      	beq.n	80040c2 <sbrk_aligned+0x22>
 80040d0:	1a21      	subs	r1, r4, r0
 80040d2:	4628      	mov	r0, r5
 80040d4:	f000 fc92 	bl	80049fc <_sbrk_r>
 80040d8:	3001      	adds	r0, #1
 80040da:	d1f2      	bne.n	80040c2 <sbrk_aligned+0x22>
 80040dc:	e7ef      	b.n	80040be <sbrk_aligned+0x1e>
 80040de:	bf00      	nop
 80040e0:	200012a8 	.word	0x200012a8

080040e4 <_malloc_r>:
 80040e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e8:	1ccd      	adds	r5, r1, #3
 80040ea:	f025 0503 	bic.w	r5, r5, #3
 80040ee:	3508      	adds	r5, #8
 80040f0:	2d0c      	cmp	r5, #12
 80040f2:	bf38      	it	cc
 80040f4:	250c      	movcc	r5, #12
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	4606      	mov	r6, r0
 80040fa:	db01      	blt.n	8004100 <_malloc_r+0x1c>
 80040fc:	42a9      	cmp	r1, r5
 80040fe:	d904      	bls.n	800410a <_malloc_r+0x26>
 8004100:	230c      	movs	r3, #12
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	2000      	movs	r0, #0
 8004106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800410a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041e0 <_malloc_r+0xfc>
 800410e:	f000 f869 	bl	80041e4 <__malloc_lock>
 8004112:	f8d8 3000 	ldr.w	r3, [r8]
 8004116:	461c      	mov	r4, r3
 8004118:	bb44      	cbnz	r4, 800416c <_malloc_r+0x88>
 800411a:	4629      	mov	r1, r5
 800411c:	4630      	mov	r0, r6
 800411e:	f7ff ffbf 	bl	80040a0 <sbrk_aligned>
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	4604      	mov	r4, r0
 8004126:	d158      	bne.n	80041da <_malloc_r+0xf6>
 8004128:	f8d8 4000 	ldr.w	r4, [r8]
 800412c:	4627      	mov	r7, r4
 800412e:	2f00      	cmp	r7, #0
 8004130:	d143      	bne.n	80041ba <_malloc_r+0xd6>
 8004132:	2c00      	cmp	r4, #0
 8004134:	d04b      	beq.n	80041ce <_malloc_r+0xea>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	4639      	mov	r1, r7
 800413a:	4630      	mov	r0, r6
 800413c:	eb04 0903 	add.w	r9, r4, r3
 8004140:	f000 fc5c 	bl	80049fc <_sbrk_r>
 8004144:	4581      	cmp	r9, r0
 8004146:	d142      	bne.n	80041ce <_malloc_r+0xea>
 8004148:	6821      	ldr	r1, [r4, #0]
 800414a:	1a6d      	subs	r5, r5, r1
 800414c:	4629      	mov	r1, r5
 800414e:	4630      	mov	r0, r6
 8004150:	f7ff ffa6 	bl	80040a0 <sbrk_aligned>
 8004154:	3001      	adds	r0, #1
 8004156:	d03a      	beq.n	80041ce <_malloc_r+0xea>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	442b      	add	r3, r5
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	f8d8 3000 	ldr.w	r3, [r8]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	bb62      	cbnz	r2, 80041c0 <_malloc_r+0xdc>
 8004166:	f8c8 7000 	str.w	r7, [r8]
 800416a:	e00f      	b.n	800418c <_malloc_r+0xa8>
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	1b52      	subs	r2, r2, r5
 8004170:	d420      	bmi.n	80041b4 <_malloc_r+0xd0>
 8004172:	2a0b      	cmp	r2, #11
 8004174:	d917      	bls.n	80041a6 <_malloc_r+0xc2>
 8004176:	1961      	adds	r1, r4, r5
 8004178:	42a3      	cmp	r3, r4
 800417a:	6025      	str	r5, [r4, #0]
 800417c:	bf18      	it	ne
 800417e:	6059      	strne	r1, [r3, #4]
 8004180:	6863      	ldr	r3, [r4, #4]
 8004182:	bf08      	it	eq
 8004184:	f8c8 1000 	streq.w	r1, [r8]
 8004188:	5162      	str	r2, [r4, r5]
 800418a:	604b      	str	r3, [r1, #4]
 800418c:	4630      	mov	r0, r6
 800418e:	f000 f82f 	bl	80041f0 <__malloc_unlock>
 8004192:	f104 000b 	add.w	r0, r4, #11
 8004196:	1d23      	adds	r3, r4, #4
 8004198:	f020 0007 	bic.w	r0, r0, #7
 800419c:	1ac2      	subs	r2, r0, r3
 800419e:	bf1c      	itt	ne
 80041a0:	1a1b      	subne	r3, r3, r0
 80041a2:	50a3      	strne	r3, [r4, r2]
 80041a4:	e7af      	b.n	8004106 <_malloc_r+0x22>
 80041a6:	6862      	ldr	r2, [r4, #4]
 80041a8:	42a3      	cmp	r3, r4
 80041aa:	bf0c      	ite	eq
 80041ac:	f8c8 2000 	streq.w	r2, [r8]
 80041b0:	605a      	strne	r2, [r3, #4]
 80041b2:	e7eb      	b.n	800418c <_malloc_r+0xa8>
 80041b4:	4623      	mov	r3, r4
 80041b6:	6864      	ldr	r4, [r4, #4]
 80041b8:	e7ae      	b.n	8004118 <_malloc_r+0x34>
 80041ba:	463c      	mov	r4, r7
 80041bc:	687f      	ldr	r7, [r7, #4]
 80041be:	e7b6      	b.n	800412e <_malloc_r+0x4a>
 80041c0:	461a      	mov	r2, r3
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	d1fb      	bne.n	80041c0 <_malloc_r+0xdc>
 80041c8:	2300      	movs	r3, #0
 80041ca:	6053      	str	r3, [r2, #4]
 80041cc:	e7de      	b.n	800418c <_malloc_r+0xa8>
 80041ce:	230c      	movs	r3, #12
 80041d0:	6033      	str	r3, [r6, #0]
 80041d2:	4630      	mov	r0, r6
 80041d4:	f000 f80c 	bl	80041f0 <__malloc_unlock>
 80041d8:	e794      	b.n	8004104 <_malloc_r+0x20>
 80041da:	6005      	str	r5, [r0, #0]
 80041dc:	e7d6      	b.n	800418c <_malloc_r+0xa8>
 80041de:	bf00      	nop
 80041e0:	200012ac 	.word	0x200012ac

080041e4 <__malloc_lock>:
 80041e4:	4801      	ldr	r0, [pc, #4]	@ (80041ec <__malloc_lock+0x8>)
 80041e6:	f7ff bf0e 	b.w	8004006 <__retarget_lock_acquire_recursive>
 80041ea:	bf00      	nop
 80041ec:	200012a4 	.word	0x200012a4

080041f0 <__malloc_unlock>:
 80041f0:	4801      	ldr	r0, [pc, #4]	@ (80041f8 <__malloc_unlock+0x8>)
 80041f2:	f7ff bf09 	b.w	8004008 <__retarget_lock_release_recursive>
 80041f6:	bf00      	nop
 80041f8:	200012a4 	.word	0x200012a4

080041fc <__sfputc_r>:
 80041fc:	6893      	ldr	r3, [r2, #8]
 80041fe:	3b01      	subs	r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	b410      	push	{r4}
 8004204:	6093      	str	r3, [r2, #8]
 8004206:	da08      	bge.n	800421a <__sfputc_r+0x1e>
 8004208:	6994      	ldr	r4, [r2, #24]
 800420a:	42a3      	cmp	r3, r4
 800420c:	db01      	blt.n	8004212 <__sfputc_r+0x16>
 800420e:	290a      	cmp	r1, #10
 8004210:	d103      	bne.n	800421a <__sfputc_r+0x1e>
 8004212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004216:	f7ff bde8 	b.w	8003dea <__swbuf_r>
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	1c58      	adds	r0, r3, #1
 800421e:	6010      	str	r0, [r2, #0]
 8004220:	7019      	strb	r1, [r3, #0]
 8004222:	4608      	mov	r0, r1
 8004224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004228:	4770      	bx	lr

0800422a <__sfputs_r>:
 800422a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422c:	4606      	mov	r6, r0
 800422e:	460f      	mov	r7, r1
 8004230:	4614      	mov	r4, r2
 8004232:	18d5      	adds	r5, r2, r3
 8004234:	42ac      	cmp	r4, r5
 8004236:	d101      	bne.n	800423c <__sfputs_r+0x12>
 8004238:	2000      	movs	r0, #0
 800423a:	e007      	b.n	800424c <__sfputs_r+0x22>
 800423c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004240:	463a      	mov	r2, r7
 8004242:	4630      	mov	r0, r6
 8004244:	f7ff ffda 	bl	80041fc <__sfputc_r>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d1f3      	bne.n	8004234 <__sfputs_r+0xa>
 800424c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004250 <_vfiprintf_r>:
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	460d      	mov	r5, r1
 8004256:	b09d      	sub	sp, #116	@ 0x74
 8004258:	4614      	mov	r4, r2
 800425a:	4698      	mov	r8, r3
 800425c:	4606      	mov	r6, r0
 800425e:	b118      	cbz	r0, 8004268 <_vfiprintf_r+0x18>
 8004260:	6a03      	ldr	r3, [r0, #32]
 8004262:	b90b      	cbnz	r3, 8004268 <_vfiprintf_r+0x18>
 8004264:	f7ff fcd8 	bl	8003c18 <__sinit>
 8004268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800426a:	07d9      	lsls	r1, r3, #31
 800426c:	d405      	bmi.n	800427a <_vfiprintf_r+0x2a>
 800426e:	89ab      	ldrh	r3, [r5, #12]
 8004270:	059a      	lsls	r2, r3, #22
 8004272:	d402      	bmi.n	800427a <_vfiprintf_r+0x2a>
 8004274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004276:	f7ff fec6 	bl	8004006 <__retarget_lock_acquire_recursive>
 800427a:	89ab      	ldrh	r3, [r5, #12]
 800427c:	071b      	lsls	r3, r3, #28
 800427e:	d501      	bpl.n	8004284 <_vfiprintf_r+0x34>
 8004280:	692b      	ldr	r3, [r5, #16]
 8004282:	b99b      	cbnz	r3, 80042ac <_vfiprintf_r+0x5c>
 8004284:	4629      	mov	r1, r5
 8004286:	4630      	mov	r0, r6
 8004288:	f7ff fdee 	bl	8003e68 <__swsetup_r>
 800428c:	b170      	cbz	r0, 80042ac <_vfiprintf_r+0x5c>
 800428e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004290:	07dc      	lsls	r4, r3, #31
 8004292:	d504      	bpl.n	800429e <_vfiprintf_r+0x4e>
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	b01d      	add	sp, #116	@ 0x74
 800429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429e:	89ab      	ldrh	r3, [r5, #12]
 80042a0:	0598      	lsls	r0, r3, #22
 80042a2:	d4f7      	bmi.n	8004294 <_vfiprintf_r+0x44>
 80042a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042a6:	f7ff feaf 	bl	8004008 <__retarget_lock_release_recursive>
 80042aa:	e7f3      	b.n	8004294 <_vfiprintf_r+0x44>
 80042ac:	2300      	movs	r3, #0
 80042ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80042b0:	2320      	movs	r3, #32
 80042b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ba:	2330      	movs	r3, #48	@ 0x30
 80042bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800446c <_vfiprintf_r+0x21c>
 80042c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042c4:	f04f 0901 	mov.w	r9, #1
 80042c8:	4623      	mov	r3, r4
 80042ca:	469a      	mov	sl, r3
 80042cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042d0:	b10a      	cbz	r2, 80042d6 <_vfiprintf_r+0x86>
 80042d2:	2a25      	cmp	r2, #37	@ 0x25
 80042d4:	d1f9      	bne.n	80042ca <_vfiprintf_r+0x7a>
 80042d6:	ebba 0b04 	subs.w	fp, sl, r4
 80042da:	d00b      	beq.n	80042f4 <_vfiprintf_r+0xa4>
 80042dc:	465b      	mov	r3, fp
 80042de:	4622      	mov	r2, r4
 80042e0:	4629      	mov	r1, r5
 80042e2:	4630      	mov	r0, r6
 80042e4:	f7ff ffa1 	bl	800422a <__sfputs_r>
 80042e8:	3001      	adds	r0, #1
 80042ea:	f000 80a7 	beq.w	800443c <_vfiprintf_r+0x1ec>
 80042ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042f0:	445a      	add	r2, fp
 80042f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80042f4:	f89a 3000 	ldrb.w	r3, [sl]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 809f 	beq.w	800443c <_vfiprintf_r+0x1ec>
 80042fe:	2300      	movs	r3, #0
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004308:	f10a 0a01 	add.w	sl, sl, #1
 800430c:	9304      	str	r3, [sp, #16]
 800430e:	9307      	str	r3, [sp, #28]
 8004310:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004314:	931a      	str	r3, [sp, #104]	@ 0x68
 8004316:	4654      	mov	r4, sl
 8004318:	2205      	movs	r2, #5
 800431a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800431e:	4853      	ldr	r0, [pc, #332]	@ (800446c <_vfiprintf_r+0x21c>)
 8004320:	f7fb ff5e 	bl	80001e0 <memchr>
 8004324:	9a04      	ldr	r2, [sp, #16]
 8004326:	b9d8      	cbnz	r0, 8004360 <_vfiprintf_r+0x110>
 8004328:	06d1      	lsls	r1, r2, #27
 800432a:	bf44      	itt	mi
 800432c:	2320      	movmi	r3, #32
 800432e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004332:	0713      	lsls	r3, r2, #28
 8004334:	bf44      	itt	mi
 8004336:	232b      	movmi	r3, #43	@ 0x2b
 8004338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800433c:	f89a 3000 	ldrb.w	r3, [sl]
 8004340:	2b2a      	cmp	r3, #42	@ 0x2a
 8004342:	d015      	beq.n	8004370 <_vfiprintf_r+0x120>
 8004344:	9a07      	ldr	r2, [sp, #28]
 8004346:	4654      	mov	r4, sl
 8004348:	2000      	movs	r0, #0
 800434a:	f04f 0c0a 	mov.w	ip, #10
 800434e:	4621      	mov	r1, r4
 8004350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004354:	3b30      	subs	r3, #48	@ 0x30
 8004356:	2b09      	cmp	r3, #9
 8004358:	d94b      	bls.n	80043f2 <_vfiprintf_r+0x1a2>
 800435a:	b1b0      	cbz	r0, 800438a <_vfiprintf_r+0x13a>
 800435c:	9207      	str	r2, [sp, #28]
 800435e:	e014      	b.n	800438a <_vfiprintf_r+0x13a>
 8004360:	eba0 0308 	sub.w	r3, r0, r8
 8004364:	fa09 f303 	lsl.w	r3, r9, r3
 8004368:	4313      	orrs	r3, r2
 800436a:	9304      	str	r3, [sp, #16]
 800436c:	46a2      	mov	sl, r4
 800436e:	e7d2      	b.n	8004316 <_vfiprintf_r+0xc6>
 8004370:	9b03      	ldr	r3, [sp, #12]
 8004372:	1d19      	adds	r1, r3, #4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	9103      	str	r1, [sp, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	bfbb      	ittet	lt
 800437c:	425b      	neglt	r3, r3
 800437e:	f042 0202 	orrlt.w	r2, r2, #2
 8004382:	9307      	strge	r3, [sp, #28]
 8004384:	9307      	strlt	r3, [sp, #28]
 8004386:	bfb8      	it	lt
 8004388:	9204      	strlt	r2, [sp, #16]
 800438a:	7823      	ldrb	r3, [r4, #0]
 800438c:	2b2e      	cmp	r3, #46	@ 0x2e
 800438e:	d10a      	bne.n	80043a6 <_vfiprintf_r+0x156>
 8004390:	7863      	ldrb	r3, [r4, #1]
 8004392:	2b2a      	cmp	r3, #42	@ 0x2a
 8004394:	d132      	bne.n	80043fc <_vfiprintf_r+0x1ac>
 8004396:	9b03      	ldr	r3, [sp, #12]
 8004398:	1d1a      	adds	r2, r3, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	9203      	str	r2, [sp, #12]
 800439e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043a2:	3402      	adds	r4, #2
 80043a4:	9305      	str	r3, [sp, #20]
 80043a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800447c <_vfiprintf_r+0x22c>
 80043aa:	7821      	ldrb	r1, [r4, #0]
 80043ac:	2203      	movs	r2, #3
 80043ae:	4650      	mov	r0, sl
 80043b0:	f7fb ff16 	bl	80001e0 <memchr>
 80043b4:	b138      	cbz	r0, 80043c6 <_vfiprintf_r+0x176>
 80043b6:	9b04      	ldr	r3, [sp, #16]
 80043b8:	eba0 000a 	sub.w	r0, r0, sl
 80043bc:	2240      	movs	r2, #64	@ 0x40
 80043be:	4082      	lsls	r2, r0
 80043c0:	4313      	orrs	r3, r2
 80043c2:	3401      	adds	r4, #1
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ca:	4829      	ldr	r0, [pc, #164]	@ (8004470 <_vfiprintf_r+0x220>)
 80043cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043d0:	2206      	movs	r2, #6
 80043d2:	f7fb ff05 	bl	80001e0 <memchr>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	d03f      	beq.n	800445a <_vfiprintf_r+0x20a>
 80043da:	4b26      	ldr	r3, [pc, #152]	@ (8004474 <_vfiprintf_r+0x224>)
 80043dc:	bb1b      	cbnz	r3, 8004426 <_vfiprintf_r+0x1d6>
 80043de:	9b03      	ldr	r3, [sp, #12]
 80043e0:	3307      	adds	r3, #7
 80043e2:	f023 0307 	bic.w	r3, r3, #7
 80043e6:	3308      	adds	r3, #8
 80043e8:	9303      	str	r3, [sp, #12]
 80043ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ec:	443b      	add	r3, r7
 80043ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80043f0:	e76a      	b.n	80042c8 <_vfiprintf_r+0x78>
 80043f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80043f6:	460c      	mov	r4, r1
 80043f8:	2001      	movs	r0, #1
 80043fa:	e7a8      	b.n	800434e <_vfiprintf_r+0xfe>
 80043fc:	2300      	movs	r3, #0
 80043fe:	3401      	adds	r4, #1
 8004400:	9305      	str	r3, [sp, #20]
 8004402:	4619      	mov	r1, r3
 8004404:	f04f 0c0a 	mov.w	ip, #10
 8004408:	4620      	mov	r0, r4
 800440a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800440e:	3a30      	subs	r2, #48	@ 0x30
 8004410:	2a09      	cmp	r2, #9
 8004412:	d903      	bls.n	800441c <_vfiprintf_r+0x1cc>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0c6      	beq.n	80043a6 <_vfiprintf_r+0x156>
 8004418:	9105      	str	r1, [sp, #20]
 800441a:	e7c4      	b.n	80043a6 <_vfiprintf_r+0x156>
 800441c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004420:	4604      	mov	r4, r0
 8004422:	2301      	movs	r3, #1
 8004424:	e7f0      	b.n	8004408 <_vfiprintf_r+0x1b8>
 8004426:	ab03      	add	r3, sp, #12
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	462a      	mov	r2, r5
 800442c:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <_vfiprintf_r+0x228>)
 800442e:	a904      	add	r1, sp, #16
 8004430:	4630      	mov	r0, r6
 8004432:	f3af 8000 	nop.w
 8004436:	4607      	mov	r7, r0
 8004438:	1c78      	adds	r0, r7, #1
 800443a:	d1d6      	bne.n	80043ea <_vfiprintf_r+0x19a>
 800443c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800443e:	07d9      	lsls	r1, r3, #31
 8004440:	d405      	bmi.n	800444e <_vfiprintf_r+0x1fe>
 8004442:	89ab      	ldrh	r3, [r5, #12]
 8004444:	059a      	lsls	r2, r3, #22
 8004446:	d402      	bmi.n	800444e <_vfiprintf_r+0x1fe>
 8004448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800444a:	f7ff fddd 	bl	8004008 <__retarget_lock_release_recursive>
 800444e:	89ab      	ldrh	r3, [r5, #12]
 8004450:	065b      	lsls	r3, r3, #25
 8004452:	f53f af1f 	bmi.w	8004294 <_vfiprintf_r+0x44>
 8004456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004458:	e71e      	b.n	8004298 <_vfiprintf_r+0x48>
 800445a:	ab03      	add	r3, sp, #12
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	462a      	mov	r2, r5
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <_vfiprintf_r+0x228>)
 8004462:	a904      	add	r1, sp, #16
 8004464:	4630      	mov	r0, r6
 8004466:	f000 f879 	bl	800455c <_printf_i>
 800446a:	e7e4      	b.n	8004436 <_vfiprintf_r+0x1e6>
 800446c:	08004ab4 	.word	0x08004ab4
 8004470:	08004abe 	.word	0x08004abe
 8004474:	00000000 	.word	0x00000000
 8004478:	0800422b 	.word	0x0800422b
 800447c:	08004aba 	.word	0x08004aba

08004480 <_printf_common>:
 8004480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	4616      	mov	r6, r2
 8004486:	4698      	mov	r8, r3
 8004488:	688a      	ldr	r2, [r1, #8]
 800448a:	690b      	ldr	r3, [r1, #16]
 800448c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004490:	4293      	cmp	r3, r2
 8004492:	bfb8      	it	lt
 8004494:	4613      	movlt	r3, r2
 8004496:	6033      	str	r3, [r6, #0]
 8004498:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800449c:	4607      	mov	r7, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	b10a      	cbz	r2, 80044a6 <_printf_common+0x26>
 80044a2:	3301      	adds	r3, #1
 80044a4:	6033      	str	r3, [r6, #0]
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	0699      	lsls	r1, r3, #26
 80044aa:	bf42      	ittt	mi
 80044ac:	6833      	ldrmi	r3, [r6, #0]
 80044ae:	3302      	addmi	r3, #2
 80044b0:	6033      	strmi	r3, [r6, #0]
 80044b2:	6825      	ldr	r5, [r4, #0]
 80044b4:	f015 0506 	ands.w	r5, r5, #6
 80044b8:	d106      	bne.n	80044c8 <_printf_common+0x48>
 80044ba:	f104 0a19 	add.w	sl, r4, #25
 80044be:	68e3      	ldr	r3, [r4, #12]
 80044c0:	6832      	ldr	r2, [r6, #0]
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	42ab      	cmp	r3, r5
 80044c6:	dc26      	bgt.n	8004516 <_printf_common+0x96>
 80044c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044cc:	6822      	ldr	r2, [r4, #0]
 80044ce:	3b00      	subs	r3, #0
 80044d0:	bf18      	it	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	0692      	lsls	r2, r2, #26
 80044d6:	d42b      	bmi.n	8004530 <_printf_common+0xb0>
 80044d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044dc:	4641      	mov	r1, r8
 80044de:	4638      	mov	r0, r7
 80044e0:	47c8      	blx	r9
 80044e2:	3001      	adds	r0, #1
 80044e4:	d01e      	beq.n	8004524 <_printf_common+0xa4>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	6922      	ldr	r2, [r4, #16]
 80044ea:	f003 0306 	and.w	r3, r3, #6
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	bf02      	ittt	eq
 80044f2:	68e5      	ldreq	r5, [r4, #12]
 80044f4:	6833      	ldreq	r3, [r6, #0]
 80044f6:	1aed      	subeq	r5, r5, r3
 80044f8:	68a3      	ldr	r3, [r4, #8]
 80044fa:	bf0c      	ite	eq
 80044fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004500:	2500      	movne	r5, #0
 8004502:	4293      	cmp	r3, r2
 8004504:	bfc4      	itt	gt
 8004506:	1a9b      	subgt	r3, r3, r2
 8004508:	18ed      	addgt	r5, r5, r3
 800450a:	2600      	movs	r6, #0
 800450c:	341a      	adds	r4, #26
 800450e:	42b5      	cmp	r5, r6
 8004510:	d11a      	bne.n	8004548 <_printf_common+0xc8>
 8004512:	2000      	movs	r0, #0
 8004514:	e008      	b.n	8004528 <_printf_common+0xa8>
 8004516:	2301      	movs	r3, #1
 8004518:	4652      	mov	r2, sl
 800451a:	4641      	mov	r1, r8
 800451c:	4638      	mov	r0, r7
 800451e:	47c8      	blx	r9
 8004520:	3001      	adds	r0, #1
 8004522:	d103      	bne.n	800452c <_printf_common+0xac>
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452c:	3501      	adds	r5, #1
 800452e:	e7c6      	b.n	80044be <_printf_common+0x3e>
 8004530:	18e1      	adds	r1, r4, r3
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	2030      	movs	r0, #48	@ 0x30
 8004536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800453a:	4422      	add	r2, r4
 800453c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004544:	3302      	adds	r3, #2
 8004546:	e7c7      	b.n	80044d8 <_printf_common+0x58>
 8004548:	2301      	movs	r3, #1
 800454a:	4622      	mov	r2, r4
 800454c:	4641      	mov	r1, r8
 800454e:	4638      	mov	r0, r7
 8004550:	47c8      	blx	r9
 8004552:	3001      	adds	r0, #1
 8004554:	d0e6      	beq.n	8004524 <_printf_common+0xa4>
 8004556:	3601      	adds	r6, #1
 8004558:	e7d9      	b.n	800450e <_printf_common+0x8e>
	...

0800455c <_printf_i>:
 800455c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	7e0f      	ldrb	r7, [r1, #24]
 8004562:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004564:	2f78      	cmp	r7, #120	@ 0x78
 8004566:	4691      	mov	r9, r2
 8004568:	4680      	mov	r8, r0
 800456a:	460c      	mov	r4, r1
 800456c:	469a      	mov	sl, r3
 800456e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004572:	d807      	bhi.n	8004584 <_printf_i+0x28>
 8004574:	2f62      	cmp	r7, #98	@ 0x62
 8004576:	d80a      	bhi.n	800458e <_printf_i+0x32>
 8004578:	2f00      	cmp	r7, #0
 800457a:	f000 80d2 	beq.w	8004722 <_printf_i+0x1c6>
 800457e:	2f58      	cmp	r7, #88	@ 0x58
 8004580:	f000 80b9 	beq.w	80046f6 <_printf_i+0x19a>
 8004584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800458c:	e03a      	b.n	8004604 <_printf_i+0xa8>
 800458e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004592:	2b15      	cmp	r3, #21
 8004594:	d8f6      	bhi.n	8004584 <_printf_i+0x28>
 8004596:	a101      	add	r1, pc, #4	@ (adr r1, 800459c <_printf_i+0x40>)
 8004598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800459c:	080045f5 	.word	0x080045f5
 80045a0:	08004609 	.word	0x08004609
 80045a4:	08004585 	.word	0x08004585
 80045a8:	08004585 	.word	0x08004585
 80045ac:	08004585 	.word	0x08004585
 80045b0:	08004585 	.word	0x08004585
 80045b4:	08004609 	.word	0x08004609
 80045b8:	08004585 	.word	0x08004585
 80045bc:	08004585 	.word	0x08004585
 80045c0:	08004585 	.word	0x08004585
 80045c4:	08004585 	.word	0x08004585
 80045c8:	08004709 	.word	0x08004709
 80045cc:	08004633 	.word	0x08004633
 80045d0:	080046c3 	.word	0x080046c3
 80045d4:	08004585 	.word	0x08004585
 80045d8:	08004585 	.word	0x08004585
 80045dc:	0800472b 	.word	0x0800472b
 80045e0:	08004585 	.word	0x08004585
 80045e4:	08004633 	.word	0x08004633
 80045e8:	08004585 	.word	0x08004585
 80045ec:	08004585 	.word	0x08004585
 80045f0:	080046cb 	.word	0x080046cb
 80045f4:	6833      	ldr	r3, [r6, #0]
 80045f6:	1d1a      	adds	r2, r3, #4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6032      	str	r2, [r6, #0]
 80045fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004604:	2301      	movs	r3, #1
 8004606:	e09d      	b.n	8004744 <_printf_i+0x1e8>
 8004608:	6833      	ldr	r3, [r6, #0]
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	1d19      	adds	r1, r3, #4
 800460e:	6031      	str	r1, [r6, #0]
 8004610:	0606      	lsls	r6, r0, #24
 8004612:	d501      	bpl.n	8004618 <_printf_i+0xbc>
 8004614:	681d      	ldr	r5, [r3, #0]
 8004616:	e003      	b.n	8004620 <_printf_i+0xc4>
 8004618:	0645      	lsls	r5, r0, #25
 800461a:	d5fb      	bpl.n	8004614 <_printf_i+0xb8>
 800461c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004620:	2d00      	cmp	r5, #0
 8004622:	da03      	bge.n	800462c <_printf_i+0xd0>
 8004624:	232d      	movs	r3, #45	@ 0x2d
 8004626:	426d      	negs	r5, r5
 8004628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800462c:	4859      	ldr	r0, [pc, #356]	@ (8004794 <_printf_i+0x238>)
 800462e:	230a      	movs	r3, #10
 8004630:	e011      	b.n	8004656 <_printf_i+0xfa>
 8004632:	6821      	ldr	r1, [r4, #0]
 8004634:	6833      	ldr	r3, [r6, #0]
 8004636:	0608      	lsls	r0, r1, #24
 8004638:	f853 5b04 	ldr.w	r5, [r3], #4
 800463c:	d402      	bmi.n	8004644 <_printf_i+0xe8>
 800463e:	0649      	lsls	r1, r1, #25
 8004640:	bf48      	it	mi
 8004642:	b2ad      	uxthmi	r5, r5
 8004644:	2f6f      	cmp	r7, #111	@ 0x6f
 8004646:	4853      	ldr	r0, [pc, #332]	@ (8004794 <_printf_i+0x238>)
 8004648:	6033      	str	r3, [r6, #0]
 800464a:	bf14      	ite	ne
 800464c:	230a      	movne	r3, #10
 800464e:	2308      	moveq	r3, #8
 8004650:	2100      	movs	r1, #0
 8004652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004656:	6866      	ldr	r6, [r4, #4]
 8004658:	60a6      	str	r6, [r4, #8]
 800465a:	2e00      	cmp	r6, #0
 800465c:	bfa2      	ittt	ge
 800465e:	6821      	ldrge	r1, [r4, #0]
 8004660:	f021 0104 	bicge.w	r1, r1, #4
 8004664:	6021      	strge	r1, [r4, #0]
 8004666:	b90d      	cbnz	r5, 800466c <_printf_i+0x110>
 8004668:	2e00      	cmp	r6, #0
 800466a:	d04b      	beq.n	8004704 <_printf_i+0x1a8>
 800466c:	4616      	mov	r6, r2
 800466e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004672:	fb03 5711 	mls	r7, r3, r1, r5
 8004676:	5dc7      	ldrb	r7, [r0, r7]
 8004678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800467c:	462f      	mov	r7, r5
 800467e:	42bb      	cmp	r3, r7
 8004680:	460d      	mov	r5, r1
 8004682:	d9f4      	bls.n	800466e <_printf_i+0x112>
 8004684:	2b08      	cmp	r3, #8
 8004686:	d10b      	bne.n	80046a0 <_printf_i+0x144>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	07df      	lsls	r7, r3, #31
 800468c:	d508      	bpl.n	80046a0 <_printf_i+0x144>
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	6861      	ldr	r1, [r4, #4]
 8004692:	4299      	cmp	r1, r3
 8004694:	bfde      	ittt	le
 8004696:	2330      	movle	r3, #48	@ 0x30
 8004698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800469c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046a0:	1b92      	subs	r2, r2, r6
 80046a2:	6122      	str	r2, [r4, #16]
 80046a4:	f8cd a000 	str.w	sl, [sp]
 80046a8:	464b      	mov	r3, r9
 80046aa:	aa03      	add	r2, sp, #12
 80046ac:	4621      	mov	r1, r4
 80046ae:	4640      	mov	r0, r8
 80046b0:	f7ff fee6 	bl	8004480 <_printf_common>
 80046b4:	3001      	adds	r0, #1
 80046b6:	d14a      	bne.n	800474e <_printf_i+0x1f2>
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	b004      	add	sp, #16
 80046be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	f043 0320 	orr.w	r3, r3, #32
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	4833      	ldr	r0, [pc, #204]	@ (8004798 <_printf_i+0x23c>)
 80046cc:	2778      	movs	r7, #120	@ 0x78
 80046ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	6831      	ldr	r1, [r6, #0]
 80046d6:	061f      	lsls	r7, r3, #24
 80046d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80046dc:	d402      	bmi.n	80046e4 <_printf_i+0x188>
 80046de:	065f      	lsls	r7, r3, #25
 80046e0:	bf48      	it	mi
 80046e2:	b2ad      	uxthmi	r5, r5
 80046e4:	6031      	str	r1, [r6, #0]
 80046e6:	07d9      	lsls	r1, r3, #31
 80046e8:	bf44      	itt	mi
 80046ea:	f043 0320 	orrmi.w	r3, r3, #32
 80046ee:	6023      	strmi	r3, [r4, #0]
 80046f0:	b11d      	cbz	r5, 80046fa <_printf_i+0x19e>
 80046f2:	2310      	movs	r3, #16
 80046f4:	e7ac      	b.n	8004650 <_printf_i+0xf4>
 80046f6:	4827      	ldr	r0, [pc, #156]	@ (8004794 <_printf_i+0x238>)
 80046f8:	e7e9      	b.n	80046ce <_printf_i+0x172>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	f023 0320 	bic.w	r3, r3, #32
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	e7f6      	b.n	80046f2 <_printf_i+0x196>
 8004704:	4616      	mov	r6, r2
 8004706:	e7bd      	b.n	8004684 <_printf_i+0x128>
 8004708:	6833      	ldr	r3, [r6, #0]
 800470a:	6825      	ldr	r5, [r4, #0]
 800470c:	6961      	ldr	r1, [r4, #20]
 800470e:	1d18      	adds	r0, r3, #4
 8004710:	6030      	str	r0, [r6, #0]
 8004712:	062e      	lsls	r6, r5, #24
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	d501      	bpl.n	800471c <_printf_i+0x1c0>
 8004718:	6019      	str	r1, [r3, #0]
 800471a:	e002      	b.n	8004722 <_printf_i+0x1c6>
 800471c:	0668      	lsls	r0, r5, #25
 800471e:	d5fb      	bpl.n	8004718 <_printf_i+0x1bc>
 8004720:	8019      	strh	r1, [r3, #0]
 8004722:	2300      	movs	r3, #0
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	4616      	mov	r6, r2
 8004728:	e7bc      	b.n	80046a4 <_printf_i+0x148>
 800472a:	6833      	ldr	r3, [r6, #0]
 800472c:	1d1a      	adds	r2, r3, #4
 800472e:	6032      	str	r2, [r6, #0]
 8004730:	681e      	ldr	r6, [r3, #0]
 8004732:	6862      	ldr	r2, [r4, #4]
 8004734:	2100      	movs	r1, #0
 8004736:	4630      	mov	r0, r6
 8004738:	f7fb fd52 	bl	80001e0 <memchr>
 800473c:	b108      	cbz	r0, 8004742 <_printf_i+0x1e6>
 800473e:	1b80      	subs	r0, r0, r6
 8004740:	6060      	str	r0, [r4, #4]
 8004742:	6863      	ldr	r3, [r4, #4]
 8004744:	6123      	str	r3, [r4, #16]
 8004746:	2300      	movs	r3, #0
 8004748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800474c:	e7aa      	b.n	80046a4 <_printf_i+0x148>
 800474e:	6923      	ldr	r3, [r4, #16]
 8004750:	4632      	mov	r2, r6
 8004752:	4649      	mov	r1, r9
 8004754:	4640      	mov	r0, r8
 8004756:	47d0      	blx	sl
 8004758:	3001      	adds	r0, #1
 800475a:	d0ad      	beq.n	80046b8 <_printf_i+0x15c>
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	079b      	lsls	r3, r3, #30
 8004760:	d413      	bmi.n	800478a <_printf_i+0x22e>
 8004762:	68e0      	ldr	r0, [r4, #12]
 8004764:	9b03      	ldr	r3, [sp, #12]
 8004766:	4298      	cmp	r0, r3
 8004768:	bfb8      	it	lt
 800476a:	4618      	movlt	r0, r3
 800476c:	e7a6      	b.n	80046bc <_printf_i+0x160>
 800476e:	2301      	movs	r3, #1
 8004770:	4632      	mov	r2, r6
 8004772:	4649      	mov	r1, r9
 8004774:	4640      	mov	r0, r8
 8004776:	47d0      	blx	sl
 8004778:	3001      	adds	r0, #1
 800477a:	d09d      	beq.n	80046b8 <_printf_i+0x15c>
 800477c:	3501      	adds	r5, #1
 800477e:	68e3      	ldr	r3, [r4, #12]
 8004780:	9903      	ldr	r1, [sp, #12]
 8004782:	1a5b      	subs	r3, r3, r1
 8004784:	42ab      	cmp	r3, r5
 8004786:	dcf2      	bgt.n	800476e <_printf_i+0x212>
 8004788:	e7eb      	b.n	8004762 <_printf_i+0x206>
 800478a:	2500      	movs	r5, #0
 800478c:	f104 0619 	add.w	r6, r4, #25
 8004790:	e7f5      	b.n	800477e <_printf_i+0x222>
 8004792:	bf00      	nop
 8004794:	08004ac5 	.word	0x08004ac5
 8004798:	08004ad6 	.word	0x08004ad6

0800479c <__sflush_r>:
 800479c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a4:	0716      	lsls	r6, r2, #28
 80047a6:	4605      	mov	r5, r0
 80047a8:	460c      	mov	r4, r1
 80047aa:	d454      	bmi.n	8004856 <__sflush_r+0xba>
 80047ac:	684b      	ldr	r3, [r1, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	dc02      	bgt.n	80047b8 <__sflush_r+0x1c>
 80047b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dd48      	ble.n	800484a <__sflush_r+0xae>
 80047b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047ba:	2e00      	cmp	r6, #0
 80047bc:	d045      	beq.n	800484a <__sflush_r+0xae>
 80047be:	2300      	movs	r3, #0
 80047c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047c4:	682f      	ldr	r7, [r5, #0]
 80047c6:	6a21      	ldr	r1, [r4, #32]
 80047c8:	602b      	str	r3, [r5, #0]
 80047ca:	d030      	beq.n	800482e <__sflush_r+0x92>
 80047cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	0759      	lsls	r1, r3, #29
 80047d2:	d505      	bpl.n	80047e0 <__sflush_r+0x44>
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	1ad2      	subs	r2, r2, r3
 80047d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047da:	b10b      	cbz	r3, 80047e0 <__sflush_r+0x44>
 80047dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047de:	1ad2      	subs	r2, r2, r3
 80047e0:	2300      	movs	r3, #0
 80047e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047e4:	6a21      	ldr	r1, [r4, #32]
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b0      	blx	r6
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	d106      	bne.n	80047fe <__sflush_r+0x62>
 80047f0:	6829      	ldr	r1, [r5, #0]
 80047f2:	291d      	cmp	r1, #29
 80047f4:	d82b      	bhi.n	800484e <__sflush_r+0xb2>
 80047f6:	4a2a      	ldr	r2, [pc, #168]	@ (80048a0 <__sflush_r+0x104>)
 80047f8:	410a      	asrs	r2, r1
 80047fa:	07d6      	lsls	r6, r2, #31
 80047fc:	d427      	bmi.n	800484e <__sflush_r+0xb2>
 80047fe:	2200      	movs	r2, #0
 8004800:	6062      	str	r2, [r4, #4]
 8004802:	04d9      	lsls	r1, r3, #19
 8004804:	6922      	ldr	r2, [r4, #16]
 8004806:	6022      	str	r2, [r4, #0]
 8004808:	d504      	bpl.n	8004814 <__sflush_r+0x78>
 800480a:	1c42      	adds	r2, r0, #1
 800480c:	d101      	bne.n	8004812 <__sflush_r+0x76>
 800480e:	682b      	ldr	r3, [r5, #0]
 8004810:	b903      	cbnz	r3, 8004814 <__sflush_r+0x78>
 8004812:	6560      	str	r0, [r4, #84]	@ 0x54
 8004814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004816:	602f      	str	r7, [r5, #0]
 8004818:	b1b9      	cbz	r1, 800484a <__sflush_r+0xae>
 800481a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800481e:	4299      	cmp	r1, r3
 8004820:	d002      	beq.n	8004828 <__sflush_r+0x8c>
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff fbf2 	bl	800400c <_free_r>
 8004828:	2300      	movs	r3, #0
 800482a:	6363      	str	r3, [r4, #52]	@ 0x34
 800482c:	e00d      	b.n	800484a <__sflush_r+0xae>
 800482e:	2301      	movs	r3, #1
 8004830:	4628      	mov	r0, r5
 8004832:	47b0      	blx	r6
 8004834:	4602      	mov	r2, r0
 8004836:	1c50      	adds	r0, r2, #1
 8004838:	d1c9      	bne.n	80047ce <__sflush_r+0x32>
 800483a:	682b      	ldr	r3, [r5, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0c6      	beq.n	80047ce <__sflush_r+0x32>
 8004840:	2b1d      	cmp	r3, #29
 8004842:	d001      	beq.n	8004848 <__sflush_r+0xac>
 8004844:	2b16      	cmp	r3, #22
 8004846:	d11e      	bne.n	8004886 <__sflush_r+0xea>
 8004848:	602f      	str	r7, [r5, #0]
 800484a:	2000      	movs	r0, #0
 800484c:	e022      	b.n	8004894 <__sflush_r+0xf8>
 800484e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004852:	b21b      	sxth	r3, r3
 8004854:	e01b      	b.n	800488e <__sflush_r+0xf2>
 8004856:	690f      	ldr	r7, [r1, #16]
 8004858:	2f00      	cmp	r7, #0
 800485a:	d0f6      	beq.n	800484a <__sflush_r+0xae>
 800485c:	0793      	lsls	r3, r2, #30
 800485e:	680e      	ldr	r6, [r1, #0]
 8004860:	bf08      	it	eq
 8004862:	694b      	ldreq	r3, [r1, #20]
 8004864:	600f      	str	r7, [r1, #0]
 8004866:	bf18      	it	ne
 8004868:	2300      	movne	r3, #0
 800486a:	eba6 0807 	sub.w	r8, r6, r7
 800486e:	608b      	str	r3, [r1, #8]
 8004870:	f1b8 0f00 	cmp.w	r8, #0
 8004874:	dde9      	ble.n	800484a <__sflush_r+0xae>
 8004876:	6a21      	ldr	r1, [r4, #32]
 8004878:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800487a:	4643      	mov	r3, r8
 800487c:	463a      	mov	r2, r7
 800487e:	4628      	mov	r0, r5
 8004880:	47b0      	blx	r6
 8004882:	2800      	cmp	r0, #0
 8004884:	dc08      	bgt.n	8004898 <__sflush_r+0xfc>
 8004886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800488a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800488e:	81a3      	strh	r3, [r4, #12]
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	4407      	add	r7, r0
 800489a:	eba8 0800 	sub.w	r8, r8, r0
 800489e:	e7e7      	b.n	8004870 <__sflush_r+0xd4>
 80048a0:	dfbffffe 	.word	0xdfbffffe

080048a4 <_fflush_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	690b      	ldr	r3, [r1, #16]
 80048a8:	4605      	mov	r5, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	b913      	cbnz	r3, 80048b4 <_fflush_r+0x10>
 80048ae:	2500      	movs	r5, #0
 80048b0:	4628      	mov	r0, r5
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	b118      	cbz	r0, 80048be <_fflush_r+0x1a>
 80048b6:	6a03      	ldr	r3, [r0, #32]
 80048b8:	b90b      	cbnz	r3, 80048be <_fflush_r+0x1a>
 80048ba:	f7ff f9ad 	bl	8003c18 <__sinit>
 80048be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f3      	beq.n	80048ae <_fflush_r+0xa>
 80048c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048c8:	07d0      	lsls	r0, r2, #31
 80048ca:	d404      	bmi.n	80048d6 <_fflush_r+0x32>
 80048cc:	0599      	lsls	r1, r3, #22
 80048ce:	d402      	bmi.n	80048d6 <_fflush_r+0x32>
 80048d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048d2:	f7ff fb98 	bl	8004006 <__retarget_lock_acquire_recursive>
 80048d6:	4628      	mov	r0, r5
 80048d8:	4621      	mov	r1, r4
 80048da:	f7ff ff5f 	bl	800479c <__sflush_r>
 80048de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048e0:	07da      	lsls	r2, r3, #31
 80048e2:	4605      	mov	r5, r0
 80048e4:	d4e4      	bmi.n	80048b0 <_fflush_r+0xc>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	059b      	lsls	r3, r3, #22
 80048ea:	d4e1      	bmi.n	80048b0 <_fflush_r+0xc>
 80048ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048ee:	f7ff fb8b 	bl	8004008 <__retarget_lock_release_recursive>
 80048f2:	e7dd      	b.n	80048b0 <_fflush_r+0xc>

080048f4 <__swhatbuf_r>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	460c      	mov	r4, r1
 80048f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048fc:	2900      	cmp	r1, #0
 80048fe:	b096      	sub	sp, #88	@ 0x58
 8004900:	4615      	mov	r5, r2
 8004902:	461e      	mov	r6, r3
 8004904:	da0d      	bge.n	8004922 <__swhatbuf_r+0x2e>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	bf14      	ite	ne
 8004912:	2340      	movne	r3, #64	@ 0x40
 8004914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004918:	2000      	movs	r0, #0
 800491a:	6031      	str	r1, [r6, #0]
 800491c:	602b      	str	r3, [r5, #0]
 800491e:	b016      	add	sp, #88	@ 0x58
 8004920:	bd70      	pop	{r4, r5, r6, pc}
 8004922:	466a      	mov	r2, sp
 8004924:	f000 f848 	bl	80049b8 <_fstat_r>
 8004928:	2800      	cmp	r0, #0
 800492a:	dbec      	blt.n	8004906 <__swhatbuf_r+0x12>
 800492c:	9901      	ldr	r1, [sp, #4]
 800492e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004936:	4259      	negs	r1, r3
 8004938:	4159      	adcs	r1, r3
 800493a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800493e:	e7eb      	b.n	8004918 <__swhatbuf_r+0x24>

08004940 <__smakebuf_r>:
 8004940:	898b      	ldrh	r3, [r1, #12]
 8004942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004944:	079d      	lsls	r5, r3, #30
 8004946:	4606      	mov	r6, r0
 8004948:	460c      	mov	r4, r1
 800494a:	d507      	bpl.n	800495c <__smakebuf_r+0x1c>
 800494c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	2301      	movs	r3, #1
 8004956:	6163      	str	r3, [r4, #20]
 8004958:	b003      	add	sp, #12
 800495a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800495c:	ab01      	add	r3, sp, #4
 800495e:	466a      	mov	r2, sp
 8004960:	f7ff ffc8 	bl	80048f4 <__swhatbuf_r>
 8004964:	9f00      	ldr	r7, [sp, #0]
 8004966:	4605      	mov	r5, r0
 8004968:	4639      	mov	r1, r7
 800496a:	4630      	mov	r0, r6
 800496c:	f7ff fbba 	bl	80040e4 <_malloc_r>
 8004970:	b948      	cbnz	r0, 8004986 <__smakebuf_r+0x46>
 8004972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004976:	059a      	lsls	r2, r3, #22
 8004978:	d4ee      	bmi.n	8004958 <__smakebuf_r+0x18>
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	f043 0302 	orr.w	r3, r3, #2
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	e7e2      	b.n	800494c <__smakebuf_r+0xc>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	6020      	str	r0, [r4, #0]
 800498a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	9b01      	ldr	r3, [sp, #4]
 8004992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004996:	b15b      	cbz	r3, 80049b0 <__smakebuf_r+0x70>
 8004998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800499c:	4630      	mov	r0, r6
 800499e:	f000 f81d 	bl	80049dc <_isatty_r>
 80049a2:	b128      	cbz	r0, 80049b0 <__smakebuf_r+0x70>
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	431d      	orrs	r5, r3
 80049b4:	81a5      	strh	r5, [r4, #12]
 80049b6:	e7cf      	b.n	8004958 <__smakebuf_r+0x18>

080049b8 <_fstat_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4d07      	ldr	r5, [pc, #28]	@ (80049d8 <_fstat_r+0x20>)
 80049bc:	2300      	movs	r3, #0
 80049be:	4604      	mov	r4, r0
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	602b      	str	r3, [r5, #0]
 80049c6:	f7fc f9aa 	bl	8000d1e <_fstat>
 80049ca:	1c43      	adds	r3, r0, #1
 80049cc:	d102      	bne.n	80049d4 <_fstat_r+0x1c>
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	b103      	cbz	r3, 80049d4 <_fstat_r+0x1c>
 80049d2:	6023      	str	r3, [r4, #0]
 80049d4:	bd38      	pop	{r3, r4, r5, pc}
 80049d6:	bf00      	nop
 80049d8:	200012a0 	.word	0x200012a0

080049dc <_isatty_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4d06      	ldr	r5, [pc, #24]	@ (80049f8 <_isatty_r+0x1c>)
 80049e0:	2300      	movs	r3, #0
 80049e2:	4604      	mov	r4, r0
 80049e4:	4608      	mov	r0, r1
 80049e6:	602b      	str	r3, [r5, #0]
 80049e8:	f7fc f9a9 	bl	8000d3e <_isatty>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_isatty_r+0x1a>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_isatty_r+0x1a>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	200012a0 	.word	0x200012a0

080049fc <_sbrk_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4d06      	ldr	r5, [pc, #24]	@ (8004a18 <_sbrk_r+0x1c>)
 8004a00:	2300      	movs	r3, #0
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	602b      	str	r3, [r5, #0]
 8004a08:	f7fc f9b2 	bl	8000d70 <_sbrk>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_sbrk_r+0x1a>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_sbrk_r+0x1a>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	200012a0 	.word	0x200012a0

08004a1c <_init>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	bf00      	nop
 8004a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a22:	bc08      	pop	{r3}
 8004a24:	469e      	mov	lr, r3
 8004a26:	4770      	bx	lr

08004a28 <_fini>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr
