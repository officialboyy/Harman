
test012-RTOS-Sema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007444  08007444  00008444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007574  08007574  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007574  08007574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800757c  0800757c  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800757c  0800757c  0000857c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007580  08007580  00008580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007584  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a0  20000070  080075f4  00009070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004310  080075f4  00009310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160ec  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a7  00000000  00000000  0001f18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00022638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6b  00000000  00000000  000238d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192ea  00000000  00000000  00024743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001525c  00000000  00000000  0003da2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000990d3  00000000  00000000  00052c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebd5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000577c  00000000  00000000  000ebda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800742c 	.word	0x0800742c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800742c 	.word	0x0800742c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4a07      	ldr	r2, [pc, #28]	@ (8000bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <vApplicationGetIdleTaskMemory+0x30>)
 8000ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	2000008c 	.word	0x2000008c
 8000bbc:	2000012c 	.word	0x2000012c

08000bc0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int IsHold = 1; // Task flow stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == D5_Pin)
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	2b10      	cmp	r3, #16
 8000bce:	d112      	bne.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x36>
	{
		IsHold = !IsHold;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bf0c      	ite	eq
 8000bd8:	2301      	moveq	r3, #1
 8000bda:	2300      	movne	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x40>)
 8000be2:	601a      	str	r2, [r3, #0]
		//IsHold = (IsHold) ? 0 : 1;
		//if(IsHold == 1) IsHold = 0; else IsHold = 1;
		if(IsHold) osSemaphoreRelease(myBinarySem01Handle);
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x36>
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x44>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 ff7f 	bl	8003af4 <osSemaphoreRelease>
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000000 	.word	0x20000000
 8000c04:	200003c8 	.word	0x200003c8

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	b098      	sub	sp, #96	@ 0x60
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f000 fe03 	bl	8001818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f863 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 f941 	bl	8000e9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c1a:	f000 f915 	bl	8000e48 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c1e:	f000 f8c7 	bl	8000db0 <MX_TIM2_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000c22:	2300      	movs	r3, #0
 8000c24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c26:	2300      	movs	r3, #0
 8000c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000c2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 fede 	bl	80039f2 <osSemaphoreCreate>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a20      	ldr	r2, [pc, #128]	@ (8000cbc <main+0xb4>)
 8000c3a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 8000c3c:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <main+0xb8>)
 8000c3e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000c42:	461d      	mov	r5, r3
 8000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000c50:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fe6b 	bl	8003932 <osThreadCreate>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <main+0xbc>)
 8000c60:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 8000c62:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <main+0xc0>)
 8000c64:	f107 0420 	add.w	r4, r7, #32
 8000c68:	461d      	mov	r5, r3
 8000c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fe58 	bl	8003932 <osThreadCreate>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a11      	ldr	r2, [pc, #68]	@ (8000ccc <main+0xc4>)
 8000c86:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityLow, 0, 128);
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <main+0xc8>)
 8000c8a:	1d3c      	adds	r4, r7, #4
 8000c8c:	461d      	mov	r5, r3
 8000c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fe47 	bl	8003932 <osThreadCreate>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd4 <main+0xcc>)
 8000ca8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ProgramStart();
 8000caa:	f000 faef 	bl	800128c <ProgramStart>
  HAL_TIM_Base_Start(&htim2);
 8000cae:	480a      	ldr	r0, [pc, #40]	@ (8000cd8 <main+0xd0>)
 8000cb0:	f001 fdbe 	bl	8002830 <HAL_TIM_Base_Start>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cb4:	f002 fe36 	bl	8003924 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <main+0xb0>
 8000cbc:	200003c8 	.word	0x200003c8
 8000cc0:	08007450 	.word	0x08007450
 8000cc4:	200003bc 	.word	0x200003bc
 8000cc8:	08007478 	.word	0x08007478
 8000ccc:	200003c0 	.word	0x200003c0
 8000cd0:	080074a0 	.word	0x080074a0
 8000cd4:	200003c4 	.word	0x200003c4
 8000cd8:	2000032c 	.word	0x2000032c

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	@ 0x50
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2230      	movs	r2, #48	@ 0x30
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f005 fc0e 	bl	800650c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b28      	ldr	r3, [pc, #160]	@ (8000da8 <SystemClock_Config+0xcc>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	4a27      	ldr	r2, [pc, #156]	@ (8000da8 <SystemClock_Config+0xcc>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d10:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <SystemClock_Config+0xcc>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <SystemClock_Config+0xd0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a21      	ldr	r2, [pc, #132]	@ (8000dac <SystemClock_Config+0xd0>)
 8000d26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <SystemClock_Config+0xd0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d40:	2310      	movs	r3, #16
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	2302      	movs	r3, #2
 8000d46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d50:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d56:	2304      	movs	r3, #4
 8000d58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 f84a 	bl	8001dfc <HAL_RCC_OscConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d6e:	f000 fa51 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d72:	230f      	movs	r3, #15
 8000d74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d76:	2302      	movs	r3, #2
 8000d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 faac 	bl	80022ec <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d9a:	f000 fa3b 	bl	8001214 <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3750      	adds	r7, #80	@ 0x50
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40007000 	.word	0x40007000

08000db0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <MX_TIM2_Init+0x94>)
 8000dce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e44 <MX_TIM2_Init+0x94>)
 8000dd6:	2253      	movs	r2, #83	@ 0x53
 8000dd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_TIM2_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <MX_TIM2_Init+0x94>)
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295
 8000de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <MX_TIM2_Init+0x94>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <MX_TIM2_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df4:	4813      	ldr	r0, [pc, #76]	@ (8000e44 <MX_TIM2_Init+0x94>)
 8000df6:	f001 fccb 	bl	8002790 <HAL_TIM_Base_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e00:	f000 fa08 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <MX_TIM2_Init+0x94>)
 8000e12:	f001 feb9 	bl	8002b88 <HAL_TIM_ConfigClockSource>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e1c:	f000 f9fa 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_TIM2_Init+0x94>)
 8000e2e:	f002 f8c1 	bl	8002fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e38:	f000 f9ec 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000032c 	.word	0x2000032c

08000e48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <MX_USART2_UART_Init+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e80:	f002 f91a 	bl	80030b8 <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e8a:	f000 f9c3 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000374 	.word	0x20000374
 8000e98:	40004400 	.word	0x40004400

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b49      	ldr	r3, [pc, #292]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a48      	ldr	r2, [pc, #288]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b46      	ldr	r3, [pc, #280]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b42      	ldr	r3, [pc, #264]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a41      	ldr	r2, [pc, #260]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b3f      	ldr	r3, [pc, #252]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b3b      	ldr	r3, [pc, #236]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a3a      	ldr	r2, [pc, #232]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b38      	ldr	r3, [pc, #224]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a33      	ldr	r2, [pc, #204]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b31      	ldr	r3, [pc, #196]	@ (8000fdc <MX_GPIO_Init+0x140>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG_Pin|D2_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 8000f28:	482d      	ldr	r0, [pc, #180]	@ (8000fe0 <MX_GPIO_Init+0x144>)
 8000f2a:	f000 ff35 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2128      	movs	r1, #40	@ 0x28
 8000f32:	482c      	ldr	r0, [pc, #176]	@ (8000fe4 <MX_GPIO_Init+0x148>)
 8000f34:	f000 ff30 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4826      	ldr	r0, [pc, #152]	@ (8000fe8 <MX_GPIO_Init+0x14c>)
 8000f50:	f000 fd86 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TRIG_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIG_Pin|D2_Pin;
 8000f54:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481c      	ldr	r0, [pc, #112]	@ (8000fe0 <MX_GPIO_Init+0x144>)
 8000f6e:	f000 fd77 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8000f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4817      	ldr	r0, [pc, #92]	@ (8000fe4 <MX_GPIO_Init+0x148>)
 8000f88:	f000 fd6a 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin;
 8000f8c:	2328      	movs	r3, #40	@ 0x28
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4810      	ldr	r0, [pc, #64]	@ (8000fe4 <MX_GPIO_Init+0x148>)
 8000fa4:	f000 fd5c 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : D5_Pin */
  GPIO_InitStruct.Pin = D5_Pin;
 8000fa8:	2310      	movs	r3, #16
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4809      	ldr	r0, [pc, #36]	@ (8000fe4 <MX_GPIO_Init+0x148>)
 8000fbe:	f000 fd4f 	bl	8001a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	f000 fd20 	bl	8001a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f000 fd39 	bl	8001a44 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40020800 	.word	0x40020800

08000fec <StartTask01>:
  * @retval None
  */
double dist[10];
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  int tn = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
  while(1)//for(;;)  //
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <StartTask01+0x4c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fd2a 	bl	8003a58 <osSemaphoreWait>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d111      	bne.n	800102e <StartTask01+0x42>
	  {
		  //HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
		  //HAL_Delay(200);
		  //printf("Task01 process --- %d\r\n", tn++);
		  dist[0] = usDist();
 800100a:	f000 f991 	bl	8001330 <usDist>
 800100e:	eeb0 7a40 	vmov.f32	s14, s0
 8001012:	eef0 7a60 	vmov.f32	s15, s1
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <StartTask01+0x50>)
 8001018:	ed83 7b00 	vstr	d7, [r3]
		  if(IsHold) osSemaphoreRelease(myBinarySem01Handle);
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <StartTask01+0x54>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <StartTask01+0x42>
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <StartTask01+0x4c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fd63 	bl	8003af4 <osSemaphoreRelease>
	  }
	  osDelay(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f002 fccb 	bl	80039ca <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001034:	e7e0      	b.n	8000ff8 <StartTask01+0xc>
 8001036:	bf00      	nop
 8001038:	200003c8 	.word	0x200003c8
 800103c:	200003d0 	.word	0x200003d0
 8001040:	20000000 	.word	0x20000000

08001044 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b0a2      	sub	sp, #136	@ 0x88
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  int tn = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char dum[100];
  while(1)//for(;;)  //
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001052:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <StartTask02+0xd0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fcfd 	bl	8003a58 <osSemaphoreWait>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d152      	bne.n	800110a <StartTask02+0xc6>
	  {
		  //HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
		  //HAL_Delay(200);
		  //printf("Task02 process ----- %d\r\n", tn++);
		  double d = dist[0];
 8001064:	4b2c      	ldr	r3, [pc, #176]	@ (8001118 <StartTask02+0xd4>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		  int m = d;
 800106e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001072:	f7ff fbeb 	bl	800084c <__aeabi_d2iz>
 8001076:	4603      	mov	r3, r0
 8001078:	677b      	str	r3, [r7, #116]	@ 0x74
		  int cm = (d * 100) - (m * 100);
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b27      	ldr	r3, [pc, #156]	@ (800111c <StartTask02+0xd8>)
 8001080:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001084:	f7ff f8fc 	bl	8000280 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4614      	mov	r4, r2
 800108e:	461d      	mov	r5, r3
 8001090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001092:	2264      	movs	r2, #100	@ 0x64
 8001094:	fb02 f303 	mul.w	r3, r2, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fb6d 	bl	8000778 <__aeabi_i2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4620      	mov	r0, r4
 80010a4:	4629      	mov	r1, r5
 80010a6:	f7ff fa19 	bl	80004dc <__aeabi_dsub>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	f7ff fbcb 	bl	800084c <__aeabi_d2iz>
 80010b6:	4603      	mov	r3, r0
 80010b8:	673b      	str	r3, [r7, #112]	@ 0x70
		  Outs("\033[10;30H");
 80010ba:	4819      	ldr	r0, [pc, #100]	@ (8001120 <StartTask02+0xdc>)
 80010bc:	f000 f8c2 	bl	8001244 <Outs>
		  //if(m) printf("%3d m %2d cm ", m, cm); else printf("%8d cm", cm);
		  if(m)
 80010c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00c      	beq.n	80010e0 <StartTask02+0x9c>
		  {
			  sprintf(dum, "%3d m %2d cm", m, cm); Outs(dum);
 80010c6:	f107 000c 	add.w	r0, r7, #12
 80010ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80010ce:	4915      	ldr	r1, [pc, #84]	@ (8001124 <StartTask02+0xe0>)
 80010d0:	f005 f924 	bl	800631c <siprintf>
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f8b3 	bl	8001244 <Outs>
 80010de:	e00b      	b.n	80010f8 <StartTask02+0xb4>
		  }
		  else
		  {
			  sprintf(dum, "%8d cm", cm); Outs(dum);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80010e6:	4910      	ldr	r1, [pc, #64]	@ (8001128 <StartTask02+0xe4>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 f917 	bl	800631c <siprintf>
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f8a6 	bl	8001244 <Outs>
		  }

		  if(IsHold) osSemaphoreRelease(myBinarySem01Handle);
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <StartTask02+0xe8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <StartTask02+0xc6>
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <StartTask02+0xd0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fcf5 	bl	8003af4 <osSemaphoreRelease>
	  }
	  osDelay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f002 fc5d 	bl	80039ca <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001110:	e79f      	b.n	8001052 <StartTask02+0xe>
 8001112:	bf00      	nop
 8001114:	200003c8 	.word	0x200003c8
 8001118:	200003d0 	.word	0x200003d0
 800111c:	40590000 	.word	0x40590000
 8001120:	080074bc 	.word	0x080074bc
 8001124:	080074c8 	.word	0x080074c8
 8001128:	080074d8 	.word	0x080074d8
 800112c:	20000000 	.word	0x20000000

08001130 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  int tn = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  while(1)//for(;;)  //
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 800113c:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <StartTask03+0xa8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fc88 	bl	8003a58 <osSemaphoreWait>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d140      	bne.n	80011d0 <StartTask03+0xa0>
	  {
		  //HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
		  //HAL_Delay(200);
		  //printf("           \r\n");

		  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001154:	4821      	ldr	r0, [pc, #132]	@ (80011dc <StartTask03+0xac>)
 8001156:	f000 fe1f 	bl	8001d98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2108      	movs	r1, #8
 800115e:	4820      	ldr	r0, [pc, #128]	@ (80011e0 <StartTask03+0xb0>)
 8001160:	f000 fe1a 	bl	8001d98 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2120      	movs	r1, #32
 8001168:	481d      	ldr	r0, [pc, #116]	@ (80011e0 <StartTask03+0xb0>)
 800116a:	f000 fe15 	bl	8001d98 <HAL_GPIO_WritePin>
		  int cm = dist[0] * 100;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <StartTask03+0xb4>)
 8001170:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <StartTask03+0xb8>)
 800117a:	f7ff f881 	bl	8000280 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fb61 	bl	800084c <__aeabi_d2iz>
 800118a:	4603      	mov	r3, r0
 800118c:	60bb      	str	r3, [r7, #8]

		  if(cm > 50)		 HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b32      	cmp	r3, #50	@ 0x32
 8001192:	dd05      	ble.n	80011a0 <StartTask03+0x70>
 8001194:	2201      	movs	r2, #1
 8001196:	2108      	movs	r1, #8
 8001198:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <StartTask03+0xb0>)
 800119a:	f000 fdfd 	bl	8001d98 <HAL_GPIO_WritePin>
 800119e:	e00e      	b.n	80011be <StartTask03+0x8e>
		  else if(cm > 30)	 HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b1e      	cmp	r3, #30
 80011a4:	dd05      	ble.n	80011b2 <StartTask03+0x82>
 80011a6:	2201      	movs	r2, #1
 80011a8:	2120      	movs	r1, #32
 80011aa:	480d      	ldr	r0, [pc, #52]	@ (80011e0 <StartTask03+0xb0>)
 80011ac:	f000 fdf4 	bl	8001d98 <HAL_GPIO_WritePin>
 80011b0:	e005      	b.n	80011be <StartTask03+0x8e>
		  else				 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <StartTask03+0xac>)
 80011ba:	f000 fded 	bl	8001d98 <HAL_GPIO_WritePin>

		  if(IsHold) osSemaphoreRelease(myBinarySem01Handle);
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <StartTask03+0xbc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <StartTask03+0xa0>
 80011c6:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <StartTask03+0xa8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fc92 	bl	8003af4 <osSemaphoreRelease>
	  }
	  osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f002 fbfa 	bl	80039ca <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80011d6:	e7b1      	b.n	800113c <StartTask03+0xc>
 80011d8:	200003c8 	.word	0x200003c8
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	200003d0 	.word	0x200003d0
 80011e8:	40590000 	.word	0x40590000
 80011ec:	20000000 	.word	0x20000000

080011f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001202:	f000 fb2b 	bl	800185c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40014000 	.word	0x40014000

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8001228:	1d39      	adds	r1, r7, #4
 800122a:	230a      	movs	r3, #10
 800122c:	2201      	movs	r2, #1
 800122e:	4804      	ldr	r0, [pc, #16]	@ (8001240 <__io_putchar+0x20>)
 8001230:	f001 ff92 	bl	8003158 <HAL_UART_Transmit>
	return ch;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000374 	.word	0x20000374

08001244 <Outs>:

void Outs(char *s)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	//while(1)
	//{
	//	if(*s != 0) { __io_putchar(*s); s++; }
	//	else break;
	//}
	while(*s) (*s != '\r') ? __io_putchar(*s++) :
 800124c:	e015      	b.n	800127a <Outs+0x36>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b0d      	cmp	r3, #13
 8001254:	d007      	beq.n	8001266 <Outs+0x22>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ffde 	bl	8001220 <__io_putchar>
 8001264:	e009      	b.n	800127a <Outs+0x36>
			                (__io_putchar(*s++),__io_putchar('\n'));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffd6 	bl	8001220 <__io_putchar>
 8001274:	200a      	movs	r0, #10
 8001276:	f7ff ffd3 	bl	8001220 <__io_putchar>
	while(*s) (*s != '\r') ? __io_putchar(*s++) :
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1e5      	bne.n	800124e <Outs+0xa>
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <ProgramStart>:
	//HAL_ADC_PollForConversion(&hadc1, 10);
	//return HAL_ADC_GetValue(&hadc1);
}

void ProgramStart()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	printf("\033[2J");	// screen clear
 8001290:	4808      	ldr	r0, [pc, #32]	@ (80012b4 <ProgramStart+0x28>)
 8001292:	f004 ffd3 	bl	800623c <iprintf>
	printf("\033[1;1H");	// Move cursor pos to (1,1)
 8001296:	4808      	ldr	r0, [pc, #32]	@ (80012b8 <ProgramStart+0x2c>)
 8001298:	f004 ffd0 	bl	800623c <iprintf>
	printf("Program Started");
 800129c:	4807      	ldr	r0, [pc, #28]	@ (80012bc <ProgramStart+0x30>)
 800129e:	f004 ffcd 	bl	800623c <iprintf>
	Wait(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f000 f80c 	bl	80012c0 <Wait>
	printf("\033[2J");	// screen clear
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <ProgramStart+0x28>)
 80012aa:	f004 ffc7 	bl	800623c <iprintf>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	080074e0 	.word	0x080074e0
 80012b8:	080074e8 	.word	0x080074e8
 80012bc:	080074f0 	.word	0x080074f0

080012c0 <Wait>:

void Wait(int o)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	if(o) printf("Press Blue button to continue\r\n");
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <Wait+0x14>
 80012ce:	4808      	ldr	r0, [pc, #32]	@ (80012f0 <Wait+0x30>)
 80012d0:	f005 f81c 	bl	800630c <puts>
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 80012d4:	bf00      	nop
 80012d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <Wait+0x34>)
 80012dc:	f000 fd44 	bl	8001d68 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f7      	bne.n	80012d6 <Wait+0x16>
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	08007500 	.word	0x08007500
 80012f4:	40020800 	.word	0x40020800

080012f8 <usDelay>:

extern TIM_HandleTypeDef htim2;

void usDelay(int us)  // micro-second based Delay
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	volatile  uint32_t t1 = htim2.Instance->CNT;
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <usDelay+0x30>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	60fb      	str	r3, [r7, #12]
	while((htim2.Instance->CNT - t1) < us);
 8001308:	bf00      	nop
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <usDelay+0x30>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1ad2      	subs	r2, r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	d3f7      	bcc.n	800130a <usDelay+0x12>
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	2000032c 	.word	0x2000032c
 800132c:	00000000 	.word	0x00000000

08001330 <usDist>:

double usDist()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
	//  SR04  Trigger
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800133c:	482a      	ldr	r0, [pc, #168]	@ (80013e8 <usDist+0xb8>)
 800133e:	f000 fd2b 	bl	8001d98 <HAL_GPIO_WritePin>
	usDelay(10);
 8001342:	200a      	movs	r0, #10
 8001344:	f7ff ffd8 	bl	80012f8 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800134e:	4826      	ldr	r0, [pc, #152]	@ (80013e8 <usDist+0xb8>)
 8001350:	f000 fd22 	bl	8001d98 <HAL_GPIO_WritePin>
	usDelay(10);
 8001354:	200a      	movs	r0, #10
 8001356:	f7ff ffcf 	bl	80012f8 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001360:	4821      	ldr	r0, [pc, #132]	@ (80013e8 <usDist+0xb8>)
 8001362:	f000 fd19 	bl	8001d98 <HAL_GPIO_WritePin>
	//  Wait for burst
	usDelay(200);
 8001366:	20c8      	movs	r0, #200	@ 0xc8
 8001368:	f7ff ffc6 	bl	80012f8 <usDelay>
	//  Wait for Echo High
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) != 1);
 800136c:	bf00      	nop
 800136e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001372:	481e      	ldr	r0, [pc, #120]	@ (80013ec <usDist+0xbc>)
 8001374:	f000 fcf8 	bl	8001d68 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d1f7      	bne.n	800136e <usDist+0x3e>
	//  Start count
	volatile uint32_t t1 = htim2.Instance->CNT;
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <usDist+0xc0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001384:	607b      	str	r3, [r7, #4]
	//  Wait for Echo Low
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) != 0);
 8001386:	bf00      	nop
 8001388:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800138c:	4817      	ldr	r0, [pc, #92]	@ (80013ec <usDist+0xbc>)
 800138e:	f000 fceb 	bl	8001d68 <HAL_GPIO_ReadPin>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f7      	bne.n	8001388 <usDist+0x58>
	volatile uint32_t t2 = htim2.Instance->CNT;
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <usDist+0xc0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	603b      	str	r3, [r7, #0]
	int dt = t2 - t1; // micro-second sonic speed
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
	double Dist = 0.000170 * dt;  // meter
 80013a8:	6978      	ldr	r0, [r7, #20]
 80013aa:	f7ff f9e5 	bl	8000778 <__aeabi_i2d>
 80013ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80013e0 <usDist+0xb0>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7fe ff64 	bl	8000280 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	usDelay(60000);  // minimum delay for next time
 80013c0:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80013c4:	f7ff ff98 	bl	80012f8 <usDelay>
	return Dist;
 80013c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80013d0:	eeb0 0a47 	vmov.f32	s0, s14
 80013d4:	eef0 0a67 	vmov.f32	s1, s15
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e1719f80 	.word	0xe1719f80
 80013e4:	3f264840 	.word	0x3f264840
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	2000032c 	.word	0x2000032c

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_MspInit+0x54>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <HAL_MspInit+0x54>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001408:	6453      	str	r3, [r2, #68]	@ 0x44
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <HAL_MspInit+0x54>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <HAL_MspInit+0x54>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <HAL_MspInit+0x54>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	@ 0x40
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_MspInit+0x54>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	210f      	movs	r1, #15
 8001436:	f06f 0001 	mvn.w	r0, #1
 800143a:	f000 fae7 	bl	8001a0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800145c:	d10d      	bne.n	800147a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <HAL_TIM_Base_MspInit+0x3c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	4a08      	ldr	r2, [pc, #32]	@ (8001488 <HAL_TIM_Base_MspInit+0x3c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6413      	str	r3, [r2, #64]	@ 0x40
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_TIM_Base_MspInit+0x3c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a19      	ldr	r2, [pc, #100]	@ (8001510 <HAL_UART_MspInit+0x84>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d12b      	bne.n	8001506 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <HAL_UART_MspInit+0x88>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a17      	ldr	r2, [pc, #92]	@ (8001514 <HAL_UART_MspInit+0x88>)
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <HAL_UART_MspInit+0x88>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <HAL_UART_MspInit+0x88>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a10      	ldr	r2, [pc, #64]	@ (8001514 <HAL_UART_MspInit+0x88>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_UART_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014e6:	230c      	movs	r3, #12
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f6:	2307      	movs	r3, #7
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	@ (8001518 <HAL_UART_MspInit+0x8c>)
 8001502:	f000 faad 	bl	8001a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	@ 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40004400 	.word	0x40004400
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000

0800151c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <HAL_InitTick+0xd0>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	4a2d      	ldr	r2, [pc, #180]	@ (80015ec <HAL_InitTick+0xd0>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800153a:	6453      	str	r3, [r2, #68]	@ 0x44
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_InitTick+0xd0>)
 800153e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001548:	f107 020c 	add.w	r2, r7, #12
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f001 f8ea 	bl	800272c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001558:	f001 f8d4 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 800155c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800155e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001560:	4a23      	ldr	r2, [pc, #140]	@ (80015f0 <HAL_InitTick+0xd4>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0c9b      	lsrs	r3, r3, #18
 8001568:	3b01      	subs	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800156c:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <HAL_InitTick+0xd8>)
 800156e:	4a22      	ldr	r2, [pc, #136]	@ (80015f8 <HAL_InitTick+0xdc>)
 8001570:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_InitTick+0xd8>)
 8001574:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001578:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800157a:	4a1e      	ldr	r2, [pc, #120]	@ (80015f4 <HAL_InitTick+0xd8>)
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001580:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <HAL_InitTick+0xd8>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_InitTick+0xd8>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_InitTick+0xd8>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001592:	4818      	ldr	r0, [pc, #96]	@ (80015f4 <HAL_InitTick+0xd8>)
 8001594:	f001 f8fc 	bl	8002790 <HAL_TIM_Base_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800159e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d11b      	bne.n	80015de <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80015a6:	4813      	ldr	r0, [pc, #76]	@ (80015f4 <HAL_InitTick+0xd8>)
 80015a8:	f001 f99c 	bl	80028e4 <HAL_TIM_Base_Start_IT>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d111      	bne.n	80015de <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80015ba:	2018      	movs	r0, #24
 80015bc:	f000 fa42 	bl	8001a44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	d808      	bhi.n	80015d8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80015c6:	2200      	movs	r2, #0
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	2018      	movs	r0, #24
 80015cc:	f000 fa1e 	bl	8001a0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d0:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <HAL_InitTick+0xe0>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e002      	b.n	80015de <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3730      	adds	r7, #48	@ 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	431bde83 	.word	0x431bde83
 80015f4:	20000420 	.word	0x20000420
 80015f8:	40014000 	.word	0x40014000
 80015fc:	20000008 	.word	0x20000008

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <NMI_Handler+0x4>

08001608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <MemManage_Handler+0x4>

08001618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <UsageFault_Handler+0x4>

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D5_Pin);
 800163a:	2010      	movs	r0, #16
 800163c:	f000 fbc6 	bl	8001dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800164a:	f001 f9ad 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000420 	.word	0x20000420

08001658 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e00a      	b.n	8001680 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166a:	f3af 8000 	nop.w
 800166e:	4601      	mov	r1, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf0      	blt.n	800166a <_read+0x12>
  }

  return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e009      	b.n	80016b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fdb7 	bl	8001220 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbf1      	blt.n	80016a4 <_write+0x12>
  }
  return len;
 80016c0:	687b      	ldr	r3, [r7, #4]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_close>:

int _close(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f2:	605a      	str	r2, [r3, #4]
  return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_isatty>:

int _isatty(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	@ (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f004 ff76 	bl	8006654 <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20020000 	.word	0x20020000
 8001794:	00000400 	.word	0x00000400
 8001798:	20000468 	.word	0x20000468
 800179c:	20004310 	.word	0x20004310

080017a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <SystemInit+0x20>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <SystemInit+0x20>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c8:	f7ff ffea 	bl	80017a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ce:	490d      	ldr	r1, [pc, #52]	@ (8001804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f2:	f004 ff35 	bl	8006660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7ff fa07 	bl	8000c08 <main>
  bx  lr    
 80017fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001804:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001808:	08007584 	.word	0x08007584
  ldr r2, =_sbss
 800180c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001810:	20004310 	.word	0x20004310

08001814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC_IRQHandler>
	...

08001818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800181c:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <HAL_Init+0x40>)
 8001822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <HAL_Init+0x40>)
 800182e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <HAL_Init+0x40>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f8d8 	bl	80019f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	2005      	movs	r0, #5
 8001848:	f7ff fe68 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fdd2 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023c00 	.word	0x40023c00

0800185c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_IncTick+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_IncTick+0x24>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HAL_IncTick+0x24>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	2000000c 	.word	0x2000000c
 8001880:	2000046c 	.word	0x2000046c

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b03      	ldr	r3, [pc, #12]	@ (8001898 <HAL_GetTick+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2000046c 	.word	0x2000046c

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	@ (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	@ (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	@ (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	@ 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff4c 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1e:	f7ff ff61 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	6978      	ldr	r0, [r7, #20]
 8001a2a:	f7ff ffb1 	bl	8001990 <NVIC_EncodePriority>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff80 	bl	800193c <__NVIC_SetPriority>
}
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff54 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	e159      	b.n	8001d30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f040 8148 	bne.w	8001d2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d005      	beq.n	8001ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d130      	bne.n	8001b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 0201 	and.w	r2, r3, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d017      	beq.n	8001b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d123      	bne.n	8001ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	69b9      	ldr	r1, [r7, #24]
 8001ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a2 	beq.w	8001d2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b57      	ldr	r3, [pc, #348]	@ (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a56      	ldr	r2, [pc, #344]	@ (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b54      	ldr	r3, [pc, #336]	@ (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c02:	4a52      	ldr	r2, [pc, #328]	@ (8001d4c <HAL_GPIO_Init+0x2ec>)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a49      	ldr	r2, [pc, #292]	@ (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0x202>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a48      	ldr	r2, [pc, #288]	@ (8001d54 <HAL_GPIO_Init+0x2f4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0x1fe>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a47      	ldr	r2, [pc, #284]	@ (8001d58 <HAL_GPIO_Init+0x2f8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x1fa>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <HAL_GPIO_Init+0x2fc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_Init+0x1f6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a45      	ldr	r2, [pc, #276]	@ (8001d60 <HAL_GPIO_Init+0x300>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_Init+0x1f2>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	@ (8001d4c <HAL_GPIO_Init+0x2ec>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b38      	ldr	r3, [pc, #224]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a2f      	ldr	r2, [pc, #188]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a24      	ldr	r2, [pc, #144]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a0f      	ldr	r2, [pc, #60]	@ (8001d64 <HAL_GPIO_Init+0x304>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f aea2 	bls.w	8001a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db4:	e003      	b.n	8001dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001de2:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fee8 	bl	8000bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40013c00 	.word	0x40013c00

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e267      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d075      	beq.n	8001f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e1a:	4b88      	ldr	r3, [pc, #544]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d00c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e26:	4b85      	ldr	r3, [pc, #532]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d112      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e32:	4b82      	ldr	r3, [pc, #520]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	4b7e      	ldr	r3, [pc, #504]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d05b      	beq.n	8001f04 <HAL_RCC_OscConfig+0x108>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d157      	bne.n	8001f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e242      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e60:	d106      	bne.n	8001e70 <HAL_RCC_OscConfig+0x74>
 8001e62:	4b76      	ldr	r3, [pc, #472]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a75      	ldr	r2, [pc, #468]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e01d      	b.n	8001eac <HAL_RCC_OscConfig+0xb0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b70      	ldr	r3, [pc, #448]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6f      	ldr	r2, [pc, #444]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b6d      	ldr	r3, [pc, #436]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6c      	ldr	r2, [pc, #432]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0xb0>
 8001e94:	4b69      	ldr	r3, [pc, #420]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a68      	ldr	r2, [pc, #416]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b66      	ldr	r3, [pc, #408]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a65      	ldr	r2, [pc, #404]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fce6 	bl	8001884 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fce2 	bl	8001884 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	@ 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e207      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b5b      	ldr	r3, [pc, #364]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0xc0>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fcd2 	bl	8001884 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fcce 	bl	8001884 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1f3      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	4b51      	ldr	r3, [pc, #324]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xe8>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d063      	beq.n	8001fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f12:	4b4a      	ldr	r3, [pc, #296]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b47      	ldr	r3, [pc, #284]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d11c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2a:	4b44      	ldr	r3, [pc, #272]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	4b41      	ldr	r3, [pc, #260]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_OscConfig+0x152>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e1c7      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4937      	ldr	r1, [pc, #220]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	e03a      	b.n	8001fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6c:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <HAL_RCC_OscConfig+0x244>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff fc87 	bl	8001884 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fc83 	bl	8001884 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1a8      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b28      	ldr	r3, [pc, #160]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4925      	ldr	r1, [pc, #148]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	e015      	b.n	8001fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fae:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <HAL_RCC_OscConfig+0x244>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fc66 	bl	8001884 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbc:	f7ff fc62 	bl	8001884 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e187      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d036      	beq.n	8002054 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d016      	beq.n	800201c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_RCC_OscConfig+0x248>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7ff fc46 	bl	8001884 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fc42 	bl	8001884 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e167      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8002010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x200>
 800201a:	e01b      	b.n	8002054 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201c:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_RCC_OscConfig+0x248>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7ff fc2f 	bl	8001884 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	e00e      	b.n	8002048 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202a:	f7ff fc2b 	bl	8001884 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d907      	bls.n	8002048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e150      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
 800203c:	40023800 	.word	0x40023800
 8002040:	42470000 	.word	0x42470000
 8002044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	4b88      	ldr	r3, [pc, #544]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800204a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ea      	bne.n	800202a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8097 	beq.w	8002190 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b81      	ldr	r3, [pc, #516]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10f      	bne.n	8002092 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	4b7d      	ldr	r3, [pc, #500]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	4a7c      	ldr	r2, [pc, #496]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	@ 0x40
 8002082:	4b7a      	ldr	r3, [pc, #488]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b77      	ldr	r3, [pc, #476]	@ (8002270 <HAL_RCC_OscConfig+0x474>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209e:	4b74      	ldr	r3, [pc, #464]	@ (8002270 <HAL_RCC_OscConfig+0x474>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a73      	ldr	r2, [pc, #460]	@ (8002270 <HAL_RCC_OscConfig+0x474>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fbeb 	bl	8001884 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7ff fbe7 	bl	8001884 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e10c      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002270 <HAL_RCC_OscConfig+0x474>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2ea>
 80020d8:	4b64      	ldr	r3, [pc, #400]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020dc:	4a63      	ldr	r2, [pc, #396]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e4:	e01c      	b.n	8002120 <HAL_RCC_OscConfig+0x324>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x30c>
 80020ee:	4b5f      	ldr	r3, [pc, #380]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f2:	4a5e      	ldr	r2, [pc, #376]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fa:	4b5c      	ldr	r3, [pc, #368]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fe:	4a5b      	ldr	r2, [pc, #364]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6713      	str	r3, [r2, #112]	@ 0x70
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0x324>
 8002108:	4b58      	ldr	r3, [pc, #352]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210c:	4a57      	ldr	r2, [pc, #348]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	6713      	str	r3, [r2, #112]	@ 0x70
 8002114:	4b55      	ldr	r3, [pc, #340]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002118:	4a54      	ldr	r2, [pc, #336]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800211a:	f023 0304 	bic.w	r3, r3, #4
 800211e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d015      	beq.n	8002154 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7ff fbac 	bl	8001884 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7ff fba8 	bl	8001884 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0cb      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	4b49      	ldr	r3, [pc, #292]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ee      	beq.n	8002130 <HAL_RCC_OscConfig+0x334>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7ff fb96 	bl	8001884 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7ff fb92 	bl	8001884 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0b5      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002172:	4b3e      	ldr	r3, [pc, #248]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ee      	bne.n	800215c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002184:	4b39      	ldr	r3, [pc, #228]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	4a38      	ldr	r2, [pc, #224]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800218a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a1 	beq.w	80022dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219a:	4b34      	ldr	r3, [pc, #208]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d05c      	beq.n	8002260 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d141      	bne.n	8002232 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ae:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <HAL_RCC_OscConfig+0x478>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb66 	bl	8001884 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff fb62 	bl	8001884 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e087      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	4b27      	ldr	r3, [pc, #156]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	019b      	lsls	r3, r3, #6
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	3b01      	subs	r3, #1
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	491b      	ldr	r1, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <HAL_RCC_OscConfig+0x478>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff fb3b 	bl	8001884 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002212:	f7ff fb37 	bl	8001884 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e05c      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x416>
 8002230:	e054      	b.n	80022dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_RCC_OscConfig+0x478>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fb24 	bl	8001884 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff fb20 	bl	8001884 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e045      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x444>
 800225e:	e03d      	b.n	80022dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e038      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000
 8002274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002278:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <HAL_RCC_OscConfig+0x4ec>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d028      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d121      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d11a      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	3b01      	subs	r3, #1
 80022c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0cc      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b68      	ldr	r3, [pc, #416]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d90c      	bls.n	8002328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b65      	ldr	r3, [pc, #404]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b63      	ldr	r3, [pc, #396]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b8      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002340:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a58      	ldr	r2, [pc, #352]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800234a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002358:	4b53      	ldr	r3, [pc, #332]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a52      	ldr	r2, [pc, #328]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b50      	ldr	r3, [pc, #320]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	494d      	ldr	r1, [pc, #308]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d044      	beq.n	800240c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d119      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b3f      	ldr	r3, [pc, #252]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e067      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b37      	ldr	r3, [pc, #220]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4934      	ldr	r1, [pc, #208]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023dc:	f7ff fa52 	bl	8001884 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7ff fa4e 	bl	8001884 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e04f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b25      	ldr	r3, [pc, #148]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d20c      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b20      	ldr	r3, [pc, #128]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e032      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4916      	ldr	r1, [pc, #88]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	490e      	ldr	r1, [pc, #56]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002472:	f000 f821 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 8002476:	4602      	mov	r2, r0
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	490a      	ldr	r1, [pc, #40]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	4a09      	ldr	r2, [pc, #36]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff f842 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023c00 	.word	0x40023c00
 80024a8:	40023800 	.word	0x40023800
 80024ac:	08007528 	.word	0x08007528
 80024b0:	20000004 	.word	0x20000004
 80024b4:	20000008 	.word	0x20000008

080024b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024bc:	b094      	sub	sp, #80	@ 0x50
 80024be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80024c4:	2300      	movs	r3, #0
 80024c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c8:	2300      	movs	r3, #0
 80024ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d0:	4b79      	ldr	r3, [pc, #484]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d00d      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x40>
 80024dc:	2b08      	cmp	r3, #8
 80024de:	f200 80e1 	bhi.w	80026a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x34>
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d003      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ea:	e0db      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b73      	ldr	r3, [pc, #460]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x204>)
 80024ee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80024f0:	e0db      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f2:	4b73      	ldr	r3, [pc, #460]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80024f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f6:	e0d8      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f8:	4b6f      	ldr	r3, [pc, #444]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002500:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002502:	4b6d      	ldr	r3, [pc, #436]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250e:	4b6a      	ldr	r3, [pc, #424]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	099b      	lsrs	r3, r3, #6
 8002514:	2200      	movs	r2, #0
 8002516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002518:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800251a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002520:	633b      	str	r3, [r7, #48]	@ 0x30
 8002522:	2300      	movs	r3, #0
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
 8002526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800252a:	4622      	mov	r2, r4
 800252c:	462b      	mov	r3, r5
 800252e:	f04f 0000 	mov.w	r0, #0
 8002532:	f04f 0100 	mov.w	r1, #0
 8002536:	0159      	lsls	r1, r3, #5
 8002538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800253c:	0150      	lsls	r0, r2, #5
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4621      	mov	r1, r4
 8002544:	1a51      	subs	r1, r2, r1
 8002546:	6139      	str	r1, [r7, #16]
 8002548:	4629      	mov	r1, r5
 800254a:	eb63 0301 	sbc.w	r3, r3, r1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800255c:	4659      	mov	r1, fp
 800255e:	018b      	lsls	r3, r1, #6
 8002560:	4651      	mov	r1, sl
 8002562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002566:	4651      	mov	r1, sl
 8002568:	018a      	lsls	r2, r1, #6
 800256a:	4651      	mov	r1, sl
 800256c:	ebb2 0801 	subs.w	r8, r2, r1
 8002570:	4659      	mov	r1, fp
 8002572:	eb63 0901 	sbc.w	r9, r3, r1
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800258a:	4690      	mov	r8, r2
 800258c:	4699      	mov	r9, r3
 800258e:	4623      	mov	r3, r4
 8002590:	eb18 0303 	adds.w	r3, r8, r3
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	462b      	mov	r3, r5
 8002598:	eb49 0303 	adc.w	r3, r9, r3
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025aa:	4629      	mov	r1, r5
 80025ac:	024b      	lsls	r3, r1, #9
 80025ae:	4621      	mov	r1, r4
 80025b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025b4:	4621      	mov	r1, r4
 80025b6:	024a      	lsls	r2, r1, #9
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025be:	2200      	movs	r2, #0
 80025c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025c8:	f7fe f968 	bl	800089c <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4613      	mov	r3, r2
 80025d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025d4:	e058      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d6:	4b38      	ldr	r3, [pc, #224]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	2200      	movs	r2, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	4611      	mov	r1, r2
 80025e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025f0:	4642      	mov	r2, r8
 80025f2:	464b      	mov	r3, r9
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	0159      	lsls	r1, r3, #5
 80025fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002602:	0150      	lsls	r0, r2, #5
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4641      	mov	r1, r8
 800260a:	ebb2 0a01 	subs.w	sl, r2, r1
 800260e:	4649      	mov	r1, r9
 8002610:	eb63 0b01 	sbc.w	fp, r3, r1
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002628:	ebb2 040a 	subs.w	r4, r2, sl
 800262c:	eb63 050b 	sbc.w	r5, r3, fp
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	00eb      	lsls	r3, r5, #3
 800263a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800263e:	00e2      	lsls	r2, r4, #3
 8002640:	4614      	mov	r4, r2
 8002642:	461d      	mov	r5, r3
 8002644:	4643      	mov	r3, r8
 8002646:	18e3      	adds	r3, r4, r3
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	464b      	mov	r3, r9
 800264c:	eb45 0303 	adc.w	r3, r5, r3
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800265e:	4629      	mov	r1, r5
 8002660:	028b      	lsls	r3, r1, #10
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002668:	4621      	mov	r1, r4
 800266a:	028a      	lsls	r2, r1, #10
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002672:	2200      	movs	r2, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	61fa      	str	r2, [r7, #28]
 8002678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800267c:	f7fe f90e 	bl	800089c <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4613      	mov	r3, r2
 8002686:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	3301      	adds	r3, #1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002698:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800269a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026a2:	e002      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x204>)
 80026a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3750      	adds	r7, #80	@ 0x50
 80026b0:	46bd      	mov	sp, r7
 80026b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e0:	f7ff fff0 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	@ (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	08007538 	.word	0x08007538

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002708:	f7ff ffdc 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0b5b      	lsrs	r3, r3, #13
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4903      	ldr	r1, [pc, #12]	@ (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	08007538 	.word	0x08007538

0800272c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	220f      	movs	r2, #15
 800273a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <HAL_RCC_GetClockConfig+0x60>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0207 	and.w	r2, r3, #7
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40023c00 	.word	0x40023c00

08002790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e041      	b.n	8002826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe fe48 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f000 faca 	bl	8002d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d001      	beq.n	8002848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e03c      	b.n	80028c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1e      	ldr	r2, [pc, #120]	@ (80028d0 <HAL_TIM_Base_Start+0xa0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d018      	beq.n	800288c <HAL_TIM_Base_Start+0x5c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002862:	d013      	beq.n	800288c <HAL_TIM_Base_Start+0x5c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1a      	ldr	r2, [pc, #104]	@ (80028d4 <HAL_TIM_Base_Start+0xa4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00e      	beq.n	800288c <HAL_TIM_Base_Start+0x5c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a19      	ldr	r2, [pc, #100]	@ (80028d8 <HAL_TIM_Base_Start+0xa8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d009      	beq.n	800288c <HAL_TIM_Base_Start+0x5c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a17      	ldr	r2, [pc, #92]	@ (80028dc <HAL_TIM_Base_Start+0xac>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d004      	beq.n	800288c <HAL_TIM_Base_Start+0x5c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a16      	ldr	r2, [pc, #88]	@ (80028e0 <HAL_TIM_Base_Start+0xb0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d111      	bne.n	80028b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b06      	cmp	r3, #6
 800289c:	d010      	beq.n	80028c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ae:	e007      	b.n	80028c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40010000 	.word	0x40010000
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800
 80028dc:	40000c00 	.word	0x40000c00
 80028e0:	40014000 	.word	0x40014000

080028e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d001      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e044      	b.n	8002986 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1e      	ldr	r2, [pc, #120]	@ (8002994 <HAL_TIM_Base_Start_IT+0xb0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d018      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x6c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002926:	d013      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x6c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1a      	ldr	r2, [pc, #104]	@ (8002998 <HAL_TIM_Base_Start_IT+0xb4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x6c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_TIM_Base_Start_IT+0xb8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x6c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x6c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a16      	ldr	r2, [pc, #88]	@ (80029a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d010      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	e007      	b.n	8002984 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00
 80029a4:	40014000 	.word	0x40014000

080029a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d020      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0202 	mvn.w	r2, #2
 80029dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f999 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f98b 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f99c 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d020      	beq.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0204 	mvn.w	r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f973 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f965 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f976 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d020      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0208 	mvn.w	r2, #8
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f94d 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f93f 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f950 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d020      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0210 	mvn.w	r2, #16
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f927 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f919 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f92a 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0201 	mvn.w	r2, #1
 8002b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fb6e 	bl	80011f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fab6 	bl	80030a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8fb 	bl	8002d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0220 	mvn.w	r2, #32
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fa88 	bl	8003090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0b4      	b.n	8002d0e <HAL_TIM_ConfigClockSource+0x186>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bdc:	d03e      	beq.n	8002c5c <HAL_TIM_ConfigClockSource+0xd4>
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be2:	f200 8087 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bea:	f000 8086 	beq.w	8002cfa <HAL_TIM_ConfigClockSource+0x172>
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf2:	d87f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b70      	cmp	r3, #112	@ 0x70
 8002bf6:	d01a      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xa6>
 8002bf8:	2b70      	cmp	r3, #112	@ 0x70
 8002bfa:	d87b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b60      	cmp	r3, #96	@ 0x60
 8002bfe:	d050      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c00:	2b60      	cmp	r3, #96	@ 0x60
 8002c02:	d877      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b50      	cmp	r3, #80	@ 0x50
 8002c06:	d03c      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xfa>
 8002c08:	2b50      	cmp	r3, #80	@ 0x50
 8002c0a:	d873      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b40      	cmp	r3, #64	@ 0x40
 8002c0e:	d058      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c10:	2b40      	cmp	r3, #64	@ 0x40
 8002c12:	d86f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b30      	cmp	r3, #48	@ 0x30
 8002c16:	d064      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	2b30      	cmp	r3, #48	@ 0x30
 8002c1a:	d86b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d060      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d867      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d05a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c2c:	e062      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c3e:	f000 f999 	bl	8002f74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	609a      	str	r2, [r3, #8]
      break;
 8002c5a:	e04f      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c6c:	f000 f982 	bl	8002f74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e03c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 f8f6 	bl	8002e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2150      	movs	r1, #80	@ 0x50
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f94f 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e02c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 f915 	bl	8002ede <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2160      	movs	r1, #96	@ 0x60
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f93f 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e01c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 f8d6 	bl	8002e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2140      	movs	r1, #64	@ 0x40
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f92f 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e00c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f000 f926 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002cf2:	e003      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002e64 <TIM_Base_SetConfig+0xfc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00f      	beq.n	8002da0 <TIM_Base_SetConfig+0x38>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d86:	d00b      	beq.n	8002da0 <TIM_Base_SetConfig+0x38>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a37      	ldr	r2, [pc, #220]	@ (8002e68 <TIM_Base_SetConfig+0x100>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d007      	beq.n	8002da0 <TIM_Base_SetConfig+0x38>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a36      	ldr	r2, [pc, #216]	@ (8002e6c <TIM_Base_SetConfig+0x104>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_Base_SetConfig+0x38>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a35      	ldr	r2, [pc, #212]	@ (8002e70 <TIM_Base_SetConfig+0x108>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d108      	bne.n	8002db2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e64 <TIM_Base_SetConfig+0xfc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01b      	beq.n	8002df2 <TIM_Base_SetConfig+0x8a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc0:	d017      	beq.n	8002df2 <TIM_Base_SetConfig+0x8a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a28      	ldr	r2, [pc, #160]	@ (8002e68 <TIM_Base_SetConfig+0x100>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d013      	beq.n	8002df2 <TIM_Base_SetConfig+0x8a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a27      	ldr	r2, [pc, #156]	@ (8002e6c <TIM_Base_SetConfig+0x104>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00f      	beq.n	8002df2 <TIM_Base_SetConfig+0x8a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	@ (8002e70 <TIM_Base_SetConfig+0x108>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00b      	beq.n	8002df2 <TIM_Base_SetConfig+0x8a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a25      	ldr	r2, [pc, #148]	@ (8002e74 <TIM_Base_SetConfig+0x10c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <TIM_Base_SetConfig+0x8a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a24      	ldr	r2, [pc, #144]	@ (8002e78 <TIM_Base_SetConfig+0x110>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d003      	beq.n	8002df2 <TIM_Base_SetConfig+0x8a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a23      	ldr	r2, [pc, #140]	@ (8002e7c <TIM_Base_SetConfig+0x114>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d108      	bne.n	8002e04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e64 <TIM_Base_SetConfig+0xfc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d103      	bne.n	8002e38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f023 0201 	bic.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	611a      	str	r2, [r3, #16]
  }
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40000c00 	.word	0x40000c00
 8002e74:	40014000 	.word	0x40014000
 8002e78:	40014400 	.word	0x40014400
 8002e7c:	40014800 	.word	0x40014800

08002e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f023 0201 	bic.w	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f023 030a 	bic.w	r3, r3, #10
 8002ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b087      	sub	sp, #28
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f023 0210 	bic.w	r2, r3, #16
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	031b      	lsls	r3, r3, #12
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	621a      	str	r2, [r3, #32]
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f043 0307 	orr.w	r3, r3, #7
 8002f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	021a      	lsls	r2, r3, #8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e050      	b.n	800306e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1c      	ldr	r2, [pc, #112]	@ (800307c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d018      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003018:	d013      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a18      	ldr	r2, [pc, #96]	@ (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a16      	ldr	r2, [pc, #88]	@ (8003084 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	@ (8003088 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a13      	ldr	r2, [pc, #76]	@ (800308c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10c      	bne.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	4313      	orrs	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800
 8003088:	40000c00 	.word	0x40000c00
 800308c:	40014000 	.word	0x40014000

08003090 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e042      	b.n	8003150 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe f9d4 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	@ 0x24
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f973 	bl	80033e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	@ 0x28
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	d175      	bne.n	8003264 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_UART_Transmit+0x2c>
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e06e      	b.n	8003266 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2221      	movs	r2, #33	@ 0x21
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003196:	f7fe fb75 	bl	8001884 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b0:	d108      	bne.n	80031c4 <HAL_UART_Transmit+0x6c>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e003      	b.n	80031cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031cc:	e02e      	b.n	800322c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2180      	movs	r1, #128	@ 0x80
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f848 	bl	800326e <UART_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e03a      	b.n	8003266 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10b      	bne.n	800320e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	3302      	adds	r3, #2
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e007      	b.n	800321e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1cb      	bne.n	80031ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	2140      	movs	r1, #64	@ 0x40
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f814 	bl	800326e <UART_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e006      	b.n	8003266 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327e:	e03b      	b.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d037      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003288:	f7fe fafc 	bl	8001884 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <UART_WaitOnFlagUntilTimeout+0x30>
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e03a      	b.n	8003318 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b80      	cmp	r3, #128	@ 0x80
 80032b4:	d020      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	d01d      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d116      	bne.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f81d 	bl	8003320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2208      	movs	r2, #8
 80032ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e00f      	b.n	8003318 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	429a      	cmp	r2, r3
 8003314:	d0b4      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003320:	b480      	push	{r7}
 8003322:	b095      	sub	sp, #84	@ 0x54
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800333e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003348:	643a      	str	r2, [r7, #64]	@ 0x40
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800334e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	61fb      	str	r3, [r7, #28]
   return(result);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3314      	adds	r3, #20
 800337a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800337c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e5      	bne.n	800335c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	2b01      	cmp	r3, #1
 8003396:	d119      	bne.n	80033cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 0310 	bic.w	r3, r3, #16
 80033ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033b8:	61ba      	str	r2, [r7, #24]
 80033ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6979      	ldr	r1, [r7, #20]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e5      	bne.n	8003398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033da:	bf00      	nop
 80033dc:	3754      	adds	r7, #84	@ 0x54
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b0c0      	sub	sp, #256	@ 0x100
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	68d9      	ldr	r1, [r3, #12]
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	ea40 0301 	orr.w	r3, r0, r1
 8003410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003440:	f021 010c 	bic.w	r1, r1, #12
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800344e:	430b      	orrs	r3, r1
 8003450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003462:	6999      	ldr	r1, [r3, #24]
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	ea40 0301 	orr.w	r3, r0, r1
 800346e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b8f      	ldr	r3, [pc, #572]	@ (80036b4 <UART_SetConfig+0x2cc>)
 8003478:	429a      	cmp	r2, r3
 800347a:	d005      	beq.n	8003488 <UART_SetConfig+0xa0>
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b8d      	ldr	r3, [pc, #564]	@ (80036b8 <UART_SetConfig+0x2d0>)
 8003484:	429a      	cmp	r2, r3
 8003486:	d104      	bne.n	8003492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003488:	f7ff f93c 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 800348c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003490:	e003      	b.n	800349a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003492:	f7ff f923 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003496:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a4:	f040 810c 	bne.w	80036c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034ba:	4622      	mov	r2, r4
 80034bc:	462b      	mov	r3, r5
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034c2:	415b      	adcs	r3, r3
 80034c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034ca:	4621      	mov	r1, r4
 80034cc:	eb12 0801 	adds.w	r8, r2, r1
 80034d0:	4629      	mov	r1, r5
 80034d2:	eb43 0901 	adc.w	r9, r3, r1
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ea:	4690      	mov	r8, r2
 80034ec:	4699      	mov	r9, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	eb18 0303 	adds.w	r3, r8, r3
 80034f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034f8:	462b      	mov	r3, r5
 80034fa:	eb49 0303 	adc.w	r3, r9, r3
 80034fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800350e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003516:	460b      	mov	r3, r1
 8003518:	18db      	adds	r3, r3, r3
 800351a:	653b      	str	r3, [r7, #80]	@ 0x50
 800351c:	4613      	mov	r3, r2
 800351e:	eb42 0303 	adc.w	r3, r2, r3
 8003522:	657b      	str	r3, [r7, #84]	@ 0x54
 8003524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800352c:	f7fd f9b6 	bl	800089c <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4b61      	ldr	r3, [pc, #388]	@ (80036bc <UART_SetConfig+0x2d4>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	011c      	lsls	r4, r3, #4
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003548:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800354c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003558:	415b      	adcs	r3, r3
 800355a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800355c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003560:	4641      	mov	r1, r8
 8003562:	eb12 0a01 	adds.w	sl, r2, r1
 8003566:	4649      	mov	r1, r9
 8003568:	eb43 0b01 	adc.w	fp, r3, r1
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800357c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003580:	4692      	mov	sl, r2
 8003582:	469b      	mov	fp, r3
 8003584:	4643      	mov	r3, r8
 8003586:	eb1a 0303 	adds.w	r3, sl, r3
 800358a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800358e:	464b      	mov	r3, r9
 8003590:	eb4b 0303 	adc.w	r3, fp, r3
 8003594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035ac:	460b      	mov	r3, r1
 80035ae:	18db      	adds	r3, r3, r3
 80035b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80035b2:	4613      	mov	r3, r2
 80035b4:	eb42 0303 	adc.w	r3, r2, r3
 80035b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035c2:	f7fd f96b 	bl	800089c <__aeabi_uldivmod>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	4b3b      	ldr	r3, [pc, #236]	@ (80036bc <UART_SetConfig+0x2d4>)
 80035ce:	fba3 2301 	umull	r2, r3, r3, r1
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2264      	movs	r2, #100	@ 0x64
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	1acb      	subs	r3, r1, r3
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035e2:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <UART_SetConfig+0x2d4>)
 80035e4:	fba3 2302 	umull	r2, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035f0:	441c      	add	r4, r3
 80035f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	1891      	adds	r1, r2, r2
 800360a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800360c:	415b      	adcs	r3, r3
 800360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003614:	4641      	mov	r1, r8
 8003616:	1851      	adds	r1, r2, r1
 8003618:	6339      	str	r1, [r7, #48]	@ 0x30
 800361a:	4649      	mov	r1, r9
 800361c:	414b      	adcs	r3, r1
 800361e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800362c:	4659      	mov	r1, fp
 800362e:	00cb      	lsls	r3, r1, #3
 8003630:	4651      	mov	r1, sl
 8003632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003636:	4651      	mov	r1, sl
 8003638:	00ca      	lsls	r2, r1, #3
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	4603      	mov	r3, r0
 8003640:	4642      	mov	r2, r8
 8003642:	189b      	adds	r3, r3, r2
 8003644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003648:	464b      	mov	r3, r9
 800364a:	460a      	mov	r2, r1
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003660:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003668:	460b      	mov	r3, r1
 800366a:	18db      	adds	r3, r3, r3
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800366e:	4613      	mov	r3, r2
 8003670:	eb42 0303 	adc.w	r3, r2, r3
 8003674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800367a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800367e:	f7fd f90d 	bl	800089c <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <UART_SetConfig+0x2d4>)
 8003688:	fba3 1302 	umull	r1, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	2164      	movs	r1, #100	@ 0x64
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	3332      	adds	r3, #50	@ 0x32
 800369a:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <UART_SetConfig+0x2d4>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	f003 0207 	and.w	r2, r3, #7
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4422      	add	r2, r4
 80036ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036b0:	e106      	b.n	80038c0 <UART_SetConfig+0x4d8>
 80036b2:	bf00      	nop
 80036b4:	40011000 	.word	0x40011000
 80036b8:	40011400 	.word	0x40011400
 80036bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036d2:	4642      	mov	r2, r8
 80036d4:	464b      	mov	r3, r9
 80036d6:	1891      	adds	r1, r2, r2
 80036d8:	6239      	str	r1, [r7, #32]
 80036da:	415b      	adcs	r3, r3
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036e2:	4641      	mov	r1, r8
 80036e4:	1854      	adds	r4, r2, r1
 80036e6:	4649      	mov	r1, r9
 80036e8:	eb43 0501 	adc.w	r5, r3, r1
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	00eb      	lsls	r3, r5, #3
 80036f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	4614      	mov	r4, r2
 80036fe:	461d      	mov	r5, r3
 8003700:	4643      	mov	r3, r8
 8003702:	18e3      	adds	r3, r4, r3
 8003704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003708:	464b      	mov	r3, r9
 800370a:	eb45 0303 	adc.w	r3, r5, r3
 800370e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800371e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800372e:	4629      	mov	r1, r5
 8003730:	008b      	lsls	r3, r1, #2
 8003732:	4621      	mov	r1, r4
 8003734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003738:	4621      	mov	r1, r4
 800373a:	008a      	lsls	r2, r1, #2
 800373c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003740:	f7fd f8ac 	bl	800089c <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4b60      	ldr	r3, [pc, #384]	@ (80038cc <UART_SetConfig+0x4e4>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	011c      	lsls	r4, r3, #4
 8003752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003756:	2200      	movs	r2, #0
 8003758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800375c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003764:	4642      	mov	r2, r8
 8003766:	464b      	mov	r3, r9
 8003768:	1891      	adds	r1, r2, r2
 800376a:	61b9      	str	r1, [r7, #24]
 800376c:	415b      	adcs	r3, r3
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003774:	4641      	mov	r1, r8
 8003776:	1851      	adds	r1, r2, r1
 8003778:	6139      	str	r1, [r7, #16]
 800377a:	4649      	mov	r1, r9
 800377c:	414b      	adcs	r3, r1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800378c:	4659      	mov	r1, fp
 800378e:	00cb      	lsls	r3, r1, #3
 8003790:	4651      	mov	r1, sl
 8003792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003796:	4651      	mov	r1, sl
 8003798:	00ca      	lsls	r2, r1, #3
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	4642      	mov	r2, r8
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037a8:	464b      	mov	r3, r9
 80037aa:	460a      	mov	r2, r1
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037cc:	4649      	mov	r1, r9
 80037ce:	008b      	lsls	r3, r1, #2
 80037d0:	4641      	mov	r1, r8
 80037d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d6:	4641      	mov	r1, r8
 80037d8:	008a      	lsls	r2, r1, #2
 80037da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037de:	f7fd f85d 	bl	800089c <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	4b38      	ldr	r3, [pc, #224]	@ (80038cc <UART_SetConfig+0x4e4>)
 80037ea:	fba3 2301 	umull	r2, r3, r3, r1
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2264      	movs	r2, #100	@ 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	1acb      	subs	r3, r1, r3
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	3332      	adds	r3, #50	@ 0x32
 80037fc:	4a33      	ldr	r2, [pc, #204]	@ (80038cc <UART_SetConfig+0x4e4>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003808:	441c      	add	r4, r3
 800380a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380e:	2200      	movs	r2, #0
 8003810:	673b      	str	r3, [r7, #112]	@ 0x70
 8003812:	677a      	str	r2, [r7, #116]	@ 0x74
 8003814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003818:	4642      	mov	r2, r8
 800381a:	464b      	mov	r3, r9
 800381c:	1891      	adds	r1, r2, r2
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	415b      	adcs	r3, r3
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003828:	4641      	mov	r1, r8
 800382a:	1851      	adds	r1, r2, r1
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	4649      	mov	r1, r9
 8003830:	414b      	adcs	r3, r1
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003840:	4659      	mov	r1, fp
 8003842:	00cb      	lsls	r3, r1, #3
 8003844:	4651      	mov	r1, sl
 8003846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800384a:	4651      	mov	r1, sl
 800384c:	00ca      	lsls	r2, r1, #3
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	4603      	mov	r3, r0
 8003854:	4642      	mov	r2, r8
 8003856:	189b      	adds	r3, r3, r2
 8003858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800385a:	464b      	mov	r3, r9
 800385c:	460a      	mov	r2, r1
 800385e:	eb42 0303 	adc.w	r3, r2, r3
 8003862:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	663b      	str	r3, [r7, #96]	@ 0x60
 800386e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800387c:	4649      	mov	r1, r9
 800387e:	008b      	lsls	r3, r1, #2
 8003880:	4641      	mov	r1, r8
 8003882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003886:	4641      	mov	r1, r8
 8003888:	008a      	lsls	r2, r1, #2
 800388a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800388e:	f7fd f805 	bl	800089c <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <UART_SetConfig+0x4e4>)
 8003898:	fba3 1302 	umull	r1, r3, r3, r2
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	2164      	movs	r1, #100	@ 0x64
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	3332      	adds	r3, #50	@ 0x32
 80038aa:	4a08      	ldr	r2, [pc, #32]	@ (80038cc <UART_SetConfig+0x4e4>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	f003 020f 	and.w	r2, r3, #15
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4422      	add	r2, r4
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038c6:	46bd      	mov	sp, r7
 80038c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038cc:	51eb851f 	.word	0x51eb851f

080038d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e2:	2b84      	cmp	r3, #132	@ 0x84
 80038e4:	d005      	beq.n	80038f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	3303      	adds	r3, #3
 80038f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003906:	f3ef 8305 	mrs	r3, IPSR
 800390a:	607b      	str	r3, [r7, #4]
  return(result);
 800390c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003928:	f001 f942 	bl	8004bb0 <vTaskStartScheduler>
  
  return osOK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	bd80      	pop	{r7, pc}

08003932 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003934:	b089      	sub	sp, #36	@ 0x24
 8003936:	af04      	add	r7, sp, #16
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <osThreadCreate+0x54>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01c      	beq.n	8003986 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685c      	ldr	r4, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691e      	ldr	r6, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ffb6 	bl	80038d0 <makeFreeRtosPriority>
 8003964:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800396e:	9202      	str	r2, [sp, #8]
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	9100      	str	r1, [sp, #0]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4632      	mov	r2, r6
 8003978:	4629      	mov	r1, r5
 800397a:	4620      	mov	r0, r4
 800397c:	f000 ff32 	bl	80047e4 <xTaskCreateStatic>
 8003980:	4603      	mov	r3, r0
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e01c      	b.n	80039c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685c      	ldr	r4, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003992:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff98 	bl	80038d0 <makeFreeRtosPriority>
 80039a0:	4602      	mov	r2, r0
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	9200      	str	r2, [sp, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	4632      	mov	r2, r6
 80039ae:	4629      	mov	r1, r5
 80039b0:	4620      	mov	r0, r4
 80039b2:	f000 ff77 	bl	80048a4 <xTaskCreate>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80039c0:	68fb      	ldr	r3, [r7, #12]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <osDelay+0x16>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	e000      	b.n	80039e2 <osDelay+0x18>
 80039e0:	2301      	movs	r3, #1
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f8ae 	bl	8004b44 <vTaskDelay>
  
  return osOK;
 80039e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af02      	add	r7, sp, #8
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00f      	beq.n	8003a24 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d10a      	bne.n	8003a20 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	9200      	str	r2, [sp, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2100      	movs	r1, #0
 8003a16:	2001      	movs	r0, #1
 8003a18:	f000 f9c0 	bl	8003d9c <xQueueGenericCreateStatic>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	e016      	b.n	8003a4e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e014      	b.n	8003a4e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d110      	bne.n	8003a4c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f000 fa31 	bl	8003e96 <xQueueGenericCreate>
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <osSemaphoreCreate+0x56>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2100      	movs	r1, #0
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 fa82 	bl	8003f4c <xQueueGenericSend>
      return sema;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	e000      	b.n	8003a4e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003a4c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	e03a      	b.n	8003ae6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d103      	bne.n	8003a84 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e009      	b.n	8003a98 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d006      	beq.n	8003a98 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <osSemaphoreWait+0x40>
      ticks = 1;
 8003a94:	2301      	movs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003a98:	f7ff ff32 	bl	8003900 <inHandlerMode>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d017      	beq.n	8003ad2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fcf0 	bl	8004490 <xQueueReceiveFromISR>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <osSemaphoreWait+0x62>
      return osErrorOS;
 8003ab6:	23ff      	movs	r3, #255	@ 0xff
 8003ab8:	e015      	b.n	8003ae6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d011      	beq.n	8003ae4 <osSemaphoreWait+0x8c>
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <osSemaphoreWait+0x98>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	e008      	b.n	8003ae4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fbcb 	bl	8004270 <xQueueSemaphoreTake>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d001      	beq.n	8003ae4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003ae0:	23ff      	movs	r3, #255	@ 0xff
 8003ae2:	e000      	b.n	8003ae6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003b04:	f7ff fefc 	bl	8003900 <inHandlerMode>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fb1b 	bl	8004150 <xQueueGiveFromISR>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d001      	beq.n	8003b24 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003b20:	23ff      	movs	r3, #255	@ 0xff
 8003b22:	e017      	b.n	8003b54 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d013      	beq.n	8003b52 <osSemaphoreRelease+0x5e>
 8003b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b5c <osSemaphoreRelease+0x68>)
 8003b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	e00a      	b.n	8003b52 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2100      	movs	r1, #0
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa02 	bl	8003f4c <xQueueGenericSend>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d001      	beq.n	8003b52 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003b4e:	23ff      	movs	r3, #255	@ 0xff
 8003b50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f103 0208 	add.w	r2, r3, #8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295
 8003b78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f103 0208 	add.w	r2, r3, #8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f103 0208 	add.w	r2, r3, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d103      	bne.n	8003c22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e00c      	b.n	8003c3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3308      	adds	r3, #8
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e002      	b.n	8003c30 <vListInsert+0x2e>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d2f6      	bcs.n	8003c2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	601a      	str	r2, [r3, #0]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6892      	ldr	r2, [r2, #8]
 8003c8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6852      	ldr	r2, [r2, #4]
 8003c94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d103      	bne.n	8003ca8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	1e5a      	subs	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cf4:	f001 fed0 	bl	8005a98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d00:	68f9      	ldr	r1, [r7, #12]
 8003d02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	441a      	add	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	3b01      	subs	r3, #1
 8003d26:	68f9      	ldr	r1, [r7, #12]
 8003d28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	441a      	add	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	22ff      	movs	r2, #255	@ 0xff
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	22ff      	movs	r2, #255	@ 0xff
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d114      	bne.n	8003d74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01a      	beq.n	8003d88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3310      	adds	r3, #16
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 f984 	bl	8005064 <xTaskRemoveFromEventList>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d012      	beq.n	8003d88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <xQueueGenericReset+0xd0>)
 8003d64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	e009      	b.n	8003d88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3310      	adds	r3, #16
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fef1 	bl	8003b60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3324      	adds	r3, #36	@ 0x24
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff feec 	bl	8003b60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d88:	f001 feb8 	bl	8005afc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d8c:	2301      	movs	r3, #1
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	@ 0x38
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	e7fd      	b.n	8003de2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <xQueueGenericCreateStatic+0x56>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <xQueueGenericCreateStatic+0x5a>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <xQueueGenericCreateStatic+0x5c>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	623b      	str	r3, [r7, #32]
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <xQueueGenericCreateStatic+0x84>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <xQueueGenericCreateStatic+0x88>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <xQueueGenericCreateStatic+0x8a>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	61fb      	str	r3, [r7, #28]
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e42:	2348      	movs	r3, #72	@ 0x48
 8003e44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b48      	cmp	r3, #72	@ 0x48
 8003e4a:	d00b      	beq.n	8003e64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	61bb      	str	r3, [r7, #24]
}
 8003e5e:	bf00      	nop
 8003e60:	bf00      	nop
 8003e62:	e7fd      	b.n	8003e60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f840 	bl	8003f0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3730      	adds	r7, #48	@ 0x30
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b08a      	sub	sp, #40	@ 0x28
 8003e9a:	af02      	add	r7, sp, #8
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	613b      	str	r3, [r7, #16]
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	3348      	adds	r3, #72	@ 0x48
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 ff03 	bl	8005cdc <pvPortMalloc>
 8003ed6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d011      	beq.n	8003f02 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	3348      	adds	r3, #72	@ 0x48
 8003ee6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ef0:	79fa      	ldrb	r2, [r7, #7]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f805 	bl	8003f0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f02:	69bb      	ldr	r3, [r7, #24]
	}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e002      	b.n	8003f2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	69b8      	ldr	r0, [r7, #24]
 8003f3e:	f7ff fec3 	bl	8003cc8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08e      	sub	sp, #56	@ 0x38
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10b      	bne.n	8003f80 <xQueueGenericSend+0x34>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <xQueueGenericSend+0x42>
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <xQueueGenericSend+0x46>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <xQueueGenericSend+0x48>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <xQueueGenericSend+0x64>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d103      	bne.n	8003fbe <xQueueGenericSend+0x72>
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <xQueueGenericSend+0x76>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <xQueueGenericSend+0x78>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <xQueueGenericSend+0x94>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	623b      	str	r3, [r7, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
 8003fde:	e7fd      	b.n	8003fdc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fe0:	f001 fa06 	bl	80053f0 <xTaskGetSchedulerState>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <xQueueGenericSend+0xa4>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <xQueueGenericSend+0xa8>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <xQueueGenericSend+0xaa>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <xQueueGenericSend+0xc6>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	61fb      	str	r3, [r7, #28]
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	e7fd      	b.n	800400e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004012:	f001 fd41 	bl	8005a98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <xQueueGenericSend+0xdc>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d129      	bne.n	800407c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800402e:	f000 fac9 	bl	80045c4 <prvCopyDataToQueue>
 8004032:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	2b00      	cmp	r3, #0
 800403a:	d010      	beq.n	800405e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800403c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403e:	3324      	adds	r3, #36	@ 0x24
 8004040:	4618      	mov	r0, r3
 8004042:	f001 f80f 	bl	8005064 <xTaskRemoveFromEventList>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d013      	beq.n	8004074 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800404c:	4b3f      	ldr	r3, [pc, #252]	@ (800414c <xQueueGenericSend+0x200>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	e00a      	b.n	8004074 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800405e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004064:	4b39      	ldr	r3, [pc, #228]	@ (800414c <xQueueGenericSend+0x200>)
 8004066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004074:	f001 fd42 	bl	8005afc <vPortExitCritical>
				return pdPASS;
 8004078:	2301      	movs	r3, #1
 800407a:	e063      	b.n	8004144 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004082:	f001 fd3b 	bl	8005afc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004086:	2300      	movs	r3, #0
 8004088:	e05c      	b.n	8004144 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800408a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	4618      	mov	r0, r3
 8004096:	f001 f849 	bl	800512c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800409a:	2301      	movs	r3, #1
 800409c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800409e:	f001 fd2d 	bl	8005afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040a2:	f000 fdef 	bl	8004c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040a6:	f001 fcf7 	bl	8005a98 <vPortEnterCritical>
 80040aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040b0:	b25b      	sxtb	r3, r3
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d103      	bne.n	80040c0 <xQueueGenericSend+0x174>
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040c6:	b25b      	sxtb	r3, r3
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d103      	bne.n	80040d6 <xQueueGenericSend+0x18a>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040d6:	f001 fd11 	bl	8005afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040da:	1d3a      	adds	r2, r7, #4
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 f838 	bl	8005158 <xTaskCheckForTimeOut>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d124      	bne.n	8004138 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040f0:	f000 fb60 	bl	80047b4 <prvIsQueueFull>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d018      	beq.n	800412c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	3310      	adds	r3, #16
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f000 ff88 	bl	8005018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800410a:	f000 faeb 	bl	80046e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800410e:	f000 fdc7 	bl	8004ca0 <xTaskResumeAll>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	f47f af7c 	bne.w	8004012 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800411a:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <xQueueGenericSend+0x200>)
 800411c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	e772      	b.n	8004012 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800412c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800412e:	f000 fad9 	bl	80046e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004132:	f000 fdb5 	bl	8004ca0 <xTaskResumeAll>
 8004136:	e76c      	b.n	8004012 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800413a:	f000 fad3 	bl	80046e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800413e:	f000 fdaf 	bl	8004ca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004142:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004144:	4618      	mov	r0, r3
 8004146:	3738      	adds	r7, #56	@ 0x38
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08e      	sub	sp, #56	@ 0x38
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10b      	bne.n	800417c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	623b      	str	r3, [r7, #32]
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800417c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	61fb      	str	r3, [r7, #28]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800419c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <xQueueGiveFromISR+0x5c>
 80041a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <xQueueGiveFromISR+0x60>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <xQueueGiveFromISR+0x62>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10b      	bne.n	80041ce <xQueueGiveFromISR+0x7e>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	61bb      	str	r3, [r7, #24]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041ce:	f001 fd43 	bl	8005c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041d2:	f3ef 8211 	mrs	r2, BASEPRI
 80041d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	617a      	str	r2, [r7, #20]
 80041e8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80041f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d22b      	bcs.n	8004256 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004210:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d112      	bne.n	8004240 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	3324      	adds	r3, #36	@ 0x24
 8004226:	4618      	mov	r0, r3
 8004228:	f000 ff1c 	bl	8005064 <xTaskRemoveFromEventList>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00e      	beq.n	8004250 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e007      	b.n	8004250 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004244:	3301      	adds	r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	b25a      	sxtb	r2, r3
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004250:	2301      	movs	r3, #1
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
 8004254:	e001      	b.n	800425a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004256:	2300      	movs	r3, #0
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
 800425a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004264:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004268:	4618      	mov	r0, r3
 800426a:	3738      	adds	r7, #56	@ 0x38
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08e      	sub	sp, #56	@ 0x38
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800427a:	2300      	movs	r3, #0
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10b      	bne.n	80042a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	623b      	str	r3, [r7, #32]
}
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	e7fd      	b.n	80042a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	61fb      	str	r3, [r7, #28]
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042c4:	f001 f894 	bl	80053f0 <xTaskGetSchedulerState>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <xQueueSemaphoreTake+0x64>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <xQueueSemaphoreTake+0x68>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <xQueueSemaphoreTake+0x6a>
 80042d8:	2300      	movs	r3, #0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	61bb      	str	r3, [r7, #24]
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	e7fd      	b.n	80042f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042f6:	f001 fbcf 	bl	8005a98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80042fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d024      	beq.n	8004350 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	1e5a      	subs	r2, r3, #1
 800430a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800430e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004316:	f001 fa17 	bl	8005748 <pvTaskIncrementMutexHeldCount>
 800431a:	4602      	mov	r2, r0
 800431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00f      	beq.n	8004348 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	3310      	adds	r3, #16
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fe99 	bl	8005064 <xTaskRemoveFromEventList>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004338:	4b54      	ldr	r3, [pc, #336]	@ (800448c <xQueueSemaphoreTake+0x21c>)
 800433a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004348:	f001 fbd8 	bl	8005afc <vPortExitCritical>
				return pdPASS;
 800434c:	2301      	movs	r3, #1
 800434e:	e098      	b.n	8004482 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d112      	bne.n	800437c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	617b      	str	r3, [r7, #20]
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004374:	f001 fbc2 	bl	8005afc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004378:	2300      	movs	r3, #0
 800437a:	e082      	b.n	8004482 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800437c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004382:	f107 030c 	add.w	r3, r7, #12
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fed0 	bl	800512c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004390:	f001 fbb4 	bl	8005afc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004394:	f000 fc76 	bl	8004c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004398:	f001 fb7e 	bl	8005a98 <vPortEnterCritical>
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043a2:	b25b      	sxtb	r3, r3
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d103      	bne.n	80043b2 <xQueueSemaphoreTake+0x142>
 80043aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d103      	bne.n	80043c8 <xQueueSemaphoreTake+0x158>
 80043c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043c8:	f001 fb98 	bl	8005afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043cc:	463a      	mov	r2, r7
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	4611      	mov	r1, r2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 febf 	bl	8005158 <xTaskCheckForTimeOut>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d132      	bne.n	8004446 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043e2:	f000 f9d1 	bl	8004788 <prvIsQueueEmpty>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d026      	beq.n	800443a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80043f4:	f001 fb50 	bl	8005a98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 f815 	bl	800542c <xTaskPriorityInherit>
 8004402:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004404:	f001 fb7a 	bl	8005afc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440a:	3324      	adds	r3, #36	@ 0x24
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fe01 	bl	8005018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004416:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004418:	f000 f964 	bl	80046e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800441c:	f000 fc40 	bl	8004ca0 <xTaskResumeAll>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	f47f af67 	bne.w	80042f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004428:	4b18      	ldr	r3, [pc, #96]	@ (800448c <xQueueSemaphoreTake+0x21c>)
 800442a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	e75d      	b.n	80042f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800443a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800443c:	f000 f952 	bl	80046e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004440:	f000 fc2e 	bl	8004ca0 <xTaskResumeAll>
 8004444:	e757      	b.n	80042f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004446:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004448:	f000 f94c 	bl	80046e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800444c:	f000 fc28 	bl	8004ca0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004450:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004452:	f000 f999 	bl	8004788 <prvIsQueueEmpty>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	f43f af4c 	beq.w	80042f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004464:	f001 fb18 	bl	8005a98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004468:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800446a:	f000 f893 	bl	8004594 <prvGetDisinheritPriorityAfterTimeout>
 800446e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004476:	4618      	mov	r0, r3
 8004478:	f001 f8d6 	bl	8005628 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800447c:	f001 fb3e 	bl	8005afc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004480:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004482:	4618      	mov	r0, r3
 8004484:	3738      	adds	r7, #56	@ 0x38
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	@ 0x38
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10b      	bne.n	80044be <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	623b      	str	r3, [r7, #32]
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	e7fd      	b.n	80044ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <xQueueReceiveFromISR+0x3c>
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <xQueueReceiveFromISR+0x40>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <xQueueReceiveFromISR+0x42>
 80044d0:	2300      	movs	r3, #0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	61fb      	str	r3, [r7, #28]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044ee:	f001 fbb3 	bl	8005c58 <vPortValidateInterruptPriority>
	__asm volatile
 80044f2:	f3ef 8211 	mrs	r2, BASEPRI
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	61ba      	str	r2, [r7, #24]
 8004508:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800450a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d02f      	beq.n	800457a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004528:	f000 f8b6 	bl	8004698 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	1e5a      	subs	r2, r3, #1
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004534:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d112      	bne.n	8004564 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	3310      	adds	r3, #16
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fd8a 	bl	8005064 <xTaskRemoveFromEventList>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00e      	beq.n	8004574 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e007      	b.n	8004574 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004568:	3301      	adds	r3, #1
 800456a:	b2db      	uxtb	r3, r3
 800456c:	b25a      	sxtb	r2, r3
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004574:	2301      	movs	r3, #1
 8004576:	637b      	str	r3, [r7, #52]	@ 0x34
 8004578:	e001      	b.n	800457e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800457a:	2300      	movs	r3, #0
 800457c:	637b      	str	r3, [r7, #52]	@ 0x34
 800457e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004580:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f383 8811 	msr	BASEPRI, r3
}
 8004588:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800458a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800458c:	4618      	mov	r0, r3
 800458e:	3738      	adds	r7, #56	@ 0x38
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d006      	beq.n	80045b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e001      	b.n	80045b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80045b6:	68fb      	ldr	r3, [r7, #12]
	}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d14d      	bne.n	8004686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 ff92 	bl	8005518 <xTaskPriorityDisinherit>
 80045f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	e043      	b.n	8004686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d119      	bne.n	8004638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6858      	ldr	r0, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	461a      	mov	r2, r3
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	f002 f84d 	bl	80066ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	441a      	add	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d32b      	bcc.n	8004686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	e026      	b.n	8004686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68d8      	ldr	r0, [r3, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004640:	461a      	mov	r2, r3
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	f002 f833 	bl	80066ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004650:	425b      	negs	r3, r3
 8004652:	441a      	add	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d207      	bcs.n	8004674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466c:	425b      	negs	r3, r3
 800466e:	441a      	add	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d105      	bne.n	8004686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	3b01      	subs	r3, #1
 8004684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800468e:	697b      	ldr	r3, [r7, #20]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d018      	beq.n	80046dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	441a      	add	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d303      	bcc.n	80046cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68d9      	ldr	r1, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	461a      	mov	r2, r3
 80046d6:	6838      	ldr	r0, [r7, #0]
 80046d8:	f001 ffe9 	bl	80066ae <memcpy>
	}
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046ec:	f001 f9d4 	bl	8005a98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046f8:	e011      	b.n	800471e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d012      	beq.n	8004728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3324      	adds	r3, #36	@ 0x24
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fcac 	bl	8005064 <xTaskRemoveFromEventList>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004712:	f000 fd85 	bl	8005220 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	3b01      	subs	r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800471e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004722:	2b00      	cmp	r3, #0
 8004724:	dce9      	bgt.n	80046fa <prvUnlockQueue+0x16>
 8004726:	e000      	b.n	800472a <prvUnlockQueue+0x46>
					break;
 8004728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	22ff      	movs	r2, #255	@ 0xff
 800472e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004732:	f001 f9e3 	bl	8005afc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004736:	f001 f9af 	bl	8005a98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004742:	e011      	b.n	8004768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d012      	beq.n	8004772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3310      	adds	r3, #16
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fc87 	bl	8005064 <xTaskRemoveFromEventList>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800475c:	f000 fd60 	bl	8005220 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004760:	7bbb      	ldrb	r3, [r7, #14]
 8004762:	3b01      	subs	r3, #1
 8004764:	b2db      	uxtb	r3, r3
 8004766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800476c:	2b00      	cmp	r3, #0
 800476e:	dce9      	bgt.n	8004744 <prvUnlockQueue+0x60>
 8004770:	e000      	b.n	8004774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	22ff      	movs	r2, #255	@ 0xff
 8004778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800477c:	f001 f9be 	bl	8005afc <vPortExitCritical>
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004790:	f001 f982 	bl	8005a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800479c:	2301      	movs	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e001      	b.n	80047a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047a6:	f001 f9a9 	bl	8005afc <vPortExitCritical>

	return xReturn;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047bc:	f001 f96c 	bl	8005a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d102      	bne.n	80047d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e001      	b.n	80047d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047d6:	f001 f991 	bl	8005afc <vPortExitCritical>

	return xReturn;
 80047da:	68fb      	ldr	r3, [r7, #12]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08e      	sub	sp, #56	@ 0x38
 80047e8:	af04      	add	r7, sp, #16
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <xTaskCreateStatic+0x2c>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	623b      	str	r3, [r7, #32]
}
 800480a:	bf00      	nop
 800480c:	bf00      	nop
 800480e:	e7fd      	b.n	800480c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	61fb      	str	r3, [r7, #28]
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	e7fd      	b.n	800482a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800482e:	23a0      	movs	r3, #160	@ 0xa0
 8004830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2ba0      	cmp	r3, #160	@ 0xa0
 8004836:	d00b      	beq.n	8004850 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	61bb      	str	r3, [r7, #24]
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004850:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01e      	beq.n	8004896 <xTaskCreateStatic+0xb2>
 8004858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01b      	beq.n	8004896 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800485e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	2202      	movs	r2, #2
 800486c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004870:	2300      	movs	r3, #0
 8004872:	9303      	str	r3, [sp, #12]
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	9302      	str	r3, [sp, #8]
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f851 	bl	8004930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800488e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004890:	f000 f8ee 	bl	8004a70 <prvAddNewTaskToReadyList>
 8004894:	e001      	b.n	800489a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800489a:	697b      	ldr	r3, [r7, #20]
	}
 800489c:	4618      	mov	r0, r3
 800489e:	3728      	adds	r7, #40	@ 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	@ 0x30
 80048a8:	af04      	add	r7, sp, #16
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fa0f 	bl	8005cdc <pvPortMalloc>
 80048be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048c6:	20a0      	movs	r0, #160	@ 0xa0
 80048c8:	f001 fa08 	bl	8005cdc <pvPortMalloc>
 80048cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80048da:	e005      	b.n	80048e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048dc:	6978      	ldr	r0, [r7, #20]
 80048de:	f001 facb 	bl	8005e78 <vPortFree>
 80048e2:	e001      	b.n	80048e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d017      	beq.n	800491e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	2300      	movs	r3, #0
 80048fa:	9303      	str	r3, [sp, #12]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	9302      	str	r3, [sp, #8]
 8004900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f80f 	bl	8004930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004912:	69f8      	ldr	r0, [r7, #28]
 8004914:	f000 f8ac 	bl	8004a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004918:	2301      	movs	r3, #1
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	e002      	b.n	8004924 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004924:	69bb      	ldr	r3, [r7, #24]
	}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004948:	3b01      	subs	r3, #1
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00b      	beq.n	800497a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	617b      	str	r3, [r7, #20]
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01f      	beq.n	80049c0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004980:	2300      	movs	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e012      	b.n	80049ac <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	7819      	ldrb	r1, [r3, #0]
 800498e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	3334      	adds	r3, #52	@ 0x34
 8004996:	460a      	mov	r2, r1
 8004998:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d006      	beq.n	80049b4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	3301      	adds	r3, #1
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d9e9      	bls.n	8004986 <prvInitialiseNewTask+0x56>
 80049b2:	e000      	b.n	80049b6 <prvInitialiseNewTask+0x86>
			{
				break;
 80049b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049be:	e003      	b.n	80049c8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d901      	bls.n	80049d2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049ce:	2306      	movs	r3, #6
 80049d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049dc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e0:	2200      	movs	r2, #0
 80049e2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	3304      	adds	r3, #4
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff f8d9 	bl	8003ba0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	3318      	adds	r3, #24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff f8d4 	bl	8003ba0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a00:	f1c3 0207 	rsb	r2, r3, #7
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	334c      	adds	r3, #76	@ 0x4c
 8004a22:	224c      	movs	r2, #76	@ 0x4c
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fd70 	bl	800650c <memset>
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8004a64 <prvInitialiseNewTask+0x134>)
 8004a30:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	4a0c      	ldr	r2, [pc, #48]	@ (8004a68 <prvInitialiseNewTask+0x138>)
 8004a36:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a6c <prvInitialiseNewTask+0x13c>)
 8004a3c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	68f9      	ldr	r1, [r7, #12]
 8004a42:	69b8      	ldr	r0, [r7, #24]
 8004a44:	f000 fefa 	bl	800583c <pxPortInitialiseStack>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a5a:	bf00      	nop
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200041c4 	.word	0x200041c4
 8004a68:	2000422c 	.word	0x2000422c
 8004a6c:	20004294 	.word	0x20004294

08004a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a78:	f001 f80e 	bl	8005a98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b28 <prvAddNewTaskToReadyList+0xb8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	4a29      	ldr	r2, [pc, #164]	@ (8004b28 <prvAddNewTaskToReadyList+0xb8>)
 8004a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a86:	4b29      	ldr	r3, [pc, #164]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a8e:	4a27      	ldr	r2, [pc, #156]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a94:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <prvAddNewTaskToReadyList+0xb8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d110      	bne.n	8004abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a9c:	f000 fbe4 	bl	8005268 <prvInitialiseTaskLists>
 8004aa0:	e00d      	b.n	8004abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004aa2:	4b23      	ldr	r3, [pc, #140]	@ (8004b30 <prvAddNewTaskToReadyList+0xc0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aaa:	4b20      	ldr	r3, [pc, #128]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d802      	bhi.n	8004abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004abe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <prvAddNewTaskToReadyList+0xc4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b34 <prvAddNewTaskToReadyList+0xc4>)
 8004ac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	2201      	movs	r2, #1
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	4b19      	ldr	r3, [pc, #100]	@ (8004b38 <prvAddNewTaskToReadyList+0xc8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	4a18      	ldr	r2, [pc, #96]	@ (8004b38 <prvAddNewTaskToReadyList+0xc8>)
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4a15      	ldr	r2, [pc, #84]	@ (8004b3c <prvAddNewTaskToReadyList+0xcc>)
 8004ae8:	441a      	add	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7ff f862 	bl	8003bba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004af6:	f001 f801 	bl	8005afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <prvAddNewTaskToReadyList+0xc0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00e      	beq.n	8004b20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b02:	4b0a      	ldr	r3, [pc, #40]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d207      	bcs.n	8004b20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b10:	4b0b      	ldr	r3, [pc, #44]	@ (8004b40 <prvAddNewTaskToReadyList+0xd0>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000570 	.word	0x20000570
 8004b2c:	20000470 	.word	0x20000470
 8004b30:	2000057c 	.word	0x2000057c
 8004b34:	2000058c 	.word	0x2000058c
 8004b38:	20000578 	.word	0x20000578
 8004b3c:	20000474 	.word	0x20000474
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b56:	4b14      	ldr	r3, [pc, #80]	@ (8004ba8 <vTaskDelay+0x64>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <vTaskDelay+0x32>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	60bb      	str	r3, [r7, #8]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b76:	f000 f885 	bl	8004c84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fdf7 	bl	8005770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b82:	f000 f88d 	bl	8004ca0 <xTaskResumeAll>
 8004b86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d107      	bne.n	8004b9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b8e:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <vTaskDelay+0x68>)
 8004b90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000598 	.word	0x20000598
 8004bac:	e000ed04 	.word	0xe000ed04

08004bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	@ 0x28
 8004bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bbe:	463a      	mov	r2, r7
 8004bc0:	1d39      	adds	r1, r7, #4
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fb ffe0 	bl	8000b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bcc:	6839      	ldr	r1, [r7, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	9202      	str	r2, [sp, #8]
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	460a      	mov	r2, r1
 8004bde:	4921      	ldr	r1, [pc, #132]	@ (8004c64 <vTaskStartScheduler+0xb4>)
 8004be0:	4821      	ldr	r0, [pc, #132]	@ (8004c68 <vTaskStartScheduler+0xb8>)
 8004be2:	f7ff fdff 	bl	80047e4 <xTaskCreateStatic>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4a20      	ldr	r2, [pc, #128]	@ (8004c6c <vTaskStartScheduler+0xbc>)
 8004bea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bec:	4b1f      	ldr	r3, [pc, #124]	@ (8004c6c <vTaskStartScheduler+0xbc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e001      	b.n	8004bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d11b      	bne.n	8004c3c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	613b      	str	r3, [r7, #16]
}
 8004c16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c18:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <vTaskStartScheduler+0xc0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	334c      	adds	r3, #76	@ 0x4c
 8004c1e:	4a15      	ldr	r2, [pc, #84]	@ (8004c74 <vTaskStartScheduler+0xc4>)
 8004c20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <vTaskStartScheduler+0xc8>)
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295
 8004c28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c2a:	4b14      	ldr	r3, [pc, #80]	@ (8004c7c <vTaskStartScheduler+0xcc>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c30:	4b13      	ldr	r3, [pc, #76]	@ (8004c80 <vTaskStartScheduler+0xd0>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c36:	f000 fe8b 	bl	8005950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c3a:	e00f      	b.n	8004c5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d10b      	bne.n	8004c5c <vTaskStartScheduler+0xac>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	60fb      	str	r3, [r7, #12]
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <vTaskStartScheduler+0xa8>
}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	08007520 	.word	0x08007520
 8004c68:	08005239 	.word	0x08005239
 8004c6c:	20000594 	.word	0x20000594
 8004c70:	20000470 	.word	0x20000470
 8004c74:	20000020 	.word	0x20000020
 8004c78:	20000590 	.word	0x20000590
 8004c7c:	2000057c 	.word	0x2000057c
 8004c80:	20000574 	.word	0x20000574

08004c84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c88:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <vTaskSuspendAll+0x18>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	4a03      	ldr	r2, [pc, #12]	@ (8004c9c <vTaskSuspendAll+0x18>)
 8004c90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c92:	bf00      	nop
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000598 	.word	0x20000598

08004ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cae:	4b42      	ldr	r3, [pc, #264]	@ (8004db8 <xTaskResumeAll+0x118>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <xTaskResumeAll+0x2e>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	603b      	str	r3, [r7, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cce:	f000 fee3 	bl	8005a98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cd2:	4b39      	ldr	r3, [pc, #228]	@ (8004db8 <xTaskResumeAll+0x118>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	4a37      	ldr	r2, [pc, #220]	@ (8004db8 <xTaskResumeAll+0x118>)
 8004cda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cdc:	4b36      	ldr	r3, [pc, #216]	@ (8004db8 <xTaskResumeAll+0x118>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d161      	bne.n	8004da8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ce4:	4b35      	ldr	r3, [pc, #212]	@ (8004dbc <xTaskResumeAll+0x11c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d05d      	beq.n	8004da8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cec:	e02e      	b.n	8004d4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cee:	4b34      	ldr	r3, [pc, #208]	@ (8004dc0 <xTaskResumeAll+0x120>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3318      	adds	r3, #24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe ffba 	bl	8003c74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe ffb5 	bl	8003c74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	2201      	movs	r2, #1
 8004d10:	409a      	lsls	r2, r3
 8004d12:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc4 <xTaskResumeAll+0x124>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <xTaskResumeAll+0x124>)
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <xTaskResumeAll+0x128>)
 8004d2a:	441a      	add	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f7fe ff41 	bl	8003bba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3c:	4b23      	ldr	r3, [pc, #140]	@ (8004dcc <xTaskResumeAll+0x12c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d46:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <xTaskResumeAll+0x130>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc0 <xTaskResumeAll+0x120>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1cc      	bne.n	8004cee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d5a:	f000 fb29 	bl	80053b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd4 <xTaskResumeAll+0x134>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d010      	beq.n	8004d8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d6a:	f000 f837 	bl	8004ddc <xTaskIncrementTick>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d74:	4b16      	ldr	r3, [pc, #88]	@ (8004dd0 <xTaskResumeAll+0x130>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f1      	bne.n	8004d6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d86:	4b13      	ldr	r3, [pc, #76]	@ (8004dd4 <xTaskResumeAll+0x134>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d8c:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <xTaskResumeAll+0x130>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d009      	beq.n	8004da8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d94:	2301      	movs	r3, #1
 8004d96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d98:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <xTaskResumeAll+0x138>)
 8004d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004da8:	f000 fea8 	bl	8005afc <vPortExitCritical>

	return xAlreadyYielded;
 8004dac:	68bb      	ldr	r3, [r7, #8]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000598 	.word	0x20000598
 8004dbc:	20000570 	.word	0x20000570
 8004dc0:	20000530 	.word	0x20000530
 8004dc4:	20000578 	.word	0x20000578
 8004dc8:	20000474 	.word	0x20000474
 8004dcc:	20000470 	.word	0x20000470
 8004dd0:	20000584 	.word	0x20000584
 8004dd4:	20000580 	.word	0x20000580
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004de6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f24 <xTaskIncrementTick+0x148>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 808f 	bne.w	8004f0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004df0:	4b4d      	ldr	r3, [pc, #308]	@ (8004f28 <xTaskIncrementTick+0x14c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004df8:	4a4b      	ldr	r2, [pc, #300]	@ (8004f28 <xTaskIncrementTick+0x14c>)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d121      	bne.n	8004e48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e04:	4b49      	ldr	r3, [pc, #292]	@ (8004f2c <xTaskIncrementTick+0x150>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	603b      	str	r3, [r7, #0]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <xTaskIncrementTick+0x46>
 8004e26:	4b41      	ldr	r3, [pc, #260]	@ (8004f2c <xTaskIncrementTick+0x150>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	4b40      	ldr	r3, [pc, #256]	@ (8004f30 <xTaskIncrementTick+0x154>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a3e      	ldr	r2, [pc, #248]	@ (8004f2c <xTaskIncrementTick+0x150>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	4a3e      	ldr	r2, [pc, #248]	@ (8004f30 <xTaskIncrementTick+0x154>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f34 <xTaskIncrementTick+0x158>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	4a3c      	ldr	r2, [pc, #240]	@ (8004f34 <xTaskIncrementTick+0x158>)
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	f000 fab4 	bl	80053b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e48:	4b3b      	ldr	r3, [pc, #236]	@ (8004f38 <xTaskIncrementTick+0x15c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d348      	bcc.n	8004ee4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e52:	4b36      	ldr	r3, [pc, #216]	@ (8004f2c <xTaskIncrementTick+0x150>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5c:	4b36      	ldr	r3, [pc, #216]	@ (8004f38 <xTaskIncrementTick+0x15c>)
 8004e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e62:	601a      	str	r2, [r3, #0]
					break;
 8004e64:	e03e      	b.n	8004ee4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e66:	4b31      	ldr	r3, [pc, #196]	@ (8004f2c <xTaskIncrementTick+0x150>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d203      	bcs.n	8004e86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f38 <xTaskIncrementTick+0x15c>)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e84:	e02e      	b.n	8004ee4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fef2 	bl	8003c74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fee9 	bl	8003c74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <xTaskIncrementTick+0x160>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	4a22      	ldr	r2, [pc, #136]	@ (8004f3c <xTaskIncrementTick+0x160>)
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <xTaskIncrementTick+0x164>)
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f7fe fe75 	bl	8003bba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f44 <xTaskIncrementTick+0x168>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3b9      	bcc.n	8004e52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ee2:	e7b6      	b.n	8004e52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ee4:	4b17      	ldr	r3, [pc, #92]	@ (8004f44 <xTaskIncrementTick+0x168>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eea:	4915      	ldr	r1, [pc, #84]	@ (8004f40 <xTaskIncrementTick+0x164>)
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d901      	bls.n	8004f00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004efc:	2301      	movs	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f00:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <xTaskIncrementTick+0x16c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d007      	beq.n	8004f18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e004      	b.n	8004f18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <xTaskIncrementTick+0x170>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	4a0d      	ldr	r2, [pc, #52]	@ (8004f4c <xTaskIncrementTick+0x170>)
 8004f16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f18:	697b      	ldr	r3, [r7, #20]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000598 	.word	0x20000598
 8004f28:	20000574 	.word	0x20000574
 8004f2c:	20000528 	.word	0x20000528
 8004f30:	2000052c 	.word	0x2000052c
 8004f34:	20000588 	.word	0x20000588
 8004f38:	20000590 	.word	0x20000590
 8004f3c:	20000578 	.word	0x20000578
 8004f40:	20000474 	.word	0x20000474
 8004f44:	20000470 	.word	0x20000470
 8004f48:	20000584 	.word	0x20000584
 8004f4c:	20000580 	.word	0x20000580

08004f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f56:	4b2a      	ldr	r3, [pc, #168]	@ (8005000 <vTaskSwitchContext+0xb0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f5e:	4b29      	ldr	r3, [pc, #164]	@ (8005004 <vTaskSwitchContext+0xb4>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f64:	e045      	b.n	8004ff2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004f66:	4b27      	ldr	r3, [pc, #156]	@ (8005004 <vTaskSwitchContext+0xb4>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f6c:	4b26      	ldr	r3, [pc, #152]	@ (8005008 <vTaskSwitchContext+0xb8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	fab3 f383 	clz	r3, r3
 8004f78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f7a:	7afb      	ldrb	r3, [r7, #11]
 8004f7c:	f1c3 031f 	rsb	r3, r3, #31
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	4922      	ldr	r1, [pc, #136]	@ (800500c <vTaskSwitchContext+0xbc>)
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <vTaskSwitchContext+0x5e>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	607b      	str	r3, [r7, #4]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <vTaskSwitchContext+0x5a>
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4a14      	ldr	r2, [pc, #80]	@ (800500c <vTaskSwitchContext+0xbc>)
 8004fba:	4413      	add	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d104      	bne.n	8004fde <vTaskSwitchContext+0x8e>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8005010 <vTaskSwitchContext+0xc0>)
 8004fe6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fe8:	4b09      	ldr	r3, [pc, #36]	@ (8005010 <vTaskSwitchContext+0xc0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	334c      	adds	r3, #76	@ 0x4c
 8004fee:	4a09      	ldr	r2, [pc, #36]	@ (8005014 <vTaskSwitchContext+0xc4>)
 8004ff0:	6013      	str	r3, [r2, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000598 	.word	0x20000598
 8005004:	20000584 	.word	0x20000584
 8005008:	20000578 	.word	0x20000578
 800500c:	20000474 	.word	0x20000474
 8005010:	20000470 	.word	0x20000470
 8005014:	20000020 	.word	0x20000020

08005018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	60fb      	str	r3, [r7, #12]
}
 800503a:	bf00      	nop
 800503c:	bf00      	nop
 800503e:	e7fd      	b.n	800503c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005040:	4b07      	ldr	r3, [pc, #28]	@ (8005060 <vTaskPlaceOnEventList+0x48>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3318      	adds	r3, #24
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fe fdda 	bl	8003c02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800504e:	2101      	movs	r1, #1
 8005050:	6838      	ldr	r0, [r7, #0]
 8005052:	f000 fb8d 	bl	8005770 <prvAddCurrentTaskToDelayedList>
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000470 	.word	0x20000470

08005064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	60fb      	str	r3, [r7, #12]
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	e7fd      	b.n	800508e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3318      	adds	r3, #24
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fdec 	bl	8003c74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800509c:	4b1d      	ldr	r3, [pc, #116]	@ (8005114 <xTaskRemoveFromEventList+0xb0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11c      	bne.n	80050de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fde3 	bl	8003c74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	2201      	movs	r2, #1
 80050b4:	409a      	lsls	r2, r3
 80050b6:	4b18      	ldr	r3, [pc, #96]	@ (8005118 <xTaskRemoveFromEventList+0xb4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	4a16      	ldr	r2, [pc, #88]	@ (8005118 <xTaskRemoveFromEventList+0xb4>)
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4a13      	ldr	r2, [pc, #76]	@ (800511c <xTaskRemoveFromEventList+0xb8>)
 80050ce:	441a      	add	r2, r3
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f7fe fd6f 	bl	8003bba <vListInsertEnd>
 80050dc:	e005      	b.n	80050ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	3318      	adds	r3, #24
 80050e2:	4619      	mov	r1, r3
 80050e4:	480e      	ldr	r0, [pc, #56]	@ (8005120 <xTaskRemoveFromEventList+0xbc>)
 80050e6:	f7fe fd68 	bl	8003bba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <xTaskRemoveFromEventList+0xc0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d905      	bls.n	8005104 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <xTaskRemoveFromEventList+0xc4>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e001      	b.n	8005108 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005108:	697b      	ldr	r3, [r7, #20]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000598 	.word	0x20000598
 8005118:	20000578 	.word	0x20000578
 800511c:	20000474 	.word	0x20000474
 8005120:	20000530 	.word	0x20000530
 8005124:	20000470 	.word	0x20000470
 8005128:	20000584 	.word	0x20000584

0800512c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005134:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <vTaskInternalSetTimeOutState+0x24>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800513c:	4b05      	ldr	r3, [pc, #20]	@ (8005154 <vTaskInternalSetTimeOutState+0x28>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	605a      	str	r2, [r3, #4]
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000588 	.word	0x20000588
 8005154:	20000574 	.word	0x20000574

08005158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10b      	bne.n	8005180 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	613b      	str	r3, [r7, #16]
}
 800517a:	bf00      	nop
 800517c:	bf00      	nop
 800517e:	e7fd      	b.n	800517c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	60fb      	str	r3, [r7, #12]
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	e7fd      	b.n	800519a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800519e:	f000 fc7b 	bl	8005a98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005218 <xTaskCheckForTimeOut+0xc0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d102      	bne.n	80051c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	e023      	b.n	800520a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b15      	ldr	r3, [pc, #84]	@ (800521c <xTaskCheckForTimeOut+0xc4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d007      	beq.n	80051de <xTaskCheckForTimeOut+0x86>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d302      	bcc.n	80051de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051d8:	2301      	movs	r3, #1
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	e015      	b.n	800520a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d20b      	bcs.n	8005200 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff ff99 	bl	800512c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	e004      	b.n	800520a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005206:	2301      	movs	r3, #1
 8005208:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800520a:	f000 fc77 	bl	8005afc <vPortExitCritical>

	return xReturn;
 800520e:	69fb      	ldr	r3, [r7, #28]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000574 	.word	0x20000574
 800521c:	20000588 	.word	0x20000588

08005220 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005224:	4b03      	ldr	r3, [pc, #12]	@ (8005234 <vTaskMissedYield+0x14>)
 8005226:	2201      	movs	r2, #1
 8005228:	601a      	str	r2, [r3, #0]
}
 800522a:	bf00      	nop
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	20000584 	.word	0x20000584

08005238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005240:	f000 f852 	bl	80052e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005244:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <prvIdleTask+0x28>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d9f9      	bls.n	8005240 <prvIdleTask+0x8>
			{
				taskYIELD();
 800524c:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <prvIdleTask+0x2c>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800525c:	e7f0      	b.n	8005240 <prvIdleTask+0x8>
 800525e:	bf00      	nop
 8005260:	20000474 	.word	0x20000474
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800526e:	2300      	movs	r3, #0
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	e00c      	b.n	800528e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4a12      	ldr	r2, [pc, #72]	@ (80052c8 <prvInitialiseTaskLists+0x60>)
 8005280:	4413      	add	r3, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fc6c 	bl	8003b60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3301      	adds	r3, #1
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b06      	cmp	r3, #6
 8005292:	d9ef      	bls.n	8005274 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005294:	480d      	ldr	r0, [pc, #52]	@ (80052cc <prvInitialiseTaskLists+0x64>)
 8005296:	f7fe fc63 	bl	8003b60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800529a:	480d      	ldr	r0, [pc, #52]	@ (80052d0 <prvInitialiseTaskLists+0x68>)
 800529c:	f7fe fc60 	bl	8003b60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052a0:	480c      	ldr	r0, [pc, #48]	@ (80052d4 <prvInitialiseTaskLists+0x6c>)
 80052a2:	f7fe fc5d 	bl	8003b60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052a6:	480c      	ldr	r0, [pc, #48]	@ (80052d8 <prvInitialiseTaskLists+0x70>)
 80052a8:	f7fe fc5a 	bl	8003b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052ac:	480b      	ldr	r0, [pc, #44]	@ (80052dc <prvInitialiseTaskLists+0x74>)
 80052ae:	f7fe fc57 	bl	8003b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052b2:	4b0b      	ldr	r3, [pc, #44]	@ (80052e0 <prvInitialiseTaskLists+0x78>)
 80052b4:	4a05      	ldr	r2, [pc, #20]	@ (80052cc <prvInitialiseTaskLists+0x64>)
 80052b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052b8:	4b0a      	ldr	r3, [pc, #40]	@ (80052e4 <prvInitialiseTaskLists+0x7c>)
 80052ba:	4a05      	ldr	r2, [pc, #20]	@ (80052d0 <prvInitialiseTaskLists+0x68>)
 80052bc:	601a      	str	r2, [r3, #0]
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000474 	.word	0x20000474
 80052cc:	20000500 	.word	0x20000500
 80052d0:	20000514 	.word	0x20000514
 80052d4:	20000530 	.word	0x20000530
 80052d8:	20000544 	.word	0x20000544
 80052dc:	2000055c 	.word	0x2000055c
 80052e0:	20000528 	.word	0x20000528
 80052e4:	2000052c 	.word	0x2000052c

080052e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052ee:	e019      	b.n	8005324 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052f0:	f000 fbd2 	bl	8005a98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f4:	4b10      	ldr	r3, [pc, #64]	@ (8005338 <prvCheckTasksWaitingTermination+0x50>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe fcb7 	bl	8003c74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <prvCheckTasksWaitingTermination+0x54>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3b01      	subs	r3, #1
 800530c:	4a0b      	ldr	r2, [pc, #44]	@ (800533c <prvCheckTasksWaitingTermination+0x54>)
 800530e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005310:	4b0b      	ldr	r3, [pc, #44]	@ (8005340 <prvCheckTasksWaitingTermination+0x58>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3b01      	subs	r3, #1
 8005316:	4a0a      	ldr	r2, [pc, #40]	@ (8005340 <prvCheckTasksWaitingTermination+0x58>)
 8005318:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800531a:	f000 fbef 	bl	8005afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f810 	bl	8005344 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005324:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <prvCheckTasksWaitingTermination+0x58>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e1      	bne.n	80052f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000544 	.word	0x20000544
 800533c:	20000570 	.word	0x20000570
 8005340:	20000558 	.word	0x20000558

08005344 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	334c      	adds	r3, #76	@ 0x4c
 8005350:	4618      	mov	r0, r3
 8005352:	f001 f8f3 	bl	800653c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fd87 	bl	8005e78 <vPortFree>
				vPortFree( pxTCB );
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fd84 	bl	8005e78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005370:	e019      	b.n	80053a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005378:	2b01      	cmp	r3, #1
 800537a:	d103      	bne.n	8005384 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fd7b 	bl	8005e78 <vPortFree>
	}
 8005382:	e010      	b.n	80053a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800538a:	2b02      	cmp	r3, #2
 800538c:	d00b      	beq.n	80053a6 <prvDeleteTCB+0x62>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	60fb      	str	r3, [r7, #12]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <prvDeleteTCB+0x5e>
	}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b6:	4b0c      	ldr	r3, [pc, #48]	@ (80053e8 <prvResetNextTaskUnblockTime+0x38>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d104      	bne.n	80053ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053c0:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <prvResetNextTaskUnblockTime+0x3c>)
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295
 80053c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053c8:	e008      	b.n	80053dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ca:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <prvResetNextTaskUnblockTime+0x38>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4a04      	ldr	r2, [pc, #16]	@ (80053ec <prvResetNextTaskUnblockTime+0x3c>)
 80053da:	6013      	str	r3, [r2, #0]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	20000528 	.word	0x20000528
 80053ec:	20000590 	.word	0x20000590

080053f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005424 <xTaskGetSchedulerState+0x34>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053fe:	2301      	movs	r3, #1
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	e008      	b.n	8005416 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005404:	4b08      	ldr	r3, [pc, #32]	@ (8005428 <xTaskGetSchedulerState+0x38>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800540c:	2302      	movs	r3, #2
 800540e:	607b      	str	r3, [r7, #4]
 8005410:	e001      	b.n	8005416 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005416:	687b      	ldr	r3, [r7, #4]
	}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	2000057c 	.word	0x2000057c
 8005428:	20000598 	.word	0x20000598

0800542c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d05e      	beq.n	8005500 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005446:	4b31      	ldr	r3, [pc, #196]	@ (800550c <xTaskPriorityInherit+0xe0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d24e      	bcs.n	80054ee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	db06      	blt.n	8005466 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005458:	4b2c      	ldr	r3, [pc, #176]	@ (800550c <xTaskPriorityInherit+0xe0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	f1c3 0207 	rsb	r2, r3, #7
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6959      	ldr	r1, [r3, #20]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <xTaskPriorityInherit+0xe4>)
 8005478:	4413      	add	r3, r2
 800547a:	4299      	cmp	r1, r3
 800547c:	d12f      	bne.n	80054de <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3304      	adds	r3, #4
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe fbf6 	bl	8003c74 <uxListRemove>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005492:	2201      	movs	r2, #1
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	43da      	mvns	r2, r3
 800549a:	4b1e      	ldr	r3, [pc, #120]	@ (8005514 <xTaskPriorityInherit+0xe8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4013      	ands	r3, r2
 80054a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005514 <xTaskPriorityInherit+0xe8>)
 80054a2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054a4:	4b19      	ldr	r3, [pc, #100]	@ (800550c <xTaskPriorityInherit+0xe0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b2:	2201      	movs	r2, #1
 80054b4:	409a      	lsls	r2, r3
 80054b6:	4b17      	ldr	r3, [pc, #92]	@ (8005514 <xTaskPriorityInherit+0xe8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	4a15      	ldr	r2, [pc, #84]	@ (8005514 <xTaskPriorityInherit+0xe8>)
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4a10      	ldr	r2, [pc, #64]	@ (8005510 <xTaskPriorityInherit+0xe4>)
 80054ce:	441a      	add	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f7fe fb6f 	bl	8003bba <vListInsertEnd>
 80054dc:	e004      	b.n	80054e8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054de:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <xTaskPriorityInherit+0xe0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	e008      	b.n	8005500 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054f2:	4b06      	ldr	r3, [pc, #24]	@ (800550c <xTaskPriorityInherit+0xe0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d201      	bcs.n	8005500 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005500:	68fb      	ldr	r3, [r7, #12]
	}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000470 	.word	0x20000470
 8005510:	20000474 	.word	0x20000474
 8005514:	20000578 	.word	0x20000578

08005518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d070      	beq.n	8005610 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800552e:	4b3b      	ldr	r3, [pc, #236]	@ (800561c <xTaskPriorityDisinherit+0x104>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	429a      	cmp	r2, r3
 8005536:	d00b      	beq.n	8005550 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	60fb      	str	r3, [r7, #12]
}
 800554a:	bf00      	nop
 800554c:	bf00      	nop
 800554e:	e7fd      	b.n	800554c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	60bb      	str	r3, [r7, #8]
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	e7fd      	b.n	800556c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005574:	1e5a      	subs	r2, r3, #1
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005582:	429a      	cmp	r2, r3
 8005584:	d044      	beq.n	8005610 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558a:	2b00      	cmp	r3, #0
 800558c:	d140      	bne.n	8005610 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	3304      	adds	r3, #4
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe fb6e 	bl	8003c74 <uxListRemove>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d115      	bne.n	80055ca <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a2:	491f      	ldr	r1, [pc, #124]	@ (8005620 <xTaskPriorityDisinherit+0x108>)
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <xTaskPriorityDisinherit+0xb2>
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b8:	2201      	movs	r2, #1
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43da      	mvns	r2, r3
 80055c0:	4b18      	ldr	r3, [pc, #96]	@ (8005624 <xTaskPriorityDisinherit+0x10c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4013      	ands	r3, r2
 80055c6:	4a17      	ldr	r2, [pc, #92]	@ (8005624 <xTaskPriorityDisinherit+0x10c>)
 80055c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d6:	f1c3 0207 	rsb	r2, r3, #7
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	2201      	movs	r2, #1
 80055e4:	409a      	lsls	r2, r3
 80055e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <xTaskPriorityDisinherit+0x10c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005624 <xTaskPriorityDisinherit+0x10c>)
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4a08      	ldr	r2, [pc, #32]	@ (8005620 <xTaskPriorityDisinherit+0x108>)
 80055fe:	441a      	add	r2, r3
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f7fe fad7 	bl	8003bba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800560c:	2301      	movs	r3, #1
 800560e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005610:	697b      	ldr	r3, [r7, #20]
	}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000470 	.word	0x20000470
 8005620:	20000474 	.word	0x20000474
 8005624:	20000578 	.word	0x20000578

08005628 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005636:	2301      	movs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d079      	beq.n	8005734 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	60fb      	str	r3, [r7, #12]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d902      	bls.n	8005670 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	e002      	b.n	8005676 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005674:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	429a      	cmp	r2, r3
 800567e:	d059      	beq.n	8005734 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	429a      	cmp	r2, r3
 8005688:	d154      	bne.n	8005734 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800568a:	4b2c      	ldr	r3, [pc, #176]	@ (800573c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	429a      	cmp	r2, r3
 8005692:	d10b      	bne.n	80056ac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	60bb      	str	r3, [r7, #8]
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	e7fd      	b.n	80056a8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db04      	blt.n	80056ca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f1c3 0207 	rsb	r2, r3, #7
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	6959      	ldr	r1, [r3, #20]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4a19      	ldr	r2, [pc, #100]	@ (8005740 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056da:	4413      	add	r3, r2
 80056dc:	4299      	cmp	r1, r3
 80056de:	d129      	bne.n	8005734 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fe fac5 	bl	8003c74 <uxListRemove>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f4:	2201      	movs	r2, #1
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43da      	mvns	r2, r3
 80056fc:	4b11      	ldr	r3, [pc, #68]	@ (8005744 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4013      	ands	r3, r2
 8005702:	4a10      	ldr	r2, [pc, #64]	@ (8005744 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005704:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	2201      	movs	r2, #1
 800570c:	409a      	lsls	r2, r3
 800570e:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	4a0b      	ldr	r2, [pc, #44]	@ (8005744 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a06      	ldr	r2, [pc, #24]	@ (8005740 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005726:	441a      	add	r2, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7fe fa43 	bl	8003bba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005734:	bf00      	nop
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000470 	.word	0x20000470
 8005740:	20000474 	.word	0x20000474
 8005744:	20000578 	.word	0x20000578

08005748 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800574c:	4b07      	ldr	r3, [pc, #28]	@ (800576c <pvTaskIncrementMutexHeldCount+0x24>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005754:	4b05      	ldr	r3, [pc, #20]	@ (800576c <pvTaskIncrementMutexHeldCount+0x24>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800575a:	3201      	adds	r2, #1
 800575c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800575e:	4b03      	ldr	r3, [pc, #12]	@ (800576c <pvTaskIncrementMutexHeldCount+0x24>)
 8005760:	681b      	ldr	r3, [r3, #0]
	}
 8005762:	4618      	mov	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	20000470 	.word	0x20000470

08005770 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800577a:	4b29      	ldr	r3, [pc, #164]	@ (8005820 <prvAddCurrentTaskToDelayedList+0xb0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005780:	4b28      	ldr	r3, [pc, #160]	@ (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3304      	adds	r3, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fa74 	bl	8003c74 <uxListRemove>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005792:	4b24      	ldr	r3, [pc, #144]	@ (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	2201      	movs	r2, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	43da      	mvns	r2, r3
 80057a0:	4b21      	ldr	r3, [pc, #132]	@ (8005828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4013      	ands	r3, r2
 80057a6:	4a20      	ldr	r2, [pc, #128]	@ (8005828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d10a      	bne.n	80057c8 <prvAddCurrentTaskToDelayedList+0x58>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3304      	adds	r3, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	481a      	ldr	r0, [pc, #104]	@ (800582c <prvAddCurrentTaskToDelayedList+0xbc>)
 80057c2:	f7fe f9fa 	bl	8003bba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057c6:	e026      	b.n	8005816 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057d0:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d209      	bcs.n	80057f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057e0:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <prvAddCurrentTaskToDelayedList+0xc0>)
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7fe fa08 	bl	8003c02 <vListInsert>
}
 80057f2:	e010      	b.n	8005816 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005834 <prvAddCurrentTaskToDelayedList+0xc4>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3304      	adds	r3, #4
 80057fe:	4619      	mov	r1, r3
 8005800:	4610      	mov	r0, r2
 8005802:	f7fe f9fe 	bl	8003c02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005806:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	429a      	cmp	r2, r3
 800580e:	d202      	bcs.n	8005816 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005810:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6013      	str	r3, [r2, #0]
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000574 	.word	0x20000574
 8005824:	20000470 	.word	0x20000470
 8005828:	20000578 	.word	0x20000578
 800582c:	2000055c 	.word	0x2000055c
 8005830:	2000052c 	.word	0x2000052c
 8005834:	20000528 	.word	0x20000528
 8005838:	20000590 	.word	0x20000590

0800583c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3b04      	subs	r3, #4
 800584c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3b04      	subs	r3, #4
 800585a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f023 0201 	bic.w	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3b04      	subs	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800586c:	4a0c      	ldr	r2, [pc, #48]	@ (80058a0 <pxPortInitialiseStack+0x64>)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3b14      	subs	r3, #20
 8005876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3b04      	subs	r3, #4
 8005882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f06f 0202 	mvn.w	r2, #2
 800588a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3b20      	subs	r3, #32
 8005890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	080058a5 	.word	0x080058a5

080058a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058ae:	4b13      	ldr	r3, [pc, #76]	@ (80058fc <prvTaskExitError+0x58>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d00b      	beq.n	80058d0 <prvTaskExitError+0x2c>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60fb      	str	r3, [r7, #12]
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	e7fd      	b.n	80058cc <prvTaskExitError+0x28>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60bb      	str	r3, [r7, #8]
}
 80058e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058e4:	bf00      	nop
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0fc      	beq.n	80058e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000010 	.word	0x20000010

08005900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005900:	4b07      	ldr	r3, [pc, #28]	@ (8005920 <pxCurrentTCBConst2>)
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	6808      	ldr	r0, [r1, #0]
 8005906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590a:	f380 8809 	msr	PSP, r0
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f380 8811 	msr	BASEPRI, r0
 800591a:	4770      	bx	lr
 800591c:	f3af 8000 	nop.w

08005920 <pxCurrentTCBConst2>:
 8005920:	20000470 	.word	0x20000470
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop

08005928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005928:	4808      	ldr	r0, [pc, #32]	@ (800594c <prvPortStartFirstTask+0x24>)
 800592a:	6800      	ldr	r0, [r0, #0]
 800592c:	6800      	ldr	r0, [r0, #0]
 800592e:	f380 8808 	msr	MSP, r0
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f380 8814 	msr	CONTROL, r0
 800593a:	b662      	cpsie	i
 800593c:	b661      	cpsie	f
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	df00      	svc	0
 8005948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800594a:	bf00      	nop
 800594c:	e000ed08 	.word	0xe000ed08

08005950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005956:	4b47      	ldr	r3, [pc, #284]	@ (8005a74 <xPortStartScheduler+0x124>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a47      	ldr	r2, [pc, #284]	@ (8005a78 <xPortStartScheduler+0x128>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10b      	bne.n	8005978 <xPortStartScheduler+0x28>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	613b      	str	r3, [r7, #16]
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	e7fd      	b.n	8005974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005978:	4b3e      	ldr	r3, [pc, #248]	@ (8005a74 <xPortStartScheduler+0x124>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a7c <xPortStartScheduler+0x12c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10b      	bne.n	800599a <xPortStartScheduler+0x4a>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	60fb      	str	r3, [r7, #12]
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	e7fd      	b.n	8005996 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800599a:	4b39      	ldr	r3, [pc, #228]	@ (8005a80 <xPortStartScheduler+0x130>)
 800599c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	22ff      	movs	r2, #255	@ 0xff
 80059aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4b31      	ldr	r3, [pc, #196]	@ (8005a84 <xPortStartScheduler+0x134>)
 80059c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059c2:	4b31      	ldr	r3, [pc, #196]	@ (8005a88 <xPortStartScheduler+0x138>)
 80059c4:	2207      	movs	r2, #7
 80059c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059c8:	e009      	b.n	80059de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80059ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005a88 <xPortStartScheduler+0x138>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a88 <xPortStartScheduler+0x138>)
 80059d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e6:	2b80      	cmp	r3, #128	@ 0x80
 80059e8:	d0ef      	beq.n	80059ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059ea:	4b27      	ldr	r3, [pc, #156]	@ (8005a88 <xPortStartScheduler+0x138>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f1c3 0307 	rsb	r3, r3, #7
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d00b      	beq.n	8005a0e <xPortStartScheduler+0xbe>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60bb      	str	r3, [r7, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	e7fd      	b.n	8005a0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a88 <xPortStartScheduler+0x138>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	4a1c      	ldr	r2, [pc, #112]	@ (8005a88 <xPortStartScheduler+0x138>)
 8005a16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a18:	4b1b      	ldr	r3, [pc, #108]	@ (8005a88 <xPortStartScheduler+0x138>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a20:	4a19      	ldr	r2, [pc, #100]	@ (8005a88 <xPortStartScheduler+0x138>)
 8005a22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a2c:	4b17      	ldr	r3, [pc, #92]	@ (8005a8c <xPortStartScheduler+0x13c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a16      	ldr	r2, [pc, #88]	@ (8005a8c <xPortStartScheduler+0x13c>)
 8005a32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a38:	4b14      	ldr	r3, [pc, #80]	@ (8005a8c <xPortStartScheduler+0x13c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a13      	ldr	r2, [pc, #76]	@ (8005a8c <xPortStartScheduler+0x13c>)
 8005a3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a44:	f000 f8da 	bl	8005bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a48:	4b11      	ldr	r3, [pc, #68]	@ (8005a90 <xPortStartScheduler+0x140>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a4e:	f000 f8f9 	bl	8005c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a52:	4b10      	ldr	r3, [pc, #64]	@ (8005a94 <xPortStartScheduler+0x144>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a0f      	ldr	r2, [pc, #60]	@ (8005a94 <xPortStartScheduler+0x144>)
 8005a58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a5e:	f7ff ff63 	bl	8005928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a62:	f7ff fa75 	bl	8004f50 <vTaskSwitchContext>
	prvTaskExitError();
 8005a66:	f7ff ff1d 	bl	80058a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	e000ed00 	.word	0xe000ed00
 8005a78:	410fc271 	.word	0x410fc271
 8005a7c:	410fc270 	.word	0x410fc270
 8005a80:	e000e400 	.word	0xe000e400
 8005a84:	2000059c 	.word	0x2000059c
 8005a88:	200005a0 	.word	0x200005a0
 8005a8c:	e000ed20 	.word	0xe000ed20
 8005a90:	20000010 	.word	0x20000010
 8005a94:	e000ef34 	.word	0xe000ef34

08005a98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	607b      	str	r3, [r7, #4]
}
 8005ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ab2:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <vPortEnterCritical+0x5c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8005af4 <vPortEnterCritical+0x5c>)
 8005aba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005abc:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <vPortEnterCritical+0x5c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d110      	bne.n	8005ae6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <vPortEnterCritical+0x60>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	603b      	str	r3, [r7, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	e7fd      	b.n	8005ae2 <vPortEnterCritical+0x4a>
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000010 	.word	0x20000010
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b02:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <vPortExitCritical+0x50>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10b      	bne.n	8005b22 <vPortExitCritical+0x26>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	607b      	str	r3, [r7, #4]
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	e7fd      	b.n	8005b1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b22:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <vPortExitCritical+0x50>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	4a08      	ldr	r2, [pc, #32]	@ (8005b4c <vPortExitCritical+0x50>)
 8005b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b2c:	4b07      	ldr	r3, [pc, #28]	@ (8005b4c <vPortExitCritical+0x50>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d105      	bne.n	8005b40 <vPortExitCritical+0x44>
 8005b34:	2300      	movs	r3, #0
 8005b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	20000010 	.word	0x20000010

08005b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b50:	f3ef 8009 	mrs	r0, PSP
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	4b15      	ldr	r3, [pc, #84]	@ (8005bb0 <pxCurrentTCBConst>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	f01e 0f10 	tst.w	lr, #16
 8005b60:	bf08      	it	eq
 8005b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6a:	6010      	str	r0, [r2, #0]
 8005b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b74:	f380 8811 	msr	BASEPRI, r0
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f7ff f9e6 	bl	8004f50 <vTaskSwitchContext>
 8005b84:	f04f 0000 	mov.w	r0, #0
 8005b88:	f380 8811 	msr	BASEPRI, r0
 8005b8c:	bc09      	pop	{r0, r3}
 8005b8e:	6819      	ldr	r1, [r3, #0]
 8005b90:	6808      	ldr	r0, [r1, #0]
 8005b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b96:	f01e 0f10 	tst.w	lr, #16
 8005b9a:	bf08      	it	eq
 8005b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ba0:	f380 8809 	msr	PSP, r0
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	f3af 8000 	nop.w

08005bb0 <pxCurrentTCBConst>:
 8005bb0:	20000470 	.word	0x20000470
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop

08005bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	607b      	str	r3, [r7, #4]
}
 8005bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bd2:	f7ff f903 	bl	8004ddc <xTaskIncrementTick>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bdc:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <SysTick_Handler+0x40>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	2300      	movs	r3, #0
 8005be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	f383 8811 	msr	BASEPRI, r3
}
 8005bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c00:	4b0b      	ldr	r3, [pc, #44]	@ (8005c30 <vPortSetupTimerInterrupt+0x34>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c06:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <vPortSetupTimerInterrupt+0x38>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c38 <vPortSetupTimerInterrupt+0x3c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a0a      	ldr	r2, [pc, #40]	@ (8005c3c <vPortSetupTimerInterrupt+0x40>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	099b      	lsrs	r3, r3, #6
 8005c18:	4a09      	ldr	r2, [pc, #36]	@ (8005c40 <vPortSetupTimerInterrupt+0x44>)
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c1e:	4b04      	ldr	r3, [pc, #16]	@ (8005c30 <vPortSetupTimerInterrupt+0x34>)
 8005c20:	2207      	movs	r2, #7
 8005c22:	601a      	str	r2, [r3, #0]
}
 8005c24:	bf00      	nop
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	e000e010 	.word	0xe000e010
 8005c34:	e000e018 	.word	0xe000e018
 8005c38:	20000004 	.word	0x20000004
 8005c3c:	10624dd3 	.word	0x10624dd3
 8005c40:	e000e014 	.word	0xe000e014

08005c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c54 <vPortEnableVFP+0x10>
 8005c48:	6801      	ldr	r1, [r0, #0]
 8005c4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c4e:	6001      	str	r1, [r0, #0]
 8005c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c52:	bf00      	nop
 8005c54:	e000ed88 	.word	0xe000ed88

08005c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c5e:	f3ef 8305 	mrs	r3, IPSR
 8005c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b0f      	cmp	r3, #15
 8005c68:	d915      	bls.n	8005c96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c6a:	4a18      	ldr	r2, [pc, #96]	@ (8005ccc <vPortValidateInterruptPriority+0x74>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c74:	4b16      	ldr	r3, [pc, #88]	@ (8005cd0 <vPortValidateInterruptPriority+0x78>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	7afa      	ldrb	r2, [r7, #11]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d20b      	bcs.n	8005c96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	607b      	str	r3, [r7, #4]
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	e7fd      	b.n	8005c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c96:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd4 <vPortValidateInterruptPriority+0x7c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd8 <vPortValidateInterruptPriority+0x80>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d90b      	bls.n	8005cbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	603b      	str	r3, [r7, #0]
}
 8005cb8:	bf00      	nop
 8005cba:	bf00      	nop
 8005cbc:	e7fd      	b.n	8005cba <vPortValidateInterruptPriority+0x62>
	}
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	e000e3f0 	.word	0xe000e3f0
 8005cd0:	2000059c 	.word	0x2000059c
 8005cd4:	e000ed0c 	.word	0xe000ed0c
 8005cd8:	200005a0 	.word	0x200005a0

08005cdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	@ 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ce8:	f7fe ffcc 	bl	8004c84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cec:	4b5c      	ldr	r3, [pc, #368]	@ (8005e60 <pvPortMalloc+0x184>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cf4:	f000 f924 	bl	8005f40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cf8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e64 <pvPortMalloc+0x188>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f040 8095 	bne.w	8005e30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01e      	beq.n	8005d4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4413      	add	r3, r2
 8005d12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d015      	beq.n	8005d4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f023 0307 	bic.w	r3, r3, #7
 8005d24:	3308      	adds	r3, #8
 8005d26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <pvPortMalloc+0x6e>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	617b      	str	r3, [r7, #20]
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	e7fd      	b.n	8005d46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d06f      	beq.n	8005e30 <pvPortMalloc+0x154>
 8005d50:	4b45      	ldr	r3, [pc, #276]	@ (8005e68 <pvPortMalloc+0x18c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d86a      	bhi.n	8005e30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d5a:	4b44      	ldr	r3, [pc, #272]	@ (8005e6c <pvPortMalloc+0x190>)
 8005d5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d5e:	4b43      	ldr	r3, [pc, #268]	@ (8005e6c <pvPortMalloc+0x190>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d64:	e004      	b.n	8005d70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d903      	bls.n	8005d82 <pvPortMalloc+0xa6>
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f1      	bne.n	8005d66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d82:	4b37      	ldr	r3, [pc, #220]	@ (8005e60 <pvPortMalloc+0x184>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d051      	beq.n	8005e30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2208      	movs	r2, #8
 8005d92:	4413      	add	r3, r2
 8005d94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	1ad2      	subs	r2, r2, r3
 8005da6:	2308      	movs	r3, #8
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d920      	bls.n	8005df0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <pvPortMalloc+0xfc>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dea:	69b8      	ldr	r0, [r7, #24]
 8005dec:	f000 f90a 	bl	8006004 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005df0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e68 <pvPortMalloc+0x18c>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8005e68 <pvPortMalloc+0x18c>)
 8005dfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8005e68 <pvPortMalloc+0x18c>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b1b      	ldr	r3, [pc, #108]	@ (8005e70 <pvPortMalloc+0x194>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d203      	bcs.n	8005e12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e0a:	4b17      	ldr	r3, [pc, #92]	@ (8005e68 <pvPortMalloc+0x18c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a18      	ldr	r2, [pc, #96]	@ (8005e70 <pvPortMalloc+0x194>)
 8005e10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	4b13      	ldr	r3, [pc, #76]	@ (8005e64 <pvPortMalloc+0x188>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e26:	4b13      	ldr	r3, [pc, #76]	@ (8005e74 <pvPortMalloc+0x198>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	4a11      	ldr	r2, [pc, #68]	@ (8005e74 <pvPortMalloc+0x198>)
 8005e2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e30:	f7fe ff36 	bl	8004ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <pvPortMalloc+0x17a>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60fb      	str	r3, [r7, #12]
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	e7fd      	b.n	8005e52 <pvPortMalloc+0x176>
	return pvReturn;
 8005e56:	69fb      	ldr	r3, [r7, #28]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3728      	adds	r7, #40	@ 0x28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	200041ac 	.word	0x200041ac
 8005e64:	200041c0 	.word	0x200041c0
 8005e68:	200041b0 	.word	0x200041b0
 8005e6c:	200041a4 	.word	0x200041a4
 8005e70:	200041b4 	.word	0x200041b4
 8005e74:	200041b8 	.word	0x200041b8

08005e78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d04f      	beq.n	8005f2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e8a:	2308      	movs	r3, #8
 8005e8c:	425b      	negs	r3, r3
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4413      	add	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <vPortFree+0xbc>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10b      	bne.n	8005ebe <vPortFree+0x46>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60fb      	str	r3, [r7, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00b      	beq.n	8005ede <vPortFree+0x66>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	60bb      	str	r3, [r7, #8]
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	4b14      	ldr	r3, [pc, #80]	@ (8005f34 <vPortFree+0xbc>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01e      	beq.n	8005f2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11a      	bne.n	8005f2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f34 <vPortFree+0xbc>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	401a      	ands	r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f04:	f7fe febe 	bl	8004c84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f38 <vPortFree+0xc0>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4413      	add	r3, r2
 8005f12:	4a09      	ldr	r2, [pc, #36]	@ (8005f38 <vPortFree+0xc0>)
 8005f14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f16:	6938      	ldr	r0, [r7, #16]
 8005f18:	f000 f874 	bl	8006004 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f1c:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <vPortFree+0xc4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	4a06      	ldr	r2, [pc, #24]	@ (8005f3c <vPortFree+0xc4>)
 8005f24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f26:	f7fe febb 	bl	8004ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f2a:	bf00      	nop
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200041c0 	.word	0x200041c0
 8005f38:	200041b0 	.word	0x200041b0
 8005f3c:	200041bc 	.word	0x200041bc

08005f40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005f4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f4c:	4b27      	ldr	r3, [pc, #156]	@ (8005fec <prvHeapInit+0xac>)
 8005f4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3307      	adds	r3, #7
 8005f5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0307 	bic.w	r3, r3, #7
 8005f66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fec <prvHeapInit+0xac>)
 8005f70:	4413      	add	r3, r2
 8005f72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f78:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff0 <prvHeapInit+0xb0>)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ff0 <prvHeapInit+0xb0>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	4413      	add	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0307 	bic.w	r3, r3, #7
 8005f9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4a15      	ldr	r2, [pc, #84]	@ (8005ff4 <prvHeapInit+0xb4>)
 8005fa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fa2:	4b14      	ldr	r3, [pc, #80]	@ (8005ff4 <prvHeapInit+0xb4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005faa:	4b12      	ldr	r3, [pc, #72]	@ (8005ff4 <prvHeapInit+0xb4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <prvHeapInit+0xb4>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff8 <prvHeapInit+0xb8>)
 8005fce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	4a09      	ldr	r2, [pc, #36]	@ (8005ffc <prvHeapInit+0xbc>)
 8005fd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fd8:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <prvHeapInit+0xc0>)
 8005fda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005fde:	601a      	str	r2, [r3, #0]
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	200005a4 	.word	0x200005a4
 8005ff0:	200041a4 	.word	0x200041a4
 8005ff4:	200041ac 	.word	0x200041ac
 8005ff8:	200041b4 	.word	0x200041b4
 8005ffc:	200041b0 	.word	0x200041b0
 8006000:	200041c0 	.word	0x200041c0

08006004 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800600c:	4b28      	ldr	r3, [pc, #160]	@ (80060b0 <prvInsertBlockIntoFreeList+0xac>)
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	e002      	b.n	8006018 <prvInsertBlockIntoFreeList+0x14>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	429a      	cmp	r2, r3
 8006020:	d8f7      	bhi.n	8006012 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	4413      	add	r3, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d108      	bne.n	8006046 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	441a      	add	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	441a      	add	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d118      	bne.n	800608c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b15      	ldr	r3, [pc, #84]	@ (80060b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d00d      	beq.n	8006082 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	441a      	add	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e008      	b.n	8006094 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006082:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	e003      	b.n	8006094 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	d002      	beq.n	80060a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	200041a4 	.word	0x200041a4
 80060b4:	200041ac 	.word	0x200041ac

080060b8 <std>:
 80060b8:	2300      	movs	r3, #0
 80060ba:	b510      	push	{r4, lr}
 80060bc:	4604      	mov	r4, r0
 80060be:	e9c0 3300 	strd	r3, r3, [r0]
 80060c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060c6:	6083      	str	r3, [r0, #8]
 80060c8:	8181      	strh	r1, [r0, #12]
 80060ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80060cc:	81c2      	strh	r2, [r0, #14]
 80060ce:	6183      	str	r3, [r0, #24]
 80060d0:	4619      	mov	r1, r3
 80060d2:	2208      	movs	r2, #8
 80060d4:	305c      	adds	r0, #92	@ 0x5c
 80060d6:	f000 fa19 	bl	800650c <memset>
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <std+0x58>)
 80060dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80060de:	4b0d      	ldr	r3, [pc, #52]	@ (8006114 <std+0x5c>)
 80060e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006118 <std+0x60>)
 80060e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060e6:	4b0d      	ldr	r3, [pc, #52]	@ (800611c <std+0x64>)
 80060e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80060ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006120 <std+0x68>)
 80060ec:	6224      	str	r4, [r4, #32]
 80060ee:	429c      	cmp	r4, r3
 80060f0:	d006      	beq.n	8006100 <std+0x48>
 80060f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060f6:	4294      	cmp	r4, r2
 80060f8:	d002      	beq.n	8006100 <std+0x48>
 80060fa:	33d0      	adds	r3, #208	@ 0xd0
 80060fc:	429c      	cmp	r4, r3
 80060fe:	d105      	bne.n	800610c <std+0x54>
 8006100:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006108:	f000 bace 	b.w	80066a8 <__retarget_lock_init_recursive>
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	0800635d 	.word	0x0800635d
 8006114:	0800637f 	.word	0x0800637f
 8006118:	080063b7 	.word	0x080063b7
 800611c:	080063db 	.word	0x080063db
 8006120:	200041c4 	.word	0x200041c4

08006124 <stdio_exit_handler>:
 8006124:	4a02      	ldr	r2, [pc, #8]	@ (8006130 <stdio_exit_handler+0xc>)
 8006126:	4903      	ldr	r1, [pc, #12]	@ (8006134 <stdio_exit_handler+0x10>)
 8006128:	4803      	ldr	r0, [pc, #12]	@ (8006138 <stdio_exit_handler+0x14>)
 800612a:	f000 b869 	b.w	8006200 <_fwalk_sglue>
 800612e:	bf00      	nop
 8006130:	20000014 	.word	0x20000014
 8006134:	08007215 	.word	0x08007215
 8006138:	20000024 	.word	0x20000024

0800613c <cleanup_stdio>:
 800613c:	6841      	ldr	r1, [r0, #4]
 800613e:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <cleanup_stdio+0x34>)
 8006140:	4299      	cmp	r1, r3
 8006142:	b510      	push	{r4, lr}
 8006144:	4604      	mov	r4, r0
 8006146:	d001      	beq.n	800614c <cleanup_stdio+0x10>
 8006148:	f001 f864 	bl	8007214 <_fflush_r>
 800614c:	68a1      	ldr	r1, [r4, #8]
 800614e:	4b09      	ldr	r3, [pc, #36]	@ (8006174 <cleanup_stdio+0x38>)
 8006150:	4299      	cmp	r1, r3
 8006152:	d002      	beq.n	800615a <cleanup_stdio+0x1e>
 8006154:	4620      	mov	r0, r4
 8006156:	f001 f85d 	bl	8007214 <_fflush_r>
 800615a:	68e1      	ldr	r1, [r4, #12]
 800615c:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <cleanup_stdio+0x3c>)
 800615e:	4299      	cmp	r1, r3
 8006160:	d004      	beq.n	800616c <cleanup_stdio+0x30>
 8006162:	4620      	mov	r0, r4
 8006164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006168:	f001 b854 	b.w	8007214 <_fflush_r>
 800616c:	bd10      	pop	{r4, pc}
 800616e:	bf00      	nop
 8006170:	200041c4 	.word	0x200041c4
 8006174:	2000422c 	.word	0x2000422c
 8006178:	20004294 	.word	0x20004294

0800617c <global_stdio_init.part.0>:
 800617c:	b510      	push	{r4, lr}
 800617e:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <global_stdio_init.part.0+0x30>)
 8006180:	4c0b      	ldr	r4, [pc, #44]	@ (80061b0 <global_stdio_init.part.0+0x34>)
 8006182:	4a0c      	ldr	r2, [pc, #48]	@ (80061b4 <global_stdio_init.part.0+0x38>)
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	4620      	mov	r0, r4
 8006188:	2200      	movs	r2, #0
 800618a:	2104      	movs	r1, #4
 800618c:	f7ff ff94 	bl	80060b8 <std>
 8006190:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006194:	2201      	movs	r2, #1
 8006196:	2109      	movs	r1, #9
 8006198:	f7ff ff8e 	bl	80060b8 <std>
 800619c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061a0:	2202      	movs	r2, #2
 80061a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a6:	2112      	movs	r1, #18
 80061a8:	f7ff bf86 	b.w	80060b8 <std>
 80061ac:	200042fc 	.word	0x200042fc
 80061b0:	200041c4 	.word	0x200041c4
 80061b4:	08006125 	.word	0x08006125

080061b8 <__sfp_lock_acquire>:
 80061b8:	4801      	ldr	r0, [pc, #4]	@ (80061c0 <__sfp_lock_acquire+0x8>)
 80061ba:	f000 ba76 	b.w	80066aa <__retarget_lock_acquire_recursive>
 80061be:	bf00      	nop
 80061c0:	20004305 	.word	0x20004305

080061c4 <__sfp_lock_release>:
 80061c4:	4801      	ldr	r0, [pc, #4]	@ (80061cc <__sfp_lock_release+0x8>)
 80061c6:	f000 ba71 	b.w	80066ac <__retarget_lock_release_recursive>
 80061ca:	bf00      	nop
 80061cc:	20004305 	.word	0x20004305

080061d0 <__sinit>:
 80061d0:	b510      	push	{r4, lr}
 80061d2:	4604      	mov	r4, r0
 80061d4:	f7ff fff0 	bl	80061b8 <__sfp_lock_acquire>
 80061d8:	6a23      	ldr	r3, [r4, #32]
 80061da:	b11b      	cbz	r3, 80061e4 <__sinit+0x14>
 80061dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e0:	f7ff bff0 	b.w	80061c4 <__sfp_lock_release>
 80061e4:	4b04      	ldr	r3, [pc, #16]	@ (80061f8 <__sinit+0x28>)
 80061e6:	6223      	str	r3, [r4, #32]
 80061e8:	4b04      	ldr	r3, [pc, #16]	@ (80061fc <__sinit+0x2c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f5      	bne.n	80061dc <__sinit+0xc>
 80061f0:	f7ff ffc4 	bl	800617c <global_stdio_init.part.0>
 80061f4:	e7f2      	b.n	80061dc <__sinit+0xc>
 80061f6:	bf00      	nop
 80061f8:	0800613d 	.word	0x0800613d
 80061fc:	200042fc 	.word	0x200042fc

08006200 <_fwalk_sglue>:
 8006200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006204:	4607      	mov	r7, r0
 8006206:	4688      	mov	r8, r1
 8006208:	4614      	mov	r4, r2
 800620a:	2600      	movs	r6, #0
 800620c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006210:	f1b9 0901 	subs.w	r9, r9, #1
 8006214:	d505      	bpl.n	8006222 <_fwalk_sglue+0x22>
 8006216:	6824      	ldr	r4, [r4, #0]
 8006218:	2c00      	cmp	r4, #0
 800621a:	d1f7      	bne.n	800620c <_fwalk_sglue+0xc>
 800621c:	4630      	mov	r0, r6
 800621e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006222:	89ab      	ldrh	r3, [r5, #12]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d907      	bls.n	8006238 <_fwalk_sglue+0x38>
 8006228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800622c:	3301      	adds	r3, #1
 800622e:	d003      	beq.n	8006238 <_fwalk_sglue+0x38>
 8006230:	4629      	mov	r1, r5
 8006232:	4638      	mov	r0, r7
 8006234:	47c0      	blx	r8
 8006236:	4306      	orrs	r6, r0
 8006238:	3568      	adds	r5, #104	@ 0x68
 800623a:	e7e9      	b.n	8006210 <_fwalk_sglue+0x10>

0800623c <iprintf>:
 800623c:	b40f      	push	{r0, r1, r2, r3}
 800623e:	b507      	push	{r0, r1, r2, lr}
 8006240:	4906      	ldr	r1, [pc, #24]	@ (800625c <iprintf+0x20>)
 8006242:	ab04      	add	r3, sp, #16
 8006244:	6808      	ldr	r0, [r1, #0]
 8006246:	f853 2b04 	ldr.w	r2, [r3], #4
 800624a:	6881      	ldr	r1, [r0, #8]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	f000 fcb7 	bl	8006bc0 <_vfiprintf_r>
 8006252:	b003      	add	sp, #12
 8006254:	f85d eb04 	ldr.w	lr, [sp], #4
 8006258:	b004      	add	sp, #16
 800625a:	4770      	bx	lr
 800625c:	20000020 	.word	0x20000020

08006260 <_puts_r>:
 8006260:	6a03      	ldr	r3, [r0, #32]
 8006262:	b570      	push	{r4, r5, r6, lr}
 8006264:	6884      	ldr	r4, [r0, #8]
 8006266:	4605      	mov	r5, r0
 8006268:	460e      	mov	r6, r1
 800626a:	b90b      	cbnz	r3, 8006270 <_puts_r+0x10>
 800626c:	f7ff ffb0 	bl	80061d0 <__sinit>
 8006270:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006272:	07db      	lsls	r3, r3, #31
 8006274:	d405      	bmi.n	8006282 <_puts_r+0x22>
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	0598      	lsls	r0, r3, #22
 800627a:	d402      	bmi.n	8006282 <_puts_r+0x22>
 800627c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800627e:	f000 fa14 	bl	80066aa <__retarget_lock_acquire_recursive>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	0719      	lsls	r1, r3, #28
 8006286:	d502      	bpl.n	800628e <_puts_r+0x2e>
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d135      	bne.n	80062fa <_puts_r+0x9a>
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f000 f8e5 	bl	8006460 <__swsetup_r>
 8006296:	b380      	cbz	r0, 80062fa <_puts_r+0x9a>
 8006298:	f04f 35ff 	mov.w	r5, #4294967295
 800629c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800629e:	07da      	lsls	r2, r3, #31
 80062a0:	d405      	bmi.n	80062ae <_puts_r+0x4e>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	059b      	lsls	r3, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_puts_r+0x4e>
 80062a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062aa:	f000 f9ff 	bl	80066ac <__retarget_lock_release_recursive>
 80062ae:	4628      	mov	r0, r5
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da04      	bge.n	80062c0 <_puts_r+0x60>
 80062b6:	69a2      	ldr	r2, [r4, #24]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	dc17      	bgt.n	80062ec <_puts_r+0x8c>
 80062bc:	290a      	cmp	r1, #10
 80062be:	d015      	beq.n	80062ec <_puts_r+0x8c>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	6022      	str	r2, [r4, #0]
 80062c6:	7019      	strb	r1, [r3, #0]
 80062c8:	68a3      	ldr	r3, [r4, #8]
 80062ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062ce:	3b01      	subs	r3, #1
 80062d0:	60a3      	str	r3, [r4, #8]
 80062d2:	2900      	cmp	r1, #0
 80062d4:	d1ed      	bne.n	80062b2 <_puts_r+0x52>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	da11      	bge.n	80062fe <_puts_r+0x9e>
 80062da:	4622      	mov	r2, r4
 80062dc:	210a      	movs	r1, #10
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 f87f 	bl	80063e2 <__swbuf_r>
 80062e4:	3001      	adds	r0, #1
 80062e6:	d0d7      	beq.n	8006298 <_puts_r+0x38>
 80062e8:	250a      	movs	r5, #10
 80062ea:	e7d7      	b.n	800629c <_puts_r+0x3c>
 80062ec:	4622      	mov	r2, r4
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 f877 	bl	80063e2 <__swbuf_r>
 80062f4:	3001      	adds	r0, #1
 80062f6:	d1e7      	bne.n	80062c8 <_puts_r+0x68>
 80062f8:	e7ce      	b.n	8006298 <_puts_r+0x38>
 80062fa:	3e01      	subs	r6, #1
 80062fc:	e7e4      	b.n	80062c8 <_puts_r+0x68>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	6022      	str	r2, [r4, #0]
 8006304:	220a      	movs	r2, #10
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e7ee      	b.n	80062e8 <_puts_r+0x88>
	...

0800630c <puts>:
 800630c:	4b02      	ldr	r3, [pc, #8]	@ (8006318 <puts+0xc>)
 800630e:	4601      	mov	r1, r0
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	f7ff bfa5 	b.w	8006260 <_puts_r>
 8006316:	bf00      	nop
 8006318:	20000020 	.word	0x20000020

0800631c <siprintf>:
 800631c:	b40e      	push	{r1, r2, r3}
 800631e:	b500      	push	{lr}
 8006320:	b09c      	sub	sp, #112	@ 0x70
 8006322:	ab1d      	add	r3, sp, #116	@ 0x74
 8006324:	9002      	str	r0, [sp, #8]
 8006326:	9006      	str	r0, [sp, #24]
 8006328:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800632c:	4809      	ldr	r0, [pc, #36]	@ (8006354 <siprintf+0x38>)
 800632e:	9107      	str	r1, [sp, #28]
 8006330:	9104      	str	r1, [sp, #16]
 8006332:	4909      	ldr	r1, [pc, #36]	@ (8006358 <siprintf+0x3c>)
 8006334:	f853 2b04 	ldr.w	r2, [r3], #4
 8006338:	9105      	str	r1, [sp, #20]
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	a902      	add	r1, sp, #8
 8006340:	f000 fb18 	bl	8006974 <_svfiprintf_r>
 8006344:	9b02      	ldr	r3, [sp, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	b01c      	add	sp, #112	@ 0x70
 800634c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006350:	b003      	add	sp, #12
 8006352:	4770      	bx	lr
 8006354:	20000020 	.word	0x20000020
 8006358:	ffff0208 	.word	0xffff0208

0800635c <__sread>:
 800635c:	b510      	push	{r4, lr}
 800635e:	460c      	mov	r4, r1
 8006360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006364:	f000 f952 	bl	800660c <_read_r>
 8006368:	2800      	cmp	r0, #0
 800636a:	bfab      	itete	ge
 800636c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800636e:	89a3      	ldrhlt	r3, [r4, #12]
 8006370:	181b      	addge	r3, r3, r0
 8006372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006376:	bfac      	ite	ge
 8006378:	6563      	strge	r3, [r4, #84]	@ 0x54
 800637a:	81a3      	strhlt	r3, [r4, #12]
 800637c:	bd10      	pop	{r4, pc}

0800637e <__swrite>:
 800637e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006382:	461f      	mov	r7, r3
 8006384:	898b      	ldrh	r3, [r1, #12]
 8006386:	05db      	lsls	r3, r3, #23
 8006388:	4605      	mov	r5, r0
 800638a:	460c      	mov	r4, r1
 800638c:	4616      	mov	r6, r2
 800638e:	d505      	bpl.n	800639c <__swrite+0x1e>
 8006390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006394:	2302      	movs	r3, #2
 8006396:	2200      	movs	r2, #0
 8006398:	f000 f926 	bl	80065e8 <_lseek_r>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	4632      	mov	r2, r6
 80063aa:	463b      	mov	r3, r7
 80063ac:	4628      	mov	r0, r5
 80063ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063b2:	f000 b93d 	b.w	8006630 <_write_r>

080063b6 <__sseek>:
 80063b6:	b510      	push	{r4, lr}
 80063b8:	460c      	mov	r4, r1
 80063ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063be:	f000 f913 	bl	80065e8 <_lseek_r>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	bf15      	itete	ne
 80063c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063d2:	81a3      	strheq	r3, [r4, #12]
 80063d4:	bf18      	it	ne
 80063d6:	81a3      	strhne	r3, [r4, #12]
 80063d8:	bd10      	pop	{r4, pc}

080063da <__sclose>:
 80063da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063de:	f000 b89d 	b.w	800651c <_close_r>

080063e2 <__swbuf_r>:
 80063e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e4:	460e      	mov	r6, r1
 80063e6:	4614      	mov	r4, r2
 80063e8:	4605      	mov	r5, r0
 80063ea:	b118      	cbz	r0, 80063f4 <__swbuf_r+0x12>
 80063ec:	6a03      	ldr	r3, [r0, #32]
 80063ee:	b90b      	cbnz	r3, 80063f4 <__swbuf_r+0x12>
 80063f0:	f7ff feee 	bl	80061d0 <__sinit>
 80063f4:	69a3      	ldr	r3, [r4, #24]
 80063f6:	60a3      	str	r3, [r4, #8]
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	071a      	lsls	r2, r3, #28
 80063fc:	d501      	bpl.n	8006402 <__swbuf_r+0x20>
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	b943      	cbnz	r3, 8006414 <__swbuf_r+0x32>
 8006402:	4621      	mov	r1, r4
 8006404:	4628      	mov	r0, r5
 8006406:	f000 f82b 	bl	8006460 <__swsetup_r>
 800640a:	b118      	cbz	r0, 8006414 <__swbuf_r+0x32>
 800640c:	f04f 37ff 	mov.w	r7, #4294967295
 8006410:	4638      	mov	r0, r7
 8006412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	6922      	ldr	r2, [r4, #16]
 8006418:	1a98      	subs	r0, r3, r2
 800641a:	6963      	ldr	r3, [r4, #20]
 800641c:	b2f6      	uxtb	r6, r6
 800641e:	4283      	cmp	r3, r0
 8006420:	4637      	mov	r7, r6
 8006422:	dc05      	bgt.n	8006430 <__swbuf_r+0x4e>
 8006424:	4621      	mov	r1, r4
 8006426:	4628      	mov	r0, r5
 8006428:	f000 fef4 	bl	8007214 <_fflush_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	d1ed      	bne.n	800640c <__swbuf_r+0x2a>
 8006430:	68a3      	ldr	r3, [r4, #8]
 8006432:	3b01      	subs	r3, #1
 8006434:	60a3      	str	r3, [r4, #8]
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	6022      	str	r2, [r4, #0]
 800643c:	701e      	strb	r6, [r3, #0]
 800643e:	6962      	ldr	r2, [r4, #20]
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	429a      	cmp	r2, r3
 8006444:	d004      	beq.n	8006450 <__swbuf_r+0x6e>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	07db      	lsls	r3, r3, #31
 800644a:	d5e1      	bpl.n	8006410 <__swbuf_r+0x2e>
 800644c:	2e0a      	cmp	r6, #10
 800644e:	d1df      	bne.n	8006410 <__swbuf_r+0x2e>
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f000 fede 	bl	8007214 <_fflush_r>
 8006458:	2800      	cmp	r0, #0
 800645a:	d0d9      	beq.n	8006410 <__swbuf_r+0x2e>
 800645c:	e7d6      	b.n	800640c <__swbuf_r+0x2a>
	...

08006460 <__swsetup_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4b29      	ldr	r3, [pc, #164]	@ (8006508 <__swsetup_r+0xa8>)
 8006464:	4605      	mov	r5, r0
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	460c      	mov	r4, r1
 800646a:	b118      	cbz	r0, 8006474 <__swsetup_r+0x14>
 800646c:	6a03      	ldr	r3, [r0, #32]
 800646e:	b90b      	cbnz	r3, 8006474 <__swsetup_r+0x14>
 8006470:	f7ff feae 	bl	80061d0 <__sinit>
 8006474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006478:	0719      	lsls	r1, r3, #28
 800647a:	d422      	bmi.n	80064c2 <__swsetup_r+0x62>
 800647c:	06da      	lsls	r2, r3, #27
 800647e:	d407      	bmi.n	8006490 <__swsetup_r+0x30>
 8006480:	2209      	movs	r2, #9
 8006482:	602a      	str	r2, [r5, #0]
 8006484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006488:	81a3      	strh	r3, [r4, #12]
 800648a:	f04f 30ff 	mov.w	r0, #4294967295
 800648e:	e033      	b.n	80064f8 <__swsetup_r+0x98>
 8006490:	0758      	lsls	r0, r3, #29
 8006492:	d512      	bpl.n	80064ba <__swsetup_r+0x5a>
 8006494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006496:	b141      	cbz	r1, 80064aa <__swsetup_r+0x4a>
 8006498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800649c:	4299      	cmp	r1, r3
 800649e:	d002      	beq.n	80064a6 <__swsetup_r+0x46>
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 f913 	bl	80066cc <_free_r>
 80064a6:	2300      	movs	r3, #0
 80064a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064b0:	81a3      	strh	r3, [r4, #12]
 80064b2:	2300      	movs	r3, #0
 80064b4:	6063      	str	r3, [r4, #4]
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	f043 0308 	orr.w	r3, r3, #8
 80064c0:	81a3      	strh	r3, [r4, #12]
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	b94b      	cbnz	r3, 80064da <__swsetup_r+0x7a>
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d0:	d003      	beq.n	80064da <__swsetup_r+0x7a>
 80064d2:	4621      	mov	r1, r4
 80064d4:	4628      	mov	r0, r5
 80064d6:	f000 feeb 	bl	80072b0 <__smakebuf_r>
 80064da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064de:	f013 0201 	ands.w	r2, r3, #1
 80064e2:	d00a      	beq.n	80064fa <__swsetup_r+0x9a>
 80064e4:	2200      	movs	r2, #0
 80064e6:	60a2      	str	r2, [r4, #8]
 80064e8:	6962      	ldr	r2, [r4, #20]
 80064ea:	4252      	negs	r2, r2
 80064ec:	61a2      	str	r2, [r4, #24]
 80064ee:	6922      	ldr	r2, [r4, #16]
 80064f0:	b942      	cbnz	r2, 8006504 <__swsetup_r+0xa4>
 80064f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064f6:	d1c5      	bne.n	8006484 <__swsetup_r+0x24>
 80064f8:	bd38      	pop	{r3, r4, r5, pc}
 80064fa:	0799      	lsls	r1, r3, #30
 80064fc:	bf58      	it	pl
 80064fe:	6962      	ldrpl	r2, [r4, #20]
 8006500:	60a2      	str	r2, [r4, #8]
 8006502:	e7f4      	b.n	80064ee <__swsetup_r+0x8e>
 8006504:	2000      	movs	r0, #0
 8006506:	e7f7      	b.n	80064f8 <__swsetup_r+0x98>
 8006508:	20000020 	.word	0x20000020

0800650c <memset>:
 800650c:	4402      	add	r2, r0
 800650e:	4603      	mov	r3, r0
 8006510:	4293      	cmp	r3, r2
 8006512:	d100      	bne.n	8006516 <memset+0xa>
 8006514:	4770      	bx	lr
 8006516:	f803 1b01 	strb.w	r1, [r3], #1
 800651a:	e7f9      	b.n	8006510 <memset+0x4>

0800651c <_close_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4d06      	ldr	r5, [pc, #24]	@ (8006538 <_close_r+0x1c>)
 8006520:	2300      	movs	r3, #0
 8006522:	4604      	mov	r4, r0
 8006524:	4608      	mov	r0, r1
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	f7fb f8cf 	bl	80016ca <_close>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d102      	bne.n	8006536 <_close_r+0x1a>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	b103      	cbz	r3, 8006536 <_close_r+0x1a>
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	20004300 	.word	0x20004300

0800653c <_reclaim_reent>:
 800653c:	4b29      	ldr	r3, [pc, #164]	@ (80065e4 <_reclaim_reent+0xa8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4283      	cmp	r3, r0
 8006542:	b570      	push	{r4, r5, r6, lr}
 8006544:	4604      	mov	r4, r0
 8006546:	d04b      	beq.n	80065e0 <_reclaim_reent+0xa4>
 8006548:	69c3      	ldr	r3, [r0, #28]
 800654a:	b1ab      	cbz	r3, 8006578 <_reclaim_reent+0x3c>
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	b16b      	cbz	r3, 800656c <_reclaim_reent+0x30>
 8006550:	2500      	movs	r5, #0
 8006552:	69e3      	ldr	r3, [r4, #28]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	5959      	ldr	r1, [r3, r5]
 8006558:	2900      	cmp	r1, #0
 800655a:	d13b      	bne.n	80065d4 <_reclaim_reent+0x98>
 800655c:	3504      	adds	r5, #4
 800655e:	2d80      	cmp	r5, #128	@ 0x80
 8006560:	d1f7      	bne.n	8006552 <_reclaim_reent+0x16>
 8006562:	69e3      	ldr	r3, [r4, #28]
 8006564:	4620      	mov	r0, r4
 8006566:	68d9      	ldr	r1, [r3, #12]
 8006568:	f000 f8b0 	bl	80066cc <_free_r>
 800656c:	69e3      	ldr	r3, [r4, #28]
 800656e:	6819      	ldr	r1, [r3, #0]
 8006570:	b111      	cbz	r1, 8006578 <_reclaim_reent+0x3c>
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f8aa 	bl	80066cc <_free_r>
 8006578:	6961      	ldr	r1, [r4, #20]
 800657a:	b111      	cbz	r1, 8006582 <_reclaim_reent+0x46>
 800657c:	4620      	mov	r0, r4
 800657e:	f000 f8a5 	bl	80066cc <_free_r>
 8006582:	69e1      	ldr	r1, [r4, #28]
 8006584:	b111      	cbz	r1, 800658c <_reclaim_reent+0x50>
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f8a0 	bl	80066cc <_free_r>
 800658c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800658e:	b111      	cbz	r1, 8006596 <_reclaim_reent+0x5a>
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f89b 	bl	80066cc <_free_r>
 8006596:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006598:	b111      	cbz	r1, 80065a0 <_reclaim_reent+0x64>
 800659a:	4620      	mov	r0, r4
 800659c:	f000 f896 	bl	80066cc <_free_r>
 80065a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80065a2:	b111      	cbz	r1, 80065aa <_reclaim_reent+0x6e>
 80065a4:	4620      	mov	r0, r4
 80065a6:	f000 f891 	bl	80066cc <_free_r>
 80065aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80065ac:	b111      	cbz	r1, 80065b4 <_reclaim_reent+0x78>
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 f88c 	bl	80066cc <_free_r>
 80065b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80065b6:	b111      	cbz	r1, 80065be <_reclaim_reent+0x82>
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 f887 	bl	80066cc <_free_r>
 80065be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80065c0:	b111      	cbz	r1, 80065c8 <_reclaim_reent+0x8c>
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f882 	bl	80066cc <_free_r>
 80065c8:	6a23      	ldr	r3, [r4, #32]
 80065ca:	b14b      	cbz	r3, 80065e0 <_reclaim_reent+0xa4>
 80065cc:	4620      	mov	r0, r4
 80065ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065d2:	4718      	bx	r3
 80065d4:	680e      	ldr	r6, [r1, #0]
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 f878 	bl	80066cc <_free_r>
 80065dc:	4631      	mov	r1, r6
 80065de:	e7bb      	b.n	8006558 <_reclaim_reent+0x1c>
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	bf00      	nop
 80065e4:	20000020 	.word	0x20000020

080065e8 <_lseek_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	@ (8006608 <_lseek_r+0x20>)
 80065ec:	4604      	mov	r4, r0
 80065ee:	4608      	mov	r0, r1
 80065f0:	4611      	mov	r1, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f7fb f88e 	bl	8001718 <_lseek>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_lseek_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_lseek_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	20004300 	.word	0x20004300

0800660c <_read_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d07      	ldr	r5, [pc, #28]	@ (800662c <_read_r+0x20>)
 8006610:	4604      	mov	r4, r0
 8006612:	4608      	mov	r0, r1
 8006614:	4611      	mov	r1, r2
 8006616:	2200      	movs	r2, #0
 8006618:	602a      	str	r2, [r5, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	f7fb f81c 	bl	8001658 <_read>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_read_r+0x1e>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_read_r+0x1e>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	20004300 	.word	0x20004300

08006630 <_write_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d07      	ldr	r5, [pc, #28]	@ (8006650 <_write_r+0x20>)
 8006634:	4604      	mov	r4, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fb f827 	bl	8001692 <_write>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_write_r+0x1e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_write_r+0x1e>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20004300 	.word	0x20004300

08006654 <__errno>:
 8006654:	4b01      	ldr	r3, [pc, #4]	@ (800665c <__errno+0x8>)
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000020 	.word	0x20000020

08006660 <__libc_init_array>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	4d0d      	ldr	r5, [pc, #52]	@ (8006698 <__libc_init_array+0x38>)
 8006664:	4c0d      	ldr	r4, [pc, #52]	@ (800669c <__libc_init_array+0x3c>)
 8006666:	1b64      	subs	r4, r4, r5
 8006668:	10a4      	asrs	r4, r4, #2
 800666a:	2600      	movs	r6, #0
 800666c:	42a6      	cmp	r6, r4
 800666e:	d109      	bne.n	8006684 <__libc_init_array+0x24>
 8006670:	4d0b      	ldr	r5, [pc, #44]	@ (80066a0 <__libc_init_array+0x40>)
 8006672:	4c0c      	ldr	r4, [pc, #48]	@ (80066a4 <__libc_init_array+0x44>)
 8006674:	f000 feda 	bl	800742c <_init>
 8006678:	1b64      	subs	r4, r4, r5
 800667a:	10a4      	asrs	r4, r4, #2
 800667c:	2600      	movs	r6, #0
 800667e:	42a6      	cmp	r6, r4
 8006680:	d105      	bne.n	800668e <__libc_init_array+0x2e>
 8006682:	bd70      	pop	{r4, r5, r6, pc}
 8006684:	f855 3b04 	ldr.w	r3, [r5], #4
 8006688:	4798      	blx	r3
 800668a:	3601      	adds	r6, #1
 800668c:	e7ee      	b.n	800666c <__libc_init_array+0xc>
 800668e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006692:	4798      	blx	r3
 8006694:	3601      	adds	r6, #1
 8006696:	e7f2      	b.n	800667e <__libc_init_array+0x1e>
 8006698:	0800757c 	.word	0x0800757c
 800669c:	0800757c 	.word	0x0800757c
 80066a0:	0800757c 	.word	0x0800757c
 80066a4:	08007580 	.word	0x08007580

080066a8 <__retarget_lock_init_recursive>:
 80066a8:	4770      	bx	lr

080066aa <__retarget_lock_acquire_recursive>:
 80066aa:	4770      	bx	lr

080066ac <__retarget_lock_release_recursive>:
 80066ac:	4770      	bx	lr

080066ae <memcpy>:
 80066ae:	440a      	add	r2, r1
 80066b0:	4291      	cmp	r1, r2
 80066b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80066b6:	d100      	bne.n	80066ba <memcpy+0xc>
 80066b8:	4770      	bx	lr
 80066ba:	b510      	push	{r4, lr}
 80066bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c4:	4291      	cmp	r1, r2
 80066c6:	d1f9      	bne.n	80066bc <memcpy+0xe>
 80066c8:	bd10      	pop	{r4, pc}
	...

080066cc <_free_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4605      	mov	r5, r0
 80066d0:	2900      	cmp	r1, #0
 80066d2:	d041      	beq.n	8006758 <_free_r+0x8c>
 80066d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d8:	1f0c      	subs	r4, r1, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfb8      	it	lt
 80066de:	18e4      	addlt	r4, r4, r3
 80066e0:	f000 f8e0 	bl	80068a4 <__malloc_lock>
 80066e4:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <_free_r+0x90>)
 80066e6:	6813      	ldr	r3, [r2, #0]
 80066e8:	b933      	cbnz	r3, 80066f8 <_free_r+0x2c>
 80066ea:	6063      	str	r3, [r4, #4]
 80066ec:	6014      	str	r4, [r2, #0]
 80066ee:	4628      	mov	r0, r5
 80066f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066f4:	f000 b8dc 	b.w	80068b0 <__malloc_unlock>
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	d908      	bls.n	800670e <_free_r+0x42>
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	1821      	adds	r1, r4, r0
 8006700:	428b      	cmp	r3, r1
 8006702:	bf01      	itttt	eq
 8006704:	6819      	ldreq	r1, [r3, #0]
 8006706:	685b      	ldreq	r3, [r3, #4]
 8006708:	1809      	addeq	r1, r1, r0
 800670a:	6021      	streq	r1, [r4, #0]
 800670c:	e7ed      	b.n	80066ea <_free_r+0x1e>
 800670e:	461a      	mov	r2, r3
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	b10b      	cbz	r3, 8006718 <_free_r+0x4c>
 8006714:	42a3      	cmp	r3, r4
 8006716:	d9fa      	bls.n	800670e <_free_r+0x42>
 8006718:	6811      	ldr	r1, [r2, #0]
 800671a:	1850      	adds	r0, r2, r1
 800671c:	42a0      	cmp	r0, r4
 800671e:	d10b      	bne.n	8006738 <_free_r+0x6c>
 8006720:	6820      	ldr	r0, [r4, #0]
 8006722:	4401      	add	r1, r0
 8006724:	1850      	adds	r0, r2, r1
 8006726:	4283      	cmp	r3, r0
 8006728:	6011      	str	r1, [r2, #0]
 800672a:	d1e0      	bne.n	80066ee <_free_r+0x22>
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	6053      	str	r3, [r2, #4]
 8006732:	4408      	add	r0, r1
 8006734:	6010      	str	r0, [r2, #0]
 8006736:	e7da      	b.n	80066ee <_free_r+0x22>
 8006738:	d902      	bls.n	8006740 <_free_r+0x74>
 800673a:	230c      	movs	r3, #12
 800673c:	602b      	str	r3, [r5, #0]
 800673e:	e7d6      	b.n	80066ee <_free_r+0x22>
 8006740:	6820      	ldr	r0, [r4, #0]
 8006742:	1821      	adds	r1, r4, r0
 8006744:	428b      	cmp	r3, r1
 8006746:	bf04      	itt	eq
 8006748:	6819      	ldreq	r1, [r3, #0]
 800674a:	685b      	ldreq	r3, [r3, #4]
 800674c:	6063      	str	r3, [r4, #4]
 800674e:	bf04      	itt	eq
 8006750:	1809      	addeq	r1, r1, r0
 8006752:	6021      	streq	r1, [r4, #0]
 8006754:	6054      	str	r4, [r2, #4]
 8006756:	e7ca      	b.n	80066ee <_free_r+0x22>
 8006758:	bd38      	pop	{r3, r4, r5, pc}
 800675a:	bf00      	nop
 800675c:	2000430c 	.word	0x2000430c

08006760 <sbrk_aligned>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	4e0f      	ldr	r6, [pc, #60]	@ (80067a0 <sbrk_aligned+0x40>)
 8006764:	460c      	mov	r4, r1
 8006766:	6831      	ldr	r1, [r6, #0]
 8006768:	4605      	mov	r5, r0
 800676a:	b911      	cbnz	r1, 8006772 <sbrk_aligned+0x12>
 800676c:	f000 fe18 	bl	80073a0 <_sbrk_r>
 8006770:	6030      	str	r0, [r6, #0]
 8006772:	4621      	mov	r1, r4
 8006774:	4628      	mov	r0, r5
 8006776:	f000 fe13 	bl	80073a0 <_sbrk_r>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	d103      	bne.n	8006786 <sbrk_aligned+0x26>
 800677e:	f04f 34ff 	mov.w	r4, #4294967295
 8006782:	4620      	mov	r0, r4
 8006784:	bd70      	pop	{r4, r5, r6, pc}
 8006786:	1cc4      	adds	r4, r0, #3
 8006788:	f024 0403 	bic.w	r4, r4, #3
 800678c:	42a0      	cmp	r0, r4
 800678e:	d0f8      	beq.n	8006782 <sbrk_aligned+0x22>
 8006790:	1a21      	subs	r1, r4, r0
 8006792:	4628      	mov	r0, r5
 8006794:	f000 fe04 	bl	80073a0 <_sbrk_r>
 8006798:	3001      	adds	r0, #1
 800679a:	d1f2      	bne.n	8006782 <sbrk_aligned+0x22>
 800679c:	e7ef      	b.n	800677e <sbrk_aligned+0x1e>
 800679e:	bf00      	nop
 80067a0:	20004308 	.word	0x20004308

080067a4 <_malloc_r>:
 80067a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a8:	1ccd      	adds	r5, r1, #3
 80067aa:	f025 0503 	bic.w	r5, r5, #3
 80067ae:	3508      	adds	r5, #8
 80067b0:	2d0c      	cmp	r5, #12
 80067b2:	bf38      	it	cc
 80067b4:	250c      	movcc	r5, #12
 80067b6:	2d00      	cmp	r5, #0
 80067b8:	4606      	mov	r6, r0
 80067ba:	db01      	blt.n	80067c0 <_malloc_r+0x1c>
 80067bc:	42a9      	cmp	r1, r5
 80067be:	d904      	bls.n	80067ca <_malloc_r+0x26>
 80067c0:	230c      	movs	r3, #12
 80067c2:	6033      	str	r3, [r6, #0]
 80067c4:	2000      	movs	r0, #0
 80067c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068a0 <_malloc_r+0xfc>
 80067ce:	f000 f869 	bl	80068a4 <__malloc_lock>
 80067d2:	f8d8 3000 	ldr.w	r3, [r8]
 80067d6:	461c      	mov	r4, r3
 80067d8:	bb44      	cbnz	r4, 800682c <_malloc_r+0x88>
 80067da:	4629      	mov	r1, r5
 80067dc:	4630      	mov	r0, r6
 80067de:	f7ff ffbf 	bl	8006760 <sbrk_aligned>
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	4604      	mov	r4, r0
 80067e6:	d158      	bne.n	800689a <_malloc_r+0xf6>
 80067e8:	f8d8 4000 	ldr.w	r4, [r8]
 80067ec:	4627      	mov	r7, r4
 80067ee:	2f00      	cmp	r7, #0
 80067f0:	d143      	bne.n	800687a <_malloc_r+0xd6>
 80067f2:	2c00      	cmp	r4, #0
 80067f4:	d04b      	beq.n	800688e <_malloc_r+0xea>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	4639      	mov	r1, r7
 80067fa:	4630      	mov	r0, r6
 80067fc:	eb04 0903 	add.w	r9, r4, r3
 8006800:	f000 fdce 	bl	80073a0 <_sbrk_r>
 8006804:	4581      	cmp	r9, r0
 8006806:	d142      	bne.n	800688e <_malloc_r+0xea>
 8006808:	6821      	ldr	r1, [r4, #0]
 800680a:	1a6d      	subs	r5, r5, r1
 800680c:	4629      	mov	r1, r5
 800680e:	4630      	mov	r0, r6
 8006810:	f7ff ffa6 	bl	8006760 <sbrk_aligned>
 8006814:	3001      	adds	r0, #1
 8006816:	d03a      	beq.n	800688e <_malloc_r+0xea>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	442b      	add	r3, r5
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	f8d8 3000 	ldr.w	r3, [r8]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	bb62      	cbnz	r2, 8006880 <_malloc_r+0xdc>
 8006826:	f8c8 7000 	str.w	r7, [r8]
 800682a:	e00f      	b.n	800684c <_malloc_r+0xa8>
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	1b52      	subs	r2, r2, r5
 8006830:	d420      	bmi.n	8006874 <_malloc_r+0xd0>
 8006832:	2a0b      	cmp	r2, #11
 8006834:	d917      	bls.n	8006866 <_malloc_r+0xc2>
 8006836:	1961      	adds	r1, r4, r5
 8006838:	42a3      	cmp	r3, r4
 800683a:	6025      	str	r5, [r4, #0]
 800683c:	bf18      	it	ne
 800683e:	6059      	strne	r1, [r3, #4]
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	bf08      	it	eq
 8006844:	f8c8 1000 	streq.w	r1, [r8]
 8006848:	5162      	str	r2, [r4, r5]
 800684a:	604b      	str	r3, [r1, #4]
 800684c:	4630      	mov	r0, r6
 800684e:	f000 f82f 	bl	80068b0 <__malloc_unlock>
 8006852:	f104 000b 	add.w	r0, r4, #11
 8006856:	1d23      	adds	r3, r4, #4
 8006858:	f020 0007 	bic.w	r0, r0, #7
 800685c:	1ac2      	subs	r2, r0, r3
 800685e:	bf1c      	itt	ne
 8006860:	1a1b      	subne	r3, r3, r0
 8006862:	50a3      	strne	r3, [r4, r2]
 8006864:	e7af      	b.n	80067c6 <_malloc_r+0x22>
 8006866:	6862      	ldr	r2, [r4, #4]
 8006868:	42a3      	cmp	r3, r4
 800686a:	bf0c      	ite	eq
 800686c:	f8c8 2000 	streq.w	r2, [r8]
 8006870:	605a      	strne	r2, [r3, #4]
 8006872:	e7eb      	b.n	800684c <_malloc_r+0xa8>
 8006874:	4623      	mov	r3, r4
 8006876:	6864      	ldr	r4, [r4, #4]
 8006878:	e7ae      	b.n	80067d8 <_malloc_r+0x34>
 800687a:	463c      	mov	r4, r7
 800687c:	687f      	ldr	r7, [r7, #4]
 800687e:	e7b6      	b.n	80067ee <_malloc_r+0x4a>
 8006880:	461a      	mov	r2, r3
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	42a3      	cmp	r3, r4
 8006886:	d1fb      	bne.n	8006880 <_malloc_r+0xdc>
 8006888:	2300      	movs	r3, #0
 800688a:	6053      	str	r3, [r2, #4]
 800688c:	e7de      	b.n	800684c <_malloc_r+0xa8>
 800688e:	230c      	movs	r3, #12
 8006890:	6033      	str	r3, [r6, #0]
 8006892:	4630      	mov	r0, r6
 8006894:	f000 f80c 	bl	80068b0 <__malloc_unlock>
 8006898:	e794      	b.n	80067c4 <_malloc_r+0x20>
 800689a:	6005      	str	r5, [r0, #0]
 800689c:	e7d6      	b.n	800684c <_malloc_r+0xa8>
 800689e:	bf00      	nop
 80068a0:	2000430c 	.word	0x2000430c

080068a4 <__malloc_lock>:
 80068a4:	4801      	ldr	r0, [pc, #4]	@ (80068ac <__malloc_lock+0x8>)
 80068a6:	f7ff bf00 	b.w	80066aa <__retarget_lock_acquire_recursive>
 80068aa:	bf00      	nop
 80068ac:	20004304 	.word	0x20004304

080068b0 <__malloc_unlock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	@ (80068b8 <__malloc_unlock+0x8>)
 80068b2:	f7ff befb 	b.w	80066ac <__retarget_lock_release_recursive>
 80068b6:	bf00      	nop
 80068b8:	20004304 	.word	0x20004304

080068bc <__ssputs_r>:
 80068bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	688e      	ldr	r6, [r1, #8]
 80068c2:	461f      	mov	r7, r3
 80068c4:	42be      	cmp	r6, r7
 80068c6:	680b      	ldr	r3, [r1, #0]
 80068c8:	4682      	mov	sl, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	4690      	mov	r8, r2
 80068ce:	d82d      	bhi.n	800692c <__ssputs_r+0x70>
 80068d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068d8:	d026      	beq.n	8006928 <__ssputs_r+0x6c>
 80068da:	6965      	ldr	r5, [r4, #20]
 80068dc:	6909      	ldr	r1, [r1, #16]
 80068de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068e2:	eba3 0901 	sub.w	r9, r3, r1
 80068e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068ea:	1c7b      	adds	r3, r7, #1
 80068ec:	444b      	add	r3, r9
 80068ee:	106d      	asrs	r5, r5, #1
 80068f0:	429d      	cmp	r5, r3
 80068f2:	bf38      	it	cc
 80068f4:	461d      	movcc	r5, r3
 80068f6:	0553      	lsls	r3, r2, #21
 80068f8:	d527      	bpl.n	800694a <__ssputs_r+0x8e>
 80068fa:	4629      	mov	r1, r5
 80068fc:	f7ff ff52 	bl	80067a4 <_malloc_r>
 8006900:	4606      	mov	r6, r0
 8006902:	b360      	cbz	r0, 800695e <__ssputs_r+0xa2>
 8006904:	6921      	ldr	r1, [r4, #16]
 8006906:	464a      	mov	r2, r9
 8006908:	f7ff fed1 	bl	80066ae <memcpy>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	6126      	str	r6, [r4, #16]
 800691a:	6165      	str	r5, [r4, #20]
 800691c:	444e      	add	r6, r9
 800691e:	eba5 0509 	sub.w	r5, r5, r9
 8006922:	6026      	str	r6, [r4, #0]
 8006924:	60a5      	str	r5, [r4, #8]
 8006926:	463e      	mov	r6, r7
 8006928:	42be      	cmp	r6, r7
 800692a:	d900      	bls.n	800692e <__ssputs_r+0x72>
 800692c:	463e      	mov	r6, r7
 800692e:	6820      	ldr	r0, [r4, #0]
 8006930:	4632      	mov	r2, r6
 8006932:	4641      	mov	r1, r8
 8006934:	f000 fcf8 	bl	8007328 <memmove>
 8006938:	68a3      	ldr	r3, [r4, #8]
 800693a:	1b9b      	subs	r3, r3, r6
 800693c:	60a3      	str	r3, [r4, #8]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	4433      	add	r3, r6
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	2000      	movs	r0, #0
 8006946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694a:	462a      	mov	r2, r5
 800694c:	f000 fd38 	bl	80073c0 <_realloc_r>
 8006950:	4606      	mov	r6, r0
 8006952:	2800      	cmp	r0, #0
 8006954:	d1e0      	bne.n	8006918 <__ssputs_r+0x5c>
 8006956:	6921      	ldr	r1, [r4, #16]
 8006958:	4650      	mov	r0, sl
 800695a:	f7ff feb7 	bl	80066cc <_free_r>
 800695e:	230c      	movs	r3, #12
 8006960:	f8ca 3000 	str.w	r3, [sl]
 8006964:	89a3      	ldrh	r3, [r4, #12]
 8006966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800696a:	81a3      	strh	r3, [r4, #12]
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
 8006970:	e7e9      	b.n	8006946 <__ssputs_r+0x8a>
	...

08006974 <_svfiprintf_r>:
 8006974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006978:	4698      	mov	r8, r3
 800697a:	898b      	ldrh	r3, [r1, #12]
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	b09d      	sub	sp, #116	@ 0x74
 8006980:	4607      	mov	r7, r0
 8006982:	460d      	mov	r5, r1
 8006984:	4614      	mov	r4, r2
 8006986:	d510      	bpl.n	80069aa <_svfiprintf_r+0x36>
 8006988:	690b      	ldr	r3, [r1, #16]
 800698a:	b973      	cbnz	r3, 80069aa <_svfiprintf_r+0x36>
 800698c:	2140      	movs	r1, #64	@ 0x40
 800698e:	f7ff ff09 	bl	80067a4 <_malloc_r>
 8006992:	6028      	str	r0, [r5, #0]
 8006994:	6128      	str	r0, [r5, #16]
 8006996:	b930      	cbnz	r0, 80069a6 <_svfiprintf_r+0x32>
 8006998:	230c      	movs	r3, #12
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	f04f 30ff 	mov.w	r0, #4294967295
 80069a0:	b01d      	add	sp, #116	@ 0x74
 80069a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a6:	2340      	movs	r3, #64	@ 0x40
 80069a8:	616b      	str	r3, [r5, #20]
 80069aa:	2300      	movs	r3, #0
 80069ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ae:	2320      	movs	r3, #32
 80069b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80069b8:	2330      	movs	r3, #48	@ 0x30
 80069ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b58 <_svfiprintf_r+0x1e4>
 80069be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069c2:	f04f 0901 	mov.w	r9, #1
 80069c6:	4623      	mov	r3, r4
 80069c8:	469a      	mov	sl, r3
 80069ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069ce:	b10a      	cbz	r2, 80069d4 <_svfiprintf_r+0x60>
 80069d0:	2a25      	cmp	r2, #37	@ 0x25
 80069d2:	d1f9      	bne.n	80069c8 <_svfiprintf_r+0x54>
 80069d4:	ebba 0b04 	subs.w	fp, sl, r4
 80069d8:	d00b      	beq.n	80069f2 <_svfiprintf_r+0x7e>
 80069da:	465b      	mov	r3, fp
 80069dc:	4622      	mov	r2, r4
 80069de:	4629      	mov	r1, r5
 80069e0:	4638      	mov	r0, r7
 80069e2:	f7ff ff6b 	bl	80068bc <__ssputs_r>
 80069e6:	3001      	adds	r0, #1
 80069e8:	f000 80a7 	beq.w	8006b3a <_svfiprintf_r+0x1c6>
 80069ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069ee:	445a      	add	r2, fp
 80069f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80069f2:	f89a 3000 	ldrb.w	r3, [sl]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 809f 	beq.w	8006b3a <_svfiprintf_r+0x1c6>
 80069fc:	2300      	movs	r3, #0
 80069fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a06:	f10a 0a01 	add.w	sl, sl, #1
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	9307      	str	r3, [sp, #28]
 8006a0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a14:	4654      	mov	r4, sl
 8006a16:	2205      	movs	r2, #5
 8006a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1c:	484e      	ldr	r0, [pc, #312]	@ (8006b58 <_svfiprintf_r+0x1e4>)
 8006a1e:	f7f9 fbdf 	bl	80001e0 <memchr>
 8006a22:	9a04      	ldr	r2, [sp, #16]
 8006a24:	b9d8      	cbnz	r0, 8006a5e <_svfiprintf_r+0xea>
 8006a26:	06d0      	lsls	r0, r2, #27
 8006a28:	bf44      	itt	mi
 8006a2a:	2320      	movmi	r3, #32
 8006a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a30:	0711      	lsls	r1, r2, #28
 8006a32:	bf44      	itt	mi
 8006a34:	232b      	movmi	r3, #43	@ 0x2b
 8006a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a40:	d015      	beq.n	8006a6e <_svfiprintf_r+0xfa>
 8006a42:	9a07      	ldr	r2, [sp, #28]
 8006a44:	4654      	mov	r4, sl
 8006a46:	2000      	movs	r0, #0
 8006a48:	f04f 0c0a 	mov.w	ip, #10
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a52:	3b30      	subs	r3, #48	@ 0x30
 8006a54:	2b09      	cmp	r3, #9
 8006a56:	d94b      	bls.n	8006af0 <_svfiprintf_r+0x17c>
 8006a58:	b1b0      	cbz	r0, 8006a88 <_svfiprintf_r+0x114>
 8006a5a:	9207      	str	r2, [sp, #28]
 8006a5c:	e014      	b.n	8006a88 <_svfiprintf_r+0x114>
 8006a5e:	eba0 0308 	sub.w	r3, r0, r8
 8006a62:	fa09 f303 	lsl.w	r3, r9, r3
 8006a66:	4313      	orrs	r3, r2
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	46a2      	mov	sl, r4
 8006a6c:	e7d2      	b.n	8006a14 <_svfiprintf_r+0xa0>
 8006a6e:	9b03      	ldr	r3, [sp, #12]
 8006a70:	1d19      	adds	r1, r3, #4
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	9103      	str	r1, [sp, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bfbb      	ittet	lt
 8006a7a:	425b      	neglt	r3, r3
 8006a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a80:	9307      	strge	r3, [sp, #28]
 8006a82:	9307      	strlt	r3, [sp, #28]
 8006a84:	bfb8      	it	lt
 8006a86:	9204      	strlt	r2, [sp, #16]
 8006a88:	7823      	ldrb	r3, [r4, #0]
 8006a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a8c:	d10a      	bne.n	8006aa4 <_svfiprintf_r+0x130>
 8006a8e:	7863      	ldrb	r3, [r4, #1]
 8006a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a92:	d132      	bne.n	8006afa <_svfiprintf_r+0x186>
 8006a94:	9b03      	ldr	r3, [sp, #12]
 8006a96:	1d1a      	adds	r2, r3, #4
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	9203      	str	r2, [sp, #12]
 8006a9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006aa0:	3402      	adds	r4, #2
 8006aa2:	9305      	str	r3, [sp, #20]
 8006aa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b68 <_svfiprintf_r+0x1f4>
 8006aa8:	7821      	ldrb	r1, [r4, #0]
 8006aaa:	2203      	movs	r2, #3
 8006aac:	4650      	mov	r0, sl
 8006aae:	f7f9 fb97 	bl	80001e0 <memchr>
 8006ab2:	b138      	cbz	r0, 8006ac4 <_svfiprintf_r+0x150>
 8006ab4:	9b04      	ldr	r3, [sp, #16]
 8006ab6:	eba0 000a 	sub.w	r0, r0, sl
 8006aba:	2240      	movs	r2, #64	@ 0x40
 8006abc:	4082      	lsls	r2, r0
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	3401      	adds	r4, #1
 8006ac2:	9304      	str	r3, [sp, #16]
 8006ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac8:	4824      	ldr	r0, [pc, #144]	@ (8006b5c <_svfiprintf_r+0x1e8>)
 8006aca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ace:	2206      	movs	r2, #6
 8006ad0:	f7f9 fb86 	bl	80001e0 <memchr>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d036      	beq.n	8006b46 <_svfiprintf_r+0x1d2>
 8006ad8:	4b21      	ldr	r3, [pc, #132]	@ (8006b60 <_svfiprintf_r+0x1ec>)
 8006ada:	bb1b      	cbnz	r3, 8006b24 <_svfiprintf_r+0x1b0>
 8006adc:	9b03      	ldr	r3, [sp, #12]
 8006ade:	3307      	adds	r3, #7
 8006ae0:	f023 0307 	bic.w	r3, r3, #7
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	9303      	str	r3, [sp, #12]
 8006ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aea:	4433      	add	r3, r6
 8006aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aee:	e76a      	b.n	80069c6 <_svfiprintf_r+0x52>
 8006af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006af4:	460c      	mov	r4, r1
 8006af6:	2001      	movs	r0, #1
 8006af8:	e7a8      	b.n	8006a4c <_svfiprintf_r+0xd8>
 8006afa:	2300      	movs	r3, #0
 8006afc:	3401      	adds	r4, #1
 8006afe:	9305      	str	r3, [sp, #20]
 8006b00:	4619      	mov	r1, r3
 8006b02:	f04f 0c0a 	mov.w	ip, #10
 8006b06:	4620      	mov	r0, r4
 8006b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b0c:	3a30      	subs	r2, #48	@ 0x30
 8006b0e:	2a09      	cmp	r2, #9
 8006b10:	d903      	bls.n	8006b1a <_svfiprintf_r+0x1a6>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0c6      	beq.n	8006aa4 <_svfiprintf_r+0x130>
 8006b16:	9105      	str	r1, [sp, #20]
 8006b18:	e7c4      	b.n	8006aa4 <_svfiprintf_r+0x130>
 8006b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b1e:	4604      	mov	r4, r0
 8006b20:	2301      	movs	r3, #1
 8006b22:	e7f0      	b.n	8006b06 <_svfiprintf_r+0x192>
 8006b24:	ab03      	add	r3, sp, #12
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	462a      	mov	r2, r5
 8006b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b64 <_svfiprintf_r+0x1f0>)
 8006b2c:	a904      	add	r1, sp, #16
 8006b2e:	4638      	mov	r0, r7
 8006b30:	f3af 8000 	nop.w
 8006b34:	1c42      	adds	r2, r0, #1
 8006b36:	4606      	mov	r6, r0
 8006b38:	d1d6      	bne.n	8006ae8 <_svfiprintf_r+0x174>
 8006b3a:	89ab      	ldrh	r3, [r5, #12]
 8006b3c:	065b      	lsls	r3, r3, #25
 8006b3e:	f53f af2d 	bmi.w	800699c <_svfiprintf_r+0x28>
 8006b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b44:	e72c      	b.n	80069a0 <_svfiprintf_r+0x2c>
 8006b46:	ab03      	add	r3, sp, #12
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	462a      	mov	r2, r5
 8006b4c:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <_svfiprintf_r+0x1f0>)
 8006b4e:	a904      	add	r1, sp, #16
 8006b50:	4638      	mov	r0, r7
 8006b52:	f000 f9bb 	bl	8006ecc <_printf_i>
 8006b56:	e7ed      	b.n	8006b34 <_svfiprintf_r+0x1c0>
 8006b58:	08007540 	.word	0x08007540
 8006b5c:	0800754a 	.word	0x0800754a
 8006b60:	00000000 	.word	0x00000000
 8006b64:	080068bd 	.word	0x080068bd
 8006b68:	08007546 	.word	0x08007546

08006b6c <__sfputc_r>:
 8006b6c:	6893      	ldr	r3, [r2, #8]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	b410      	push	{r4}
 8006b74:	6093      	str	r3, [r2, #8]
 8006b76:	da08      	bge.n	8006b8a <__sfputc_r+0x1e>
 8006b78:	6994      	ldr	r4, [r2, #24]
 8006b7a:	42a3      	cmp	r3, r4
 8006b7c:	db01      	blt.n	8006b82 <__sfputc_r+0x16>
 8006b7e:	290a      	cmp	r1, #10
 8006b80:	d103      	bne.n	8006b8a <__sfputc_r+0x1e>
 8006b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b86:	f7ff bc2c 	b.w	80063e2 <__swbuf_r>
 8006b8a:	6813      	ldr	r3, [r2, #0]
 8006b8c:	1c58      	adds	r0, r3, #1
 8006b8e:	6010      	str	r0, [r2, #0]
 8006b90:	7019      	strb	r1, [r3, #0]
 8006b92:	4608      	mov	r0, r1
 8006b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <__sfputs_r>:
 8006b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	460f      	mov	r7, r1
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	18d5      	adds	r5, r2, r3
 8006ba4:	42ac      	cmp	r4, r5
 8006ba6:	d101      	bne.n	8006bac <__sfputs_r+0x12>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e007      	b.n	8006bbc <__sfputs_r+0x22>
 8006bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb0:	463a      	mov	r2, r7
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f7ff ffda 	bl	8006b6c <__sfputc_r>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d1f3      	bne.n	8006ba4 <__sfputs_r+0xa>
 8006bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bc0 <_vfiprintf_r>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	460d      	mov	r5, r1
 8006bc6:	b09d      	sub	sp, #116	@ 0x74
 8006bc8:	4614      	mov	r4, r2
 8006bca:	4698      	mov	r8, r3
 8006bcc:	4606      	mov	r6, r0
 8006bce:	b118      	cbz	r0, 8006bd8 <_vfiprintf_r+0x18>
 8006bd0:	6a03      	ldr	r3, [r0, #32]
 8006bd2:	b90b      	cbnz	r3, 8006bd8 <_vfiprintf_r+0x18>
 8006bd4:	f7ff fafc 	bl	80061d0 <__sinit>
 8006bd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bda:	07d9      	lsls	r1, r3, #31
 8006bdc:	d405      	bmi.n	8006bea <_vfiprintf_r+0x2a>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	059a      	lsls	r2, r3, #22
 8006be2:	d402      	bmi.n	8006bea <_vfiprintf_r+0x2a>
 8006be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006be6:	f7ff fd60 	bl	80066aa <__retarget_lock_acquire_recursive>
 8006bea:	89ab      	ldrh	r3, [r5, #12]
 8006bec:	071b      	lsls	r3, r3, #28
 8006bee:	d501      	bpl.n	8006bf4 <_vfiprintf_r+0x34>
 8006bf0:	692b      	ldr	r3, [r5, #16]
 8006bf2:	b99b      	cbnz	r3, 8006c1c <_vfiprintf_r+0x5c>
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f7ff fc32 	bl	8006460 <__swsetup_r>
 8006bfc:	b170      	cbz	r0, 8006c1c <_vfiprintf_r+0x5c>
 8006bfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c00:	07dc      	lsls	r4, r3, #31
 8006c02:	d504      	bpl.n	8006c0e <_vfiprintf_r+0x4e>
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	b01d      	add	sp, #116	@ 0x74
 8006c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0e:	89ab      	ldrh	r3, [r5, #12]
 8006c10:	0598      	lsls	r0, r3, #22
 8006c12:	d4f7      	bmi.n	8006c04 <_vfiprintf_r+0x44>
 8006c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c16:	f7ff fd49 	bl	80066ac <__retarget_lock_release_recursive>
 8006c1a:	e7f3      	b.n	8006c04 <_vfiprintf_r+0x44>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c20:	2320      	movs	r3, #32
 8006c22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c2a:	2330      	movs	r3, #48	@ 0x30
 8006c2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ddc <_vfiprintf_r+0x21c>
 8006c30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c34:	f04f 0901 	mov.w	r9, #1
 8006c38:	4623      	mov	r3, r4
 8006c3a:	469a      	mov	sl, r3
 8006c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c40:	b10a      	cbz	r2, 8006c46 <_vfiprintf_r+0x86>
 8006c42:	2a25      	cmp	r2, #37	@ 0x25
 8006c44:	d1f9      	bne.n	8006c3a <_vfiprintf_r+0x7a>
 8006c46:	ebba 0b04 	subs.w	fp, sl, r4
 8006c4a:	d00b      	beq.n	8006c64 <_vfiprintf_r+0xa4>
 8006c4c:	465b      	mov	r3, fp
 8006c4e:	4622      	mov	r2, r4
 8006c50:	4629      	mov	r1, r5
 8006c52:	4630      	mov	r0, r6
 8006c54:	f7ff ffa1 	bl	8006b9a <__sfputs_r>
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f000 80a7 	beq.w	8006dac <_vfiprintf_r+0x1ec>
 8006c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c60:	445a      	add	r2, fp
 8006c62:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c64:	f89a 3000 	ldrb.w	r3, [sl]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 809f 	beq.w	8006dac <_vfiprintf_r+0x1ec>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f04f 32ff 	mov.w	r2, #4294967295
 8006c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c78:	f10a 0a01 	add.w	sl, sl, #1
 8006c7c:	9304      	str	r3, [sp, #16]
 8006c7e:	9307      	str	r3, [sp, #28]
 8006c80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c84:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c86:	4654      	mov	r4, sl
 8006c88:	2205      	movs	r2, #5
 8006c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8e:	4853      	ldr	r0, [pc, #332]	@ (8006ddc <_vfiprintf_r+0x21c>)
 8006c90:	f7f9 faa6 	bl	80001e0 <memchr>
 8006c94:	9a04      	ldr	r2, [sp, #16]
 8006c96:	b9d8      	cbnz	r0, 8006cd0 <_vfiprintf_r+0x110>
 8006c98:	06d1      	lsls	r1, r2, #27
 8006c9a:	bf44      	itt	mi
 8006c9c:	2320      	movmi	r3, #32
 8006c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ca2:	0713      	lsls	r3, r2, #28
 8006ca4:	bf44      	itt	mi
 8006ca6:	232b      	movmi	r3, #43	@ 0x2b
 8006ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cac:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cb2:	d015      	beq.n	8006ce0 <_vfiprintf_r+0x120>
 8006cb4:	9a07      	ldr	r2, [sp, #28]
 8006cb6:	4654      	mov	r4, sl
 8006cb8:	2000      	movs	r0, #0
 8006cba:	f04f 0c0a 	mov.w	ip, #10
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc4:	3b30      	subs	r3, #48	@ 0x30
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d94b      	bls.n	8006d62 <_vfiprintf_r+0x1a2>
 8006cca:	b1b0      	cbz	r0, 8006cfa <_vfiprintf_r+0x13a>
 8006ccc:	9207      	str	r2, [sp, #28]
 8006cce:	e014      	b.n	8006cfa <_vfiprintf_r+0x13a>
 8006cd0:	eba0 0308 	sub.w	r3, r0, r8
 8006cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	46a2      	mov	sl, r4
 8006cde:	e7d2      	b.n	8006c86 <_vfiprintf_r+0xc6>
 8006ce0:	9b03      	ldr	r3, [sp, #12]
 8006ce2:	1d19      	adds	r1, r3, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	9103      	str	r1, [sp, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bfbb      	ittet	lt
 8006cec:	425b      	neglt	r3, r3
 8006cee:	f042 0202 	orrlt.w	r2, r2, #2
 8006cf2:	9307      	strge	r3, [sp, #28]
 8006cf4:	9307      	strlt	r3, [sp, #28]
 8006cf6:	bfb8      	it	lt
 8006cf8:	9204      	strlt	r2, [sp, #16]
 8006cfa:	7823      	ldrb	r3, [r4, #0]
 8006cfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cfe:	d10a      	bne.n	8006d16 <_vfiprintf_r+0x156>
 8006d00:	7863      	ldrb	r3, [r4, #1]
 8006d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d04:	d132      	bne.n	8006d6c <_vfiprintf_r+0x1ac>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	9203      	str	r2, [sp, #12]
 8006d0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d12:	3402      	adds	r4, #2
 8006d14:	9305      	str	r3, [sp, #20]
 8006d16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006dec <_vfiprintf_r+0x22c>
 8006d1a:	7821      	ldrb	r1, [r4, #0]
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	4650      	mov	r0, sl
 8006d20:	f7f9 fa5e 	bl	80001e0 <memchr>
 8006d24:	b138      	cbz	r0, 8006d36 <_vfiprintf_r+0x176>
 8006d26:	9b04      	ldr	r3, [sp, #16]
 8006d28:	eba0 000a 	sub.w	r0, r0, sl
 8006d2c:	2240      	movs	r2, #64	@ 0x40
 8006d2e:	4082      	lsls	r2, r0
 8006d30:	4313      	orrs	r3, r2
 8006d32:	3401      	adds	r4, #1
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3a:	4829      	ldr	r0, [pc, #164]	@ (8006de0 <_vfiprintf_r+0x220>)
 8006d3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d40:	2206      	movs	r2, #6
 8006d42:	f7f9 fa4d 	bl	80001e0 <memchr>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d03f      	beq.n	8006dca <_vfiprintf_r+0x20a>
 8006d4a:	4b26      	ldr	r3, [pc, #152]	@ (8006de4 <_vfiprintf_r+0x224>)
 8006d4c:	bb1b      	cbnz	r3, 8006d96 <_vfiprintf_r+0x1d6>
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	3307      	adds	r3, #7
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	3308      	adds	r3, #8
 8006d58:	9303      	str	r3, [sp, #12]
 8006d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d5c:	443b      	add	r3, r7
 8006d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d60:	e76a      	b.n	8006c38 <_vfiprintf_r+0x78>
 8006d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d66:	460c      	mov	r4, r1
 8006d68:	2001      	movs	r0, #1
 8006d6a:	e7a8      	b.n	8006cbe <_vfiprintf_r+0xfe>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	3401      	adds	r4, #1
 8006d70:	9305      	str	r3, [sp, #20]
 8006d72:	4619      	mov	r1, r3
 8006d74:	f04f 0c0a 	mov.w	ip, #10
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d7e:	3a30      	subs	r2, #48	@ 0x30
 8006d80:	2a09      	cmp	r2, #9
 8006d82:	d903      	bls.n	8006d8c <_vfiprintf_r+0x1cc>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0c6      	beq.n	8006d16 <_vfiprintf_r+0x156>
 8006d88:	9105      	str	r1, [sp, #20]
 8006d8a:	e7c4      	b.n	8006d16 <_vfiprintf_r+0x156>
 8006d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d90:	4604      	mov	r4, r0
 8006d92:	2301      	movs	r3, #1
 8006d94:	e7f0      	b.n	8006d78 <_vfiprintf_r+0x1b8>
 8006d96:	ab03      	add	r3, sp, #12
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	462a      	mov	r2, r5
 8006d9c:	4b12      	ldr	r3, [pc, #72]	@ (8006de8 <_vfiprintf_r+0x228>)
 8006d9e:	a904      	add	r1, sp, #16
 8006da0:	4630      	mov	r0, r6
 8006da2:	f3af 8000 	nop.w
 8006da6:	4607      	mov	r7, r0
 8006da8:	1c78      	adds	r0, r7, #1
 8006daa:	d1d6      	bne.n	8006d5a <_vfiprintf_r+0x19a>
 8006dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dae:	07d9      	lsls	r1, r3, #31
 8006db0:	d405      	bmi.n	8006dbe <_vfiprintf_r+0x1fe>
 8006db2:	89ab      	ldrh	r3, [r5, #12]
 8006db4:	059a      	lsls	r2, r3, #22
 8006db6:	d402      	bmi.n	8006dbe <_vfiprintf_r+0x1fe>
 8006db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dba:	f7ff fc77 	bl	80066ac <__retarget_lock_release_recursive>
 8006dbe:	89ab      	ldrh	r3, [r5, #12]
 8006dc0:	065b      	lsls	r3, r3, #25
 8006dc2:	f53f af1f 	bmi.w	8006c04 <_vfiprintf_r+0x44>
 8006dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dc8:	e71e      	b.n	8006c08 <_vfiprintf_r+0x48>
 8006dca:	ab03      	add	r3, sp, #12
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	462a      	mov	r2, r5
 8006dd0:	4b05      	ldr	r3, [pc, #20]	@ (8006de8 <_vfiprintf_r+0x228>)
 8006dd2:	a904      	add	r1, sp, #16
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f000 f879 	bl	8006ecc <_printf_i>
 8006dda:	e7e4      	b.n	8006da6 <_vfiprintf_r+0x1e6>
 8006ddc:	08007540 	.word	0x08007540
 8006de0:	0800754a 	.word	0x0800754a
 8006de4:	00000000 	.word	0x00000000
 8006de8:	08006b9b 	.word	0x08006b9b
 8006dec:	08007546 	.word	0x08007546

08006df0 <_printf_common>:
 8006df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df4:	4616      	mov	r6, r2
 8006df6:	4698      	mov	r8, r3
 8006df8:	688a      	ldr	r2, [r1, #8]
 8006dfa:	690b      	ldr	r3, [r1, #16]
 8006dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e00:	4293      	cmp	r3, r2
 8006e02:	bfb8      	it	lt
 8006e04:	4613      	movlt	r3, r2
 8006e06:	6033      	str	r3, [r6, #0]
 8006e08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e0c:	4607      	mov	r7, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	b10a      	cbz	r2, 8006e16 <_printf_common+0x26>
 8006e12:	3301      	adds	r3, #1
 8006e14:	6033      	str	r3, [r6, #0]
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	0699      	lsls	r1, r3, #26
 8006e1a:	bf42      	ittt	mi
 8006e1c:	6833      	ldrmi	r3, [r6, #0]
 8006e1e:	3302      	addmi	r3, #2
 8006e20:	6033      	strmi	r3, [r6, #0]
 8006e22:	6825      	ldr	r5, [r4, #0]
 8006e24:	f015 0506 	ands.w	r5, r5, #6
 8006e28:	d106      	bne.n	8006e38 <_printf_common+0x48>
 8006e2a:	f104 0a19 	add.w	sl, r4, #25
 8006e2e:	68e3      	ldr	r3, [r4, #12]
 8006e30:	6832      	ldr	r2, [r6, #0]
 8006e32:	1a9b      	subs	r3, r3, r2
 8006e34:	42ab      	cmp	r3, r5
 8006e36:	dc26      	bgt.n	8006e86 <_printf_common+0x96>
 8006e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e3c:	6822      	ldr	r2, [r4, #0]
 8006e3e:	3b00      	subs	r3, #0
 8006e40:	bf18      	it	ne
 8006e42:	2301      	movne	r3, #1
 8006e44:	0692      	lsls	r2, r2, #26
 8006e46:	d42b      	bmi.n	8006ea0 <_printf_common+0xb0>
 8006e48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e4c:	4641      	mov	r1, r8
 8006e4e:	4638      	mov	r0, r7
 8006e50:	47c8      	blx	r9
 8006e52:	3001      	adds	r0, #1
 8006e54:	d01e      	beq.n	8006e94 <_printf_common+0xa4>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	6922      	ldr	r2, [r4, #16]
 8006e5a:	f003 0306 	and.w	r3, r3, #6
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	bf02      	ittt	eq
 8006e62:	68e5      	ldreq	r5, [r4, #12]
 8006e64:	6833      	ldreq	r3, [r6, #0]
 8006e66:	1aed      	subeq	r5, r5, r3
 8006e68:	68a3      	ldr	r3, [r4, #8]
 8006e6a:	bf0c      	ite	eq
 8006e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e70:	2500      	movne	r5, #0
 8006e72:	4293      	cmp	r3, r2
 8006e74:	bfc4      	itt	gt
 8006e76:	1a9b      	subgt	r3, r3, r2
 8006e78:	18ed      	addgt	r5, r5, r3
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	341a      	adds	r4, #26
 8006e7e:	42b5      	cmp	r5, r6
 8006e80:	d11a      	bne.n	8006eb8 <_printf_common+0xc8>
 8006e82:	2000      	movs	r0, #0
 8006e84:	e008      	b.n	8006e98 <_printf_common+0xa8>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4652      	mov	r2, sl
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	47c8      	blx	r9
 8006e90:	3001      	adds	r0, #1
 8006e92:	d103      	bne.n	8006e9c <_printf_common+0xac>
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	e7c6      	b.n	8006e2e <_printf_common+0x3e>
 8006ea0:	18e1      	adds	r1, r4, r3
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	2030      	movs	r0, #48	@ 0x30
 8006ea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006eaa:	4422      	add	r2, r4
 8006eac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006eb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006eb4:	3302      	adds	r3, #2
 8006eb6:	e7c7      	b.n	8006e48 <_printf_common+0x58>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4622      	mov	r2, r4
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	47c8      	blx	r9
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	d0e6      	beq.n	8006e94 <_printf_common+0xa4>
 8006ec6:	3601      	adds	r6, #1
 8006ec8:	e7d9      	b.n	8006e7e <_printf_common+0x8e>
	...

08006ecc <_printf_i>:
 8006ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed0:	7e0f      	ldrb	r7, [r1, #24]
 8006ed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ed4:	2f78      	cmp	r7, #120	@ 0x78
 8006ed6:	4691      	mov	r9, r2
 8006ed8:	4680      	mov	r8, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	469a      	mov	sl, r3
 8006ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ee2:	d807      	bhi.n	8006ef4 <_printf_i+0x28>
 8006ee4:	2f62      	cmp	r7, #98	@ 0x62
 8006ee6:	d80a      	bhi.n	8006efe <_printf_i+0x32>
 8006ee8:	2f00      	cmp	r7, #0
 8006eea:	f000 80d2 	beq.w	8007092 <_printf_i+0x1c6>
 8006eee:	2f58      	cmp	r7, #88	@ 0x58
 8006ef0:	f000 80b9 	beq.w	8007066 <_printf_i+0x19a>
 8006ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006efc:	e03a      	b.n	8006f74 <_printf_i+0xa8>
 8006efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f02:	2b15      	cmp	r3, #21
 8006f04:	d8f6      	bhi.n	8006ef4 <_printf_i+0x28>
 8006f06:	a101      	add	r1, pc, #4	@ (adr r1, 8006f0c <_printf_i+0x40>)
 8006f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f0c:	08006f65 	.word	0x08006f65
 8006f10:	08006f79 	.word	0x08006f79
 8006f14:	08006ef5 	.word	0x08006ef5
 8006f18:	08006ef5 	.word	0x08006ef5
 8006f1c:	08006ef5 	.word	0x08006ef5
 8006f20:	08006ef5 	.word	0x08006ef5
 8006f24:	08006f79 	.word	0x08006f79
 8006f28:	08006ef5 	.word	0x08006ef5
 8006f2c:	08006ef5 	.word	0x08006ef5
 8006f30:	08006ef5 	.word	0x08006ef5
 8006f34:	08006ef5 	.word	0x08006ef5
 8006f38:	08007079 	.word	0x08007079
 8006f3c:	08006fa3 	.word	0x08006fa3
 8006f40:	08007033 	.word	0x08007033
 8006f44:	08006ef5 	.word	0x08006ef5
 8006f48:	08006ef5 	.word	0x08006ef5
 8006f4c:	0800709b 	.word	0x0800709b
 8006f50:	08006ef5 	.word	0x08006ef5
 8006f54:	08006fa3 	.word	0x08006fa3
 8006f58:	08006ef5 	.word	0x08006ef5
 8006f5c:	08006ef5 	.word	0x08006ef5
 8006f60:	0800703b 	.word	0x0800703b
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	1d1a      	adds	r2, r3, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6032      	str	r2, [r6, #0]
 8006f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f74:	2301      	movs	r3, #1
 8006f76:	e09d      	b.n	80070b4 <_printf_i+0x1e8>
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	6820      	ldr	r0, [r4, #0]
 8006f7c:	1d19      	adds	r1, r3, #4
 8006f7e:	6031      	str	r1, [r6, #0]
 8006f80:	0606      	lsls	r6, r0, #24
 8006f82:	d501      	bpl.n	8006f88 <_printf_i+0xbc>
 8006f84:	681d      	ldr	r5, [r3, #0]
 8006f86:	e003      	b.n	8006f90 <_printf_i+0xc4>
 8006f88:	0645      	lsls	r5, r0, #25
 8006f8a:	d5fb      	bpl.n	8006f84 <_printf_i+0xb8>
 8006f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f90:	2d00      	cmp	r5, #0
 8006f92:	da03      	bge.n	8006f9c <_printf_i+0xd0>
 8006f94:	232d      	movs	r3, #45	@ 0x2d
 8006f96:	426d      	negs	r5, r5
 8006f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f9c:	4859      	ldr	r0, [pc, #356]	@ (8007104 <_printf_i+0x238>)
 8006f9e:	230a      	movs	r3, #10
 8006fa0:	e011      	b.n	8006fc6 <_printf_i+0xfa>
 8006fa2:	6821      	ldr	r1, [r4, #0]
 8006fa4:	6833      	ldr	r3, [r6, #0]
 8006fa6:	0608      	lsls	r0, r1, #24
 8006fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fac:	d402      	bmi.n	8006fb4 <_printf_i+0xe8>
 8006fae:	0649      	lsls	r1, r1, #25
 8006fb0:	bf48      	it	mi
 8006fb2:	b2ad      	uxthmi	r5, r5
 8006fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fb6:	4853      	ldr	r0, [pc, #332]	@ (8007104 <_printf_i+0x238>)
 8006fb8:	6033      	str	r3, [r6, #0]
 8006fba:	bf14      	ite	ne
 8006fbc:	230a      	movne	r3, #10
 8006fbe:	2308      	moveq	r3, #8
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fc6:	6866      	ldr	r6, [r4, #4]
 8006fc8:	60a6      	str	r6, [r4, #8]
 8006fca:	2e00      	cmp	r6, #0
 8006fcc:	bfa2      	ittt	ge
 8006fce:	6821      	ldrge	r1, [r4, #0]
 8006fd0:	f021 0104 	bicge.w	r1, r1, #4
 8006fd4:	6021      	strge	r1, [r4, #0]
 8006fd6:	b90d      	cbnz	r5, 8006fdc <_printf_i+0x110>
 8006fd8:	2e00      	cmp	r6, #0
 8006fda:	d04b      	beq.n	8007074 <_printf_i+0x1a8>
 8006fdc:	4616      	mov	r6, r2
 8006fde:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fe2:	fb03 5711 	mls	r7, r3, r1, r5
 8006fe6:	5dc7      	ldrb	r7, [r0, r7]
 8006fe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fec:	462f      	mov	r7, r5
 8006fee:	42bb      	cmp	r3, r7
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	d9f4      	bls.n	8006fde <_printf_i+0x112>
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d10b      	bne.n	8007010 <_printf_i+0x144>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	07df      	lsls	r7, r3, #31
 8006ffc:	d508      	bpl.n	8007010 <_printf_i+0x144>
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	6861      	ldr	r1, [r4, #4]
 8007002:	4299      	cmp	r1, r3
 8007004:	bfde      	ittt	le
 8007006:	2330      	movle	r3, #48	@ 0x30
 8007008:	f806 3c01 	strble.w	r3, [r6, #-1]
 800700c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007010:	1b92      	subs	r2, r2, r6
 8007012:	6122      	str	r2, [r4, #16]
 8007014:	f8cd a000 	str.w	sl, [sp]
 8007018:	464b      	mov	r3, r9
 800701a:	aa03      	add	r2, sp, #12
 800701c:	4621      	mov	r1, r4
 800701e:	4640      	mov	r0, r8
 8007020:	f7ff fee6 	bl	8006df0 <_printf_common>
 8007024:	3001      	adds	r0, #1
 8007026:	d14a      	bne.n	80070be <_printf_i+0x1f2>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	b004      	add	sp, #16
 800702e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	f043 0320 	orr.w	r3, r3, #32
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	4833      	ldr	r0, [pc, #204]	@ (8007108 <_printf_i+0x23c>)
 800703c:	2778      	movs	r7, #120	@ 0x78
 800703e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	6831      	ldr	r1, [r6, #0]
 8007046:	061f      	lsls	r7, r3, #24
 8007048:	f851 5b04 	ldr.w	r5, [r1], #4
 800704c:	d402      	bmi.n	8007054 <_printf_i+0x188>
 800704e:	065f      	lsls	r7, r3, #25
 8007050:	bf48      	it	mi
 8007052:	b2ad      	uxthmi	r5, r5
 8007054:	6031      	str	r1, [r6, #0]
 8007056:	07d9      	lsls	r1, r3, #31
 8007058:	bf44      	itt	mi
 800705a:	f043 0320 	orrmi.w	r3, r3, #32
 800705e:	6023      	strmi	r3, [r4, #0]
 8007060:	b11d      	cbz	r5, 800706a <_printf_i+0x19e>
 8007062:	2310      	movs	r3, #16
 8007064:	e7ac      	b.n	8006fc0 <_printf_i+0xf4>
 8007066:	4827      	ldr	r0, [pc, #156]	@ (8007104 <_printf_i+0x238>)
 8007068:	e7e9      	b.n	800703e <_printf_i+0x172>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	f023 0320 	bic.w	r3, r3, #32
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	e7f6      	b.n	8007062 <_printf_i+0x196>
 8007074:	4616      	mov	r6, r2
 8007076:	e7bd      	b.n	8006ff4 <_printf_i+0x128>
 8007078:	6833      	ldr	r3, [r6, #0]
 800707a:	6825      	ldr	r5, [r4, #0]
 800707c:	6961      	ldr	r1, [r4, #20]
 800707e:	1d18      	adds	r0, r3, #4
 8007080:	6030      	str	r0, [r6, #0]
 8007082:	062e      	lsls	r6, r5, #24
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	d501      	bpl.n	800708c <_printf_i+0x1c0>
 8007088:	6019      	str	r1, [r3, #0]
 800708a:	e002      	b.n	8007092 <_printf_i+0x1c6>
 800708c:	0668      	lsls	r0, r5, #25
 800708e:	d5fb      	bpl.n	8007088 <_printf_i+0x1bc>
 8007090:	8019      	strh	r1, [r3, #0]
 8007092:	2300      	movs	r3, #0
 8007094:	6123      	str	r3, [r4, #16]
 8007096:	4616      	mov	r6, r2
 8007098:	e7bc      	b.n	8007014 <_printf_i+0x148>
 800709a:	6833      	ldr	r3, [r6, #0]
 800709c:	1d1a      	adds	r2, r3, #4
 800709e:	6032      	str	r2, [r6, #0]
 80070a0:	681e      	ldr	r6, [r3, #0]
 80070a2:	6862      	ldr	r2, [r4, #4]
 80070a4:	2100      	movs	r1, #0
 80070a6:	4630      	mov	r0, r6
 80070a8:	f7f9 f89a 	bl	80001e0 <memchr>
 80070ac:	b108      	cbz	r0, 80070b2 <_printf_i+0x1e6>
 80070ae:	1b80      	subs	r0, r0, r6
 80070b0:	6060      	str	r0, [r4, #4]
 80070b2:	6863      	ldr	r3, [r4, #4]
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	2300      	movs	r3, #0
 80070b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070bc:	e7aa      	b.n	8007014 <_printf_i+0x148>
 80070be:	6923      	ldr	r3, [r4, #16]
 80070c0:	4632      	mov	r2, r6
 80070c2:	4649      	mov	r1, r9
 80070c4:	4640      	mov	r0, r8
 80070c6:	47d0      	blx	sl
 80070c8:	3001      	adds	r0, #1
 80070ca:	d0ad      	beq.n	8007028 <_printf_i+0x15c>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	079b      	lsls	r3, r3, #30
 80070d0:	d413      	bmi.n	80070fa <_printf_i+0x22e>
 80070d2:	68e0      	ldr	r0, [r4, #12]
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	4298      	cmp	r0, r3
 80070d8:	bfb8      	it	lt
 80070da:	4618      	movlt	r0, r3
 80070dc:	e7a6      	b.n	800702c <_printf_i+0x160>
 80070de:	2301      	movs	r3, #1
 80070e0:	4632      	mov	r2, r6
 80070e2:	4649      	mov	r1, r9
 80070e4:	4640      	mov	r0, r8
 80070e6:	47d0      	blx	sl
 80070e8:	3001      	adds	r0, #1
 80070ea:	d09d      	beq.n	8007028 <_printf_i+0x15c>
 80070ec:	3501      	adds	r5, #1
 80070ee:	68e3      	ldr	r3, [r4, #12]
 80070f0:	9903      	ldr	r1, [sp, #12]
 80070f2:	1a5b      	subs	r3, r3, r1
 80070f4:	42ab      	cmp	r3, r5
 80070f6:	dcf2      	bgt.n	80070de <_printf_i+0x212>
 80070f8:	e7eb      	b.n	80070d2 <_printf_i+0x206>
 80070fa:	2500      	movs	r5, #0
 80070fc:	f104 0619 	add.w	r6, r4, #25
 8007100:	e7f5      	b.n	80070ee <_printf_i+0x222>
 8007102:	bf00      	nop
 8007104:	08007551 	.word	0x08007551
 8007108:	08007562 	.word	0x08007562

0800710c <__sflush_r>:
 800710c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007114:	0716      	lsls	r6, r2, #28
 8007116:	4605      	mov	r5, r0
 8007118:	460c      	mov	r4, r1
 800711a:	d454      	bmi.n	80071c6 <__sflush_r+0xba>
 800711c:	684b      	ldr	r3, [r1, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	dc02      	bgt.n	8007128 <__sflush_r+0x1c>
 8007122:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	dd48      	ble.n	80071ba <__sflush_r+0xae>
 8007128:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800712a:	2e00      	cmp	r6, #0
 800712c:	d045      	beq.n	80071ba <__sflush_r+0xae>
 800712e:	2300      	movs	r3, #0
 8007130:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007134:	682f      	ldr	r7, [r5, #0]
 8007136:	6a21      	ldr	r1, [r4, #32]
 8007138:	602b      	str	r3, [r5, #0]
 800713a:	d030      	beq.n	800719e <__sflush_r+0x92>
 800713c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	0759      	lsls	r1, r3, #29
 8007142:	d505      	bpl.n	8007150 <__sflush_r+0x44>
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	1ad2      	subs	r2, r2, r3
 8007148:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800714a:	b10b      	cbz	r3, 8007150 <__sflush_r+0x44>
 800714c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	2300      	movs	r3, #0
 8007152:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007154:	6a21      	ldr	r1, [r4, #32]
 8007156:	4628      	mov	r0, r5
 8007158:	47b0      	blx	r6
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	d106      	bne.n	800716e <__sflush_r+0x62>
 8007160:	6829      	ldr	r1, [r5, #0]
 8007162:	291d      	cmp	r1, #29
 8007164:	d82b      	bhi.n	80071be <__sflush_r+0xb2>
 8007166:	4a2a      	ldr	r2, [pc, #168]	@ (8007210 <__sflush_r+0x104>)
 8007168:	410a      	asrs	r2, r1
 800716a:	07d6      	lsls	r6, r2, #31
 800716c:	d427      	bmi.n	80071be <__sflush_r+0xb2>
 800716e:	2200      	movs	r2, #0
 8007170:	6062      	str	r2, [r4, #4]
 8007172:	04d9      	lsls	r1, r3, #19
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	6022      	str	r2, [r4, #0]
 8007178:	d504      	bpl.n	8007184 <__sflush_r+0x78>
 800717a:	1c42      	adds	r2, r0, #1
 800717c:	d101      	bne.n	8007182 <__sflush_r+0x76>
 800717e:	682b      	ldr	r3, [r5, #0]
 8007180:	b903      	cbnz	r3, 8007184 <__sflush_r+0x78>
 8007182:	6560      	str	r0, [r4, #84]	@ 0x54
 8007184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007186:	602f      	str	r7, [r5, #0]
 8007188:	b1b9      	cbz	r1, 80071ba <__sflush_r+0xae>
 800718a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800718e:	4299      	cmp	r1, r3
 8007190:	d002      	beq.n	8007198 <__sflush_r+0x8c>
 8007192:	4628      	mov	r0, r5
 8007194:	f7ff fa9a 	bl	80066cc <_free_r>
 8007198:	2300      	movs	r3, #0
 800719a:	6363      	str	r3, [r4, #52]	@ 0x34
 800719c:	e00d      	b.n	80071ba <__sflush_r+0xae>
 800719e:	2301      	movs	r3, #1
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b0      	blx	r6
 80071a4:	4602      	mov	r2, r0
 80071a6:	1c50      	adds	r0, r2, #1
 80071a8:	d1c9      	bne.n	800713e <__sflush_r+0x32>
 80071aa:	682b      	ldr	r3, [r5, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0c6      	beq.n	800713e <__sflush_r+0x32>
 80071b0:	2b1d      	cmp	r3, #29
 80071b2:	d001      	beq.n	80071b8 <__sflush_r+0xac>
 80071b4:	2b16      	cmp	r3, #22
 80071b6:	d11e      	bne.n	80071f6 <__sflush_r+0xea>
 80071b8:	602f      	str	r7, [r5, #0]
 80071ba:	2000      	movs	r0, #0
 80071bc:	e022      	b.n	8007204 <__sflush_r+0xf8>
 80071be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071c2:	b21b      	sxth	r3, r3
 80071c4:	e01b      	b.n	80071fe <__sflush_r+0xf2>
 80071c6:	690f      	ldr	r7, [r1, #16]
 80071c8:	2f00      	cmp	r7, #0
 80071ca:	d0f6      	beq.n	80071ba <__sflush_r+0xae>
 80071cc:	0793      	lsls	r3, r2, #30
 80071ce:	680e      	ldr	r6, [r1, #0]
 80071d0:	bf08      	it	eq
 80071d2:	694b      	ldreq	r3, [r1, #20]
 80071d4:	600f      	str	r7, [r1, #0]
 80071d6:	bf18      	it	ne
 80071d8:	2300      	movne	r3, #0
 80071da:	eba6 0807 	sub.w	r8, r6, r7
 80071de:	608b      	str	r3, [r1, #8]
 80071e0:	f1b8 0f00 	cmp.w	r8, #0
 80071e4:	dde9      	ble.n	80071ba <__sflush_r+0xae>
 80071e6:	6a21      	ldr	r1, [r4, #32]
 80071e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80071ea:	4643      	mov	r3, r8
 80071ec:	463a      	mov	r2, r7
 80071ee:	4628      	mov	r0, r5
 80071f0:	47b0      	blx	r6
 80071f2:	2800      	cmp	r0, #0
 80071f4:	dc08      	bgt.n	8007208 <__sflush_r+0xfc>
 80071f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007208:	4407      	add	r7, r0
 800720a:	eba8 0800 	sub.w	r8, r8, r0
 800720e:	e7e7      	b.n	80071e0 <__sflush_r+0xd4>
 8007210:	dfbffffe 	.word	0xdfbffffe

08007214 <_fflush_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	690b      	ldr	r3, [r1, #16]
 8007218:	4605      	mov	r5, r0
 800721a:	460c      	mov	r4, r1
 800721c:	b913      	cbnz	r3, 8007224 <_fflush_r+0x10>
 800721e:	2500      	movs	r5, #0
 8007220:	4628      	mov	r0, r5
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	b118      	cbz	r0, 800722e <_fflush_r+0x1a>
 8007226:	6a03      	ldr	r3, [r0, #32]
 8007228:	b90b      	cbnz	r3, 800722e <_fflush_r+0x1a>
 800722a:	f7fe ffd1 	bl	80061d0 <__sinit>
 800722e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f3      	beq.n	800721e <_fflush_r+0xa>
 8007236:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007238:	07d0      	lsls	r0, r2, #31
 800723a:	d404      	bmi.n	8007246 <_fflush_r+0x32>
 800723c:	0599      	lsls	r1, r3, #22
 800723e:	d402      	bmi.n	8007246 <_fflush_r+0x32>
 8007240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007242:	f7ff fa32 	bl	80066aa <__retarget_lock_acquire_recursive>
 8007246:	4628      	mov	r0, r5
 8007248:	4621      	mov	r1, r4
 800724a:	f7ff ff5f 	bl	800710c <__sflush_r>
 800724e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007250:	07da      	lsls	r2, r3, #31
 8007252:	4605      	mov	r5, r0
 8007254:	d4e4      	bmi.n	8007220 <_fflush_r+0xc>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	059b      	lsls	r3, r3, #22
 800725a:	d4e1      	bmi.n	8007220 <_fflush_r+0xc>
 800725c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800725e:	f7ff fa25 	bl	80066ac <__retarget_lock_release_recursive>
 8007262:	e7dd      	b.n	8007220 <_fflush_r+0xc>

08007264 <__swhatbuf_r>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	460c      	mov	r4, r1
 8007268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726c:	2900      	cmp	r1, #0
 800726e:	b096      	sub	sp, #88	@ 0x58
 8007270:	4615      	mov	r5, r2
 8007272:	461e      	mov	r6, r3
 8007274:	da0d      	bge.n	8007292 <__swhatbuf_r+0x2e>
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800727c:	f04f 0100 	mov.w	r1, #0
 8007280:	bf14      	ite	ne
 8007282:	2340      	movne	r3, #64	@ 0x40
 8007284:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007288:	2000      	movs	r0, #0
 800728a:	6031      	str	r1, [r6, #0]
 800728c:	602b      	str	r3, [r5, #0]
 800728e:	b016      	add	sp, #88	@ 0x58
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	466a      	mov	r2, sp
 8007294:	f000 f862 	bl	800735c <_fstat_r>
 8007298:	2800      	cmp	r0, #0
 800729a:	dbec      	blt.n	8007276 <__swhatbuf_r+0x12>
 800729c:	9901      	ldr	r1, [sp, #4]
 800729e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072a6:	4259      	negs	r1, r3
 80072a8:	4159      	adcs	r1, r3
 80072aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072ae:	e7eb      	b.n	8007288 <__swhatbuf_r+0x24>

080072b0 <__smakebuf_r>:
 80072b0:	898b      	ldrh	r3, [r1, #12]
 80072b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072b4:	079d      	lsls	r5, r3, #30
 80072b6:	4606      	mov	r6, r0
 80072b8:	460c      	mov	r4, r1
 80072ba:	d507      	bpl.n	80072cc <__smakebuf_r+0x1c>
 80072bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	2301      	movs	r3, #1
 80072c6:	6163      	str	r3, [r4, #20]
 80072c8:	b003      	add	sp, #12
 80072ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072cc:	ab01      	add	r3, sp, #4
 80072ce:	466a      	mov	r2, sp
 80072d0:	f7ff ffc8 	bl	8007264 <__swhatbuf_r>
 80072d4:	9f00      	ldr	r7, [sp, #0]
 80072d6:	4605      	mov	r5, r0
 80072d8:	4639      	mov	r1, r7
 80072da:	4630      	mov	r0, r6
 80072dc:	f7ff fa62 	bl	80067a4 <_malloc_r>
 80072e0:	b948      	cbnz	r0, 80072f6 <__smakebuf_r+0x46>
 80072e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e6:	059a      	lsls	r2, r3, #22
 80072e8:	d4ee      	bmi.n	80072c8 <__smakebuf_r+0x18>
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	f043 0302 	orr.w	r3, r3, #2
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	e7e2      	b.n	80072bc <__smakebuf_r+0xc>
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	6020      	str	r0, [r4, #0]
 80072fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	9b01      	ldr	r3, [sp, #4]
 8007302:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007306:	b15b      	cbz	r3, 8007320 <__smakebuf_r+0x70>
 8007308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800730c:	4630      	mov	r0, r6
 800730e:	f000 f837 	bl	8007380 <_isatty_r>
 8007312:	b128      	cbz	r0, 8007320 <__smakebuf_r+0x70>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f023 0303 	bic.w	r3, r3, #3
 800731a:	f043 0301 	orr.w	r3, r3, #1
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	431d      	orrs	r5, r3
 8007324:	81a5      	strh	r5, [r4, #12]
 8007326:	e7cf      	b.n	80072c8 <__smakebuf_r+0x18>

08007328 <memmove>:
 8007328:	4288      	cmp	r0, r1
 800732a:	b510      	push	{r4, lr}
 800732c:	eb01 0402 	add.w	r4, r1, r2
 8007330:	d902      	bls.n	8007338 <memmove+0x10>
 8007332:	4284      	cmp	r4, r0
 8007334:	4623      	mov	r3, r4
 8007336:	d807      	bhi.n	8007348 <memmove+0x20>
 8007338:	1e43      	subs	r3, r0, #1
 800733a:	42a1      	cmp	r1, r4
 800733c:	d008      	beq.n	8007350 <memmove+0x28>
 800733e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007346:	e7f8      	b.n	800733a <memmove+0x12>
 8007348:	4402      	add	r2, r0
 800734a:	4601      	mov	r1, r0
 800734c:	428a      	cmp	r2, r1
 800734e:	d100      	bne.n	8007352 <memmove+0x2a>
 8007350:	bd10      	pop	{r4, pc}
 8007352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800735a:	e7f7      	b.n	800734c <memmove+0x24>

0800735c <_fstat_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4d07      	ldr	r5, [pc, #28]	@ (800737c <_fstat_r+0x20>)
 8007360:	2300      	movs	r3, #0
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	4611      	mov	r1, r2
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	f7fa f9ba 	bl	80016e2 <_fstat>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d102      	bne.n	8007378 <_fstat_r+0x1c>
 8007372:	682b      	ldr	r3, [r5, #0]
 8007374:	b103      	cbz	r3, 8007378 <_fstat_r+0x1c>
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	bd38      	pop	{r3, r4, r5, pc}
 800737a:	bf00      	nop
 800737c:	20004300 	.word	0x20004300

08007380 <_isatty_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d06      	ldr	r5, [pc, #24]	@ (800739c <_isatty_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7fa f9b9 	bl	8001702 <_isatty>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_isatty_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_isatty_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20004300 	.word	0x20004300

080073a0 <_sbrk_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d06      	ldr	r5, [pc, #24]	@ (80073bc <_sbrk_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f7fa f9c2 	bl	8001734 <_sbrk>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_sbrk_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_sbrk_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20004300 	.word	0x20004300

080073c0 <_realloc_r>:
 80073c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c4:	4680      	mov	r8, r0
 80073c6:	4615      	mov	r5, r2
 80073c8:	460c      	mov	r4, r1
 80073ca:	b921      	cbnz	r1, 80073d6 <_realloc_r+0x16>
 80073cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d0:	4611      	mov	r1, r2
 80073d2:	f7ff b9e7 	b.w	80067a4 <_malloc_r>
 80073d6:	b92a      	cbnz	r2, 80073e4 <_realloc_r+0x24>
 80073d8:	f7ff f978 	bl	80066cc <_free_r>
 80073dc:	2400      	movs	r4, #0
 80073de:	4620      	mov	r0, r4
 80073e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e4:	f000 f81a 	bl	800741c <_malloc_usable_size_r>
 80073e8:	4285      	cmp	r5, r0
 80073ea:	4606      	mov	r6, r0
 80073ec:	d802      	bhi.n	80073f4 <_realloc_r+0x34>
 80073ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80073f2:	d8f4      	bhi.n	80073de <_realloc_r+0x1e>
 80073f4:	4629      	mov	r1, r5
 80073f6:	4640      	mov	r0, r8
 80073f8:	f7ff f9d4 	bl	80067a4 <_malloc_r>
 80073fc:	4607      	mov	r7, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	d0ec      	beq.n	80073dc <_realloc_r+0x1c>
 8007402:	42b5      	cmp	r5, r6
 8007404:	462a      	mov	r2, r5
 8007406:	4621      	mov	r1, r4
 8007408:	bf28      	it	cs
 800740a:	4632      	movcs	r2, r6
 800740c:	f7ff f94f 	bl	80066ae <memcpy>
 8007410:	4621      	mov	r1, r4
 8007412:	4640      	mov	r0, r8
 8007414:	f7ff f95a 	bl	80066cc <_free_r>
 8007418:	463c      	mov	r4, r7
 800741a:	e7e0      	b.n	80073de <_realloc_r+0x1e>

0800741c <_malloc_usable_size_r>:
 800741c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007420:	1f18      	subs	r0, r3, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	bfbc      	itt	lt
 8007426:	580b      	ldrlt	r3, [r1, r0]
 8007428:	18c0      	addlt	r0, r0, r3
 800742a:	4770      	bx	lr

0800742c <_init>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr

08007438 <_fini>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr
