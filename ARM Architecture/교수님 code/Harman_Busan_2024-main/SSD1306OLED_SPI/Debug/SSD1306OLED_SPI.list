
SSD1306OLED_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001664  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe8  08001804  08001804  00002804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ec  080047ec  00006058  2**0
                  CONTENTS
  4 .ARM          00000008  080047ec  080047ec  000057ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f4  080047f4  00006058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f4  080047f4  000057f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f8  080047f8  000057f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080047fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000058  08004854  00006058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  08004854  000065d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019ff  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008da  00000000  00000000  00007a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00008368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000017c  00000000  00000000  00008588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000015f4  00000000  00000000  00008704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000037d4  00000000  00000000  00009cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053e16  00000000  00000000  0000d4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000612e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bd8  00000000  00000000  00061328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00061f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000058 	.word	0x20000058
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080017ec 	.word	0x080017ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	080017ec 	.word	0x080017ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:

			 
	}

void delay(int ms)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	SysTick->LOAD=16000-1;
 8000288:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <delay+0x50>)
 800028a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800028e:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <delay+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=0x5;
 8000296:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <delay+0x50>)
 8000298:	2205      	movs	r2, #5
 800029a:	601a      	str	r2, [r3, #0]
		for (int i=0;i<ms;i++)
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e009      	b.n	80002b6 <delay+0x36>
		{
			while(!(SysTick->CTRL &0x10000)){}
 80002a2:	bf00      	nop
 80002a4:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <delay+0x50>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0f9      	beq.n	80002a4 <delay+0x24>
		for (int i=0;i<ms;i++)
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	3301      	adds	r3, #1
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	dbf1      	blt.n	80002a2 <delay+0x22>
		}
	SysTick->CTRL=0;	
 80002be:	4b04      	ldr	r3, [pc, #16]	@ (80002d0 <delay+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]

}
 80002c4:	bf00      	nop
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	e000e010 	.word	0xe000e010

080002d4 <main>:
#include "stdio.h"

char zz[10];

int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af02      	add	r7, sp, #8
	SSD1306_Init();
 80002da:	f000 fab3 	bl	8000844 <SSD1306_Init>
	SSD1306_GotoXY (0,0);
 80002de:	2100      	movs	r1, #0
 80002e0:	2000      	movs	r0, #0
 80002e2:	f000 fbcd 	bl	8000a80 <SSD1306_GotoXY>

	SSD1306_Puts ("Embedded", &Font_7x10, 1);
 80002e6:	2201      	movs	r2, #1
 80002e8:	499d      	ldr	r1, [pc, #628]	@ (8000560 <main+0x28c>)
 80002ea:	489e      	ldr	r0, [pc, #632]	@ (8000564 <main+0x290>)
 80002ec:	f000 fc5c 	bl	8000ba8 <SSD1306_Puts>

	SSD1306_GotoXY (0, 10);
 80002f0:	210a      	movs	r1, #10
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 fbc4 	bl	8000a80 <SSD1306_GotoXY>

	SSD1306_Puts ("Expret.io", &Font_7x10, 1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	4999      	ldr	r1, [pc, #612]	@ (8000560 <main+0x28c>)
 80002fc:	489a      	ldr	r0, [pc, #616]	@ (8000568 <main+0x294>)
 80002fe:	f000 fc53 	bl	8000ba8 <SSD1306_Puts>

	SSD1306_GotoXY (0, 30);
 8000302:	211e      	movs	r1, #30
 8000304:	2000      	movs	r0, #0
 8000306:	f000 fbbb 	bl	8000a80 <SSD1306_GotoXY>

	SSD1306_Puts ("OLED Display", &Font_7x10, 1);
 800030a:	2201      	movs	r2, #1
 800030c:	4994      	ldr	r1, [pc, #592]	@ (8000560 <main+0x28c>)
 800030e:	4897      	ldr	r0, [pc, #604]	@ (800056c <main+0x298>)
 8000310:	f000 fc4a 	bl	8000ba8 <SSD1306_Puts>

	SSD1306_GotoXY (0, 50);
 8000314:	2132      	movs	r1, #50	@ 0x32
 8000316:	2000      	movs	r0, #0
 8000318:	f000 fbb2 	bl	8000a80 <SSD1306_GotoXY>

	SSD1306_Puts ("Bare Metal Code", &Font_7x10, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	4990      	ldr	r1, [pc, #576]	@ (8000560 <main+0x28c>)
 8000320:	4893      	ldr	r0, [pc, #588]	@ (8000570 <main+0x29c>)
 8000322:	f000 fc41 	bl	8000ba8 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8000326:	f000 fb0b 	bl	8000940 <SSD1306_UpdateScreen>

	delay (2000);
 800032a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800032e:	f7ff ffa7 	bl	8000280 <delay>

	SSD1306_ScrollRight(0,7);  // scroll entire screen
 8000332:	2107      	movs	r1, #7
 8000334:	2000      	movs	r0, #0
 8000336:	f000 f960 	bl	80005fa <SSD1306_ScrollRight>

	delay(2000);  // 2 sec
 800033a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800033e:	f7ff ff9f 	bl	8000280 <delay>

	SSD1306_ScrollLeft(0,7);  // scroll entire screen
 8000342:	2107      	movs	r1, #7
 8000344:	2000      	movs	r0, #0
 8000346:	f000 f97e 	bl	8000646 <SSD1306_ScrollLeft>

	delay(2000);  // 2 sec
 800034a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800034e:	f7ff ff97 	bl	8000280 <delay>

	SSD1306_Stopscroll();
 8000352:	f000 f9f6 	bl	8000742 <SSD1306_Stopscroll>

	SSD1306_ScrollRight(0x00, 0x0f);    // scroll entire screen right
 8000356:	210f      	movs	r1, #15
 8000358:	2000      	movs	r0, #0
 800035a:	f000 f94e 	bl	80005fa <SSD1306_ScrollRight>

	delay (2000);
 800035e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000362:	f7ff ff8d 	bl	8000280 <delay>

	SSD1306_ScrollLeft(0x00, 0x0f);  // scroll entire screen left
 8000366:	210f      	movs	r1, #15
 8000368:	2000      	movs	r0, #0
 800036a:	f000 f96c 	bl	8000646 <SSD1306_ScrollLeft>

	delay (2000);
 800036e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000372:	f7ff ff85 	bl	8000280 <delay>

	SSD1306_Scrolldiagright(0x00, 0x0f);  // scroll entire screen diagonal right
 8000376:	210f      	movs	r1, #15
 8000378:	2000      	movs	r0, #0
 800037a:	f000 f98a 	bl	8000692 <SSD1306_Scrolldiagright>

	delay (2000);
 800037e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000382:	f7ff ff7d 	bl	8000280 <delay>

	SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 8000386:	210f      	movs	r1, #15
 8000388:	2000      	movs	r0, #0
 800038a:	f000 f9ae 	bl	80006ea <SSD1306_Scrolldiagleft>

	delay (2000);
 800038e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000392:	f7ff ff75 	bl	8000280 <delay>

	SSD1306_Stopscroll();   // stop scrolling. If not done, screen will keep on scrolling
 8000396:	f000 f9d4 	bl	8000742 <SSD1306_Stopscroll>


	SSD1306_InvertDisplay(1);   // invert the display
 800039a:	2001      	movs	r0, #1
 800039c:	f000 f9d8 	bl	8000750 <SSD1306_InvertDisplay>

	delay(2000);
 80003a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003a4:	f7ff ff6c 	bl	8000280 <delay>

	SSD1306_InvertDisplay(0);  // normalize the display
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 f9d1 	bl	8000750 <SSD1306_InvertDisplay>


	delay(2000);
 80003ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003b2:	f7ff ff65 	bl	8000280 <delay>
	SSD1306_Clear();
 80003b6:	f000 fc1c 	bl	8000bf2 <SSD1306_Clear>
	SSD1306_GotoXY (0,0);
 80003ba:	2100      	movs	r1, #0
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 fb5f 	bl	8000a80 <SSD1306_GotoXY>
	SSD1306_Puts ("variable", &Font_7x10, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	4966      	ldr	r1, [pc, #408]	@ (8000560 <main+0x28c>)
 80003c6:	486b      	ldr	r0, [pc, #428]	@ (8000574 <main+0x2a0>)
 80003c8:	f000 fbee 	bl	8000ba8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80003cc:	f000 fab8 	bl	8000940 <SSD1306_UpdateScreen>

	for (int i=0; i<100;i++)
 80003d0:	2300      	movs	r3, #0
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	e015      	b.n	8000402 <main+0x12e>
	{
	sprintf(zz,"%i",i);
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	4967      	ldr	r1, [pc, #412]	@ (8000578 <main+0x2a4>)
 80003da:	4868      	ldr	r0, [pc, #416]	@ (800057c <main+0x2a8>)
 80003dc:	f000 fd66 	bl	8000eac <siprintf>
	SSD1306_GotoXY (10, 30);
 80003e0:	211e      	movs	r1, #30
 80003e2:	200a      	movs	r0, #10
 80003e4:	f000 fb4c 	bl	8000a80 <SSD1306_GotoXY>
	SSD1306_Puts (zz, &Font_7x10, 1);
 80003e8:	2201      	movs	r2, #1
 80003ea:	495d      	ldr	r1, [pc, #372]	@ (8000560 <main+0x28c>)
 80003ec:	4863      	ldr	r0, [pc, #396]	@ (800057c <main+0x2a8>)
 80003ee:	f000 fbdb 	bl	8000ba8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80003f2:	f000 faa5 	bl	8000940 <SSD1306_UpdateScreen>
	delay(100);
 80003f6:	2064      	movs	r0, #100	@ 0x64
 80003f8:	f7ff ff42 	bl	8000280 <delay>
	for (int i=0; i<100;i++)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b63      	cmp	r3, #99	@ 0x63
 8000406:	dde6      	ble.n	80003d6 <main+0x102>
	}

	while(1)
	{
		SSD1306_Clear();
 8000408:	f000 fbf3 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse1,128,64,1);
 800040c:	2301      	movs	r3, #1
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	2340      	movs	r3, #64	@ 0x40
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2380      	movs	r3, #128	@ 0x80
 8000416:	4a5a      	ldr	r2, [pc, #360]	@ (8000580 <main+0x2ac>)
 8000418:	2100      	movs	r1, #0
 800041a:	2000      	movs	r0, #0
 800041c:	f000 f9aa 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000420:	f000 fa8e 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f7ff ff2b 	bl	8000280 <delay>

		SSD1306_Clear();
 800042a:	f000 fbe2 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse2,128,64,1);
 800042e:	2301      	movs	r3, #1
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	2340      	movs	r3, #64	@ 0x40
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	2380      	movs	r3, #128	@ 0x80
 8000438:	4a52      	ldr	r2, [pc, #328]	@ (8000584 <main+0x2b0>)
 800043a:	2100      	movs	r1, #0
 800043c:	2000      	movs	r0, #0
 800043e:	f000 f999 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000442:	f000 fa7d 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff ff1a 	bl	8000280 <delay>

		SSD1306_Clear();
 800044c:	f000 fbd1 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse3,128,64,1);
 8000450:	2301      	movs	r3, #1
 8000452:	9301      	str	r3, [sp, #4]
 8000454:	2340      	movs	r3, #64	@ 0x40
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	2380      	movs	r3, #128	@ 0x80
 800045a:	4a4b      	ldr	r2, [pc, #300]	@ (8000588 <main+0x2b4>)
 800045c:	2100      	movs	r1, #0
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f988 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000464:	f000 fa6c 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 8000468:	2001      	movs	r0, #1
 800046a:	f7ff ff09 	bl	8000280 <delay>

		SSD1306_Clear();
 800046e:	f000 fbc0 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse4,128,64,1);
 8000472:	2301      	movs	r3, #1
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	2340      	movs	r3, #64	@ 0x40
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2380      	movs	r3, #128	@ 0x80
 800047c:	4a43      	ldr	r2, [pc, #268]	@ (800058c <main+0x2b8>)
 800047e:	2100      	movs	r1, #0
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f977 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000486:	f000 fa5b 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff fef8 	bl	8000280 <delay>

		SSD1306_Clear();
 8000490:	f000 fbaf 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse5,128,64,1);
 8000494:	2301      	movs	r3, #1
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	2340      	movs	r3, #64	@ 0x40
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	4a3c      	ldr	r2, [pc, #240]	@ (8000590 <main+0x2bc>)
 80004a0:	2100      	movs	r1, #0
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 f966 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80004a8:	f000 fa4a 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff fee7 	bl	8000280 <delay>

		SSD1306_Clear();
 80004b2:	f000 fb9e 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse6,128,64,1);
 80004b6:	2301      	movs	r3, #1
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2340      	movs	r3, #64	@ 0x40
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2380      	movs	r3, #128	@ 0x80
 80004c0:	4a34      	ldr	r2, [pc, #208]	@ (8000594 <main+0x2c0>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 f955 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80004ca:	f000 fa39 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f7ff fed6 	bl	8000280 <delay>

		SSD1306_Clear();
 80004d4:	f000 fb8d 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse7,128,64,1);
 80004d8:	2301      	movs	r3, #1
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	2340      	movs	r3, #64	@ 0x40
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000598 <main+0x2c4>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	2000      	movs	r0, #0
 80004e8:	f000 f944 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80004ec:	f000 fa28 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fec5 	bl	8000280 <delay>

		SSD1306_Clear();
 80004f6:	f000 fb7c 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse8,128,64,1);
 80004fa:	2301      	movs	r3, #1
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2340      	movs	r3, #64	@ 0x40
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2380      	movs	r3, #128	@ 0x80
 8000504:	4a25      	ldr	r2, [pc, #148]	@ (800059c <main+0x2c8>)
 8000506:	2100      	movs	r1, #0
 8000508:	2000      	movs	r0, #0
 800050a:	f000 f933 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800050e:	f000 fa17 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff feb4 	bl	8000280 <delay>

		SSD1306_Clear();
 8000518:	f000 fb6b 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse9,128,64,1);
 800051c:	2301      	movs	r3, #1
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2340      	movs	r3, #64	@ 0x40
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2380      	movs	r3, #128	@ 0x80
 8000526:	4a1e      	ldr	r2, [pc, #120]	@ (80005a0 <main+0x2cc>)
 8000528:	2100      	movs	r1, #0
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f922 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000530:	f000 fa06 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff fea3 	bl	8000280 <delay>

		SSD1306_Clear();
 800053a:	f000 fb5a 	bl	8000bf2 <SSD1306_Clear>
		SSD1306_DrawBitmap(0,0,horse10,128,64,1);
 800053e:	2301      	movs	r3, #1
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2340      	movs	r3, #64	@ 0x40
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2380      	movs	r3, #128	@ 0x80
 8000548:	4a16      	ldr	r2, [pc, #88]	@ (80005a4 <main+0x2d0>)
 800054a:	2100      	movs	r1, #0
 800054c:	2000      	movs	r0, #0
 800054e:	f000 f911 	bl	8000774 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000552:	f000 f9f5 	bl	8000940 <SSD1306_UpdateScreen>
		delay(1);
 8000556:	2001      	movs	r0, #1
 8000558:	f7ff fe92 	bl	8000280 <delay>
		SSD1306_Clear();
 800055c:	bf00      	nop
 800055e:	e753      	b.n	8000408 <main+0x134>
 8000560:	20000000 	.word	0x20000000
 8000564:	08001804 	.word	0x08001804
 8000568:	08001810 	.word	0x08001810
 800056c:	0800181c 	.word	0x0800181c
 8000570:	0800182c 	.word	0x0800182c
 8000574:	0800183c 	.word	0x0800183c
 8000578:	08001848 	.word	0x08001848
 800057c:	20000074 	.word	0x20000074
 8000580:	08001fb8 	.word	0x08001fb8
 8000584:	080023b8 	.word	0x080023b8
 8000588:	080027b8 	.word	0x080027b8
 800058c:	08002bb8 	.word	0x08002bb8
 8000590:	08002fb8 	.word	0x08002fb8
 8000594:	080033b8 	.word	0x080033b8
 8000598:	080037b8 	.word	0x080037b8
 800059c:	08003bb8 	.word	0x08003bb8
 80005a0:	08003fb8 	.word	0x08003fb8
 80005a4:	080043b8 	.word	0x080043b8

080005a8 <SSD1306_WRITECOMMAND>:
/* SSD1306 data buffer */
static char SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];


void SSD1306_WRITECOMMAND(char command)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	OLED_CommMode();
 80005b2:	f000 fbfb 	bl	8000dac <OLED_CommMode>
	OLED_Select();
 80005b6:	f000 fbcf 	bl	8000d58 <OLED_Select>
	OLED_SPI_Write(&command,1);
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	2101      	movs	r1, #1
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fb94 	bl	8000cec <OLED_SPI_Write>
	OLED_Deselect();
 80005c4:	f000 fbd6 	bl	8000d74 <OLED_Deselect>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SSD1306_Write_Multi_Data>:
	OLED_SPI_Write(&command,1);
	OLED_Deselect();
}

void SSD1306_Write_Multi_Data(char * data, uint16_t length)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
	OLED_DataMode();
 80005dc:	f000 fbd8 	bl	8000d90 <OLED_DataMode>
	OLED_Select();
 80005e0:	f000 fbba 	bl	8000d58 <OLED_Select>
	OLED_SPI_Write((char*)data,length);
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	4619      	mov	r1, r3
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 fb7f 	bl	8000cec <OLED_SPI_Write>
	OLED_Deselect();
 80005ee:	f000 fbc1 	bl	8000d74 <OLED_Deselect>

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4603      	mov	r3, r0
 8000602:	460a      	mov	r2, r1
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	4613      	mov	r3, r2
 8000608:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 800060a:	2026      	movs	r0, #38	@ 0x26
 800060c:	f7ff ffcc 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff ffc9 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ffc5 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ffc2 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffbe 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ffbb 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0XFF);
 8000632:	20ff      	movs	r0, #255	@ 0xff
 8000634:	f7ff ffb8 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000638:	202f      	movs	r0, #47	@ 0x2f
 800063a:	f7ff ffb5 	bl	80005a8 <SSD1306_WRITECOMMAND>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	4603      	mov	r3, r0
 800064e:	460a      	mov	r2, r1
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	4613      	mov	r3, r2
 8000654:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000656:	2027      	movs	r0, #39	@ 0x27
 8000658:	f7ff ffa6 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ffa3 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff9f 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff ff9c 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff98 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff95 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0XFF);
 800067e:	20ff      	movs	r0, #255	@ 0xff
 8000680:	f7ff ff92 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000684:	202f      	movs	r0, #47	@ 0x2f
 8000686:	f7ff ff8f 	bl	80005a8 <SSD1306_WRITECOMMAND>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <SSD1306_Scrolldiagright>:


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	460a      	mov	r2, r1
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	4613      	mov	r3, r2
 80006a0:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 80006a2:	20a3      	movs	r0, #163	@ 0xa3
 80006a4:	f7ff ff80 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ff7d 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 80006ae:	2040      	movs	r0, #64	@ 0x40
 80006b0:	f7ff ff7a 	bl	80005a8 <SSD1306_WRITECOMMAND>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 80006b4:	2029      	movs	r0, #41	@ 0x29
 80006b6:	f7ff ff77 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff ff74 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff70 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff ff6d 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff69 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x01);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff ff66 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 80006dc:	202f      	movs	r0, #47	@ 0x2f
 80006de:	f7ff ff63 	bl	80005a8 <SSD1306_WRITECOMMAND>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <SSD1306_Scrolldiagleft>:


void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	4603      	mov	r3, r0
 80006f2:	460a      	mov	r2, r1
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	4613      	mov	r3, r2
 80006f8:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 80006fa:	20a3      	movs	r0, #163	@ 0xa3
 80006fc:	f7ff ff54 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff51 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8000706:	2040      	movs	r0, #64	@ 0x40
 8000708:	f7ff ff4e 	bl	80005a8 <SSD1306_WRITECOMMAND>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 800070c:	202a      	movs	r0, #42	@ 0x2a
 800070e:	f7ff ff4b 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);
 8000712:	2000      	movs	r0, #0
 8000714:	f7ff ff48 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff44 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ff41 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff3d 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x01);
 800072e:	2001      	movs	r0, #1
 8000730:	f7ff ff3a 	bl	80005a8 <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8000734:	202f      	movs	r0, #47	@ 0x2f
 8000736:	f7ff ff37 	bl	80005a8 <SSD1306_WRITECOMMAND>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <SSD1306_Stopscroll>:


void SSD1306_Stopscroll(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000746:	202e      	movs	r0, #46	@ 0x2e
 8000748:	f7ff ff2e 	bl	80005a8 <SSD1306_WRITECOMMAND>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d003      	beq.n	8000766 <SSD1306_InvertDisplay+0x16>
 800075e:	20a7      	movs	r0, #167	@ 0xa7
 8000760:	f7ff ff22 	bl	80005a8 <SSD1306_WRITECOMMAND>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8000764:	e002      	b.n	800076c <SSD1306_InvertDisplay+0x1c>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8000766:	20a6      	movs	r0, #166	@ 0xa6
 8000768:	f7ff ff1e 	bl	80005a8 <SSD1306_WRITECOMMAND>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60ba      	str	r2, [r7, #8]
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	81fb      	strh	r3, [r7, #14]
 8000782:	460b      	mov	r3, r1
 8000784:	81bb      	strh	r3, [r7, #12]
 8000786:	4613      	mov	r3, r2
 8000788:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800078a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800078e:	3307      	adds	r3, #7
 8000790:	2b00      	cmp	r3, #0
 8000792:	da00      	bge.n	8000796 <SSD1306_DrawBitmap+0x22>
 8000794:	3307      	adds	r3, #7
 8000796:	10db      	asrs	r3, r3, #3
 8000798:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800079e:	2300      	movs	r3, #0
 80007a0:	82bb      	strh	r3, [r7, #20]
 80007a2:	e044      	b.n	800082e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	827b      	strh	r3, [r7, #18]
 80007a8:	e02f      	b.n	800080a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80007aa:	8a7b      	ldrh	r3, [r7, #18]
 80007ac:	f003 0307 	and.w	r3, r3, #7
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d003      	beq.n	80007bc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80007b4:	7dfb      	ldrb	r3, [r7, #23]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	75fb      	strb	r3, [r7, #23]
 80007ba:	e012      	b.n	80007e2 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80007bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80007c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80007c4:	fb03 f202 	mul.w	r2, r3, r2
 80007c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	da00      	bge.n	80007d2 <SSD1306_DrawBitmap+0x5e>
 80007d0:	3307      	adds	r3, #7
 80007d2:	10db      	asrs	r3, r3, #3
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4413      	add	r3, r2
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80007e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da09      	bge.n	80007fe <SSD1306_DrawBitmap+0x8a>
 80007ea:	89fa      	ldrh	r2, [r7, #14]
 80007ec:	8a7b      	ldrh	r3, [r7, #18]
 80007ee:	4413      	add	r3, r2
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	89b9      	ldrh	r1, [r7, #12]
 80007f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f8e1 	bl	80009c0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80007fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	b29b      	uxth	r3, r3
 8000808:	827b      	strh	r3, [r7, #18]
 800080a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800080e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000812:	429a      	cmp	r2, r3
 8000814:	dbc9      	blt.n	80007aa <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000816:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800081a:	b29b      	uxth	r3, r3
 800081c:	3301      	adds	r3, #1
 800081e:	b29b      	uxth	r3, r3
 8000820:	82bb      	strh	r3, [r7, #20]
 8000822:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000826:	b29b      	uxth	r3, r3
 8000828:	3301      	adds	r3, #1
 800082a:	b29b      	uxth	r3, r3
 800082c:	81bb      	strh	r3, [r7, #12]
 800082e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000832:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000836:	429a      	cmp	r2, r3
 8000838:	dbb4      	blt.n	80007a4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <SSD1306_Init>:




uint8_t SSD1306_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	 OLED_SPI_Pins_Init();
 800084a:	f000 f9db 	bl	8000c04 <OLED_SPI_Pins_Init>

	 OLED_SPI_Configure();
 800084e:	f000 f9ff 	bl	8000c50 <OLED_SPI_Configure>
	/* A little delay */
	uint32_t p = 2500;
 8000852:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000856:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000858:	e002      	b.n	8000860 <SSD1306_Init+0x1c>
		p--;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3b01      	subs	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f9      	bne.n	800085a <SSD1306_Init+0x16>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000866:	20ae      	movs	r0, #174	@ 0xae
 8000868:	f7ff fe9e 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800086c:	2020      	movs	r0, #32
 800086e:	f7ff fe9b 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000872:	2010      	movs	r0, #16
 8000874:	f7ff fe98 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000878:	20b0      	movs	r0, #176	@ 0xb0
 800087a:	f7ff fe95 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800087e:	20c8      	movs	r0, #200	@ 0xc8
 8000880:	f7ff fe92 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fe8f 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff fe8c 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000890:	2040      	movs	r0, #64	@ 0x40
 8000892:	f7ff fe89 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000896:	2081      	movs	r0, #129	@ 0x81
 8000898:	f7ff fe86 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xFF);
 800089c:	20ff      	movs	r0, #255	@ 0xff
 800089e:	f7ff fe83 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80008a2:	20a1      	movs	r0, #161	@ 0xa1
 80008a4:	f7ff fe80 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80008a8:	20a6      	movs	r0, #166	@ 0xa6
 80008aa:	f7ff fe7d 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80008ae:	20a8      	movs	r0, #168	@ 0xa8
 80008b0:	f7ff fe7a 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x3F); //
 80008b4:	203f      	movs	r0, #63	@ 0x3f
 80008b6:	f7ff fe77 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008ba:	20a4      	movs	r0, #164	@ 0xa4
 80008bc:	f7ff fe74 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80008c0:	20d3      	movs	r0, #211	@ 0xd3
 80008c2:	f7ff fe71 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff fe6e 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80008cc:	20d5      	movs	r0, #213	@ 0xd5
 80008ce:	f7ff fe6b 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80008d2:	20f0      	movs	r0, #240	@ 0xf0
 80008d4:	f7ff fe68 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80008d8:	20d9      	movs	r0, #217	@ 0xd9
 80008da:	f7ff fe65 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x22); //
 80008de:	2022      	movs	r0, #34	@ 0x22
 80008e0:	f7ff fe62 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80008e4:	20da      	movs	r0, #218	@ 0xda
 80008e6:	f7ff fe5f 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x12);
 80008ea:	2012      	movs	r0, #18
 80008ec:	f7ff fe5c 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80008f0:	20db      	movs	r0, #219	@ 0xdb
 80008f2:	f7ff fe59 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80008f6:	2020      	movs	r0, #32
 80008f8:	f7ff fe56 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80008fc:	208d      	movs	r0, #141	@ 0x8d
 80008fe:	f7ff fe53 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x14); //
 8000902:	2014      	movs	r0, #20
 8000904:	f7ff fe50 	bl	80005a8 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000908:	20af      	movs	r0, #175	@ 0xaf
 800090a:	f7ff fe4d 	bl	80005a8 <SSD1306_WRITECOMMAND>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800090e:	202e      	movs	r0, #46	@ 0x2e
 8000910:	f7ff fe4a 	bl	80005a8 <SSD1306_WRITECOMMAND>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000914:	2000      	movs	r0, #0
 8000916:	f000 f83b 	bl	8000990 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800091a:	f000 f811 	bl	8000940 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800091e:	4b07      	ldr	r3, [pc, #28]	@ (800093c <SSD1306_Init+0xf8>)
 8000920:	2200      	movs	r2, #0
 8000922:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <SSD1306_Init+0xf8>)
 8000926:	2200      	movs	r2, #0
 8000928:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <SSD1306_Init+0xf8>)
 800092c:	2201      	movs	r2, #1
 800092e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000480 	.word	0x20000480

08000940 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000946:	2300      	movs	r3, #0
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	e016      	b.n	800097a <SSD1306_UpdateScreen+0x3a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	3b50      	subs	r3, #80	@ 0x50
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fe28 	bl	80005a8 <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x00);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fe25 	bl	80005a8 <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x10);
 800095e:	2010      	movs	r0, #16
 8000960:	f7ff fe22 	bl	80005a8 <SSD1306_WRITECOMMAND>
		
		/* Write multi data */

		SSD1306_Write_Multi_Data(&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	01db      	lsls	r3, r3, #7
 8000968:	4a08      	ldr	r2, [pc, #32]	@ (800098c <SSD1306_UpdateScreen+0x4c>)
 800096a:	4413      	add	r3, r2
 800096c:	2180      	movs	r1, #128	@ 0x80
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fe2e 	bl	80005d0 <SSD1306_Write_Multi_Data>
	for (m = 0; m < 8; m++) {
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3301      	adds	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b07      	cmp	r3, #7
 800097e:	d9e5      	bls.n	800094c <SSD1306_UpdateScreen+0xc>
	}
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000080 	.word	0x20000080

08000990 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d101      	bne.n	80009a4 <SSD1306_Fill+0x14>
 80009a0:	2300      	movs	r3, #0
 80009a2:	e000      	b.n	80009a6 <SSD1306_Fill+0x16>
 80009a4:	23ff      	movs	r3, #255	@ 0xff
 80009a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009aa:	4619      	mov	r1, r3
 80009ac:	4803      	ldr	r0, [pc, #12]	@ (80009bc <SSD1306_Fill+0x2c>)
 80009ae:	f000 fa9d 	bl	8000eec <memset>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000080 	.word	0x20000080

080009c0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	80fb      	strh	r3, [r7, #6]
 80009ca:	460b      	mov	r3, r1
 80009cc:	80bb      	strh	r3, [r7, #4]
 80009ce:	4613      	mov	r3, r2
 80009d0:	70fb      	strb	r3, [r7, #3]
	if (
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80009d6:	d848      	bhi.n	8000a6a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	2b3f      	cmp	r3, #63	@ 0x3f
 80009dc:	d845      	bhi.n	8000a6a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80009de:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <SSD1306_DrawPixel+0xb8>)
 80009e0:	791b      	ldrb	r3, [r3, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d006      	beq.n	80009f4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf0c      	ite	eq
 80009ec:	2301      	moveq	r3, #1
 80009ee:	2300      	movne	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d11a      	bne.n	8000a30 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009fa:	88fa      	ldrh	r2, [r7, #6]
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	08db      	lsrs	r3, r3, #3
 8000a00:	b298      	uxth	r0, r3
 8000a02:	4603      	mov	r3, r0
 8000a04:	01db      	lsls	r3, r3, #7
 8000a06:	4413      	add	r3, r2
 8000a08:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <SSD1306_DrawPixel+0xbc>)
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	b25a      	sxtb	r2, r3
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	2101      	movs	r1, #1
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b259      	sxtb	r1, r3
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	4603      	mov	r3, r0
 8000a24:	01db      	lsls	r3, r3, #7
 8000a26:	4413      	add	r3, r2
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4a14      	ldr	r2, [pc, #80]	@ (8000a7c <SSD1306_DrawPixel+0xbc>)
 8000a2c:	54d1      	strb	r1, [r2, r3]
 8000a2e:	e01d      	b.n	8000a6c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a30:	88fa      	ldrh	r2, [r7, #6]
 8000a32:	88bb      	ldrh	r3, [r7, #4]
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	b298      	uxth	r0, r3
 8000a38:	4603      	mov	r3, r0
 8000a3a:	01db      	lsls	r3, r3, #7
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a7c <SSD1306_DrawPixel+0xbc>)
 8000a40:	5cd3      	ldrb	r3, [r2, r3]
 8000a42:	b25a      	sxtb	r2, r3
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	4013      	ands	r3, r2
 8000a58:	b259      	sxtb	r1, r3
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	01db      	lsls	r3, r3, #7
 8000a60:	4413      	add	r3, r2
 8000a62:	b2c9      	uxtb	r1, r1
 8000a64:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <SSD1306_DrawPixel+0xbc>)
 8000a66:	54d1      	strb	r1, [r2, r3]
 8000a68:	e000      	b.n	8000a6c <SSD1306_DrawPixel+0xac>
		return;
 8000a6a:	bf00      	nop
	}
}
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000480 	.word	0x20000480
 8000a7c:	20000080 	.word	0x20000080

08000a80 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	80fb      	strh	r3, [r7, #6]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000a90:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <SSD1306_GotoXY+0x28>)
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000a96:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <SSD1306_GotoXY+0x28>)
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	8053      	strh	r3, [r2, #2]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	20000480 	.word	0x20000480

08000aac <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000abc:	4b39      	ldr	r3, [pc, #228]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
	if (
 8000ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aca:	dc07      	bgt.n	8000adc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000acc:	4b35      	ldr	r3, [pc, #212]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000ace:	885b      	ldrh	r3, [r3, #2]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	785b      	ldrb	r3, [r3, #1]
 8000ad6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ad8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ada:	dd01      	ble.n	8000ae0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e05d      	b.n	8000b9c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e04b      	b.n	8000b7e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	3b20      	subs	r3, #32
 8000aee:	6839      	ldr	r1, [r7, #0]
 8000af0:	7849      	ldrb	r1, [r1, #1]
 8000af2:	fb01 f303 	mul.w	r3, r1, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	440b      	add	r3, r1
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	e030      	b.n	8000b6c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d010      	beq.n	8000b3c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b1c:	881a      	ldrh	r2, [r3, #0]
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4413      	add	r3, r2
 8000b24:	b298      	uxth	r0, r3
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b28:	885a      	ldrh	r2, [r3, #2]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	79ba      	ldrb	r2, [r7, #6]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f7ff ff43 	bl	80009c0 <SSD1306_DrawPixel>
 8000b3a:	e014      	b.n	8000b66 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b3e:	881a      	ldrh	r2, [r3, #0]
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	b298      	uxth	r0, r3
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b4a:	885a      	ldrh	r2, [r3, #2]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	b299      	uxth	r1, r3
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf0c      	ite	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	2300      	movne	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	f7ff ff2d 	bl	80009c0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d3c8      	bcc.n	8000b0a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	785b      	ldrb	r3, [r3, #1]
 8000b82:	461a      	mov	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d3ad      	bcc.n	8000ae6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <SSD1306_Putc+0xf8>)
 8000b98:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000480 	.word	0x20000480

08000ba8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000bb6:	e012      	b.n	8000bde <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	68b9      	ldr	r1, [r7, #8]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff73 	bl	8000aac <SSD1306_Putc>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d002      	beq.n	8000bd8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	e008      	b.n	8000bea <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1e8      	bne.n	8000bb8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	781b      	ldrb	r3, [r3, #0]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff feca 	bl	8000990 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000bfc:	f7ff fea0 	bl	8000940 <SSD1306_UpdateScreen>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <OLED_SPI_Pins_Init>:

#include "stm32f4xx.h"


void OLED_SPI_Pins_Init()
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN; //enable clock for GPIOA
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <OLED_SPI_Pins_Init+0x44>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c48 <OLED_SPI_Pins_Init+0x44>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6313      	str	r3, [r2, #48]	@ 0x30

	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE7_1;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <OLED_SPI_Pins_Init+0x48>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0c      	ldr	r2, [pc, #48]	@ (8000c4c <OLED_SPI_Pins_Init+0x48>)
 8000c1a:	f443 4308 	orr.w	r3, r3, #34816	@ 0x8800
 8000c1e:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER &=~(GPIO_MODER_MODE5_0|GPIO_MODER_MODE7_0);

	//Set PA9 and PA10 as Output
	GPIOA->MODER|=GPIO_MODER_MODE9_0|GPIO_MODER_MODE10_0;//|GPIO_MODER_MODE6_0;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <OLED_SPI_Pins_Init+0x48>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <OLED_SPI_Pins_Init+0x48>)
 8000c26:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8000c2a:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER&=~(GPIO_MODER_MODE9_1|GPIO_MODER_MODE10_1);//|GPIO_MODER_MODE6_1);

	/*select which AF for PA5, PA6 and PA7*/
	GPIOA->AFR[0]|=(0x05<<20)|(0x05<<24)|(0x05<<28);
 8000c2c:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <OLED_SPI_Pins_Init+0x48>)
 8000c2e:	6a1b      	ldr	r3, [r3, #32]
 8000c30:	4a06      	ldr	r2, [pc, #24]	@ (8000c4c <OLED_SPI_Pins_Init+0x48>)
 8000c32:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000c36:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000c3a:	6213      	str	r3, [r2, #32]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <OLED_SPI_Configure>:

void OLED_SPI_Configure()
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	/*Enable clock access to SPI1 module*/
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000c54:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <OLED_SPI_Configure+0x94>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c58:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <OLED_SPI_Configure+0x94>)
 8000c5a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c5e:	6453      	str	r3, [r2, #68]	@ 0x44

		/*Set clock to fPCLK/2*/
		SPI1->CR1 &=~(1U<<3);
 8000c60:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c66:	f023 0308 	bic.w	r3, r3, #8
 8000c6a:	6013      	str	r3, [r2, #0]
		SPI1->CR1 &=~(1U<<4);
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c72:	f023 0310 	bic.w	r3, r3, #16
 8000c76:	6013      	str	r3, [r2, #0]
		SPI1->CR1 &=~(1U<<5);
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c7e:	f023 0320 	bic.w	r3, r3, #32
 8000c82:	6013      	str	r3, [r2, #0]

		/*Enable full duplex*/
		SPI1->CR1 &=~(1U<<10);
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000c8e:	6013      	str	r3, [r2, #0]

		/*Set MSB first*/
		SPI1->CR1 &= ~(1U<<7);
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c9a:	6013      	str	r3, [r2, #0]

		/*Set mode to MASTER*/
		SPI1->CR1 |= (1U<<2);
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a11      	ldr	r2, [pc, #68]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6013      	str	r3, [r2, #0]

		/*Set 8 bit data mode*/
		SPI1->CR1 &= ~(1U<<11);
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000cae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000cb2:	6013      	str	r3, [r2, #0]

		/*Select software slave management by
		 * setting SSM=1 and SSI=1*/
		SPI1->CR1 |= (1<<8);
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
		SPI1->CR1 |= (1<<9);
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cca:	6013      	str	r3, [r2, #0]

		/*Enable SPI module*/
		SPI1->CR1 |= (1<<6);
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <OLED_SPI_Configure+0x98>)
 8000cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40013000 	.word	0x40013000

08000cec <OLED_SPI_Write>:

void OLED_SPI_Write(char *data,uint32_t size)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]

	while(i<size)
 8000cfa:	e00f      	b.n	8000d1c <OLED_SPI_Write+0x30>
	{
		/*Wait until TXE is set*/
		while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000cfc:	bf00      	nop
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <OLED_SPI_Write+0x68>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <OLED_SPI_Write+0x12>

		/*Write the data to the data register*/
		SPI1->DR =(uint8_t) data[i];
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <OLED_SPI_Write+0x68>)
 8000d14:	60da      	str	r2, [r3, #12]
		i++;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
	while(i<size)
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3eb      	bcc.n	8000cfc <OLED_SPI_Write+0x10>
	}
	/*Wait until TXE is set*/
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000d24:	bf00      	nop
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <OLED_SPI_Write+0x68>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f9      	beq.n	8000d26 <OLED_SPI_Write+0x3a>

	/*Wait for BUSY flag to reset*/
	while((SPI1->SR & (SPI_SR_BSY))){}
 8000d32:	bf00      	nop
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <OLED_SPI_Write+0x68>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f9      	bne.n	8000d34 <OLED_SPI_Write+0x48>

	/*Clear OVR flag*/
	(void)SPI1->DR;
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <OLED_SPI_Write+0x68>)
 8000d42:	68db      	ldr	r3, [r3, #12]
	(void)SPI1->SR;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <OLED_SPI_Write+0x68>)
 8000d46:	689b      	ldr	r3, [r3, #8]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40013000 	.word	0x40013000

08000d58 <OLED_Select>:



void OLED_Select(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	GPIOA->BSRR =GPIO_BSRR_BR9;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <OLED_Select+0x18>)
 8000d5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d62:	619a      	str	r2, [r3, #24]

}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40020000 	.word	0x40020000

08000d74 <OLED_Deselect>:

/*Pull high to disable*/
void OLED_Deselect(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	GPIOA->BSRR =GPIO_BSRR_BS9;
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <OLED_Deselect+0x18>)
 8000d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7e:	619a      	str	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40020000 	.word	0x40020000

08000d90 <OLED_DataMode>:

void OLED_DataMode()
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	GPIOA->BSRR=GPIO_BSRR_BS10;
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <OLED_DataMode+0x18>)
 8000d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d9a:	619a      	str	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40020000 	.word	0x40020000

08000dac <OLED_CommMode>:

void OLED_CommMode()
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
	GPIOA->BSRR=GPIO_BSRR_BR10;
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <OLED_CommMode+0x18>)
 8000db2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000db6:	619a      	str	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <SystemInit>:
 */

#include "stm32f4xx.h"

void SystemInit (void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

	 SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88


}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f000 f86e 	bl	8000efc <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20020000 	.word	0x20020000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000488 	.word	0x20000488
 8000e54:	200005d8 	.word	0x200005d8

08000e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e5c:	f7ff ffb4 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e86:	f000 f83f 	bl	8000f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff fa23 	bl	80002d4 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000e9c:	080047fc 	.word	0x080047fc
  ldr r2, =_sbss
 8000ea0:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000ea4:	200005d4 	.word	0x200005d4

08000ea8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <siprintf>:
 8000eac:	b40e      	push	{r1, r2, r3}
 8000eae:	b500      	push	{lr}
 8000eb0:	b09c      	sub	sp, #112	@ 0x70
 8000eb2:	ab1d      	add	r3, sp, #116	@ 0x74
 8000eb4:	9002      	str	r0, [sp, #8]
 8000eb6:	9006      	str	r0, [sp, #24]
 8000eb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000ebc:	4809      	ldr	r0, [pc, #36]	@ (8000ee4 <siprintf+0x38>)
 8000ebe:	9107      	str	r1, [sp, #28]
 8000ec0:	9104      	str	r1, [sp, #16]
 8000ec2:	4909      	ldr	r1, [pc, #36]	@ (8000ee8 <siprintf+0x3c>)
 8000ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ec8:	9105      	str	r1, [sp, #20]
 8000eca:	6800      	ldr	r0, [r0, #0]
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	a902      	add	r1, sp, #8
 8000ed0:	f000 f994 	bl	80011fc <_svfiprintf_r>
 8000ed4:	9b02      	ldr	r3, [sp, #8]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	b01c      	add	sp, #112	@ 0x70
 8000edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ee0:	b003      	add	sp, #12
 8000ee2:	4770      	bx	lr
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	ffff0208 	.word	0xffff0208

08000eec <memset>:
 8000eec:	4402      	add	r2, r0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <memset+0xa>
 8000ef4:	4770      	bx	lr
 8000ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8000efa:	e7f9      	b.n	8000ef0 <memset+0x4>

08000efc <__errno>:
 8000efc:	4b01      	ldr	r3, [pc, #4]	@ (8000f04 <__errno+0x8>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <__libc_init_array>:
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8000f40 <__libc_init_array+0x38>)
 8000f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8000f44 <__libc_init_array+0x3c>)
 8000f0e:	1b64      	subs	r4, r4, r5
 8000f10:	10a4      	asrs	r4, r4, #2
 8000f12:	2600      	movs	r6, #0
 8000f14:	42a6      	cmp	r6, r4
 8000f16:	d109      	bne.n	8000f2c <__libc_init_array+0x24>
 8000f18:	4d0b      	ldr	r5, [pc, #44]	@ (8000f48 <__libc_init_array+0x40>)
 8000f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8000f4c <__libc_init_array+0x44>)
 8000f1c:	f000 fc66 	bl	80017ec <_init>
 8000f20:	1b64      	subs	r4, r4, r5
 8000f22:	10a4      	asrs	r4, r4, #2
 8000f24:	2600      	movs	r6, #0
 8000f26:	42a6      	cmp	r6, r4
 8000f28:	d105      	bne.n	8000f36 <__libc_init_array+0x2e>
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f30:	4798      	blx	r3
 8000f32:	3601      	adds	r6, #1
 8000f34:	e7ee      	b.n	8000f14 <__libc_init_array+0xc>
 8000f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f3a:	4798      	blx	r3
 8000f3c:	3601      	adds	r6, #1
 8000f3e:	e7f2      	b.n	8000f26 <__libc_init_array+0x1e>
 8000f40:	080047f4 	.word	0x080047f4
 8000f44:	080047f4 	.word	0x080047f4
 8000f48:	080047f4 	.word	0x080047f4
 8000f4c:	080047f8 	.word	0x080047f8

08000f50 <__retarget_lock_acquire_recursive>:
 8000f50:	4770      	bx	lr

08000f52 <__retarget_lock_release_recursive>:
 8000f52:	4770      	bx	lr

08000f54 <_free_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4605      	mov	r5, r0
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	d041      	beq.n	8000fe0 <_free_r+0x8c>
 8000f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f60:	1f0c      	subs	r4, r1, #4
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bfb8      	it	lt
 8000f66:	18e4      	addlt	r4, r4, r3
 8000f68:	f000 f8e0 	bl	800112c <__malloc_lock>
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <_free_r+0x90>)
 8000f6e:	6813      	ldr	r3, [r2, #0]
 8000f70:	b933      	cbnz	r3, 8000f80 <_free_r+0x2c>
 8000f72:	6063      	str	r3, [r4, #4]
 8000f74:	6014      	str	r4, [r2, #0]
 8000f76:	4628      	mov	r0, r5
 8000f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f7c:	f000 b8dc 	b.w	8001138 <__malloc_unlock>
 8000f80:	42a3      	cmp	r3, r4
 8000f82:	d908      	bls.n	8000f96 <_free_r+0x42>
 8000f84:	6820      	ldr	r0, [r4, #0]
 8000f86:	1821      	adds	r1, r4, r0
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	bf01      	itttt	eq
 8000f8c:	6819      	ldreq	r1, [r3, #0]
 8000f8e:	685b      	ldreq	r3, [r3, #4]
 8000f90:	1809      	addeq	r1, r1, r0
 8000f92:	6021      	streq	r1, [r4, #0]
 8000f94:	e7ed      	b.n	8000f72 <_free_r+0x1e>
 8000f96:	461a      	mov	r2, r3
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	b10b      	cbz	r3, 8000fa0 <_free_r+0x4c>
 8000f9c:	42a3      	cmp	r3, r4
 8000f9e:	d9fa      	bls.n	8000f96 <_free_r+0x42>
 8000fa0:	6811      	ldr	r1, [r2, #0]
 8000fa2:	1850      	adds	r0, r2, r1
 8000fa4:	42a0      	cmp	r0, r4
 8000fa6:	d10b      	bne.n	8000fc0 <_free_r+0x6c>
 8000fa8:	6820      	ldr	r0, [r4, #0]
 8000faa:	4401      	add	r1, r0
 8000fac:	1850      	adds	r0, r2, r1
 8000fae:	4283      	cmp	r3, r0
 8000fb0:	6011      	str	r1, [r2, #0]
 8000fb2:	d1e0      	bne.n	8000f76 <_free_r+0x22>
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	6053      	str	r3, [r2, #4]
 8000fba:	4408      	add	r0, r1
 8000fbc:	6010      	str	r0, [r2, #0]
 8000fbe:	e7da      	b.n	8000f76 <_free_r+0x22>
 8000fc0:	d902      	bls.n	8000fc8 <_free_r+0x74>
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	602b      	str	r3, [r5, #0]
 8000fc6:	e7d6      	b.n	8000f76 <_free_r+0x22>
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	1821      	adds	r1, r4, r0
 8000fcc:	428b      	cmp	r3, r1
 8000fce:	bf04      	itt	eq
 8000fd0:	6819      	ldreq	r1, [r3, #0]
 8000fd2:	685b      	ldreq	r3, [r3, #4]
 8000fd4:	6063      	str	r3, [r4, #4]
 8000fd6:	bf04      	itt	eq
 8000fd8:	1809      	addeq	r1, r1, r0
 8000fda:	6021      	streq	r1, [r4, #0]
 8000fdc:	6054      	str	r4, [r2, #4]
 8000fde:	e7ca      	b.n	8000f76 <_free_r+0x22>
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200005d0 	.word	0x200005d0

08000fe8 <sbrk_aligned>:
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	4e0f      	ldr	r6, [pc, #60]	@ (8001028 <sbrk_aligned+0x40>)
 8000fec:	460c      	mov	r4, r1
 8000fee:	6831      	ldr	r1, [r6, #0]
 8000ff0:	4605      	mov	r5, r0
 8000ff2:	b911      	cbnz	r1, 8000ffa <sbrk_aligned+0x12>
 8000ff4:	f000 fba6 	bl	8001744 <_sbrk_r>
 8000ff8:	6030      	str	r0, [r6, #0]
 8000ffa:	4621      	mov	r1, r4
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f000 fba1 	bl	8001744 <_sbrk_r>
 8001002:	1c43      	adds	r3, r0, #1
 8001004:	d103      	bne.n	800100e <sbrk_aligned+0x26>
 8001006:	f04f 34ff 	mov.w	r4, #4294967295
 800100a:	4620      	mov	r0, r4
 800100c:	bd70      	pop	{r4, r5, r6, pc}
 800100e:	1cc4      	adds	r4, r0, #3
 8001010:	f024 0403 	bic.w	r4, r4, #3
 8001014:	42a0      	cmp	r0, r4
 8001016:	d0f8      	beq.n	800100a <sbrk_aligned+0x22>
 8001018:	1a21      	subs	r1, r4, r0
 800101a:	4628      	mov	r0, r5
 800101c:	f000 fb92 	bl	8001744 <_sbrk_r>
 8001020:	3001      	adds	r0, #1
 8001022:	d1f2      	bne.n	800100a <sbrk_aligned+0x22>
 8001024:	e7ef      	b.n	8001006 <sbrk_aligned+0x1e>
 8001026:	bf00      	nop
 8001028:	200005cc 	.word	0x200005cc

0800102c <_malloc_r>:
 800102c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001030:	1ccd      	adds	r5, r1, #3
 8001032:	f025 0503 	bic.w	r5, r5, #3
 8001036:	3508      	adds	r5, #8
 8001038:	2d0c      	cmp	r5, #12
 800103a:	bf38      	it	cc
 800103c:	250c      	movcc	r5, #12
 800103e:	2d00      	cmp	r5, #0
 8001040:	4606      	mov	r6, r0
 8001042:	db01      	blt.n	8001048 <_malloc_r+0x1c>
 8001044:	42a9      	cmp	r1, r5
 8001046:	d904      	bls.n	8001052 <_malloc_r+0x26>
 8001048:	230c      	movs	r3, #12
 800104a:	6033      	str	r3, [r6, #0]
 800104c:	2000      	movs	r0, #0
 800104e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001128 <_malloc_r+0xfc>
 8001056:	f000 f869 	bl	800112c <__malloc_lock>
 800105a:	f8d8 3000 	ldr.w	r3, [r8]
 800105e:	461c      	mov	r4, r3
 8001060:	bb44      	cbnz	r4, 80010b4 <_malloc_r+0x88>
 8001062:	4629      	mov	r1, r5
 8001064:	4630      	mov	r0, r6
 8001066:	f7ff ffbf 	bl	8000fe8 <sbrk_aligned>
 800106a:	1c43      	adds	r3, r0, #1
 800106c:	4604      	mov	r4, r0
 800106e:	d158      	bne.n	8001122 <_malloc_r+0xf6>
 8001070:	f8d8 4000 	ldr.w	r4, [r8]
 8001074:	4627      	mov	r7, r4
 8001076:	2f00      	cmp	r7, #0
 8001078:	d143      	bne.n	8001102 <_malloc_r+0xd6>
 800107a:	2c00      	cmp	r4, #0
 800107c:	d04b      	beq.n	8001116 <_malloc_r+0xea>
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	4639      	mov	r1, r7
 8001082:	4630      	mov	r0, r6
 8001084:	eb04 0903 	add.w	r9, r4, r3
 8001088:	f000 fb5c 	bl	8001744 <_sbrk_r>
 800108c:	4581      	cmp	r9, r0
 800108e:	d142      	bne.n	8001116 <_malloc_r+0xea>
 8001090:	6821      	ldr	r1, [r4, #0]
 8001092:	1a6d      	subs	r5, r5, r1
 8001094:	4629      	mov	r1, r5
 8001096:	4630      	mov	r0, r6
 8001098:	f7ff ffa6 	bl	8000fe8 <sbrk_aligned>
 800109c:	3001      	adds	r0, #1
 800109e:	d03a      	beq.n	8001116 <_malloc_r+0xea>
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	442b      	add	r3, r5
 80010a4:	6023      	str	r3, [r4, #0]
 80010a6:	f8d8 3000 	ldr.w	r3, [r8]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	bb62      	cbnz	r2, 8001108 <_malloc_r+0xdc>
 80010ae:	f8c8 7000 	str.w	r7, [r8]
 80010b2:	e00f      	b.n	80010d4 <_malloc_r+0xa8>
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	1b52      	subs	r2, r2, r5
 80010b8:	d420      	bmi.n	80010fc <_malloc_r+0xd0>
 80010ba:	2a0b      	cmp	r2, #11
 80010bc:	d917      	bls.n	80010ee <_malloc_r+0xc2>
 80010be:	1961      	adds	r1, r4, r5
 80010c0:	42a3      	cmp	r3, r4
 80010c2:	6025      	str	r5, [r4, #0]
 80010c4:	bf18      	it	ne
 80010c6:	6059      	strne	r1, [r3, #4]
 80010c8:	6863      	ldr	r3, [r4, #4]
 80010ca:	bf08      	it	eq
 80010cc:	f8c8 1000 	streq.w	r1, [r8]
 80010d0:	5162      	str	r2, [r4, r5]
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	4630      	mov	r0, r6
 80010d6:	f000 f82f 	bl	8001138 <__malloc_unlock>
 80010da:	f104 000b 	add.w	r0, r4, #11
 80010de:	1d23      	adds	r3, r4, #4
 80010e0:	f020 0007 	bic.w	r0, r0, #7
 80010e4:	1ac2      	subs	r2, r0, r3
 80010e6:	bf1c      	itt	ne
 80010e8:	1a1b      	subne	r3, r3, r0
 80010ea:	50a3      	strne	r3, [r4, r2]
 80010ec:	e7af      	b.n	800104e <_malloc_r+0x22>
 80010ee:	6862      	ldr	r2, [r4, #4]
 80010f0:	42a3      	cmp	r3, r4
 80010f2:	bf0c      	ite	eq
 80010f4:	f8c8 2000 	streq.w	r2, [r8]
 80010f8:	605a      	strne	r2, [r3, #4]
 80010fa:	e7eb      	b.n	80010d4 <_malloc_r+0xa8>
 80010fc:	4623      	mov	r3, r4
 80010fe:	6864      	ldr	r4, [r4, #4]
 8001100:	e7ae      	b.n	8001060 <_malloc_r+0x34>
 8001102:	463c      	mov	r4, r7
 8001104:	687f      	ldr	r7, [r7, #4]
 8001106:	e7b6      	b.n	8001076 <_malloc_r+0x4a>
 8001108:	461a      	mov	r2, r3
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	42a3      	cmp	r3, r4
 800110e:	d1fb      	bne.n	8001108 <_malloc_r+0xdc>
 8001110:	2300      	movs	r3, #0
 8001112:	6053      	str	r3, [r2, #4]
 8001114:	e7de      	b.n	80010d4 <_malloc_r+0xa8>
 8001116:	230c      	movs	r3, #12
 8001118:	6033      	str	r3, [r6, #0]
 800111a:	4630      	mov	r0, r6
 800111c:	f000 f80c 	bl	8001138 <__malloc_unlock>
 8001120:	e794      	b.n	800104c <_malloc_r+0x20>
 8001122:	6005      	str	r5, [r0, #0]
 8001124:	e7d6      	b.n	80010d4 <_malloc_r+0xa8>
 8001126:	bf00      	nop
 8001128:	200005d0 	.word	0x200005d0

0800112c <__malloc_lock>:
 800112c:	4801      	ldr	r0, [pc, #4]	@ (8001134 <__malloc_lock+0x8>)
 800112e:	f7ff bf0f 	b.w	8000f50 <__retarget_lock_acquire_recursive>
 8001132:	bf00      	nop
 8001134:	200005c8 	.word	0x200005c8

08001138 <__malloc_unlock>:
 8001138:	4801      	ldr	r0, [pc, #4]	@ (8001140 <__malloc_unlock+0x8>)
 800113a:	f7ff bf0a 	b.w	8000f52 <__retarget_lock_release_recursive>
 800113e:	bf00      	nop
 8001140:	200005c8 	.word	0x200005c8

08001144 <__ssputs_r>:
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	688e      	ldr	r6, [r1, #8]
 800114a:	461f      	mov	r7, r3
 800114c:	42be      	cmp	r6, r7
 800114e:	680b      	ldr	r3, [r1, #0]
 8001150:	4682      	mov	sl, r0
 8001152:	460c      	mov	r4, r1
 8001154:	4690      	mov	r8, r2
 8001156:	d82d      	bhi.n	80011b4 <__ssputs_r+0x70>
 8001158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800115c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001160:	d026      	beq.n	80011b0 <__ssputs_r+0x6c>
 8001162:	6965      	ldr	r5, [r4, #20]
 8001164:	6909      	ldr	r1, [r1, #16]
 8001166:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800116a:	eba3 0901 	sub.w	r9, r3, r1
 800116e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001172:	1c7b      	adds	r3, r7, #1
 8001174:	444b      	add	r3, r9
 8001176:	106d      	asrs	r5, r5, #1
 8001178:	429d      	cmp	r5, r3
 800117a:	bf38      	it	cc
 800117c:	461d      	movcc	r5, r3
 800117e:	0553      	lsls	r3, r2, #21
 8001180:	d527      	bpl.n	80011d2 <__ssputs_r+0x8e>
 8001182:	4629      	mov	r1, r5
 8001184:	f7ff ff52 	bl	800102c <_malloc_r>
 8001188:	4606      	mov	r6, r0
 800118a:	b360      	cbz	r0, 80011e6 <__ssputs_r+0xa2>
 800118c:	6921      	ldr	r1, [r4, #16]
 800118e:	464a      	mov	r2, r9
 8001190:	f000 fae8 	bl	8001764 <memcpy>
 8001194:	89a3      	ldrh	r3, [r4, #12]
 8001196:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800119a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800119e:	81a3      	strh	r3, [r4, #12]
 80011a0:	6126      	str	r6, [r4, #16]
 80011a2:	6165      	str	r5, [r4, #20]
 80011a4:	444e      	add	r6, r9
 80011a6:	eba5 0509 	sub.w	r5, r5, r9
 80011aa:	6026      	str	r6, [r4, #0]
 80011ac:	60a5      	str	r5, [r4, #8]
 80011ae:	463e      	mov	r6, r7
 80011b0:	42be      	cmp	r6, r7
 80011b2:	d900      	bls.n	80011b6 <__ssputs_r+0x72>
 80011b4:	463e      	mov	r6, r7
 80011b6:	6820      	ldr	r0, [r4, #0]
 80011b8:	4632      	mov	r2, r6
 80011ba:	4641      	mov	r1, r8
 80011bc:	f000 faa8 	bl	8001710 <memmove>
 80011c0:	68a3      	ldr	r3, [r4, #8]
 80011c2:	1b9b      	subs	r3, r3, r6
 80011c4:	60a3      	str	r3, [r4, #8]
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	4433      	add	r3, r6
 80011ca:	6023      	str	r3, [r4, #0]
 80011cc:	2000      	movs	r0, #0
 80011ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d2:	462a      	mov	r2, r5
 80011d4:	f000 fad4 	bl	8001780 <_realloc_r>
 80011d8:	4606      	mov	r6, r0
 80011da:	2800      	cmp	r0, #0
 80011dc:	d1e0      	bne.n	80011a0 <__ssputs_r+0x5c>
 80011de:	6921      	ldr	r1, [r4, #16]
 80011e0:	4650      	mov	r0, sl
 80011e2:	f7ff feb7 	bl	8000f54 <_free_r>
 80011e6:	230c      	movs	r3, #12
 80011e8:	f8ca 3000 	str.w	r3, [sl]
 80011ec:	89a3      	ldrh	r3, [r4, #12]
 80011ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f2:	81a3      	strh	r3, [r4, #12]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	e7e9      	b.n	80011ce <__ssputs_r+0x8a>
	...

080011fc <_svfiprintf_r>:
 80011fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001200:	4698      	mov	r8, r3
 8001202:	898b      	ldrh	r3, [r1, #12]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	b09d      	sub	sp, #116	@ 0x74
 8001208:	4607      	mov	r7, r0
 800120a:	460d      	mov	r5, r1
 800120c:	4614      	mov	r4, r2
 800120e:	d510      	bpl.n	8001232 <_svfiprintf_r+0x36>
 8001210:	690b      	ldr	r3, [r1, #16]
 8001212:	b973      	cbnz	r3, 8001232 <_svfiprintf_r+0x36>
 8001214:	2140      	movs	r1, #64	@ 0x40
 8001216:	f7ff ff09 	bl	800102c <_malloc_r>
 800121a:	6028      	str	r0, [r5, #0]
 800121c:	6128      	str	r0, [r5, #16]
 800121e:	b930      	cbnz	r0, 800122e <_svfiprintf_r+0x32>
 8001220:	230c      	movs	r3, #12
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	b01d      	add	sp, #116	@ 0x74
 800122a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800122e:	2340      	movs	r3, #64	@ 0x40
 8001230:	616b      	str	r3, [r5, #20]
 8001232:	2300      	movs	r3, #0
 8001234:	9309      	str	r3, [sp, #36]	@ 0x24
 8001236:	2320      	movs	r3, #32
 8001238:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800123c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001240:	2330      	movs	r3, #48	@ 0x30
 8001242:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80013e0 <_svfiprintf_r+0x1e4>
 8001246:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800124a:	f04f 0901 	mov.w	r9, #1
 800124e:	4623      	mov	r3, r4
 8001250:	469a      	mov	sl, r3
 8001252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001256:	b10a      	cbz	r2, 800125c <_svfiprintf_r+0x60>
 8001258:	2a25      	cmp	r2, #37	@ 0x25
 800125a:	d1f9      	bne.n	8001250 <_svfiprintf_r+0x54>
 800125c:	ebba 0b04 	subs.w	fp, sl, r4
 8001260:	d00b      	beq.n	800127a <_svfiprintf_r+0x7e>
 8001262:	465b      	mov	r3, fp
 8001264:	4622      	mov	r2, r4
 8001266:	4629      	mov	r1, r5
 8001268:	4638      	mov	r0, r7
 800126a:	f7ff ff6b 	bl	8001144 <__ssputs_r>
 800126e:	3001      	adds	r0, #1
 8001270:	f000 80a7 	beq.w	80013c2 <_svfiprintf_r+0x1c6>
 8001274:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001276:	445a      	add	r2, fp
 8001278:	9209      	str	r2, [sp, #36]	@ 0x24
 800127a:	f89a 3000 	ldrb.w	r3, [sl]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 809f 	beq.w	80013c2 <_svfiprintf_r+0x1c6>
 8001284:	2300      	movs	r3, #0
 8001286:	f04f 32ff 	mov.w	r2, #4294967295
 800128a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800128e:	f10a 0a01 	add.w	sl, sl, #1
 8001292:	9304      	str	r3, [sp, #16]
 8001294:	9307      	str	r3, [sp, #28]
 8001296:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800129a:	931a      	str	r3, [sp, #104]	@ 0x68
 800129c:	4654      	mov	r4, sl
 800129e:	2205      	movs	r2, #5
 80012a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012a4:	484e      	ldr	r0, [pc, #312]	@ (80013e0 <_svfiprintf_r+0x1e4>)
 80012a6:	f7fe ff9b 	bl	80001e0 <memchr>
 80012aa:	9a04      	ldr	r2, [sp, #16]
 80012ac:	b9d8      	cbnz	r0, 80012e6 <_svfiprintf_r+0xea>
 80012ae:	06d0      	lsls	r0, r2, #27
 80012b0:	bf44      	itt	mi
 80012b2:	2320      	movmi	r3, #32
 80012b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80012b8:	0711      	lsls	r1, r2, #28
 80012ba:	bf44      	itt	mi
 80012bc:	232b      	movmi	r3, #43	@ 0x2b
 80012be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80012c2:	f89a 3000 	ldrb.w	r3, [sl]
 80012c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80012c8:	d015      	beq.n	80012f6 <_svfiprintf_r+0xfa>
 80012ca:	9a07      	ldr	r2, [sp, #28]
 80012cc:	4654      	mov	r4, sl
 80012ce:	2000      	movs	r0, #0
 80012d0:	f04f 0c0a 	mov.w	ip, #10
 80012d4:	4621      	mov	r1, r4
 80012d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012da:	3b30      	subs	r3, #48	@ 0x30
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d94b      	bls.n	8001378 <_svfiprintf_r+0x17c>
 80012e0:	b1b0      	cbz	r0, 8001310 <_svfiprintf_r+0x114>
 80012e2:	9207      	str	r2, [sp, #28]
 80012e4:	e014      	b.n	8001310 <_svfiprintf_r+0x114>
 80012e6:	eba0 0308 	sub.w	r3, r0, r8
 80012ea:	fa09 f303 	lsl.w	r3, r9, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	9304      	str	r3, [sp, #16]
 80012f2:	46a2      	mov	sl, r4
 80012f4:	e7d2      	b.n	800129c <_svfiprintf_r+0xa0>
 80012f6:	9b03      	ldr	r3, [sp, #12]
 80012f8:	1d19      	adds	r1, r3, #4
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	9103      	str	r1, [sp, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bfbb      	ittet	lt
 8001302:	425b      	neglt	r3, r3
 8001304:	f042 0202 	orrlt.w	r2, r2, #2
 8001308:	9307      	strge	r3, [sp, #28]
 800130a:	9307      	strlt	r3, [sp, #28]
 800130c:	bfb8      	it	lt
 800130e:	9204      	strlt	r2, [sp, #16]
 8001310:	7823      	ldrb	r3, [r4, #0]
 8001312:	2b2e      	cmp	r3, #46	@ 0x2e
 8001314:	d10a      	bne.n	800132c <_svfiprintf_r+0x130>
 8001316:	7863      	ldrb	r3, [r4, #1]
 8001318:	2b2a      	cmp	r3, #42	@ 0x2a
 800131a:	d132      	bne.n	8001382 <_svfiprintf_r+0x186>
 800131c:	9b03      	ldr	r3, [sp, #12]
 800131e:	1d1a      	adds	r2, r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	9203      	str	r2, [sp, #12]
 8001324:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001328:	3402      	adds	r4, #2
 800132a:	9305      	str	r3, [sp, #20]
 800132c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80013f0 <_svfiprintf_r+0x1f4>
 8001330:	7821      	ldrb	r1, [r4, #0]
 8001332:	2203      	movs	r2, #3
 8001334:	4650      	mov	r0, sl
 8001336:	f7fe ff53 	bl	80001e0 <memchr>
 800133a:	b138      	cbz	r0, 800134c <_svfiprintf_r+0x150>
 800133c:	9b04      	ldr	r3, [sp, #16]
 800133e:	eba0 000a 	sub.w	r0, r0, sl
 8001342:	2240      	movs	r2, #64	@ 0x40
 8001344:	4082      	lsls	r2, r0
 8001346:	4313      	orrs	r3, r2
 8001348:	3401      	adds	r4, #1
 800134a:	9304      	str	r3, [sp, #16]
 800134c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001350:	4824      	ldr	r0, [pc, #144]	@ (80013e4 <_svfiprintf_r+0x1e8>)
 8001352:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001356:	2206      	movs	r2, #6
 8001358:	f7fe ff42 	bl	80001e0 <memchr>
 800135c:	2800      	cmp	r0, #0
 800135e:	d036      	beq.n	80013ce <_svfiprintf_r+0x1d2>
 8001360:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <_svfiprintf_r+0x1ec>)
 8001362:	bb1b      	cbnz	r3, 80013ac <_svfiprintf_r+0x1b0>
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	3307      	adds	r3, #7
 8001368:	f023 0307 	bic.w	r3, r3, #7
 800136c:	3308      	adds	r3, #8
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001372:	4433      	add	r3, r6
 8001374:	9309      	str	r3, [sp, #36]	@ 0x24
 8001376:	e76a      	b.n	800124e <_svfiprintf_r+0x52>
 8001378:	fb0c 3202 	mla	r2, ip, r2, r3
 800137c:	460c      	mov	r4, r1
 800137e:	2001      	movs	r0, #1
 8001380:	e7a8      	b.n	80012d4 <_svfiprintf_r+0xd8>
 8001382:	2300      	movs	r3, #0
 8001384:	3401      	adds	r4, #1
 8001386:	9305      	str	r3, [sp, #20]
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 0c0a 	mov.w	ip, #10
 800138e:	4620      	mov	r0, r4
 8001390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001394:	3a30      	subs	r2, #48	@ 0x30
 8001396:	2a09      	cmp	r2, #9
 8001398:	d903      	bls.n	80013a2 <_svfiprintf_r+0x1a6>
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0c6      	beq.n	800132c <_svfiprintf_r+0x130>
 800139e:	9105      	str	r1, [sp, #20]
 80013a0:	e7c4      	b.n	800132c <_svfiprintf_r+0x130>
 80013a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80013a6:	4604      	mov	r4, r0
 80013a8:	2301      	movs	r3, #1
 80013aa:	e7f0      	b.n	800138e <_svfiprintf_r+0x192>
 80013ac:	ab03      	add	r3, sp, #12
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	462a      	mov	r2, r5
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <_svfiprintf_r+0x1f0>)
 80013b4:	a904      	add	r1, sp, #16
 80013b6:	4638      	mov	r0, r7
 80013b8:	f3af 8000 	nop.w
 80013bc:	1c42      	adds	r2, r0, #1
 80013be:	4606      	mov	r6, r0
 80013c0:	d1d6      	bne.n	8001370 <_svfiprintf_r+0x174>
 80013c2:	89ab      	ldrh	r3, [r5, #12]
 80013c4:	065b      	lsls	r3, r3, #25
 80013c6:	f53f af2d 	bmi.w	8001224 <_svfiprintf_r+0x28>
 80013ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80013cc:	e72c      	b.n	8001228 <_svfiprintf_r+0x2c>
 80013ce:	ab03      	add	r3, sp, #12
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	462a      	mov	r2, r5
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <_svfiprintf_r+0x1f0>)
 80013d6:	a904      	add	r1, sp, #16
 80013d8:	4638      	mov	r0, r7
 80013da:	f000 f879 	bl	80014d0 <_printf_i>
 80013de:	e7ed      	b.n	80013bc <_svfiprintf_r+0x1c0>
 80013e0:	080047b8 	.word	0x080047b8
 80013e4:	080047c2 	.word	0x080047c2
 80013e8:	00000000 	.word	0x00000000
 80013ec:	08001145 	.word	0x08001145
 80013f0:	080047be 	.word	0x080047be

080013f4 <_printf_common>:
 80013f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013f8:	4616      	mov	r6, r2
 80013fa:	4698      	mov	r8, r3
 80013fc:	688a      	ldr	r2, [r1, #8]
 80013fe:	690b      	ldr	r3, [r1, #16]
 8001400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001404:	4293      	cmp	r3, r2
 8001406:	bfb8      	it	lt
 8001408:	4613      	movlt	r3, r2
 800140a:	6033      	str	r3, [r6, #0]
 800140c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001410:	4607      	mov	r7, r0
 8001412:	460c      	mov	r4, r1
 8001414:	b10a      	cbz	r2, 800141a <_printf_common+0x26>
 8001416:	3301      	adds	r3, #1
 8001418:	6033      	str	r3, [r6, #0]
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	0699      	lsls	r1, r3, #26
 800141e:	bf42      	ittt	mi
 8001420:	6833      	ldrmi	r3, [r6, #0]
 8001422:	3302      	addmi	r3, #2
 8001424:	6033      	strmi	r3, [r6, #0]
 8001426:	6825      	ldr	r5, [r4, #0]
 8001428:	f015 0506 	ands.w	r5, r5, #6
 800142c:	d106      	bne.n	800143c <_printf_common+0x48>
 800142e:	f104 0a19 	add.w	sl, r4, #25
 8001432:	68e3      	ldr	r3, [r4, #12]
 8001434:	6832      	ldr	r2, [r6, #0]
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	42ab      	cmp	r3, r5
 800143a:	dc26      	bgt.n	800148a <_printf_common+0x96>
 800143c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001440:	6822      	ldr	r2, [r4, #0]
 8001442:	3b00      	subs	r3, #0
 8001444:	bf18      	it	ne
 8001446:	2301      	movne	r3, #1
 8001448:	0692      	lsls	r2, r2, #26
 800144a:	d42b      	bmi.n	80014a4 <_printf_common+0xb0>
 800144c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001450:	4641      	mov	r1, r8
 8001452:	4638      	mov	r0, r7
 8001454:	47c8      	blx	r9
 8001456:	3001      	adds	r0, #1
 8001458:	d01e      	beq.n	8001498 <_printf_common+0xa4>
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	6922      	ldr	r2, [r4, #16]
 800145e:	f003 0306 	and.w	r3, r3, #6
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf02      	ittt	eq
 8001466:	68e5      	ldreq	r5, [r4, #12]
 8001468:	6833      	ldreq	r3, [r6, #0]
 800146a:	1aed      	subeq	r5, r5, r3
 800146c:	68a3      	ldr	r3, [r4, #8]
 800146e:	bf0c      	ite	eq
 8001470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001474:	2500      	movne	r5, #0
 8001476:	4293      	cmp	r3, r2
 8001478:	bfc4      	itt	gt
 800147a:	1a9b      	subgt	r3, r3, r2
 800147c:	18ed      	addgt	r5, r5, r3
 800147e:	2600      	movs	r6, #0
 8001480:	341a      	adds	r4, #26
 8001482:	42b5      	cmp	r5, r6
 8001484:	d11a      	bne.n	80014bc <_printf_common+0xc8>
 8001486:	2000      	movs	r0, #0
 8001488:	e008      	b.n	800149c <_printf_common+0xa8>
 800148a:	2301      	movs	r3, #1
 800148c:	4652      	mov	r2, sl
 800148e:	4641      	mov	r1, r8
 8001490:	4638      	mov	r0, r7
 8001492:	47c8      	blx	r9
 8001494:	3001      	adds	r0, #1
 8001496:	d103      	bne.n	80014a0 <_printf_common+0xac>
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014a0:	3501      	adds	r5, #1
 80014a2:	e7c6      	b.n	8001432 <_printf_common+0x3e>
 80014a4:	18e1      	adds	r1, r4, r3
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	2030      	movs	r0, #48	@ 0x30
 80014aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80014ae:	4422      	add	r2, r4
 80014b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80014b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80014b8:	3302      	adds	r3, #2
 80014ba:	e7c7      	b.n	800144c <_printf_common+0x58>
 80014bc:	2301      	movs	r3, #1
 80014be:	4622      	mov	r2, r4
 80014c0:	4641      	mov	r1, r8
 80014c2:	4638      	mov	r0, r7
 80014c4:	47c8      	blx	r9
 80014c6:	3001      	adds	r0, #1
 80014c8:	d0e6      	beq.n	8001498 <_printf_common+0xa4>
 80014ca:	3601      	adds	r6, #1
 80014cc:	e7d9      	b.n	8001482 <_printf_common+0x8e>
	...

080014d0 <_printf_i>:
 80014d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014d4:	7e0f      	ldrb	r7, [r1, #24]
 80014d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80014d8:	2f78      	cmp	r7, #120	@ 0x78
 80014da:	4691      	mov	r9, r2
 80014dc:	4680      	mov	r8, r0
 80014de:	460c      	mov	r4, r1
 80014e0:	469a      	mov	sl, r3
 80014e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80014e6:	d807      	bhi.n	80014f8 <_printf_i+0x28>
 80014e8:	2f62      	cmp	r7, #98	@ 0x62
 80014ea:	d80a      	bhi.n	8001502 <_printf_i+0x32>
 80014ec:	2f00      	cmp	r7, #0
 80014ee:	f000 80d2 	beq.w	8001696 <_printf_i+0x1c6>
 80014f2:	2f58      	cmp	r7, #88	@ 0x58
 80014f4:	f000 80b9 	beq.w	800166a <_printf_i+0x19a>
 80014f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001500:	e03a      	b.n	8001578 <_printf_i+0xa8>
 8001502:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001506:	2b15      	cmp	r3, #21
 8001508:	d8f6      	bhi.n	80014f8 <_printf_i+0x28>
 800150a:	a101      	add	r1, pc, #4	@ (adr r1, 8001510 <_printf_i+0x40>)
 800150c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001510:	08001569 	.word	0x08001569
 8001514:	0800157d 	.word	0x0800157d
 8001518:	080014f9 	.word	0x080014f9
 800151c:	080014f9 	.word	0x080014f9
 8001520:	080014f9 	.word	0x080014f9
 8001524:	080014f9 	.word	0x080014f9
 8001528:	0800157d 	.word	0x0800157d
 800152c:	080014f9 	.word	0x080014f9
 8001530:	080014f9 	.word	0x080014f9
 8001534:	080014f9 	.word	0x080014f9
 8001538:	080014f9 	.word	0x080014f9
 800153c:	0800167d 	.word	0x0800167d
 8001540:	080015a7 	.word	0x080015a7
 8001544:	08001637 	.word	0x08001637
 8001548:	080014f9 	.word	0x080014f9
 800154c:	080014f9 	.word	0x080014f9
 8001550:	0800169f 	.word	0x0800169f
 8001554:	080014f9 	.word	0x080014f9
 8001558:	080015a7 	.word	0x080015a7
 800155c:	080014f9 	.word	0x080014f9
 8001560:	080014f9 	.word	0x080014f9
 8001564:	0800163f 	.word	0x0800163f
 8001568:	6833      	ldr	r3, [r6, #0]
 800156a:	1d1a      	adds	r2, r3, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6032      	str	r2, [r6, #0]
 8001570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001574:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001578:	2301      	movs	r3, #1
 800157a:	e09d      	b.n	80016b8 <_printf_i+0x1e8>
 800157c:	6833      	ldr	r3, [r6, #0]
 800157e:	6820      	ldr	r0, [r4, #0]
 8001580:	1d19      	adds	r1, r3, #4
 8001582:	6031      	str	r1, [r6, #0]
 8001584:	0606      	lsls	r6, r0, #24
 8001586:	d501      	bpl.n	800158c <_printf_i+0xbc>
 8001588:	681d      	ldr	r5, [r3, #0]
 800158a:	e003      	b.n	8001594 <_printf_i+0xc4>
 800158c:	0645      	lsls	r5, r0, #25
 800158e:	d5fb      	bpl.n	8001588 <_printf_i+0xb8>
 8001590:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001594:	2d00      	cmp	r5, #0
 8001596:	da03      	bge.n	80015a0 <_printf_i+0xd0>
 8001598:	232d      	movs	r3, #45	@ 0x2d
 800159a:	426d      	negs	r5, r5
 800159c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015a0:	4859      	ldr	r0, [pc, #356]	@ (8001708 <_printf_i+0x238>)
 80015a2:	230a      	movs	r3, #10
 80015a4:	e011      	b.n	80015ca <_printf_i+0xfa>
 80015a6:	6821      	ldr	r1, [r4, #0]
 80015a8:	6833      	ldr	r3, [r6, #0]
 80015aa:	0608      	lsls	r0, r1, #24
 80015ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80015b0:	d402      	bmi.n	80015b8 <_printf_i+0xe8>
 80015b2:	0649      	lsls	r1, r1, #25
 80015b4:	bf48      	it	mi
 80015b6:	b2ad      	uxthmi	r5, r5
 80015b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80015ba:	4853      	ldr	r0, [pc, #332]	@ (8001708 <_printf_i+0x238>)
 80015bc:	6033      	str	r3, [r6, #0]
 80015be:	bf14      	ite	ne
 80015c0:	230a      	movne	r3, #10
 80015c2:	2308      	moveq	r3, #8
 80015c4:	2100      	movs	r1, #0
 80015c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80015ca:	6866      	ldr	r6, [r4, #4]
 80015cc:	60a6      	str	r6, [r4, #8]
 80015ce:	2e00      	cmp	r6, #0
 80015d0:	bfa2      	ittt	ge
 80015d2:	6821      	ldrge	r1, [r4, #0]
 80015d4:	f021 0104 	bicge.w	r1, r1, #4
 80015d8:	6021      	strge	r1, [r4, #0]
 80015da:	b90d      	cbnz	r5, 80015e0 <_printf_i+0x110>
 80015dc:	2e00      	cmp	r6, #0
 80015de:	d04b      	beq.n	8001678 <_printf_i+0x1a8>
 80015e0:	4616      	mov	r6, r2
 80015e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80015e6:	fb03 5711 	mls	r7, r3, r1, r5
 80015ea:	5dc7      	ldrb	r7, [r0, r7]
 80015ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015f0:	462f      	mov	r7, r5
 80015f2:	42bb      	cmp	r3, r7
 80015f4:	460d      	mov	r5, r1
 80015f6:	d9f4      	bls.n	80015e2 <_printf_i+0x112>
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d10b      	bne.n	8001614 <_printf_i+0x144>
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	07df      	lsls	r7, r3, #31
 8001600:	d508      	bpl.n	8001614 <_printf_i+0x144>
 8001602:	6923      	ldr	r3, [r4, #16]
 8001604:	6861      	ldr	r1, [r4, #4]
 8001606:	4299      	cmp	r1, r3
 8001608:	bfde      	ittt	le
 800160a:	2330      	movle	r3, #48	@ 0x30
 800160c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001610:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001614:	1b92      	subs	r2, r2, r6
 8001616:	6122      	str	r2, [r4, #16]
 8001618:	f8cd a000 	str.w	sl, [sp]
 800161c:	464b      	mov	r3, r9
 800161e:	aa03      	add	r2, sp, #12
 8001620:	4621      	mov	r1, r4
 8001622:	4640      	mov	r0, r8
 8001624:	f7ff fee6 	bl	80013f4 <_printf_common>
 8001628:	3001      	adds	r0, #1
 800162a:	d14a      	bne.n	80016c2 <_printf_i+0x1f2>
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	b004      	add	sp, #16
 8001632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	6023      	str	r3, [r4, #0]
 800163e:	4833      	ldr	r0, [pc, #204]	@ (800170c <_printf_i+0x23c>)
 8001640:	2778      	movs	r7, #120	@ 0x78
 8001642:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	6831      	ldr	r1, [r6, #0]
 800164a:	061f      	lsls	r7, r3, #24
 800164c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001650:	d402      	bmi.n	8001658 <_printf_i+0x188>
 8001652:	065f      	lsls	r7, r3, #25
 8001654:	bf48      	it	mi
 8001656:	b2ad      	uxthmi	r5, r5
 8001658:	6031      	str	r1, [r6, #0]
 800165a:	07d9      	lsls	r1, r3, #31
 800165c:	bf44      	itt	mi
 800165e:	f043 0320 	orrmi.w	r3, r3, #32
 8001662:	6023      	strmi	r3, [r4, #0]
 8001664:	b11d      	cbz	r5, 800166e <_printf_i+0x19e>
 8001666:	2310      	movs	r3, #16
 8001668:	e7ac      	b.n	80015c4 <_printf_i+0xf4>
 800166a:	4827      	ldr	r0, [pc, #156]	@ (8001708 <_printf_i+0x238>)
 800166c:	e7e9      	b.n	8001642 <_printf_i+0x172>
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	f023 0320 	bic.w	r3, r3, #32
 8001674:	6023      	str	r3, [r4, #0]
 8001676:	e7f6      	b.n	8001666 <_printf_i+0x196>
 8001678:	4616      	mov	r6, r2
 800167a:	e7bd      	b.n	80015f8 <_printf_i+0x128>
 800167c:	6833      	ldr	r3, [r6, #0]
 800167e:	6825      	ldr	r5, [r4, #0]
 8001680:	6961      	ldr	r1, [r4, #20]
 8001682:	1d18      	adds	r0, r3, #4
 8001684:	6030      	str	r0, [r6, #0]
 8001686:	062e      	lsls	r6, r5, #24
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	d501      	bpl.n	8001690 <_printf_i+0x1c0>
 800168c:	6019      	str	r1, [r3, #0]
 800168e:	e002      	b.n	8001696 <_printf_i+0x1c6>
 8001690:	0668      	lsls	r0, r5, #25
 8001692:	d5fb      	bpl.n	800168c <_printf_i+0x1bc>
 8001694:	8019      	strh	r1, [r3, #0]
 8001696:	2300      	movs	r3, #0
 8001698:	6123      	str	r3, [r4, #16]
 800169a:	4616      	mov	r6, r2
 800169c:	e7bc      	b.n	8001618 <_printf_i+0x148>
 800169e:	6833      	ldr	r3, [r6, #0]
 80016a0:	1d1a      	adds	r2, r3, #4
 80016a2:	6032      	str	r2, [r6, #0]
 80016a4:	681e      	ldr	r6, [r3, #0]
 80016a6:	6862      	ldr	r2, [r4, #4]
 80016a8:	2100      	movs	r1, #0
 80016aa:	4630      	mov	r0, r6
 80016ac:	f7fe fd98 	bl	80001e0 <memchr>
 80016b0:	b108      	cbz	r0, 80016b6 <_printf_i+0x1e6>
 80016b2:	1b80      	subs	r0, r0, r6
 80016b4:	6060      	str	r0, [r4, #4]
 80016b6:	6863      	ldr	r3, [r4, #4]
 80016b8:	6123      	str	r3, [r4, #16]
 80016ba:	2300      	movs	r3, #0
 80016bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016c0:	e7aa      	b.n	8001618 <_printf_i+0x148>
 80016c2:	6923      	ldr	r3, [r4, #16]
 80016c4:	4632      	mov	r2, r6
 80016c6:	4649      	mov	r1, r9
 80016c8:	4640      	mov	r0, r8
 80016ca:	47d0      	blx	sl
 80016cc:	3001      	adds	r0, #1
 80016ce:	d0ad      	beq.n	800162c <_printf_i+0x15c>
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	079b      	lsls	r3, r3, #30
 80016d4:	d413      	bmi.n	80016fe <_printf_i+0x22e>
 80016d6:	68e0      	ldr	r0, [r4, #12]
 80016d8:	9b03      	ldr	r3, [sp, #12]
 80016da:	4298      	cmp	r0, r3
 80016dc:	bfb8      	it	lt
 80016de:	4618      	movlt	r0, r3
 80016e0:	e7a6      	b.n	8001630 <_printf_i+0x160>
 80016e2:	2301      	movs	r3, #1
 80016e4:	4632      	mov	r2, r6
 80016e6:	4649      	mov	r1, r9
 80016e8:	4640      	mov	r0, r8
 80016ea:	47d0      	blx	sl
 80016ec:	3001      	adds	r0, #1
 80016ee:	d09d      	beq.n	800162c <_printf_i+0x15c>
 80016f0:	3501      	adds	r5, #1
 80016f2:	68e3      	ldr	r3, [r4, #12]
 80016f4:	9903      	ldr	r1, [sp, #12]
 80016f6:	1a5b      	subs	r3, r3, r1
 80016f8:	42ab      	cmp	r3, r5
 80016fa:	dcf2      	bgt.n	80016e2 <_printf_i+0x212>
 80016fc:	e7eb      	b.n	80016d6 <_printf_i+0x206>
 80016fe:	2500      	movs	r5, #0
 8001700:	f104 0619 	add.w	r6, r4, #25
 8001704:	e7f5      	b.n	80016f2 <_printf_i+0x222>
 8001706:	bf00      	nop
 8001708:	080047c9 	.word	0x080047c9
 800170c:	080047da 	.word	0x080047da

08001710 <memmove>:
 8001710:	4288      	cmp	r0, r1
 8001712:	b510      	push	{r4, lr}
 8001714:	eb01 0402 	add.w	r4, r1, r2
 8001718:	d902      	bls.n	8001720 <memmove+0x10>
 800171a:	4284      	cmp	r4, r0
 800171c:	4623      	mov	r3, r4
 800171e:	d807      	bhi.n	8001730 <memmove+0x20>
 8001720:	1e43      	subs	r3, r0, #1
 8001722:	42a1      	cmp	r1, r4
 8001724:	d008      	beq.n	8001738 <memmove+0x28>
 8001726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800172a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800172e:	e7f8      	b.n	8001722 <memmove+0x12>
 8001730:	4402      	add	r2, r0
 8001732:	4601      	mov	r1, r0
 8001734:	428a      	cmp	r2, r1
 8001736:	d100      	bne.n	800173a <memmove+0x2a>
 8001738:	bd10      	pop	{r4, pc}
 800173a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800173e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001742:	e7f7      	b.n	8001734 <memmove+0x24>

08001744 <_sbrk_r>:
 8001744:	b538      	push	{r3, r4, r5, lr}
 8001746:	4d06      	ldr	r5, [pc, #24]	@ (8001760 <_sbrk_r+0x1c>)
 8001748:	2300      	movs	r3, #0
 800174a:	4604      	mov	r4, r0
 800174c:	4608      	mov	r0, r1
 800174e:	602b      	str	r3, [r5, #0]
 8001750:	f7ff fb4c 	bl	8000dec <_sbrk>
 8001754:	1c43      	adds	r3, r0, #1
 8001756:	d102      	bne.n	800175e <_sbrk_r+0x1a>
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	b103      	cbz	r3, 800175e <_sbrk_r+0x1a>
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	bd38      	pop	{r3, r4, r5, pc}
 8001760:	200005c4 	.word	0x200005c4

08001764 <memcpy>:
 8001764:	440a      	add	r2, r1
 8001766:	4291      	cmp	r1, r2
 8001768:	f100 33ff 	add.w	r3, r0, #4294967295
 800176c:	d100      	bne.n	8001770 <memcpy+0xc>
 800176e:	4770      	bx	lr
 8001770:	b510      	push	{r4, lr}
 8001772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800177a:	4291      	cmp	r1, r2
 800177c:	d1f9      	bne.n	8001772 <memcpy+0xe>
 800177e:	bd10      	pop	{r4, pc}

08001780 <_realloc_r>:
 8001780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001784:	4680      	mov	r8, r0
 8001786:	4615      	mov	r5, r2
 8001788:	460c      	mov	r4, r1
 800178a:	b921      	cbnz	r1, 8001796 <_realloc_r+0x16>
 800178c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001790:	4611      	mov	r1, r2
 8001792:	f7ff bc4b 	b.w	800102c <_malloc_r>
 8001796:	b92a      	cbnz	r2, 80017a4 <_realloc_r+0x24>
 8001798:	f7ff fbdc 	bl	8000f54 <_free_r>
 800179c:	2400      	movs	r4, #0
 800179e:	4620      	mov	r0, r4
 80017a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017a4:	f000 f81a 	bl	80017dc <_malloc_usable_size_r>
 80017a8:	4285      	cmp	r5, r0
 80017aa:	4606      	mov	r6, r0
 80017ac:	d802      	bhi.n	80017b4 <_realloc_r+0x34>
 80017ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80017b2:	d8f4      	bhi.n	800179e <_realloc_r+0x1e>
 80017b4:	4629      	mov	r1, r5
 80017b6:	4640      	mov	r0, r8
 80017b8:	f7ff fc38 	bl	800102c <_malloc_r>
 80017bc:	4607      	mov	r7, r0
 80017be:	2800      	cmp	r0, #0
 80017c0:	d0ec      	beq.n	800179c <_realloc_r+0x1c>
 80017c2:	42b5      	cmp	r5, r6
 80017c4:	462a      	mov	r2, r5
 80017c6:	4621      	mov	r1, r4
 80017c8:	bf28      	it	cs
 80017ca:	4632      	movcs	r2, r6
 80017cc:	f7ff ffca 	bl	8001764 <memcpy>
 80017d0:	4621      	mov	r1, r4
 80017d2:	4640      	mov	r0, r8
 80017d4:	f7ff fbbe 	bl	8000f54 <_free_r>
 80017d8:	463c      	mov	r4, r7
 80017da:	e7e0      	b.n	800179e <_realloc_r+0x1e>

080017dc <_malloc_usable_size_r>:
 80017dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017e0:	1f18      	subs	r0, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bfbc      	itt	lt
 80017e6:	580b      	ldrlt	r3, [r1, r0]
 80017e8:	18c0      	addlt	r0, r0, r3
 80017ea:	4770      	bx	lr

080017ec <_init>:
 80017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ee:	bf00      	nop
 80017f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f2:	bc08      	pop	{r3}
 80017f4:	469e      	mov	lr, r3
 80017f6:	4770      	bx	lr

080017f8 <_fini>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	bf00      	nop
 80017fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fe:	bc08      	pop	{r3}
 8001800:	469e      	mov	lr, r3
 8001802:	4770      	bx	lr
