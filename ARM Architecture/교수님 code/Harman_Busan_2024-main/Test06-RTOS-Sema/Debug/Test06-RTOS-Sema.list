
Test06-RTOS-Sema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005c0c  08005c0c  00015c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d74  08005d74  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d7c  08005d7c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004204  2000006c  08005df0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004270  08005df0  00024270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fed  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003143  00000000  00000000  000350cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00038210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e25  00000000  00000000  00039450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019070  00000000  00000000  0003a275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014956  00000000  00000000  000532e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098b45  00000000  00000000  00067c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005220  00000000  00000000  00100780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001059a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bf4 	.word	0x08005bf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005bf4 	.word	0x08005bf4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000088 	.word	0x20000088
 800050c:	20000128 	.word	0x20000128

08000510 <__io_putchar>:
int __io_putchar(int c)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 8000518:	1d39      	adds	r1, r7, #4
 800051a:	230a      	movs	r3, #10
 800051c:	2201      	movs	r2, #1
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <__io_putchar+0x20>)
 8000520:	f001 ff35 	bl	800238e <HAL_UART_Transmit>
	return c;
 8000524:	687b      	ldr	r3, [r7, #4]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000328 	.word	0x20000328

08000534 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000544:	d104      	bne.n	8000550 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(myBinarySem01Handle);
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_GPIO_EXTI_Callback+0x24>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fba6 	bl	8002c9c <osSemaphoreRelease>
	}
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000037c 	.word	0x2000037c

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b09e      	sub	sp, #120	; 0x78
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fc7f 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f887 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f925 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800056e:	f000 f8f9 	bl	8000764 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000572:	f000 f8eb 	bl	800074c <MX_NVIC_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000576:	2300      	movs	r3, #0
 8000578:	673b      	str	r3, [r7, #112]	; 0x70
 800057a:	2300      	movs	r3, #0
 800057c:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800057e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000582:	2101      	movs	r1, #1
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fb08 	bl	8002b9a <osSemaphoreCreate>
 800058a:	4603      	mov	r3, r0
 800058c:	4a2f      	ldr	r2, [pc, #188]	; (800064c <main+0xf0>)
 800058e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000590:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <main+0xf4>)
 8000592:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000596:	461d      	mov	r5, r3
 8000598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fa95 	bl	8002ada <osThreadCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a28      	ldr	r2, [pc, #160]	; (8000654 <main+0xf8>)
 80005b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <main+0xfc>)
 80005b8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fa82 	bl	8002ada <osThreadCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <main+0x100>)
 80005da:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityLow, 0, 128);
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <main+0x104>)
 80005de:	f107 041c 	add.w	r4, r7, #28
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fa6f 	bl	8002ada <osThreadCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <main+0x108>)
 8000600:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <main+0x10c>)
 8000604:	463c      	mov	r4, r7
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000614:	463b      	mov	r3, r7
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fa5e 	bl	8002ada <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <main+0x110>)
 8000622:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  printf("\033[1JRTOS using Semaphore Program Started...\r\n");
 8000624:	4812      	ldr	r0, [pc, #72]	; (8000670 <main+0x114>)
 8000626:	f004 feed 	bl	8005404 <puts>
  printf("Press B1 button to start action.\r\n");
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <main+0x118>)
 800062c:	f004 feea 	bl	8005404 <puts>
  while(osSemaphoreWait(myBinarySem01Handle, 0) == osOK);
 8000630:	bf00      	nop
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <main+0xf0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fae1 	bl	8002c00 <osSemaphoreWait>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0f6      	beq.n	8000632 <main+0xd6>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000644:	f002 fa42 	bl	8002acc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000648:	e7fe      	b.n	8000648 <main+0xec>
 800064a:	bf00      	nop
 800064c:	2000037c 	.word	0x2000037c
 8000650:	08005c6c 	.word	0x08005c6c
 8000654:	2000036c 	.word	0x2000036c
 8000658:	08005c94 	.word	0x08005c94
 800065c:	20000370 	.word	0x20000370
 8000660:	08005cbc 	.word	0x08005cbc
 8000664:	20000374 	.word	0x20000374
 8000668:	08005ce4 	.word	0x08005ce4
 800066c:	20000378 	.word	0x20000378
 8000670:	08005c0c 	.word	0x08005c0c
 8000674:	08005c3c 	.word	0x08005c3c

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 ff9c 	bl	80055c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e8:	2310      	movs	r3, #16
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 feae 	bl	8001460 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070a:	f000 f9b7 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f910 	bl	8001950 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000736:	f000 f9a1 	bl	8000a7c <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2105      	movs	r1, #5
 8000754:	2028      	movs	r0, #40	; 0x28
 8000756:	f000 fca3 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800075a:	2028      	movs	r0, #40	; 0x28
 800075c:	f000 fcbc 	bl	80010d8 <HAL_NVIC_EnableIRQ>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART2_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800079c:	f001 fdaa 	bl	80022f4 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f969 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000328 	.word	0x20000328
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <MX_GPIO_Init+0x100>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a38      	ldr	r2, [pc, #224]	; (80008b8 <MX_GPIO_Init+0x100>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <MX_GPIO_Init+0x100>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <MX_GPIO_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a31      	ldr	r2, [pc, #196]	; (80008b8 <MX_GPIO_Init+0x100>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <MX_GPIO_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_GPIO_Init+0x100>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2a      	ldr	r2, [pc, #168]	; (80008b8 <MX_GPIO_Init+0x100>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <MX_GPIO_Init+0x100>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_GPIO_Init+0x100>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <MX_GPIO_Init+0x100>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_GPIO_Init+0x100>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000844:	481d      	ldr	r0, [pc, #116]	; (80008bc <MX_GPIO_Init+0x104>)
 8000846:	f000 fdd9 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000850:	481b      	ldr	r0, [pc, #108]	; (80008c0 <MX_GPIO_Init+0x108>)
 8000852:	f000 fdd3 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4815      	ldr	r0, [pc, #84]	; (80008c4 <MX_GPIO_Init+0x10c>)
 800086e:	f000 fc41 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin;
 8000872:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_GPIO_Init+0x104>)
 800088c:	f000 fc32 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin;
 8000890:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_GPIO_Init+0x108>)
 80008aa:	f000 fc23 	bl	80010f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020400 	.word	0x40020400
 80008c4:	40020800 	.word	0x40020800

080008c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <StartDefaultTask+0x58>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 f992 	bl	8002c00 <osSemaphoreWait>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d119      	bne.n	8000916 <StartDefaultTask+0x4e>
	  {
		  printf("in Task [DefaultTask]\r\n");
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <StartDefaultTask+0x5c>)
 80008e4:	f004 fd8e 	bl	8005404 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1); HAL_Delay(500);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2120      	movs	r1, #32
 80008ec:	480e      	ldr	r0, [pc, #56]	; (8000928 <StartDefaultTask+0x60>)
 80008ee:	f000 fd85 	bl	80013fc <HAL_GPIO_WritePin>
 80008f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f6:	f000 faf7 	bl	8000ee8 <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); HAL_Delay(500);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <StartDefaultTask+0x60>)
 8000900:	f000 fd7c 	bl	80013fc <HAL_GPIO_WritePin>
 8000904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000908:	f000 faee 	bl	8000ee8 <HAL_Delay>
		  osSemaphoreRelease(myBinarySem01Handle);
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <StartDefaultTask+0x58>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f002 f9c3 	bl	8002c9c <osSemaphoreRelease>
	  }
	  osDelay(1);
 8000916:	2001      	movs	r0, #1
 8000918:	f002 f92b 	bl	8002b72 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 800091c:	e7d8      	b.n	80008d0 <StartDefaultTask+0x8>
 800091e:	bf00      	nop
 8000920:	2000037c 	.word	0x2000037c
 8000924:	08005d00 	.word	0x08005d00
 8000928:	40020000 	.word	0x40020000

0800092c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <StartTask02+0x54>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f002 f960 	bl	8002c00 <osSemaphoreWait>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d117      	bne.n	8000976 <StartTask02+0x4a>
	  {
		  printf("in Task [Task02]\r\n");
 8000946:	480f      	ldr	r0, [pc, #60]	; (8000984 <StartTask02+0x58>)
 8000948:	f004 fd5c 	bl	8005404 <puts>
		  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1); HAL_Delay(100);
 800094c:	2201      	movs	r2, #1
 800094e:	2110      	movs	r1, #16
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <StartTask02+0x5c>)
 8000952:	f000 fd53 	bl	80013fc <HAL_GPIO_WritePin>
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f000 fac6 	bl	8000ee8 <HAL_Delay>
		  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0); HAL_Delay(100);
 800095c:	2200      	movs	r2, #0
 800095e:	2110      	movs	r1, #16
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <StartTask02+0x5c>)
 8000962:	f000 fd4b 	bl	80013fc <HAL_GPIO_WritePin>
 8000966:	2064      	movs	r0, #100	; 0x64
 8000968:	f000 fabe 	bl	8000ee8 <HAL_Delay>
		  osSemaphoreRelease(myBinarySem01Handle);
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <StartTask02+0x54>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f002 f993 	bl	8002c9c <osSemaphoreRelease>
	  }
	  osDelay(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f002 f8fb 	bl	8002b72 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 800097c:	e7da      	b.n	8000934 <StartTask02+0x8>
 800097e:	bf00      	nop
 8000980:	2000037c 	.word	0x2000037c
 8000984:	08005d18 	.word	0x08005d18
 8000988:	40020400 	.word	0x40020400

0800098c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <StartTask03+0x58>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f002 f930 	bl	8002c00 <osSemaphoreWait>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d119      	bne.n	80009da <StartTask03+0x4e>
	  {
		  printf("in Task [Task03]\r\n");
 80009a6:	4810      	ldr	r0, [pc, #64]	; (80009e8 <StartTask03+0x5c>)
 80009a8:	f004 fd2c 	bl	8005404 <puts>
		  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1); HAL_Delay(100);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <StartTask03+0x60>)
 80009b4:	f000 fd22 	bl	80013fc <HAL_GPIO_WritePin>
 80009b8:	2064      	movs	r0, #100	; 0x64
 80009ba:	f000 fa95 	bl	8000ee8 <HAL_Delay>
		  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0); HAL_Delay(100);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <StartTask03+0x60>)
 80009c6:	f000 fd19 	bl	80013fc <HAL_GPIO_WritePin>
 80009ca:	2064      	movs	r0, #100	; 0x64
 80009cc:	f000 fa8c 	bl	8000ee8 <HAL_Delay>
		  osSemaphoreRelease(myBinarySem01Handle);
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <StartTask03+0x58>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 f961 	bl	8002c9c <osSemaphoreRelease>
	  }
	  osDelay(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f002 f8c9 	bl	8002b72 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009e0:	e7d8      	b.n	8000994 <StartTask03+0x8>
 80009e2:	bf00      	nop
 80009e4:	2000037c 	.word	0x2000037c
 80009e8:	08005d2c 	.word	0x08005d2c
 80009ec:	40020400 	.word	0x40020400

080009f0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <StartTask04+0x5c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 f8fe 	bl	8002c00 <osSemaphoreWait>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d11b      	bne.n	8000a42 <StartTask04+0x52>
	  {
		  printf("in Task [Task04]\r\n");
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <StartTask04+0x60>)
 8000a0c:	f004 fcfa 	bl	8005404 <puts>
		  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1); HAL_Delay(300);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <StartTask04+0x64>)
 8000a18:	f000 fcf0 	bl	80013fc <HAL_GPIO_WritePin>
 8000a1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a20:	f000 fa62 	bl	8000ee8 <HAL_Delay>
		  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0); HAL_Delay(300);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2a:	480a      	ldr	r0, [pc, #40]	; (8000a54 <StartTask04+0x64>)
 8000a2c:	f000 fce6 	bl	80013fc <HAL_GPIO_WritePin>
 8000a30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a34:	f000 fa58 	bl	8000ee8 <HAL_Delay>
		  osSemaphoreRelease(myBinarySem01Handle);
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <StartTask04+0x5c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 f92d 	bl	8002c9c <osSemaphoreRelease>
	  }
	  osDelay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f002 f895 	bl	8002b72 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a48:	e7d6      	b.n	80009f8 <StartTask04+0x8>
 8000a4a:	bf00      	nop
 8000a4c:	2000037c 	.word	0x2000037c
 8000a50:	08005d40 	.word	0x08005d40
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6a:	f000 fa1d 	bl	8000ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40014800 	.word	0x40014800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_MspInit+0x54>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a11      	ldr	r2, [pc, #68]	; (8000adc <HAL_MspInit+0x54>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x54>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_MspInit+0x54>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_MspInit+0x54>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_MspInit+0x54>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	f06f 0001 	mvn.w	r0, #1
 8000ace:	f000 fae7 	bl	80010a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b56:	f000 facd 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <HAL_InitTick+0xd0>)
 8000b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b88:	4a2d      	ldr	r2, [pc, #180]	; (8000c40 <HAL_InitTick+0xd0>)
 8000b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <HAL_InitTick+0xd0>)
 8000b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b9c:	f107 020c 	add.w	r2, r7, #12
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 f8f2 	bl	8001d90 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bac:	f001 f8dc 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8000bb0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb4:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <HAL_InitTick+0xd4>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	0c9b      	lsrs	r3, r3, #18
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_InitTick+0xd8>)
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <HAL_InitTick+0xdc>)
 8000bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_InitTick+0xd8>)
 8000bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bcc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <HAL_InitTick+0xd8>)
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_InitTick+0xd8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_InitTick+0xd8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_InitTick+0xd8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <HAL_InitTick+0xd8>)
 8000be8:	f001 f904 	bl	8001df4 <HAL_TIM_Base_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d11b      	bne.n	8000c32 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000bfa:	4813      	ldr	r0, [pc, #76]	; (8000c48 <HAL_InitTick+0xd8>)
 8000bfc:	f001 f954 	bl	8001ea8 <HAL_TIM_Base_Start_IT>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d111      	bne.n	8000c32 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c0e:	201a      	movs	r0, #26
 8000c10:	f000 fa62 	bl	80010d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	d808      	bhi.n	8000c2c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	201a      	movs	r0, #26
 8000c20:	f000 fa3e 	bl	80010a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_InitTick+0xe0>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e002      	b.n	8000c32 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3730      	adds	r7, #48	; 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	20000380 	.word	0x20000380
 8000c4c:	40014800 	.word	0x40014800
 8000c50:	20000004 	.word	0x20000004

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c86:	f001 f971 	bl	8001f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000380 	.word	0x20000380

08000c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c9c:	f000 fbc8 	bl	8001430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb6:	f3af 8000 	nop.w
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <_read+0x12>
  }

  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e009      	b.n	8000d04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fc09 	bl	8000510 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf1      	blt.n	8000cf0 <_write+0x12>
  }
  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_close>:

int _close(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f004 fcac 	bl	800570c <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20020000 	.word	0x20020000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200003c8 	.word	0x200003c8
 8000de8:	20004270 	.word	0x20004270

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e16:	490e      	ldr	r1, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e2c:	4c0b      	ldr	r4, [pc, #44]	; (8000e5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e3a:	f7ff ffd7 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f004 fc6b 	bl	8005718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fb8b 	bl	800055c <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e54:	08005d84 	.word	0x08005d84
  ldr r2, =_sbss
 8000e58:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e5c:	20004270 	.word	0x20004270

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f8fc 	bl	800108a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f7ff fe6c 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fdf6 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	200003cc 	.word	0x200003cc

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200003cc 	.word	0x200003cc

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff ffee 	bl	8000ed0 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffde 	bl	8000ed0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff4c 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b2:	f7ff ff61 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	6978      	ldr	r0, [r7, #20]
 80010be:	f7ff ffb1 	bl	8001024 <NVIC_EncodePriority>
 80010c2:	4602      	mov	r2, r0
 80010c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff80 	bl	8000fd0 <__NVIC_SetPriority>
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff54 	bl	8000f94 <__NVIC_EnableIRQ>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e159      	b.n	80013c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8148 	bne.w	80013be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a2 	beq.w	80013be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b57      	ldr	r3, [pc, #348]	; (80013dc <HAL_GPIO_Init+0x2e8>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a56      	ldr	r2, [pc, #344]	; (80013dc <HAL_GPIO_Init+0x2e8>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b54      	ldr	r3, [pc, #336]	; (80013dc <HAL_GPIO_Init+0x2e8>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <HAL_GPIO_Init+0x2ec>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a49      	ldr	r2, [pc, #292]	; (80013e4 <HAL_GPIO_Init+0x2f0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x202>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <HAL_GPIO_Init+0x2f4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x1fe>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a47      	ldr	r2, [pc, #284]	; (80013ec <HAL_GPIO_Init+0x2f8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x1fa>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a46      	ldr	r2, [pc, #280]	; (80013f0 <HAL_GPIO_Init+0x2fc>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x1f6>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a45      	ldr	r2, [pc, #276]	; (80013f4 <HAL_GPIO_Init+0x300>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x1f2>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	; (80013e0 <HAL_GPIO_Init+0x2ec>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_GPIO_Init+0x304>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <HAL_GPIO_Init+0x304>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_GPIO_Init+0x304>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a24      	ldr	r2, [pc, #144]	; (80013f8 <HAL_GPIO_Init+0x304>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_GPIO_Init+0x304>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138e:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <HAL_GPIO_Init+0x304>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_GPIO_Init+0x304>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_GPIO_Init+0x304>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f aea2 	bls.w	8001110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40013c00 	.word	0x40013c00

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	619a      	str	r2, [r3, #24]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f870 	bl	8000534 <HAL_GPIO_EXTI_Callback>
  }
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e267      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d075      	beq.n	800156a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147e:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d00c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148a:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001492:	2b08      	cmp	r3, #8
 8001494:	d112      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a2:	d10b      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d05b      	beq.n	8001568 <HAL_RCC_OscConfig+0x108>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d157      	bne.n	8001568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e242      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x74>
 80014c6:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a75      	ldr	r2, [pc, #468]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x98>
 80014de:	4b70      	ldr	r3, [pc, #448]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6f      	ldr	r2, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b6d      	ldr	r3, [pc, #436]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6c      	ldr	r2, [pc, #432]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014f8:	4b69      	ldr	r3, [pc, #420]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a68      	ldr	r2, [pc, #416]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b66      	ldr	r3, [pc, #408]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a65      	ldr	r2, [pc, #404]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fcda 	bl	8000ed0 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcd6 	bl	8000ed0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e207      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xc0>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fcc6 	bl	8000ed0 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fcc2 	bl	8000ed0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1f3      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b51      	ldr	r3, [pc, #324]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0xe8>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001576:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1c7      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4937      	ldr	r1, [pc, #220]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e03a      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_OscConfig+0x244>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fc7b 	bl	8000ed0 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fc77 	bl	8000ed0 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1a8      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4925      	ldr	r1, [pc, #148]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_RCC_OscConfig+0x244>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fc5a 	bl	8000ed0 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fc56 	bl	8000ed0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e187      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d036      	beq.n	80016b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d016      	beq.n	8001680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_RCC_OscConfig+0x248>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fc3a 	bl	8000ed0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fc36 	bl	8000ed0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e167      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x200>
 800167e:	e01b      	b.n	80016b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_OscConfig+0x248>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fc23 	bl	8000ed0 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	e00e      	b.n	80016ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff fc1f 	bl	8000ed0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d907      	bls.n	80016ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e150      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	42470000 	.word	0x42470000
 80016a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ea      	bne.n	800168e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8097 	beq.w	80017f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b81      	ldr	r3, [pc, #516]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10f      	bne.n	80016f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b7d      	ldr	r3, [pc, #500]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a7c      	ldr	r2, [pc, #496]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b7a      	ldr	r3, [pc, #488]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f2:	2301      	movs	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <HAL_RCC_OscConfig+0x474>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d118      	bne.n	8001734 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001702:	4b74      	ldr	r3, [pc, #464]	; (80018d4 <HAL_RCC_OscConfig+0x474>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a73      	ldr	r2, [pc, #460]	; (80018d4 <HAL_RCC_OscConfig+0x474>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff fbdf 	bl	8000ed0 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001716:	f7ff fbdb 	bl	8000ed0 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e10c      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_RCC_OscConfig+0x474>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x2ea>
 800173c:	4b64      	ldr	r3, [pc, #400]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a63      	ldr	r2, [pc, #396]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
 8001748:	e01c      	b.n	8001784 <HAL_RCC_OscConfig+0x324>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b05      	cmp	r3, #5
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x30c>
 8001752:	4b5f      	ldr	r3, [pc, #380]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	4a5e      	ldr	r2, [pc, #376]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6713      	str	r3, [r2, #112]	; 0x70
 800175e:	4b5c      	ldr	r3, [pc, #368]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	4a5b      	ldr	r2, [pc, #364]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6713      	str	r3, [r2, #112]	; 0x70
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0x324>
 800176c:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	4a57      	ldr	r2, [pc, #348]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6713      	str	r3, [r2, #112]	; 0x70
 8001778:	4b55      	ldr	r3, [pc, #340]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	4a54      	ldr	r2, [pc, #336]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 800177e:	f023 0304 	bic.w	r3, r3, #4
 8001782:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d015      	beq.n	80017b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fba0 	bl	8000ed0 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fb9c 	bl	8000ed0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0cb      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017aa:	4b49      	ldr	r3, [pc, #292]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0ee      	beq.n	8001794 <HAL_RCC_OscConfig+0x334>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7ff fb8a 	bl	8000ed0 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c0:	f7ff fb86 	bl	8000ed0 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e0b5      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1ee      	bne.n	80017c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a1 	beq.w	8001940 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b08      	cmp	r3, #8
 8001808:	d05c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d141      	bne.n	8001896 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_RCC_OscConfig+0x478>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fb5a 	bl	8000ed0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fb56 	bl	8000ed0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e087      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	019b      	lsls	r3, r3, #6
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	041b      	lsls	r3, r3, #16
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	061b      	lsls	r3, r3, #24
 8001862:	491b      	ldr	r1, [pc, #108]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_RCC_OscConfig+0x478>)
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff fb2f 	bl	8000ed0 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001876:	f7ff fb2b 	bl	8000ed0 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e05c      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x416>
 8001894:	e054      	b.n	8001940 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_RCC_OscConfig+0x478>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fb18 	bl	8000ed0 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff fb14 	bl	8000ed0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e045      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_RCC_OscConfig+0x470>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x444>
 80018c2:	e03d      	b.n	8001940 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e038      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000
 80018d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d028      	beq.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d121      	bne.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d11a      	bne.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800190c:	4013      	ands	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001912:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	3b01      	subs	r3, #1
 8001926:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d107      	bne.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0cc      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d90c      	bls.n	800198c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b65      	ldr	r3, [pc, #404]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	494d      	ldr	r1, [pc, #308]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d044      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d119      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e067      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4934      	ldr	r1, [pc, #208]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fa46 	bl	8000ed0 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff fa42 	bl	8000ed0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e04f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d20c      	bcs.n	8001a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e032      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4916      	ldr	r1, [pc, #88]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 f821 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	490a      	ldr	r1, [pc, #40]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	5ccb      	ldrb	r3, [r1, r3]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f83a 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08005d5c 	.word	0x08005d5c
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b20:	b094      	sub	sp, #80	; 0x50
 8001b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	647b      	str	r3, [r7, #68]	; 0x44
 8001b28:	2300      	movs	r3, #0
 8001b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b34:	4b79      	ldr	r3, [pc, #484]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d00d      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x40>
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	f200 80e1 	bhi.w	8001d08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b4e:	e0db      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b54:	e0db      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b5a:	e0d8      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b5c:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b66:	4b6d      	ldr	r3, [pc, #436]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d063      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	2200      	movs	r2, #0
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
 8001b8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b8e:	4622      	mov	r2, r4
 8001b90:	462b      	mov	r3, r5
 8001b92:	f04f 0000 	mov.w	r0, #0
 8001b96:	f04f 0100 	mov.w	r1, #0
 8001b9a:	0159      	lsls	r1, r3, #5
 8001b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba0:	0150      	lsls	r0, r2, #5
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	1a51      	subs	r1, r2, r1
 8001baa:	6139      	str	r1, [r7, #16]
 8001bac:	4629      	mov	r1, r5
 8001bae:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bc0:	4659      	mov	r1, fp
 8001bc2:	018b      	lsls	r3, r1, #6
 8001bc4:	4651      	mov	r1, sl
 8001bc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bca:	4651      	mov	r1, sl
 8001bcc:	018a      	lsls	r2, r1, #6
 8001bce:	4651      	mov	r1, sl
 8001bd0:	ebb2 0801 	subs.w	r8, r2, r1
 8001bd4:	4659      	mov	r1, fp
 8001bd6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bee:	4690      	mov	r8, r2
 8001bf0:	4699      	mov	r9, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	eb18 0303 	adds.w	r3, r8, r3
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	eb49 0303 	adc.w	r3, r9, r3
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c0e:	4629      	mov	r1, r5
 8001c10:	024b      	lsls	r3, r1, #9
 8001c12:	4621      	mov	r1, r4
 8001c14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c18:	4621      	mov	r1, r4
 8001c1a:	024a      	lsls	r2, r1, #9
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c22:	2200      	movs	r2, #0
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c2c:	f7fe fad8 	bl	80001e0 <__aeabi_uldivmod>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4613      	mov	r3, r2
 8001c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c38:	e058      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	099b      	lsrs	r3, r3, #6
 8001c40:	2200      	movs	r2, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	4611      	mov	r1, r2
 8001c46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c4a:	623b      	str	r3, [r7, #32]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c54:	4642      	mov	r2, r8
 8001c56:	464b      	mov	r3, r9
 8001c58:	f04f 0000 	mov.w	r0, #0
 8001c5c:	f04f 0100 	mov.w	r1, #0
 8001c60:	0159      	lsls	r1, r3, #5
 8001c62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c66:	0150      	lsls	r0, r2, #5
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c72:	4649      	mov	r1, r9
 8001c74:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c8c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c90:	eb63 050b 	sbc.w	r5, r3, fp
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	00eb      	lsls	r3, r5, #3
 8001c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ca2:	00e2      	lsls	r2, r4, #3
 8001ca4:	4614      	mov	r4, r2
 8001ca6:	461d      	mov	r5, r3
 8001ca8:	4643      	mov	r3, r8
 8001caa:	18e3      	adds	r3, r4, r3
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	464b      	mov	r3, r9
 8001cb0:	eb45 0303 	adc.w	r3, r5, r3
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	028b      	lsls	r3, r1, #10
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ccc:	4621      	mov	r1, r4
 8001cce:	028a      	lsls	r2, r1, #10
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	61fa      	str	r2, [r7, #28]
 8001cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce0:	f7fe fa7e 	bl	80001e0 <__aeabi_uldivmod>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	0c1b      	lsrs	r3, r3, #16
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d06:	e002      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3750      	adds	r7, #80	; 0x50
 8001d14:	46bd      	mov	sp, r7
 8001d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	00f42400 	.word	0x00f42400
 8001d24:	007a1200 	.word	0x007a1200

08001d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000000 	.word	0x20000000

08001d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d44:	f7ff fff0 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	0a9b      	lsrs	r3, r3, #10
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4903      	ldr	r1, [pc, #12]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	08005d6c 	.word	0x08005d6c

08001d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d6c:	f7ff ffdc 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0b5b      	lsrs	r3, r3, #13
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4903      	ldr	r1, [pc, #12]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	08005d6c 	.word	0x08005d6c

08001d90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_RCC_GetClockConfig+0x60>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0207 	and.w	r2, r3, #7
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e041      	b.n	8001e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f839 	bl	8001e92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f000 f9ca 	bl	80021cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d001      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e044      	b.n	8001f4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d018      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x6c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eea:	d013      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x6c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <HAL_TIM_Base_Start_IT+0xb4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00e      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x6c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <HAL_TIM_Base_Start_IT+0xb8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x6c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x6c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d111      	bne.n	8001f38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d010      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f36:	e007      	b.n	8001f48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40000800 	.word	0x40000800
 8001f64:	40000c00 	.word	0x40000c00
 8001f68:	40014000 	.word	0x40014000

08001f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0202 	mvn.w	r2, #2
 8001f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8ee 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8e0 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8f1 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0204 	mvn.w	r2, #4
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8c4 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8b6 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8c7 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b08      	cmp	r3, #8
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b08      	cmp	r3, #8
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0208 	mvn.w	r2, #8
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2204      	movs	r2, #4
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f89a 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f88c 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f89d 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b10      	cmp	r3, #16
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b10      	cmp	r3, #16
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0210 	mvn.w	r2, #16
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2208      	movs	r2, #8
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f870 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f862 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f873 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0201 	mvn.w	r2, #1
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fcb4 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	2b80      	cmp	r3, #128	; 0x80
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002108:	2b80      	cmp	r3, #128	; 0x80
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8e2 	bl	80022e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d107      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f838 	bl	80021b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b20      	cmp	r3, #32
 8002154:	d10e      	bne.n	8002174 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b20      	cmp	r3, #32
 8002162:	d107      	bne.n	8002174 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0220 	mvn.w	r2, #32
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8ac 	bl	80022cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a34      	ldr	r2, [pc, #208]	; (80022b0 <TIM_Base_SetConfig+0xe4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00f      	beq.n	8002204 <TIM_Base_SetConfig+0x38>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d00b      	beq.n	8002204 <TIM_Base_SetConfig+0x38>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a31      	ldr	r2, [pc, #196]	; (80022b4 <TIM_Base_SetConfig+0xe8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d007      	beq.n	8002204 <TIM_Base_SetConfig+0x38>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a30      	ldr	r2, [pc, #192]	; (80022b8 <TIM_Base_SetConfig+0xec>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <TIM_Base_SetConfig+0x38>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <TIM_Base_SetConfig+0xf0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d108      	bne.n	8002216 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a25      	ldr	r2, [pc, #148]	; (80022b0 <TIM_Base_SetConfig+0xe4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01b      	beq.n	8002256 <TIM_Base_SetConfig+0x8a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d017      	beq.n	8002256 <TIM_Base_SetConfig+0x8a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a22      	ldr	r2, [pc, #136]	; (80022b4 <TIM_Base_SetConfig+0xe8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <TIM_Base_SetConfig+0x8a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <TIM_Base_SetConfig+0xec>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00f      	beq.n	8002256 <TIM_Base_SetConfig+0x8a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a20      	ldr	r2, [pc, #128]	; (80022bc <TIM_Base_SetConfig+0xf0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00b      	beq.n	8002256 <TIM_Base_SetConfig+0x8a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <TIM_Base_SetConfig+0xf4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <TIM_Base_SetConfig+0x8a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <TIM_Base_SetConfig+0xf8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d003      	beq.n	8002256 <TIM_Base_SetConfig+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <TIM_Base_SetConfig+0xfc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d108      	bne.n	8002268 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800225c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <TIM_Base_SetConfig+0xe4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d103      	bne.n	800229c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	615a      	str	r2, [r3, #20]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40000800 	.word	0x40000800
 80022bc:	40000c00 	.word	0x40000c00
 80022c0:	40014000 	.word	0x40014000
 80022c4:	40014400 	.word	0x40014400
 80022c8:	40014800 	.word	0x40014800

080022cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e03f      	b.n	8002386 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe fbe0 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f929 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800234c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800235c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800236c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b08a      	sub	sp, #40	; 0x28
 8002392:	af02      	add	r7, sp, #8
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d17c      	bne.n	80024a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_UART_Transmit+0x2c>
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e075      	b.n	80024aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_UART_Transmit+0x3e>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e06e      	b.n	80024aa <HAL_UART_Transmit+0x11c>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2221      	movs	r2, #33	; 0x21
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e2:	f7fe fd75 	bl	8000ed0 <HAL_GetTick>
 80023e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fc:	d108      	bne.n	8002410 <HAL_UART_Transmit+0x82>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	e003      	b.n	8002418 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002420:	e02a      	b.n	8002478 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2200      	movs	r2, #0
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f840 	bl	80024b2 <UART_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e036      	b.n	80024aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10b      	bne.n	800245a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002450:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3302      	adds	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	e007      	b.n	800246a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	3301      	adds	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1cf      	bne.n	8002422 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f810 	bl	80024b2 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e006      	b.n	80024aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b090      	sub	sp, #64	; 0x40
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c2:	e050      	b.n	8002566 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d04c      	beq.n	8002566 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80024d2:	f7fe fcfd 	bl	8000ed0 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024de:	429a      	cmp	r2, r3
 80024e0:	d241      	bcs.n	8002566 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	330c      	adds	r3, #12
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	330c      	adds	r3, #12
 8002500:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002502:	637a      	str	r2, [r7, #52]	; 0x34
 8002504:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e5      	bne.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	613b      	str	r3, [r7, #16]
   return(result);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	63bb      	str	r3, [r7, #56]	; 0x38
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3314      	adds	r3, #20
 8002534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002536:	623a      	str	r2, [r7, #32]
 8002538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253a:	69f9      	ldr	r1, [r7, #28]
 800253c:	6a3a      	ldr	r2, [r7, #32]
 800253e:	e841 2300 	strex	r3, r2, [r1]
 8002542:	61bb      	str	r3, [r7, #24]
   return(result);
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e5      	bne.n	8002516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e00f      	b.n	8002586 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4013      	ands	r3, r2
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	429a      	cmp	r2, r3
 8002582:	d09f      	beq.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3740      	adds	r7, #64	; 0x40
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b0c0      	sub	sp, #256	; 0x100
 8002596:	af00      	add	r7, sp, #0
 8002598:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	ea40 0301 	orr.w	r3, r0, r1
 80025b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025e8:	f021 010c 	bic.w	r1, r1, #12
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025f6:	430b      	orrs	r3, r1
 80025f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	6999      	ldr	r1, [r3, #24]
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	ea40 0301 	orr.w	r3, r0, r1
 8002616:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b8f      	ldr	r3, [pc, #572]	; (800285c <UART_SetConfig+0x2cc>)
 8002620:	429a      	cmp	r2, r3
 8002622:	d005      	beq.n	8002630 <UART_SetConfig+0xa0>
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b8d      	ldr	r3, [pc, #564]	; (8002860 <UART_SetConfig+0x2d0>)
 800262c:	429a      	cmp	r2, r3
 800262e:	d104      	bne.n	800263a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002630:	f7ff fb9a 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8002634:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002638:	e003      	b.n	8002642 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800263a:	f7ff fb81 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 800263e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264c:	f040 810c 	bne.w	8002868 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002654:	2200      	movs	r2, #0
 8002656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800265a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800265e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002662:	4622      	mov	r2, r4
 8002664:	462b      	mov	r3, r5
 8002666:	1891      	adds	r1, r2, r2
 8002668:	65b9      	str	r1, [r7, #88]	; 0x58
 800266a:	415b      	adcs	r3, r3
 800266c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800266e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002672:	4621      	mov	r1, r4
 8002674:	eb12 0801 	adds.w	r8, r2, r1
 8002678:	4629      	mov	r1, r5
 800267a:	eb43 0901 	adc.w	r9, r3, r1
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800268a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800268e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002692:	4690      	mov	r8, r2
 8002694:	4699      	mov	r9, r3
 8002696:	4623      	mov	r3, r4
 8002698:	eb18 0303 	adds.w	r3, r8, r3
 800269c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026a0:	462b      	mov	r3, r5
 80026a2:	eb49 0303 	adc.w	r3, r9, r3
 80026a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026be:	460b      	mov	r3, r1
 80026c0:	18db      	adds	r3, r3, r3
 80026c2:	653b      	str	r3, [r7, #80]	; 0x50
 80026c4:	4613      	mov	r3, r2
 80026c6:	eb42 0303 	adc.w	r3, r2, r3
 80026ca:	657b      	str	r3, [r7, #84]	; 0x54
 80026cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026d4:	f7fd fd84 	bl	80001e0 <__aeabi_uldivmod>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4b61      	ldr	r3, [pc, #388]	; (8002864 <UART_SetConfig+0x2d4>)
 80026de:	fba3 2302 	umull	r2, r3, r3, r2
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	011c      	lsls	r4, r3, #4
 80026e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	1891      	adds	r1, r2, r2
 80026fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002700:	415b      	adcs	r3, r3
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002708:	4641      	mov	r1, r8
 800270a:	eb12 0a01 	adds.w	sl, r2, r1
 800270e:	4649      	mov	r1, r9
 8002710:	eb43 0b01 	adc.w	fp, r3, r1
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002720:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002728:	4692      	mov	sl, r2
 800272a:	469b      	mov	fp, r3
 800272c:	4643      	mov	r3, r8
 800272e:	eb1a 0303 	adds.w	r3, sl, r3
 8002732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002736:	464b      	mov	r3, r9
 8002738:	eb4b 0303 	adc.w	r3, fp, r3
 800273c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800274c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002750:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002754:	460b      	mov	r3, r1
 8002756:	18db      	adds	r3, r3, r3
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
 800275a:	4613      	mov	r3, r2
 800275c:	eb42 0303 	adc.w	r3, r2, r3
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
 8002762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002766:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800276a:	f7fd fd39 	bl	80001e0 <__aeabi_uldivmod>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4611      	mov	r1, r2
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <UART_SetConfig+0x2d4>)
 8002776:	fba3 2301 	umull	r2, r3, r3, r1
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2264      	movs	r2, #100	; 0x64
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	1acb      	subs	r3, r1, r3
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <UART_SetConfig+0x2d4>)
 800278c:	fba3 2302 	umull	r2, r3, r3, r2
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002798:	441c      	add	r4, r3
 800279a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027ac:	4642      	mov	r2, r8
 80027ae:	464b      	mov	r3, r9
 80027b0:	1891      	adds	r1, r2, r2
 80027b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80027b4:	415b      	adcs	r3, r3
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027bc:	4641      	mov	r1, r8
 80027be:	1851      	adds	r1, r2, r1
 80027c0:	6339      	str	r1, [r7, #48]	; 0x30
 80027c2:	4649      	mov	r1, r9
 80027c4:	414b      	adcs	r3, r1
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027d4:	4659      	mov	r1, fp
 80027d6:	00cb      	lsls	r3, r1, #3
 80027d8:	4651      	mov	r1, sl
 80027da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027de:	4651      	mov	r1, sl
 80027e0:	00ca      	lsls	r2, r1, #3
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	4642      	mov	r2, r8
 80027ea:	189b      	adds	r3, r3, r2
 80027ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027f0:	464b      	mov	r3, r9
 80027f2:	460a      	mov	r2, r1
 80027f4:	eb42 0303 	adc.w	r3, r2, r3
 80027f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002808:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800280c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002810:	460b      	mov	r3, r1
 8002812:	18db      	adds	r3, r3, r3
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
 8002816:	4613      	mov	r3, r2
 8002818:	eb42 0303 	adc.w	r3, r2, r3
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800281e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002822:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002826:	f7fd fcdb 	bl	80001e0 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <UART_SetConfig+0x2d4>)
 8002830:	fba3 1302 	umull	r1, r3, r3, r2
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	2164      	movs	r1, #100	; 0x64
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	3332      	adds	r3, #50	; 0x32
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <UART_SetConfig+0x2d4>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	f003 0207 	and.w	r2, r3, #7
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4422      	add	r2, r4
 8002856:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002858:	e106      	b.n	8002a68 <UART_SetConfig+0x4d8>
 800285a:	bf00      	nop
 800285c:	40011000 	.word	0x40011000
 8002860:	40011400 	.word	0x40011400
 8002864:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800286c:	2200      	movs	r2, #0
 800286e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002872:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002876:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800287a:	4642      	mov	r2, r8
 800287c:	464b      	mov	r3, r9
 800287e:	1891      	adds	r1, r2, r2
 8002880:	6239      	str	r1, [r7, #32]
 8002882:	415b      	adcs	r3, r3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800288a:	4641      	mov	r1, r8
 800288c:	1854      	adds	r4, r2, r1
 800288e:	4649      	mov	r1, r9
 8002890:	eb43 0501 	adc.w	r5, r3, r1
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	00eb      	lsls	r3, r5, #3
 800289e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a2:	00e2      	lsls	r2, r4, #3
 80028a4:	4614      	mov	r4, r2
 80028a6:	461d      	mov	r5, r3
 80028a8:	4643      	mov	r3, r8
 80028aa:	18e3      	adds	r3, r4, r3
 80028ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028b0:	464b      	mov	r3, r9
 80028b2:	eb45 0303 	adc.w	r3, r5, r3
 80028b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028d6:	4629      	mov	r1, r5
 80028d8:	008b      	lsls	r3, r1, #2
 80028da:	4621      	mov	r1, r4
 80028dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028e0:	4621      	mov	r1, r4
 80028e2:	008a      	lsls	r2, r1, #2
 80028e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028e8:	f7fd fc7a 	bl	80001e0 <__aeabi_uldivmod>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4b60      	ldr	r3, [pc, #384]	; (8002a74 <UART_SetConfig+0x4e4>)
 80028f2:	fba3 2302 	umull	r2, r3, r3, r2
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	011c      	lsls	r4, r3, #4
 80028fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002904:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002908:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800290c:	4642      	mov	r2, r8
 800290e:	464b      	mov	r3, r9
 8002910:	1891      	adds	r1, r2, r2
 8002912:	61b9      	str	r1, [r7, #24]
 8002914:	415b      	adcs	r3, r3
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291c:	4641      	mov	r1, r8
 800291e:	1851      	adds	r1, r2, r1
 8002920:	6139      	str	r1, [r7, #16]
 8002922:	4649      	mov	r1, r9
 8002924:	414b      	adcs	r3, r1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002934:	4659      	mov	r1, fp
 8002936:	00cb      	lsls	r3, r1, #3
 8002938:	4651      	mov	r1, sl
 800293a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293e:	4651      	mov	r1, sl
 8002940:	00ca      	lsls	r2, r1, #3
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	4603      	mov	r3, r0
 8002948:	4642      	mov	r2, r8
 800294a:	189b      	adds	r3, r3, r2
 800294c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002950:	464b      	mov	r3, r9
 8002952:	460a      	mov	r2, r1
 8002954:	eb42 0303 	adc.w	r3, r2, r3
 8002958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	67bb      	str	r3, [r7, #120]	; 0x78
 8002966:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002974:	4649      	mov	r1, r9
 8002976:	008b      	lsls	r3, r1, #2
 8002978:	4641      	mov	r1, r8
 800297a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800297e:	4641      	mov	r1, r8
 8002980:	008a      	lsls	r2, r1, #2
 8002982:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002986:	f7fd fc2b 	bl	80001e0 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4611      	mov	r1, r2
 8002990:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <UART_SetConfig+0x4e4>)
 8002992:	fba3 2301 	umull	r2, r3, r3, r1
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2264      	movs	r2, #100	; 0x64
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	1acb      	subs	r3, r1, r3
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	3332      	adds	r3, #50	; 0x32
 80029a4:	4a33      	ldr	r2, [pc, #204]	; (8002a74 <UART_SetConfig+0x4e4>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b0:	441c      	add	r4, r3
 80029b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029b6:	2200      	movs	r2, #0
 80029b8:	673b      	str	r3, [r7, #112]	; 0x70
 80029ba:	677a      	str	r2, [r7, #116]	; 0x74
 80029bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029c0:	4642      	mov	r2, r8
 80029c2:	464b      	mov	r3, r9
 80029c4:	1891      	adds	r1, r2, r2
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	415b      	adcs	r3, r3
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d0:	4641      	mov	r1, r8
 80029d2:	1851      	adds	r1, r2, r1
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	4649      	mov	r1, r9
 80029d8:	414b      	adcs	r3, r1
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029e8:	4659      	mov	r1, fp
 80029ea:	00cb      	lsls	r3, r1, #3
 80029ec:	4651      	mov	r1, sl
 80029ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029f2:	4651      	mov	r1, sl
 80029f4:	00ca      	lsls	r2, r1, #3
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	4642      	mov	r2, r8
 80029fe:	189b      	adds	r3, r3, r2
 8002a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a02:	464b      	mov	r3, r9
 8002a04:	460a      	mov	r2, r1
 8002a06:	eb42 0303 	adc.w	r3, r2, r3
 8002a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	663b      	str	r3, [r7, #96]	; 0x60
 8002a16:	667a      	str	r2, [r7, #100]	; 0x64
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a24:	4649      	mov	r1, r9
 8002a26:	008b      	lsls	r3, r1, #2
 8002a28:	4641      	mov	r1, r8
 8002a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a2e:	4641      	mov	r1, r8
 8002a30:	008a      	lsls	r2, r1, #2
 8002a32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a36:	f7fd fbd3 	bl	80001e0 <__aeabi_uldivmod>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <UART_SetConfig+0x4e4>)
 8002a40:	fba3 1302 	umull	r1, r3, r3, r2
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	2164      	movs	r1, #100	; 0x64
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	3332      	adds	r3, #50	; 0x32
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <UART_SetConfig+0x4e4>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	f003 020f 	and.w	r2, r3, #15
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4422      	add	r2, r4
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a74:	51eb851f 	.word	0x51eb851f

08002a78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a8a:	2b84      	cmp	r3, #132	; 0x84
 8002a8c:	d005      	beq.n	8002a9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002a8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4413      	add	r3, r2
 8002a96:	3303      	adds	r3, #3
 8002a98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aae:	f3ef 8305 	mrs	r3, IPSR
 8002ab2:	607b      	str	r3, [r7, #4]
  return(result);
 8002ab4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf14      	ite	ne
 8002aba:	2301      	movne	r3, #1
 8002abc:	2300      	moveq	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ad0:	f001 f926 	bl	8003d20 <vTaskStartScheduler>
  
  return osOK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002adc:	b089      	sub	sp, #36	; 0x24
 8002ade:	af04      	add	r7, sp, #16
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <osThreadCreate+0x54>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01c      	beq.n	8002b2e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685c      	ldr	r4, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691e      	ldr	r6, [r3, #16]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ffb6 	bl	8002a78 <makeFreeRtosPriority>
 8002b0c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b16:	9202      	str	r2, [sp, #8]
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	9100      	str	r1, [sp, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4632      	mov	r2, r6
 8002b20:	4629      	mov	r1, r5
 8002b22:	4620      	mov	r0, r4
 8002b24:	f000 ff1e 	bl	8003964 <xTaskCreateStatic>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e01c      	b.n	8002b68 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685c      	ldr	r4, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b3a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff98 	bl	8002a78 <makeFreeRtosPriority>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f107 030c 	add.w	r3, r7, #12
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	9200      	str	r2, [sp, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	4632      	mov	r2, r6
 8002b56:	4629      	mov	r1, r5
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f000 ff60 	bl	8003a1e <xTaskCreate>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d001      	beq.n	8002b68 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e000      	b.n	8002b6a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b68:	68fb      	ldr	r3, [r7, #12]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b72 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <osDelay+0x16>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	e000      	b.n	8002b8a <osDelay+0x18>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 f894 	bl	8003cb8 <vTaskDelay>
  
  return osOK;
 8002b90:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af02      	add	r7, sp, #8
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00f      	beq.n	8002bcc <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10a      	bne.n	8002bc8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	9200      	str	r2, [sp, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f000 f9be 	bl	8002f40 <xQueueGenericCreateStatic>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	e016      	b.n	8002bf6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e014      	b.n	8002bf6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d110      	bne.n	8002bf4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 fa2a 	bl	8003030 <xQueueGenericCreate>
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <osSemaphoreCreate+0x56>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 fa7a 	bl	80030e4 <xQueueGenericSend>
      return sema;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	e000      	b.n	8002bf6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002bf4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	e03a      	b.n	8002c8e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c22:	d103      	bne.n	8002c2c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e009      	b.n	8002c40 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <osSemaphoreWait+0x40>
      ticks = 1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002c40:	f7ff ff32 	bl	8002aa8 <inHandlerMode>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d017      	beq.n	8002c7a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2100      	movs	r1, #0
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fcde 	bl	8003614 <xQueueReceiveFromISR>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002c5e:	23ff      	movs	r3, #255	; 0xff
 8002c60:	e015      	b.n	8002c8e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d011      	beq.n	8002c8c <osSemaphoreWait+0x8c>
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <osSemaphoreWait+0x98>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	e008      	b.n	8002c8c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fbbd 	bl	80033fc <xQueueSemaphoreTake>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d001      	beq.n	8002c8c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002c88:	23ff      	movs	r3, #255	; 0xff
 8002c8a:	e000      	b.n	8002c8e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002cac:	f7ff fefc 	bl	8002aa8 <inHandlerMode>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fb0f 	bl	80032e0 <xQueueGiveFromISR>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d001      	beq.n	8002ccc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002cc8:	23ff      	movs	r3, #255	; 0xff
 8002cca:	e017      	b.n	8002cfc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d013      	beq.n	8002cfa <osSemaphoreRelease+0x5e>
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <osSemaphoreRelease+0x68>)
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	e00a      	b.n	8002cfa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f9fa 	bl	80030e4 <xQueueGenericSend>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002cf6:	23ff      	movs	r3, #255	; 0xff
 8002cf8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f103 0208 	add.w	r2, r3, #8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f103 0208 	add.w	r2, r3, #8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f103 0208 	add.w	r2, r3, #8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d62:	b480      	push	{r7}
 8002d64:	b085      	sub	sp, #20
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	601a      	str	r2, [r3, #0]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d103      	bne.n	8002dca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e00c      	b.n	8002de4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e002      	b.n	8002dd8 <vListInsert+0x2e>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d2f6      	bcs.n	8002dd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	601a      	str	r2, [r3, #0]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6852      	ldr	r2, [r2, #4]
 8002e3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d103      	bne.n	8002e50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	1e5a      	subs	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e9a:	f001 fea3 	bl	8004be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	441a      	add	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	441a      	add	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	22ff      	movs	r2, #255	; 0xff
 8002ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	22ff      	movs	r2, #255	; 0xff
 8002ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d01a      	beq.n	8002f2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3310      	adds	r3, #16
 8002efc:	4618      	mov	r0, r3
 8002efe:	f001 f961 	bl	80041c4 <xTaskRemoveFromEventList>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d012      	beq.n	8002f2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <xQueueGenericReset+0xcc>)
 8002f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	e009      	b.n	8002f2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3310      	adds	r3, #16
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fef2 	bl	8002d08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3324      	adds	r3, #36	; 0x24
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff feed 	bl	8002d08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f2e:	f001 fe89 	bl	8004c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f32:	2301      	movs	r3, #1
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08e      	sub	sp, #56	; 0x38
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f66:	bf00      	nop
 8002f68:	e7fe      	b.n	8002f68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <xQueueGenericCreateStatic+0x52>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <xQueueGenericCreateStatic+0x56>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <xQueueGenericCreateStatic+0x58>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	623b      	str	r3, [r7, #32]
}
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <xQueueGenericCreateStatic+0x7e>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <xQueueGenericCreateStatic+0x82>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <xQueueGenericCreateStatic+0x84>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61fb      	str	r3, [r7, #28]
}
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fde:	2348      	movs	r3, #72	; 0x48
 8002fe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b48      	cmp	r3, #72	; 0x48
 8002fe6:	d00a      	beq.n	8002ffe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	61bb      	str	r3, [r7, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ffe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003012:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f83f 	bl	80030a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003028:	4618      	mov	r0, r3
 800302a:	3730      	adds	r7, #48	; 0x30
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	613b      	str	r3, [r7, #16]
}
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	3348      	adds	r3, #72	; 0x48
 8003068:	4618      	mov	r0, r3
 800306a:	f001 fedd 	bl	8004e28 <pvPortMalloc>
 800306e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d011      	beq.n	800309a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3348      	adds	r3, #72	; 0x48
 800307e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003088:	79fa      	ldrb	r2, [r7, #7]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	4613      	mov	r3, r2
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f805 	bl	80030a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800309a:	69bb      	ldr	r3, [r7, #24]
	}
 800309c:	4618      	mov	r0, r3
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e002      	b.n	80030c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030d2:	2101      	movs	r1, #1
 80030d4:	69b8      	ldr	r0, [r7, #24]
 80030d6:	f7ff fecb 	bl	8002e70 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xQueueGenericSend+0x32>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <xQueueGenericSend+0x40>
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <xQueueGenericSend+0x44>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <xQueueGenericSend+0x46>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <xQueueGenericSend+0x60>
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d103      	bne.n	8003152 <xQueueGenericSend+0x6e>
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <xQueueGenericSend+0x72>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <xQueueGenericSend+0x74>
 8003156:	2300      	movs	r3, #0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <xQueueGenericSend+0x8e>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	623b      	str	r3, [r7, #32]
}
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003172:	f001 f9e7 	bl	8004544 <xTaskGetSchedulerState>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <xQueueGenericSend+0x9e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <xQueueGenericSend+0xa2>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <xQueueGenericSend+0xa4>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	61fb      	str	r3, [r7, #28]
}
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031a2:	f001 fd1f 	bl	8004be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d302      	bcc.n	80031b8 <xQueueGenericSend+0xd4>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d129      	bne.n	800320c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031be:	f000 fac1 	bl	8003744 <prvCopyDataToQueue>
 80031c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	3324      	adds	r3, #36	; 0x24
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fff7 	bl	80041c4 <xTaskRemoveFromEventList>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d013      	beq.n	8003204 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80031dc:	4b3f      	ldr	r3, [pc, #252]	; (80032dc <xQueueGenericSend+0x1f8>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	e00a      	b.n	8003204 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80031f4:	4b39      	ldr	r3, [pc, #228]	; (80032dc <xQueueGenericSend+0x1f8>)
 80031f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003204:	f001 fd1e 	bl	8004c44 <vPortExitCritical>
				return pdPASS;
 8003208:	2301      	movs	r3, #1
 800320a:	e063      	b.n	80032d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003212:	f001 fd17 	bl	8004c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003216:	2300      	movs	r3, #0
 8003218:	e05c      	b.n	80032d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	4618      	mov	r0, r3
 8003226:	f001 f82f 	bl	8004288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800322a:	2301      	movs	r3, #1
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800322e:	f001 fd09 	bl	8004c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003232:	f000 fddf 	bl	8003df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003236:	f001 fcd5 	bl	8004be4 <vPortEnterCritical>
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003240:	b25b      	sxtb	r3, r3
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d103      	bne.n	8003250 <xQueueGenericSend+0x16c>
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003256:	b25b      	sxtb	r3, r3
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d103      	bne.n	8003266 <xQueueGenericSend+0x182>
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003266:	f001 fced 	bl	8004c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800326a:	1d3a      	adds	r2, r7, #4
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f001 f81e 	bl	80042b4 <xTaskCheckForTimeOut>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d124      	bne.n	80032c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800327e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003280:	f000 fb58 	bl	8003934 <prvIsQueueFull>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d018      	beq.n	80032bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	3310      	adds	r3, #16
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 ff72 	bl	800417c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800329a:	f000 fae3 	bl	8003864 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800329e:	f000 fdb7 	bl	8003e10 <xTaskResumeAll>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f47f af7c 	bne.w	80031a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <xQueueGenericSend+0x1f8>)
 80032ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	e772      	b.n	80031a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032be:	f000 fad1 	bl	8003864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032c2:	f000 fda5 	bl	8003e10 <xTaskResumeAll>
 80032c6:	e76c      	b.n	80031a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ca:	f000 facb 	bl	8003864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032ce:	f000 fd9f 	bl	8003e10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3738      	adds	r7, #56	; 0x38
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	e000ed04 	.word	0xe000ed04

080032e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08e      	sub	sp, #56	; 0x38
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xQueueGiveFromISR+0x2a>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	623b      	str	r3, [r7, #32]
}
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	61fb      	str	r3, [r7, #28]
}
 8003324:	bf00      	nop
 8003326:	e7fe      	b.n	8003326 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d103      	bne.n	8003338 <xQueueGiveFromISR+0x58>
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <xQueueGiveFromISR+0x5c>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <xQueueGiveFromISR+0x5e>
 800333c:	2300      	movs	r3, #0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	61bb      	str	r3, [r7, #24]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003358:	f001 fd26 	bl	8004da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800335c:	f3ef 8211 	mrs	r2, BASEPRI
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	617a      	str	r2, [r7, #20]
 8003372:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003374:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003384:	429a      	cmp	r2, r3
 8003386:	d22b      	bcs.n	80033e0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800338e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800339a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d112      	bne.n	80033ca <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d016      	beq.n	80033da <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	3324      	adds	r3, #36	; 0x24
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 ff07 	bl	80041c4 <xTaskRemoveFromEventList>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e007      	b.n	80033da <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ce:	3301      	adds	r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	b25a      	sxtb	r2, r3
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80033da:	2301      	movs	r3, #1
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
 80033de:	e001      	b.n	80033e4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3738      	adds	r7, #56	; 0x38
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08e      	sub	sp, #56	; 0x38
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003406:	2300      	movs	r3, #0
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	623b      	str	r3, [r7, #32]
}
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	61fb      	str	r3, [r7, #28]
}
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800344c:	f001 f87a 	bl	8004544 <xTaskGetSchedulerState>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <xQueueSemaphoreTake+0x60>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <xQueueSemaphoreTake+0x64>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <xQueueSemaphoreTake+0x66>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	61bb      	str	r3, [r7, #24]
}
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800347c:	f001 fbb2 	bl	8004be4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d024      	beq.n	80034d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	1e5a      	subs	r2, r3, #1
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d104      	bne.n	80034a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800349c:	f001 f9fa 	bl	8004894 <pvTaskIncrementMutexHeldCount>
 80034a0:	4602      	mov	r2, r0
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00f      	beq.n	80034ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	3310      	adds	r3, #16
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fe86 	bl	80041c4 <xTaskRemoveFromEventList>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80034be:	4b54      	ldr	r3, [pc, #336]	; (8003610 <xQueueSemaphoreTake+0x214>)
 80034c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034ce:	f001 fbb9 	bl	8004c44 <vPortExitCritical>
				return pdPASS;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e097      	b.n	8003606 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d111      	bne.n	8003500 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	617b      	str	r3, [r7, #20]
}
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80034f8:	f001 fba4 	bl	8004c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e082      	b.n	8003606 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	4618      	mov	r0, r3
 800350c:	f000 febc 	bl	8004288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003514:	f001 fb96 	bl	8004c44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003518:	f000 fc6c 	bl	8003df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800351c:	f001 fb62 	bl	8004be4 <vPortEnterCritical>
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003526:	b25b      	sxtb	r3, r3
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d103      	bne.n	8003536 <xQueueSemaphoreTake+0x13a>
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800353c:	b25b      	sxtb	r3, r3
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d103      	bne.n	800354c <xQueueSemaphoreTake+0x150>
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800354c:	f001 fb7a 	bl	8004c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003550:	463a      	mov	r2, r7
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f000 feab 	bl	80042b4 <xTaskCheckForTimeOut>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d132      	bne.n	80035ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003566:	f000 f9cf 	bl	8003908 <prvIsQueueEmpty>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d026      	beq.n	80035be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003578:	f001 fb34 	bl	8004be4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fffd 	bl	8004580 <xTaskPriorityInherit>
 8003586:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003588:	f001 fb5c 	bl	8004c44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	3324      	adds	r3, #36	; 0x24
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fdf1 	bl	800417c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800359a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800359c:	f000 f962 	bl	8003864 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035a0:	f000 fc36 	bl	8003e10 <xTaskResumeAll>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f47f af68 	bne.w	800347c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80035ac:	4b18      	ldr	r3, [pc, #96]	; (8003610 <xQueueSemaphoreTake+0x214>)
 80035ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	e75e      	b.n	800347c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80035be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035c0:	f000 f950 	bl	8003864 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035c4:	f000 fc24 	bl	8003e10 <xTaskResumeAll>
 80035c8:	e758      	b.n	800347c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80035ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035cc:	f000 f94a 	bl	8003864 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035d0:	f000 fc1e 	bl	8003e10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035d6:	f000 f997 	bl	8003908 <prvIsQueueEmpty>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f43f af4d 	beq.w	800347c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80035e8:	f001 fafc 	bl	8004be4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ee:	f000 f891 	bl	8003714 <prvGetDisinheritPriorityAfterTimeout>
 80035f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 f8bc 	bl	8004778 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003600:	f001 fb20 	bl	8004c44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003606:	4618      	mov	r0, r3
 8003608:	3738      	adds	r7, #56	; 0x38
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	e000ed04 	.word	0xe000ed04

08003614 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	623b      	str	r3, [r7, #32]
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <xQueueReceiveFromISR+0x3a>
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <xQueueReceiveFromISR+0x3e>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <xQueueReceiveFromISR+0x40>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	61fb      	str	r3, [r7, #28]
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800366e:	f001 fb9b 	bl	8004da8 <vPortValidateInterruptPriority>
	__asm volatile
 8003672:	f3ef 8211 	mrs	r2, BASEPRI
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	61ba      	str	r2, [r7, #24]
 8003688:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800368a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02f      	beq.n	80036fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036a8:	f000 f8b6 	bl	8003818 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	1e5a      	subs	r2, r3, #1
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80036b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d112      	bne.n	80036e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	3310      	adds	r3, #16
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fd7a 	bl	80041c4 <xTaskRemoveFromEventList>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00e      	beq.n	80036f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e007      	b.n	80036f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80036e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e8:	3301      	adds	r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	b25a      	sxtb	r2, r3
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80036f4:	2301      	movs	r3, #1
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
 80036f8:	e001      	b.n	80036fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f383 8811 	msr	BASEPRI, r3
}
 8003708:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800370c:	4618      	mov	r0, r3
 800370e:	3738      	adds	r7, #56	; 0x38
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d006      	beq.n	8003732 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1c3 0307 	rsb	r3, r3, #7
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e001      	b.n	8003736 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003736:	68fb      	ldr	r3, [r7, #12]
	}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d14d      	bne.n	8003806 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 ff7c 	bl	800466c <xTaskPriorityDisinherit>
 8003774:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	e043      	b.n	8003806 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d119      	bne.n	80037b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6858      	ldr	r0, [r3, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	461a      	mov	r2, r3
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	f001 ffe8 	bl	8005764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	441a      	add	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d32b      	bcc.n	8003806 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	e026      	b.n	8003806 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68d8      	ldr	r0, [r3, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	461a      	mov	r2, r3
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	f001 ffce 	bl	8005764 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	425b      	negs	r3, r3
 80037d2:	441a      	add	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d207      	bcs.n	80037f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	425b      	negs	r3, r3
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d105      	bne.n	8003806 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	3b01      	subs	r3, #1
 8003804:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800380e:	697b      	ldr	r3, [r7, #20]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d018      	beq.n	800385c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	441a      	add	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	d303      	bcc.n	800384c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68d9      	ldr	r1, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	461a      	mov	r2, r3
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	f001 ff84 	bl	8005764 <memcpy>
	}
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800386c:	f001 f9ba 	bl	8004be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003876:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003878:	e011      	b.n	800389e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b00      	cmp	r3, #0
 8003880:	d012      	beq.n	80038a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3324      	adds	r3, #36	; 0x24
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fc9c 	bl	80041c4 <xTaskRemoveFromEventList>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003892:	f000 fd71 	bl	8004378 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	3b01      	subs	r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800389e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	dce9      	bgt.n	800387a <prvUnlockQueue+0x16>
 80038a6:	e000      	b.n	80038aa <prvUnlockQueue+0x46>
					break;
 80038a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	22ff      	movs	r2, #255	; 0xff
 80038ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038b2:	f001 f9c7 	bl	8004c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038b6:	f001 f995 	bl	8004be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038c2:	e011      	b.n	80038e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d012      	beq.n	80038f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3310      	adds	r3, #16
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fc77 	bl	80041c4 <xTaskRemoveFromEventList>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038dc:	f000 fd4c 	bl	8004378 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038e0:	7bbb      	ldrb	r3, [r7, #14]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	dce9      	bgt.n	80038c4 <prvUnlockQueue+0x60>
 80038f0:	e000      	b.n	80038f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	22ff      	movs	r2, #255	; 0xff
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038fc:	f001 f9a2 	bl	8004c44 <vPortExitCritical>
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003910:	f001 f968 	bl	8004be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800391c:	2301      	movs	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	e001      	b.n	8003926 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003926:	f001 f98d 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 800392a:	68fb      	ldr	r3, [r7, #12]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800393c:	f001 f952 	bl	8004be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	429a      	cmp	r2, r3
 800394a:	d102      	bne.n	8003952 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	e001      	b.n	8003956 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003956:	f001 f975 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08e      	sub	sp, #56	; 0x38
 8003968:	af04      	add	r7, sp, #16
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	623b      	str	r3, [r7, #32]
}
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xTaskCreateStatic+0x46>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	61fb      	str	r3, [r7, #28]
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039aa:	23a0      	movs	r3, #160	; 0xa0
 80039ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2ba0      	cmp	r3, #160	; 0xa0
 80039b2:	d00a      	beq.n	80039ca <xTaskCreateStatic+0x66>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	61bb      	str	r3, [r7, #24]
}
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01e      	beq.n	8003a10 <xTaskCreateStatic+0xac>
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01b      	beq.n	8003a10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039ea:	2300      	movs	r3, #0
 80039ec:	9303      	str	r3, [sp, #12]
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	9302      	str	r3, [sp, #8]
 80039f2:	f107 0314 	add.w	r3, r7, #20
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f850 	bl	8003aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a0a:	f000 f8eb 	bl	8003be4 <prvAddNewTaskToReadyList>
 8003a0e:	e001      	b.n	8003a14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a14:	697b      	ldr	r3, [r7, #20]
	}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08c      	sub	sp, #48	; 0x30
 8003a22:	af04      	add	r7, sp, #16
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 f9f8 	bl	8004e28 <pvPortMalloc>
 8003a38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00e      	beq.n	8003a5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a40:	20a0      	movs	r0, #160	; 0xa0
 8003a42:	f001 f9f1 	bl	8004e28 <pvPortMalloc>
 8003a46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
 8003a54:	e005      	b.n	8003a62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f001 fab2 	bl	8004fc0 <vPortFree>
 8003a5c:	e001      	b.n	8003a62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d017      	beq.n	8003a98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9303      	str	r3, [sp, #12]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	9302      	str	r3, [sp, #8]
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f80e 	bl	8003aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a8c:	69f8      	ldr	r0, [r7, #28]
 8003a8e:	f000 f8a9 	bl	8003be4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e002      	b.n	8003a9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
	}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3720      	adds	r7, #32
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	617b      	str	r3, [r7, #20]
}
 8003aec:	bf00      	nop
 8003aee:	e7fe      	b.n	8003aee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01f      	beq.n	8003b36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e012      	b.n	8003b22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	7819      	ldrb	r1, [r3, #0]
 8003b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3334      	adds	r3, #52	; 0x34
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d006      	beq.n	8003b2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	2b0f      	cmp	r3, #15
 8003b26:	d9e9      	bls.n	8003afc <prvInitialiseNewTask+0x54>
 8003b28:	e000      	b.n	8003b2c <prvInitialiseNewTask+0x84>
			{
				break;
 8003b2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b34:	e003      	b.n	8003b3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	2b06      	cmp	r3, #6
 8003b42:	d901      	bls.n	8003b48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b44:	2306      	movs	r3, #6
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	2200      	movs	r2, #0
 8003b58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff f8f2 	bl	8002d48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	3318      	adds	r3, #24
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff f8ed 	bl	8002d48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	f1c3 0207 	rsb	r2, r3, #7
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	334c      	adds	r3, #76	; 0x4c
 8003b98:	224c      	movs	r2, #76	; 0x4c
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 fd11 	bl	80055c4 <memset>
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <prvInitialiseNewTask+0x130>)
 8003ba6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	4a0c      	ldr	r2, [pc, #48]	; (8003bdc <prvInitialiseNewTask+0x134>)
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	4a0b      	ldr	r2, [pc, #44]	; (8003be0 <prvInitialiseNewTask+0x138>)
 8003bb2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	69b8      	ldr	r0, [r7, #24]
 8003bba:	f000 fee5 	bl	8004988 <pxPortInitialiseStack>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bd0:	bf00      	nop
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20004124 	.word	0x20004124
 8003bdc:	2000418c 	.word	0x2000418c
 8003be0:	200041f4 	.word	0x200041f4

08003be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bec:	f000 fffa 	bl	8004be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bf0:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <prvAddNewTaskToReadyList+0xb8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <prvAddNewTaskToReadyList+0xb8>)
 8003bf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bfa:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c02:	4a27      	ldr	r2, [pc, #156]	; (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c08:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <prvAddNewTaskToReadyList+0xb8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d110      	bne.n	8003c32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c10:	f000 fbd6 	bl	80043c0 <prvInitialiseTaskLists>
 8003c14:	e00d      	b.n	8003c32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c16:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <prvAddNewTaskToReadyList+0xc0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d802      	bhi.n	8003c32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c32:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <prvAddNewTaskToReadyList+0xc4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <prvAddNewTaskToReadyList+0xc4>)
 8003c3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	2201      	movs	r2, #1
 8003c42:	409a      	lsls	r2, r3
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <prvAddNewTaskToReadyList+0xc8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	4a18      	ldr	r2, [pc, #96]	; (8003cac <prvAddNewTaskToReadyList+0xc8>)
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <prvAddNewTaskToReadyList+0xcc>)
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f7ff f87c 	bl	8002d62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c6a:	f000 ffeb 	bl	8004c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <prvAddNewTaskToReadyList+0xc0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00e      	beq.n	8003c94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d207      	bcs.n	8003c94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <prvAddNewTaskToReadyList+0xd0>)
 8003c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	200004d0 	.word	0x200004d0
 8003ca0:	200003d0 	.word	0x200003d0
 8003ca4:	200004dc 	.word	0x200004dc
 8003ca8:	200004ec 	.word	0x200004ec
 8003cac:	200004d8 	.word	0x200004d8
 8003cb0:	200003d4 	.word	0x200003d4
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d017      	beq.n	8003cfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cca:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <vTaskDelay+0x60>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <vTaskDelay+0x30>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60bb      	str	r3, [r7, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ce8:	f000 f884 	bl	8003df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cec:	2100      	movs	r1, #0
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fde4 	bl	80048bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cf4:	f000 f88c 	bl	8003e10 <xTaskResumeAll>
 8003cf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <vTaskDelay+0x64>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	200004f8 	.word	0x200004f8
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d2e:	463a      	mov	r2, r7
 8003d30:	1d39      	adds	r1, r7, #4
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fbd0 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	9202      	str	r2, [sp, #8]
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	460a      	mov	r2, r1
 8003d4e:	4921      	ldr	r1, [pc, #132]	; (8003dd4 <vTaskStartScheduler+0xb4>)
 8003d50:	4821      	ldr	r0, [pc, #132]	; (8003dd8 <vTaskStartScheduler+0xb8>)
 8003d52:	f7ff fe07 	bl	8003964 <xTaskCreateStatic>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <vTaskStartScheduler+0xbc>)
 8003d5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <vTaskStartScheduler+0xbc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d64:	2301      	movs	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e001      	b.n	8003d6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d11b      	bne.n	8003dac <vTaskStartScheduler+0x8c>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	613b      	str	r3, [r7, #16]
}
 8003d86:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <vTaskStartScheduler+0xc0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	334c      	adds	r3, #76	; 0x4c
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <vTaskStartScheduler+0xc4>)
 8003d90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <vTaskStartScheduler+0xc8>)
 8003d94:	f04f 32ff 	mov.w	r2, #4294967295
 8003d98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d9a:	4b14      	ldr	r3, [pc, #80]	; (8003dec <vTaskStartScheduler+0xcc>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <vTaskStartScheduler+0xd0>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003da6:	f000 fe7b 	bl	8004aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003daa:	e00e      	b.n	8003dca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d10a      	bne.n	8003dca <vTaskStartScheduler+0xaa>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	60fb      	str	r3, [r7, #12]
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <vTaskStartScheduler+0xa8>
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	08005d54 	.word	0x08005d54
 8003dd8:	08004391 	.word	0x08004391
 8003ddc:	200004f4 	.word	0x200004f4
 8003de0:	200003d0 	.word	0x200003d0
 8003de4:	20000068 	.word	0x20000068
 8003de8:	200004f0 	.word	0x200004f0
 8003dec:	200004dc 	.word	0x200004dc
 8003df0:	200004d4 	.word	0x200004d4

08003df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <vTaskSuspendAll+0x18>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	4a03      	ldr	r2, [pc, #12]	; (8003e0c <vTaskSuspendAll+0x18>)
 8003e00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	200004f8 	.word	0x200004f8

08003e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <xTaskResumeAll+0x114>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <xTaskResumeAll+0x2c>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	603b      	str	r3, [r7, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e3c:	f000 fed2 	bl	8004be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e40:	4b38      	ldr	r3, [pc, #224]	; (8003f24 <xTaskResumeAll+0x114>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	4a37      	ldr	r2, [pc, #220]	; (8003f24 <xTaskResumeAll+0x114>)
 8003e48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <xTaskResumeAll+0x114>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d161      	bne.n	8003f16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e52:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <xTaskResumeAll+0x118>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d05d      	beq.n	8003f16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e5a:	e02e      	b.n	8003eba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5c:	4b33      	ldr	r3, [pc, #204]	; (8003f2c <xTaskResumeAll+0x11c>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3318      	adds	r3, #24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe ffd7 	bl	8002e1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe ffd2 	bl	8002e1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <xTaskResumeAll+0x120>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <xTaskResumeAll+0x120>)
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <xTaskResumeAll+0x124>)
 8003e98:	441a      	add	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f7fe ff5e 	bl	8002d62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <xTaskResumeAll+0x128>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d302      	bcc.n	8003eba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003eb4:	4b21      	ldr	r3, [pc, #132]	; (8003f3c <xTaskResumeAll+0x12c>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eba:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <xTaskResumeAll+0x11c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1cc      	bne.n	8003e5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ec8:	f000 fb1c 	bl	8004504 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ecc:	4b1c      	ldr	r3, [pc, #112]	; (8003f40 <xTaskResumeAll+0x130>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ed8:	f000 f836 	bl	8003f48 <xTaskIncrementTick>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <xTaskResumeAll+0x12c>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f1      	bne.n	8003ed8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <xTaskResumeAll+0x130>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <xTaskResumeAll+0x12c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f02:	2301      	movs	r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <xTaskResumeAll+0x134>)
 8003f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f16:	f000 fe95 	bl	8004c44 <vPortExitCritical>

	return xAlreadyYielded;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200004f8 	.word	0x200004f8
 8003f28:	200004d0 	.word	0x200004d0
 8003f2c:	20000490 	.word	0x20000490
 8003f30:	200004d8 	.word	0x200004d8
 8003f34:	200003d4 	.word	0x200003d4
 8003f38:	200003d0 	.word	0x200003d0
 8003f3c:	200004e4 	.word	0x200004e4
 8003f40:	200004e0 	.word	0x200004e0
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f52:	4b4e      	ldr	r3, [pc, #312]	; (800408c <xTaskIncrementTick+0x144>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 808e 	bne.w	8004078 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f5c:	4b4c      	ldr	r3, [pc, #304]	; (8004090 <xTaskIncrementTick+0x148>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f64:	4a4a      	ldr	r2, [pc, #296]	; (8004090 <xTaskIncrementTick+0x148>)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d120      	bne.n	8003fb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f70:	4b48      	ldr	r3, [pc, #288]	; (8004094 <xTaskIncrementTick+0x14c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	603b      	str	r3, [r7, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	e7fe      	b.n	8003f8e <xTaskIncrementTick+0x46>
 8003f90:	4b40      	ldr	r3, [pc, #256]	; (8004094 <xTaskIncrementTick+0x14c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	4b40      	ldr	r3, [pc, #256]	; (8004098 <xTaskIncrementTick+0x150>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3e      	ldr	r2, [pc, #248]	; (8004094 <xTaskIncrementTick+0x14c>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4a3e      	ldr	r2, [pc, #248]	; (8004098 <xTaskIncrementTick+0x150>)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4b3d      	ldr	r3, [pc, #244]	; (800409c <xTaskIncrementTick+0x154>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	4a3c      	ldr	r2, [pc, #240]	; (800409c <xTaskIncrementTick+0x154>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	f000 faa9 	bl	8004504 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d348      	bcc.n	800404e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <xTaskIncrementTick+0x14c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	601a      	str	r2, [r3, #0]
					break;
 8003fce:	e03e      	b.n	800404e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <xTaskIncrementTick+0x14c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d203      	bcs.n	8003ff0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fe8:	4a2d      	ldr	r2, [pc, #180]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fee:	e02e      	b.n	800404e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe ff11 	bl	8002e1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3318      	adds	r3, #24
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe ff08 	bl	8002e1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <xTaskIncrementTick+0x15c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4313      	orrs	r3, r2
 800401a:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <xTaskIncrementTick+0x15c>)
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <xTaskIncrementTick+0x160>)
 800402c:	441a      	add	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3304      	adds	r3, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7fe fe94 	bl	8002d62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <xTaskIncrementTick+0x164>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	429a      	cmp	r2, r3
 8004046:	d3b9      	bcc.n	8003fbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800404c:	e7b6      	b.n	8003fbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <xTaskIncrementTick+0x164>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	4914      	ldr	r1, [pc, #80]	; (80040a8 <xTaskIncrementTick+0x160>)
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d901      	bls.n	800406a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004066:	2301      	movs	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <xTaskIncrementTick+0x168>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e004      	b.n	8004082 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <xTaskIncrementTick+0x16c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <xTaskIncrementTick+0x16c>)
 8004080:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004082:	697b      	ldr	r3, [r7, #20]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	200004f8 	.word	0x200004f8
 8004090:	200004d4 	.word	0x200004d4
 8004094:	20000488 	.word	0x20000488
 8004098:	2000048c 	.word	0x2000048c
 800409c:	200004e8 	.word	0x200004e8
 80040a0:	200004f0 	.word	0x200004f0
 80040a4:	200004d8 	.word	0x200004d8
 80040a8:	200003d4 	.word	0x200003d4
 80040ac:	200003d0 	.word	0x200003d0
 80040b0:	200004e4 	.word	0x200004e4
 80040b4:	200004e0 	.word	0x200004e0

080040b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040be:	4b29      	ldr	r3, [pc, #164]	; (8004164 <vTaskSwitchContext+0xac>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040c6:	4b28      	ldr	r3, [pc, #160]	; (8004168 <vTaskSwitchContext+0xb0>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040cc:	e044      	b.n	8004158 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80040ce:	4b26      	ldr	r3, [pc, #152]	; (8004168 <vTaskSwitchContext+0xb0>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <vTaskSwitchContext+0xb4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040e2:	7afb      	ldrb	r3, [r7, #11]
 80040e4:	f1c3 031f 	rsb	r3, r3, #31
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	4921      	ldr	r1, [pc, #132]	; (8004170 <vTaskSwitchContext+0xb8>)
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <vTaskSwitchContext+0x5c>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	607b      	str	r3, [r7, #4]
}
 8004110:	bf00      	nop
 8004112:	e7fe      	b.n	8004112 <vTaskSwitchContext+0x5a>
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4a14      	ldr	r2, [pc, #80]	; (8004170 <vTaskSwitchContext+0xb8>)
 8004120:	4413      	add	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	3308      	adds	r3, #8
 8004136:	429a      	cmp	r2, r3
 8004138:	d104      	bne.n	8004144 <vTaskSwitchContext+0x8c>
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <vTaskSwitchContext+0xbc>)
 800414c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <vTaskSwitchContext+0xbc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	334c      	adds	r3, #76	; 0x4c
 8004154:	4a08      	ldr	r2, [pc, #32]	; (8004178 <vTaskSwitchContext+0xc0>)
 8004156:	6013      	str	r3, [r2, #0]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	200004f8 	.word	0x200004f8
 8004168:	200004e4 	.word	0x200004e4
 800416c:	200004d8 	.word	0x200004d8
 8004170:	200003d4 	.word	0x200003d4
 8004174:	200003d0 	.word	0x200003d0
 8004178:	20000068 	.word	0x20000068

0800417c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	60fb      	str	r3, [r7, #12]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <vTaskPlaceOnEventList+0x44>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3318      	adds	r3, #24
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe fdfd 	bl	8002daa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041b0:	2101      	movs	r1, #1
 80041b2:	6838      	ldr	r0, [r7, #0]
 80041b4:	f000 fb82 	bl	80048bc <prvAddCurrentTaskToDelayedList>
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	200003d0 	.word	0x200003d0

080041c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	60fb      	str	r3, [r7, #12]
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	3318      	adds	r3, #24
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fe11 	bl	8002e1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041fa:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <xTaskRemoveFromEventList+0xac>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11c      	bne.n	800423c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fe08 	bl	8002e1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <xTaskRemoveFromEventList+0xb0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4313      	orrs	r3, r2
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <xTaskRemoveFromEventList+0xb0>)
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4a13      	ldr	r2, [pc, #76]	; (8004278 <xTaskRemoveFromEventList+0xb4>)
 800422c:	441a      	add	r2, r3
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7fe fd94 	bl	8002d62 <vListInsertEnd>
 800423a:	e005      	b.n	8004248 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	3318      	adds	r3, #24
 8004240:	4619      	mov	r1, r3
 8004242:	480e      	ldr	r0, [pc, #56]	; (800427c <xTaskRemoveFromEventList+0xb8>)
 8004244:	f7fe fd8d 	bl	8002d62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <xTaskRemoveFromEventList+0xbc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	429a      	cmp	r2, r3
 8004254:	d905      	bls.n	8004262 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <xTaskRemoveFromEventList+0xc0>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e001      	b.n	8004266 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004266:	697b      	ldr	r3, [r7, #20]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	200004f8 	.word	0x200004f8
 8004274:	200004d8 	.word	0x200004d8
 8004278:	200003d4 	.word	0x200003d4
 800427c:	20000490 	.word	0x20000490
 8004280:	200003d0 	.word	0x200003d0
 8004284:	200004e4 	.word	0x200004e4

08004288 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <vTaskInternalSetTimeOutState+0x24>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <vTaskInternalSetTimeOutState+0x28>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	605a      	str	r2, [r3, #4]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	200004e8 	.word	0x200004e8
 80042b0:	200004d4 	.word	0x200004d4

080042b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	613b      	str	r3, [r7, #16]
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	60fb      	str	r3, [r7, #12]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042f6:	f000 fc75 	bl	8004be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <xTaskCheckForTimeOut+0xbc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d102      	bne.n	800431a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004314:	2300      	movs	r3, #0
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	e023      	b.n	8004362 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <xTaskCheckForTimeOut+0xc0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d007      	beq.n	8004336 <xTaskCheckForTimeOut+0x82>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	429a      	cmp	r2, r3
 800432e:	d302      	bcc.n	8004336 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004330:	2301      	movs	r3, #1
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e015      	b.n	8004362 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	d20b      	bcs.n	8004358 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	1ad2      	subs	r2, r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ff9b 	bl	8004288 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e004      	b.n	8004362 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800435e:	2301      	movs	r3, #1
 8004360:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004362:	f000 fc6f 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 8004366:	69fb      	ldr	r3, [r7, #28]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200004d4 	.word	0x200004d4
 8004374:	200004e8 	.word	0x200004e8

08004378 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <vTaskMissedYield+0x14>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	200004e4 	.word	0x200004e4

08004390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004398:	f000 f852 	bl	8004440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <prvIdleTask+0x28>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d9f9      	bls.n	8004398 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <prvIdleTask+0x2c>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043b4:	e7f0      	b.n	8004398 <prvIdleTask+0x8>
 80043b6:	bf00      	nop
 80043b8:	200003d4 	.word	0x200003d4
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	e00c      	b.n	80043e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4a12      	ldr	r2, [pc, #72]	; (8004420 <prvInitialiseTaskLists+0x60>)
 80043d8:	4413      	add	r3, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fc94 	bl	8002d08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3301      	adds	r3, #1
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d9ef      	bls.n	80043cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043ec:	480d      	ldr	r0, [pc, #52]	; (8004424 <prvInitialiseTaskLists+0x64>)
 80043ee:	f7fe fc8b 	bl	8002d08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043f2:	480d      	ldr	r0, [pc, #52]	; (8004428 <prvInitialiseTaskLists+0x68>)
 80043f4:	f7fe fc88 	bl	8002d08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043f8:	480c      	ldr	r0, [pc, #48]	; (800442c <prvInitialiseTaskLists+0x6c>)
 80043fa:	f7fe fc85 	bl	8002d08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043fe:	480c      	ldr	r0, [pc, #48]	; (8004430 <prvInitialiseTaskLists+0x70>)
 8004400:	f7fe fc82 	bl	8002d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004404:	480b      	ldr	r0, [pc, #44]	; (8004434 <prvInitialiseTaskLists+0x74>)
 8004406:	f7fe fc7f 	bl	8002d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <prvInitialiseTaskLists+0x78>)
 800440c:	4a05      	ldr	r2, [pc, #20]	; (8004424 <prvInitialiseTaskLists+0x64>)
 800440e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <prvInitialiseTaskLists+0x7c>)
 8004412:	4a05      	ldr	r2, [pc, #20]	; (8004428 <prvInitialiseTaskLists+0x68>)
 8004414:	601a      	str	r2, [r3, #0]
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200003d4 	.word	0x200003d4
 8004424:	20000460 	.word	0x20000460
 8004428:	20000474 	.word	0x20000474
 800442c:	20000490 	.word	0x20000490
 8004430:	200004a4 	.word	0x200004a4
 8004434:	200004bc 	.word	0x200004bc
 8004438:	20000488 	.word	0x20000488
 800443c:	2000048c 	.word	0x2000048c

08004440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004446:	e019      	b.n	800447c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004448:	f000 fbcc 	bl	8004be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800444c:	4b10      	ldr	r3, [pc, #64]	; (8004490 <prvCheckTasksWaitingTermination+0x50>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe fcdf 	bl	8002e1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <prvCheckTasksWaitingTermination+0x54>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3b01      	subs	r3, #1
 8004464:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <prvCheckTasksWaitingTermination+0x54>)
 8004466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <prvCheckTasksWaitingTermination+0x58>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3b01      	subs	r3, #1
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <prvCheckTasksWaitingTermination+0x58>)
 8004470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004472:	f000 fbe7 	bl	8004c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f810 	bl	800449c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <prvCheckTasksWaitingTermination+0x58>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e1      	bne.n	8004448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	200004a4 	.word	0x200004a4
 8004494:	200004d0 	.word	0x200004d0
 8004498:	200004b8 	.word	0x200004b8

0800449c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	334c      	adds	r3, #76	; 0x4c
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 f8a3 	bl	80055f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d108      	bne.n	80044ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fd7f 	bl	8004fc0 <vPortFree>
				vPortFree( pxTCB );
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fd7c 	bl	8004fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044c8:	e018      	b.n	80044fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d103      	bne.n	80044dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fd73 	bl	8004fc0 <vPortFree>
	}
 80044da:	e00f      	b.n	80044fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d00a      	beq.n	80044fc <prvDeleteTCB+0x60>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	60fb      	str	r3, [r7, #12]
}
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <prvDeleteTCB+0x5e>
	}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <prvResetNextTaskUnblockTime+0x38>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <prvResetNextTaskUnblockTime+0x3c>)
 8004516:	f04f 32ff 	mov.w	r2, #4294967295
 800451a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800451c:	e008      	b.n	8004530 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <prvResetNextTaskUnblockTime+0x38>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a04      	ldr	r2, [pc, #16]	; (8004540 <prvResetNextTaskUnblockTime+0x3c>)
 800452e:	6013      	str	r3, [r2, #0]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	20000488 	.word	0x20000488
 8004540:	200004f0 	.word	0x200004f0

08004544 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <xTaskGetSchedulerState+0x34>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004552:	2301      	movs	r3, #1
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	e008      	b.n	800456a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004558:	4b08      	ldr	r3, [pc, #32]	; (800457c <xTaskGetSchedulerState+0x38>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d102      	bne.n	8004566 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004560:	2302      	movs	r3, #2
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	e001      	b.n	800456a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800456a:	687b      	ldr	r3, [r7, #4]
	}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	200004dc 	.word	0x200004dc
 800457c:	200004f8 	.word	0x200004f8

08004580 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d05e      	beq.n	8004654 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <xTaskPriorityInherit+0xe0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d24e      	bcs.n	8004642 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	db06      	blt.n	80045ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ac:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <xTaskPriorityInherit+0xe0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	f1c3 0207 	rsb	r2, r3, #7
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6959      	ldr	r1, [r3, #20]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4a26      	ldr	r2, [pc, #152]	; (8004664 <xTaskPriorityInherit+0xe4>)
 80045cc:	4413      	add	r3, r2
 80045ce:	4299      	cmp	r1, r3
 80045d0:	d12f      	bne.n	8004632 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fc20 	bl	8002e1c <uxListRemove>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	2201      	movs	r2, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43da      	mvns	r2, r3
 80045ee:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <xTaskPriorityInherit+0xe8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4013      	ands	r3, r2
 80045f4:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <xTaskPriorityInherit+0xe8>)
 80045f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <xTaskPriorityInherit+0xe0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	2201      	movs	r2, #1
 8004608:	409a      	lsls	r2, r3
 800460a:	4b17      	ldr	r3, [pc, #92]	; (8004668 <xTaskPriorityInherit+0xe8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4313      	orrs	r3, r2
 8004610:	4a15      	ldr	r2, [pc, #84]	; (8004668 <xTaskPriorityInherit+0xe8>)
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4a10      	ldr	r2, [pc, #64]	; (8004664 <xTaskPriorityInherit+0xe4>)
 8004622:	441a      	add	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7fe fb99 	bl	8002d62 <vListInsertEnd>
 8004630:	e004      	b.n	800463c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <xTaskPriorityInherit+0xe0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e008      	b.n	8004654 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <xTaskPriorityInherit+0xe0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	429a      	cmp	r2, r3
 800464e:	d201      	bcs.n	8004654 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004654:	68fb      	ldr	r3, [r7, #12]
	}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200003d0 	.word	0x200003d0
 8004664:	200003d4 	.word	0x200003d4
 8004668:	200004d8 	.word	0x200004d8

0800466c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d06e      	beq.n	8004760 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004682:	4b3a      	ldr	r3, [pc, #232]	; (800476c <xTaskPriorityDisinherit+0x100>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d00a      	beq.n	80046a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	60fb      	str	r3, [r7, #12]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	60bb      	str	r3, [r7, #8]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	1e5a      	subs	r2, r3, #1
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d044      	beq.n	8004760 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d140      	bne.n	8004760 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe fb9a 	bl	8002e1c <uxListRemove>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d115      	bne.n	800471a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f2:	491f      	ldr	r1, [pc, #124]	; (8004770 <xTaskPriorityDisinherit+0x104>)
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <xTaskPriorityDisinherit+0xae>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	2201      	movs	r2, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	4b18      	ldr	r3, [pc, #96]	; (8004774 <xTaskPriorityDisinherit+0x108>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4013      	ands	r3, r2
 8004716:	4a17      	ldr	r2, [pc, #92]	; (8004774 <xTaskPriorityDisinherit+0x108>)
 8004718:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	f1c3 0207 	rsb	r2, r3, #7
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	2201      	movs	r2, #1
 8004734:	409a      	lsls	r2, r3
 8004736:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <xTaskPriorityDisinherit+0x108>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4313      	orrs	r3, r2
 800473c:	4a0d      	ldr	r2, [pc, #52]	; (8004774 <xTaskPriorityDisinherit+0x108>)
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <xTaskPriorityDisinherit+0x104>)
 800474e:	441a      	add	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f7fe fb03 	bl	8002d62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004760:	697b      	ldr	r3, [r7, #20]
	}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	200003d0 	.word	0x200003d0
 8004770:	200003d4 	.word	0x200003d4
 8004774:	200004d8 	.word	0x200004d8

08004778 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004786:	2301      	movs	r3, #1
 8004788:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d077      	beq.n	8004880 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	60fb      	str	r3, [r7, #12]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d902      	bls.n	80047be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	e002      	b.n	80047c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d058      	beq.n	8004880 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d153      	bne.n	8004880 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d10a      	bne.n	80047f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	60bb      	str	r3, [r7, #8]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db04      	blt.n	8004816 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f1c3 0207 	rsb	r2, r3, #7
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6959      	ldr	r1, [r3, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4a19      	ldr	r2, [pc, #100]	; (800488c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004826:	4413      	add	r3, r2
 8004828:	4299      	cmp	r1, r3
 800482a:	d129      	bne.n	8004880 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	3304      	adds	r3, #4
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe faf3 	bl	8002e1c <uxListRemove>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	2201      	movs	r2, #1
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43da      	mvns	r2, r3
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4013      	ands	r3, r2
 800484e:	4a10      	ldr	r2, [pc, #64]	; (8004890 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004850:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	2201      	movs	r2, #1
 8004858:	409a      	lsls	r2, r3
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	4a0b      	ldr	r2, [pc, #44]	; (8004890 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4a06      	ldr	r2, [pc, #24]	; (800488c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004872:	441a      	add	r2, r3
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f7fe fa71 	bl	8002d62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004880:	bf00      	nop
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	200003d0 	.word	0x200003d0
 800488c:	200003d4 	.word	0x200003d4
 8004890:	200004d8 	.word	0x200004d8

08004894 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048a6:	3201      	adds	r2, #1
 80048a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80048aa:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80048ac:	681b      	ldr	r3, [r3, #0]
	}
 80048ae:	4618      	mov	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	200003d0 	.word	0x200003d0

080048bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048c6:	4b29      	ldr	r3, [pc, #164]	; (800496c <prvAddCurrentTaskToDelayedList+0xb0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048cc:	4b28      	ldr	r3, [pc, #160]	; (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe faa2 	bl	8002e1c <uxListRemove>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	2201      	movs	r2, #1
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43da      	mvns	r2, r3
 80048ec:	4b21      	ldr	r3, [pc, #132]	; (8004974 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4013      	ands	r3, r2
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d10a      	bne.n	8004914 <prvAddCurrentTaskToDelayedList+0x58>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004904:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	481a      	ldr	r0, [pc, #104]	; (8004978 <prvAddCurrentTaskToDelayedList+0xbc>)
 800490e:	f7fe fa28 	bl	8002d62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004912:	e026      	b.n	8004962 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	429a      	cmp	r2, r3
 800492a:	d209      	bcs.n	8004940 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800492c:	4b13      	ldr	r3, [pc, #76]	; (800497c <prvAddCurrentTaskToDelayedList+0xc0>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3304      	adds	r3, #4
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7fe fa36 	bl	8002daa <vListInsert>
}
 800493e:	e010      	b.n	8004962 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f7fe fa2c 	bl	8002daa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004952:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	429a      	cmp	r2, r3
 800495a:	d202      	bcs.n	8004962 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800495c:	4a09      	ldr	r2, [pc, #36]	; (8004984 <prvAddCurrentTaskToDelayedList+0xc8>)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6013      	str	r3, [r2, #0]
}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200004d4 	.word	0x200004d4
 8004970:	200003d0 	.word	0x200003d0
 8004974:	200004d8 	.word	0x200004d8
 8004978:	200004bc 	.word	0x200004bc
 800497c:	2000048c 	.word	0x2000048c
 8004980:	20000488 	.word	0x20000488
 8004984:	200004f0 	.word	0x200004f0

08004988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b04      	subs	r3, #4
 8004998:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3b04      	subs	r3, #4
 80049b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049b8:	4a0c      	ldr	r2, [pc, #48]	; (80049ec <pxPortInitialiseStack+0x64>)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b14      	subs	r3, #20
 80049c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3b04      	subs	r3, #4
 80049ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f06f 0202 	mvn.w	r2, #2
 80049d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3b20      	subs	r3, #32
 80049dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049de:	68fb      	ldr	r3, [r7, #12]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	080049f1 	.word	0x080049f1

080049f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <prvTaskExitError+0x54>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d00a      	beq.n	8004a1a <prvTaskExitError+0x2a>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	60fb      	str	r3, [r7, #12]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <prvTaskExitError+0x28>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	60bb      	str	r3, [r7, #8]
}
 8004a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a2e:	bf00      	nop
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0fc      	beq.n	8004a30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	2000000c 	.word	0x2000000c
	...

08004a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <pxCurrentTCBConst2>)
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	6808      	ldr	r0, [r1, #0]
 8004a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5a:	f380 8809 	msr	PSP, r0
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8811 	msr	BASEPRI, r0
 8004a6a:	4770      	bx	lr
 8004a6c:	f3af 8000 	nop.w

08004a70 <pxCurrentTCBConst2>:
 8004a70:	200003d0 	.word	0x200003d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a78:	4808      	ldr	r0, [pc, #32]	; (8004a9c <prvPortStartFirstTask+0x24>)
 8004a7a:	6800      	ldr	r0, [r0, #0]
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f380 8808 	msr	MSP, r0
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8814 	msr	CONTROL, r0
 8004a8a:	b662      	cpsie	i
 8004a8c:	b661      	cpsie	f
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	df00      	svc	0
 8004a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a9a:	bf00      	nop
 8004a9c:	e000ed08 	.word	0xe000ed08

08004aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004aa6:	4b46      	ldr	r3, [pc, #280]	; (8004bc0 <xPortStartScheduler+0x120>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a46      	ldr	r2, [pc, #280]	; (8004bc4 <xPortStartScheduler+0x124>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10a      	bne.n	8004ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	; (8004bc0 <xPortStartScheduler+0x120>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a3f      	ldr	r2, [pc, #252]	; (8004bc8 <xPortStartScheduler+0x128>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10a      	bne.n	8004ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60fb      	str	r3, [r7, #12]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	22ff      	movs	r2, #255	; 0xff
 8004af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <xPortStartScheduler+0x130>)
 8004b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b0e:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b10:	2207      	movs	r2, #7
 8004b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b14:	e009      	b.n	8004b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	4a2d      	ldr	r2, [pc, #180]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b32:	2b80      	cmp	r3, #128	; 0x80
 8004b34:	d0ef      	beq.n	8004b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b36:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1c3 0307 	rsb	r3, r3, #7
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d00a      	beq.n	8004b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60bb      	str	r3, [r7, #8]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b62:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b76:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b8e:	f000 f8dd 	bl	8004d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b92:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <xPortStartScheduler+0x13c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b98:	f000 f8fc 	bl	8004d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <xPortStartScheduler+0x140>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0f      	ldr	r2, [pc, #60]	; (8004be0 <xPortStartScheduler+0x140>)
 8004ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ba8:	f7ff ff66 	bl	8004a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bac:	f7ff fa84 	bl	80040b8 <vTaskSwitchContext>
	prvTaskExitError();
 8004bb0:	f7ff ff1e 	bl	80049f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	e000ed00 	.word	0xe000ed00
 8004bc4:	410fc271 	.word	0x410fc271
 8004bc8:	410fc270 	.word	0x410fc270
 8004bcc:	e000e400 	.word	0xe000e400
 8004bd0:	200004fc 	.word	0x200004fc
 8004bd4:	20000500 	.word	0x20000500
 8004bd8:	e000ed20 	.word	0xe000ed20
 8004bdc:	2000000c 	.word	0x2000000c
 8004be0:	e000ef34 	.word	0xe000ef34

08004be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	607b      	str	r3, [r7, #4]
}
 8004bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <vPortEnterCritical+0x58>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <vPortEnterCritical+0x58>)
 8004c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <vPortEnterCritical+0x58>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10f      	bne.n	8004c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <vPortEnterCritical+0x5c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	603b      	str	r3, [r7, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <vPortEnterCritical+0x4a>
	}
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	2000000c 	.word	0x2000000c
 8004c40:	e000ed04 	.word	0xe000ed04

08004c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <vPortExitCritical+0x50>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <vPortExitCritical+0x24>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	607b      	str	r3, [r7, #4]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <vPortExitCritical+0x50>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <vPortExitCritical+0x50>)
 8004c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <vPortExitCritical+0x50>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <vPortExitCritical+0x42>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f383 8811 	msr	BASEPRI, r3
}
 8004c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	2000000c 	.word	0x2000000c
	...

08004ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ca0:	f3ef 8009 	mrs	r0, PSP
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <pxCurrentTCBConst>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	f01e 0f10 	tst.w	lr, #16
 8004cb0:	bf08      	it	eq
 8004cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cba:	6010      	str	r0, [r2, #0]
 8004cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cc4:	f380 8811 	msr	BASEPRI, r0
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f7ff f9f2 	bl	80040b8 <vTaskSwitchContext>
 8004cd4:	f04f 0000 	mov.w	r0, #0
 8004cd8:	f380 8811 	msr	BASEPRI, r0
 8004cdc:	bc09      	pop	{r0, r3}
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	6808      	ldr	r0, [r1, #0]
 8004ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce6:	f01e 0f10 	tst.w	lr, #16
 8004cea:	bf08      	it	eq
 8004cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cf0:	f380 8809 	msr	PSP, r0
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	f3af 8000 	nop.w

08004d00 <pxCurrentTCBConst>:
 8004d00:	200003d0 	.word	0x200003d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
}
 8004d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d22:	f7ff f911 	bl	8003f48 <xTaskIncrementTick>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <SysTick_Handler+0x40>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
}
 8004d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <vPortSetupTimerInterrupt+0x38>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <vPortSetupTimerInterrupt+0x3c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <vPortSetupTimerInterrupt+0x40>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <vPortSetupTimerInterrupt+0x44>)
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d70:	2207      	movs	r2, #7
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e010 	.word	0xe000e010
 8004d84:	e000e018 	.word	0xe000e018
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	10624dd3 	.word	0x10624dd3
 8004d90:	e000e014 	.word	0xe000e014

08004d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004da4 <vPortEnableVFP+0x10>
 8004d98:	6801      	ldr	r1, [r0, #0]
 8004d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d9e:	6001      	str	r1, [r0, #0]
 8004da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004da2:	bf00      	nop
 8004da4:	e000ed88 	.word	0xe000ed88

08004da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dae:	f3ef 8305 	mrs	r3, IPSR
 8004db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	d914      	bls.n	8004de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <vPortValidateInterruptPriority+0x70>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004dc4:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <vPortValidateInterruptPriority+0x74>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	7afa      	ldrb	r2, [r7, #11]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d20a      	bcs.n	8004de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	607b      	str	r3, [r7, #4]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <vPortValidateInterruptPriority+0x78>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dec:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <vPortValidateInterruptPriority+0x7c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d90a      	bls.n	8004e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	603b      	str	r3, [r7, #0]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <vPortValidateInterruptPriority+0x60>
	}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	e000e3f0 	.word	0xe000e3f0
 8004e1c:	200004fc 	.word	0x200004fc
 8004e20:	e000ed0c 	.word	0xe000ed0c
 8004e24:	20000500 	.word	0x20000500

08004e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e34:	f7fe ffde 	bl	8003df4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e38:	4b5b      	ldr	r3, [pc, #364]	; (8004fa8 <pvPortMalloc+0x180>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e40:	f000 f920 	bl	8005084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e44:	4b59      	ldr	r3, [pc, #356]	; (8004fac <pvPortMalloc+0x184>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 8093 	bne.w	8004f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01d      	beq.n	8004e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e58:	2208      	movs	r2, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d014      	beq.n	8004e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f023 0307 	bic.w	r3, r3, #7
 8004e70:	3308      	adds	r3, #8
 8004e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <pvPortMalloc+0x6c>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	617b      	str	r3, [r7, #20]
}
 8004e90:	bf00      	nop
 8004e92:	e7fe      	b.n	8004e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06e      	beq.n	8004f78 <pvPortMalloc+0x150>
 8004e9a:	4b45      	ldr	r3, [pc, #276]	; (8004fb0 <pvPortMalloc+0x188>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d869      	bhi.n	8004f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ea4:	4b43      	ldr	r3, [pc, #268]	; (8004fb4 <pvPortMalloc+0x18c>)
 8004ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ea8:	4b42      	ldr	r3, [pc, #264]	; (8004fb4 <pvPortMalloc+0x18c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eae:	e004      	b.n	8004eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d903      	bls.n	8004ecc <pvPortMalloc+0xa4>
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f1      	bne.n	8004eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ecc:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <pvPortMalloc+0x180>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d050      	beq.n	8004f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2208      	movs	r2, #8
 8004edc:	4413      	add	r3, r2
 8004ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d91f      	bls.n	8004f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <pvPortMalloc+0xf8>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	613b      	str	r3, [r7, #16]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f32:	69b8      	ldr	r0, [r7, #24]
 8004f34:	f000 f908 	bl	8005148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f38:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f46:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <pvPortMalloc+0x190>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d203      	bcs.n	8004f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f52:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <pvPortMalloc+0x190>)
 8004f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <pvPortMalloc+0x184>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f6e:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <pvPortMalloc+0x194>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a11      	ldr	r2, [pc, #68]	; (8004fbc <pvPortMalloc+0x194>)
 8004f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f78:	f7fe ff4a 	bl	8003e10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <pvPortMalloc+0x174>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	60fb      	str	r3, [r7, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <pvPortMalloc+0x172>
	return pvReturn;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2000410c 	.word	0x2000410c
 8004fac:	20004120 	.word	0x20004120
 8004fb0:	20004110 	.word	0x20004110
 8004fb4:	20004104 	.word	0x20004104
 8004fb8:	20004114 	.word	0x20004114
 8004fbc:	20004118 	.word	0x20004118

08004fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d04d      	beq.n	800506e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	425b      	negs	r3, r3
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4413      	add	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <vPortFree+0xb8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <vPortFree+0x44>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60fb      	str	r3, [r7, #12]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <vPortFree+0x62>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	60bb      	str	r3, [r7, #8]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <vPortFree+0xb8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01e      	beq.n	800506e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d11a      	bne.n	800506e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <vPortFree+0xb8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	43db      	mvns	r3, r3
 8005042:	401a      	ands	r2, r3
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005048:	f7fe fed4 	bl	8003df4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <vPortFree+0xbc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4413      	add	r3, r2
 8005056:	4a09      	ldr	r2, [pc, #36]	; (800507c <vPortFree+0xbc>)
 8005058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800505a:	6938      	ldr	r0, [r7, #16]
 800505c:	f000 f874 	bl	8005148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <vPortFree+0xc0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	4a06      	ldr	r2, [pc, #24]	; (8005080 <vPortFree+0xc0>)
 8005068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800506a:	f7fe fed1 	bl	8003e10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20004120 	.word	0x20004120
 800507c:	20004110 	.word	0x20004110
 8005080:	2000411c 	.word	0x2000411c

08005084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800508a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800508e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <prvHeapInit+0xac>)
 8005092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3307      	adds	r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0307 	bic.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <prvHeapInit+0xac>)
 80050b4:	4413      	add	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050bc:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <prvHeapInit+0xb0>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <prvHeapInit+0xb0>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4413      	add	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050d0:	2208      	movs	r2, #8
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0307 	bic.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <prvHeapInit+0xb4>)
 80050e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <prvHeapInit+0xb4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <prvHeapInit+0xb4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005104:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <prvHeapInit+0xb4>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <prvHeapInit+0xb8>)
 8005112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a09      	ldr	r2, [pc, #36]	; (8005140 <prvHeapInit+0xbc>)
 800511a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800511c:	4b09      	ldr	r3, [pc, #36]	; (8005144 <prvHeapInit+0xc0>)
 800511e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000504 	.word	0x20000504
 8005134:	20004104 	.word	0x20004104
 8005138:	2000410c 	.word	0x2000410c
 800513c:	20004114 	.word	0x20004114
 8005140:	20004110 	.word	0x20004110
 8005144:	20004120 	.word	0x20004120

08005148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005150:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <prvInsertBlockIntoFreeList+0xac>)
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e002      	b.n	800515c <prvInsertBlockIntoFreeList+0x14>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	429a      	cmp	r2, r3
 8005164:	d8f7      	bhi.n	8005156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4413      	add	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d108      	bne.n	800518a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	441a      	add	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	441a      	add	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d118      	bne.n	80051d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <prvInsertBlockIntoFreeList+0xb0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d00d      	beq.n	80051c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e008      	b.n	80051d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <prvInsertBlockIntoFreeList+0xb0>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e003      	b.n	80051d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d002      	beq.n	80051e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20004104 	.word	0x20004104
 80051f8:	2000410c 	.word	0x2000410c

080051fc <std>:
 80051fc:	2300      	movs	r3, #0
 80051fe:	b510      	push	{r4, lr}
 8005200:	4604      	mov	r4, r0
 8005202:	e9c0 3300 	strd	r3, r3, [r0]
 8005206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800520a:	6083      	str	r3, [r0, #8]
 800520c:	8181      	strh	r1, [r0, #12]
 800520e:	6643      	str	r3, [r0, #100]	; 0x64
 8005210:	81c2      	strh	r2, [r0, #14]
 8005212:	6183      	str	r3, [r0, #24]
 8005214:	4619      	mov	r1, r3
 8005216:	2208      	movs	r2, #8
 8005218:	305c      	adds	r0, #92	; 0x5c
 800521a:	f000 f9d3 	bl	80055c4 <memset>
 800521e:	4b05      	ldr	r3, [pc, #20]	; (8005234 <std+0x38>)
 8005220:	6263      	str	r3, [r4, #36]	; 0x24
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <std+0x3c>)
 8005224:	62a3      	str	r3, [r4, #40]	; 0x28
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <std+0x40>)
 8005228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <std+0x44>)
 800522c:	6224      	str	r4, [r4, #32]
 800522e:	6323      	str	r3, [r4, #48]	; 0x30
 8005230:	bd10      	pop	{r4, pc}
 8005232:	bf00      	nop
 8005234:	08005415 	.word	0x08005415
 8005238:	08005437 	.word	0x08005437
 800523c:	0800546f 	.word	0x0800546f
 8005240:	08005493 	.word	0x08005493

08005244 <stdio_exit_handler>:
 8005244:	4a02      	ldr	r2, [pc, #8]	; (8005250 <stdio_exit_handler+0xc>)
 8005246:	4903      	ldr	r1, [pc, #12]	; (8005254 <stdio_exit_handler+0x10>)
 8005248:	4803      	ldr	r0, [pc, #12]	; (8005258 <stdio_exit_handler+0x14>)
 800524a:	f000 b869 	b.w	8005320 <_fwalk_sglue>
 800524e:	bf00      	nop
 8005250:	20000010 	.word	0x20000010
 8005254:	08005a7d 	.word	0x08005a7d
 8005258:	2000001c 	.word	0x2000001c

0800525c <cleanup_stdio>:
 800525c:	6841      	ldr	r1, [r0, #4]
 800525e:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <cleanup_stdio+0x34>)
 8005260:	4299      	cmp	r1, r3
 8005262:	b510      	push	{r4, lr}
 8005264:	4604      	mov	r4, r0
 8005266:	d001      	beq.n	800526c <cleanup_stdio+0x10>
 8005268:	f000 fc08 	bl	8005a7c <_fflush_r>
 800526c:	68a1      	ldr	r1, [r4, #8]
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <cleanup_stdio+0x38>)
 8005270:	4299      	cmp	r1, r3
 8005272:	d002      	beq.n	800527a <cleanup_stdio+0x1e>
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fc01 	bl	8005a7c <_fflush_r>
 800527a:	68e1      	ldr	r1, [r4, #12]
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <cleanup_stdio+0x3c>)
 800527e:	4299      	cmp	r1, r3
 8005280:	d004      	beq.n	800528c <cleanup_stdio+0x30>
 8005282:	4620      	mov	r0, r4
 8005284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005288:	f000 bbf8 	b.w	8005a7c <_fflush_r>
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop
 8005290:	20004124 	.word	0x20004124
 8005294:	2000418c 	.word	0x2000418c
 8005298:	200041f4 	.word	0x200041f4

0800529c <global_stdio_init.part.0>:
 800529c:	b510      	push	{r4, lr}
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <global_stdio_init.part.0+0x30>)
 80052a0:	4c0b      	ldr	r4, [pc, #44]	; (80052d0 <global_stdio_init.part.0+0x34>)
 80052a2:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <global_stdio_init.part.0+0x38>)
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	4620      	mov	r0, r4
 80052a8:	2200      	movs	r2, #0
 80052aa:	2104      	movs	r1, #4
 80052ac:	f7ff ffa6 	bl	80051fc <std>
 80052b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052b4:	2201      	movs	r2, #1
 80052b6:	2109      	movs	r1, #9
 80052b8:	f7ff ffa0 	bl	80051fc <std>
 80052bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052c0:	2202      	movs	r2, #2
 80052c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c6:	2112      	movs	r1, #18
 80052c8:	f7ff bf98 	b.w	80051fc <std>
 80052cc:	2000425c 	.word	0x2000425c
 80052d0:	20004124 	.word	0x20004124
 80052d4:	08005245 	.word	0x08005245

080052d8 <__sfp_lock_acquire>:
 80052d8:	4801      	ldr	r0, [pc, #4]	; (80052e0 <__sfp_lock_acquire+0x8>)
 80052da:	f000 ba41 	b.w	8005760 <__retarget_lock_acquire_recursive>
 80052de:	bf00      	nop
 80052e0:	20004265 	.word	0x20004265

080052e4 <__sfp_lock_release>:
 80052e4:	4801      	ldr	r0, [pc, #4]	; (80052ec <__sfp_lock_release+0x8>)
 80052e6:	f000 ba3c 	b.w	8005762 <__retarget_lock_release_recursive>
 80052ea:	bf00      	nop
 80052ec:	20004265 	.word	0x20004265

080052f0 <__sinit>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	4604      	mov	r4, r0
 80052f4:	f7ff fff0 	bl	80052d8 <__sfp_lock_acquire>
 80052f8:	6a23      	ldr	r3, [r4, #32]
 80052fa:	b11b      	cbz	r3, 8005304 <__sinit+0x14>
 80052fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005300:	f7ff bff0 	b.w	80052e4 <__sfp_lock_release>
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <__sinit+0x28>)
 8005306:	6223      	str	r3, [r4, #32]
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <__sinit+0x2c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f5      	bne.n	80052fc <__sinit+0xc>
 8005310:	f7ff ffc4 	bl	800529c <global_stdio_init.part.0>
 8005314:	e7f2      	b.n	80052fc <__sinit+0xc>
 8005316:	bf00      	nop
 8005318:	0800525d 	.word	0x0800525d
 800531c:	2000425c 	.word	0x2000425c

08005320 <_fwalk_sglue>:
 8005320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005324:	4607      	mov	r7, r0
 8005326:	4688      	mov	r8, r1
 8005328:	4614      	mov	r4, r2
 800532a:	2600      	movs	r6, #0
 800532c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005330:	f1b9 0901 	subs.w	r9, r9, #1
 8005334:	d505      	bpl.n	8005342 <_fwalk_sglue+0x22>
 8005336:	6824      	ldr	r4, [r4, #0]
 8005338:	2c00      	cmp	r4, #0
 800533a:	d1f7      	bne.n	800532c <_fwalk_sglue+0xc>
 800533c:	4630      	mov	r0, r6
 800533e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005342:	89ab      	ldrh	r3, [r5, #12]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d907      	bls.n	8005358 <_fwalk_sglue+0x38>
 8005348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800534c:	3301      	adds	r3, #1
 800534e:	d003      	beq.n	8005358 <_fwalk_sglue+0x38>
 8005350:	4629      	mov	r1, r5
 8005352:	4638      	mov	r0, r7
 8005354:	47c0      	blx	r8
 8005356:	4306      	orrs	r6, r0
 8005358:	3568      	adds	r5, #104	; 0x68
 800535a:	e7e9      	b.n	8005330 <_fwalk_sglue+0x10>

0800535c <_puts_r>:
 800535c:	6a03      	ldr	r3, [r0, #32]
 800535e:	b570      	push	{r4, r5, r6, lr}
 8005360:	6884      	ldr	r4, [r0, #8]
 8005362:	4605      	mov	r5, r0
 8005364:	460e      	mov	r6, r1
 8005366:	b90b      	cbnz	r3, 800536c <_puts_r+0x10>
 8005368:	f7ff ffc2 	bl	80052f0 <__sinit>
 800536c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800536e:	07db      	lsls	r3, r3, #31
 8005370:	d405      	bmi.n	800537e <_puts_r+0x22>
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	0598      	lsls	r0, r3, #22
 8005376:	d402      	bmi.n	800537e <_puts_r+0x22>
 8005378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800537a:	f000 f9f1 	bl	8005760 <__retarget_lock_acquire_recursive>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	0719      	lsls	r1, r3, #28
 8005382:	d513      	bpl.n	80053ac <_puts_r+0x50>
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	b18b      	cbz	r3, 80053ac <_puts_r+0x50>
 8005388:	3e01      	subs	r6, #1
 800538a:	68a3      	ldr	r3, [r4, #8]
 800538c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005390:	3b01      	subs	r3, #1
 8005392:	60a3      	str	r3, [r4, #8]
 8005394:	b9e9      	cbnz	r1, 80053d2 <_puts_r+0x76>
 8005396:	2b00      	cmp	r3, #0
 8005398:	da2e      	bge.n	80053f8 <_puts_r+0x9c>
 800539a:	4622      	mov	r2, r4
 800539c:	210a      	movs	r1, #10
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f87b 	bl	800549a <__swbuf_r>
 80053a4:	3001      	adds	r0, #1
 80053a6:	d007      	beq.n	80053b8 <_puts_r+0x5c>
 80053a8:	250a      	movs	r5, #10
 80053aa:	e007      	b.n	80053bc <_puts_r+0x60>
 80053ac:	4621      	mov	r1, r4
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 f8b0 	bl	8005514 <__swsetup_r>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d0e7      	beq.n	8005388 <_puts_r+0x2c>
 80053b8:	f04f 35ff 	mov.w	r5, #4294967295
 80053bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053be:	07da      	lsls	r2, r3, #31
 80053c0:	d405      	bmi.n	80053ce <_puts_r+0x72>
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	059b      	lsls	r3, r3, #22
 80053c6:	d402      	bmi.n	80053ce <_puts_r+0x72>
 80053c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ca:	f000 f9ca 	bl	8005762 <__retarget_lock_release_recursive>
 80053ce:	4628      	mov	r0, r5
 80053d0:	bd70      	pop	{r4, r5, r6, pc}
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	da04      	bge.n	80053e0 <_puts_r+0x84>
 80053d6:	69a2      	ldr	r2, [r4, #24]
 80053d8:	429a      	cmp	r2, r3
 80053da:	dc06      	bgt.n	80053ea <_puts_r+0x8e>
 80053dc:	290a      	cmp	r1, #10
 80053de:	d004      	beq.n	80053ea <_puts_r+0x8e>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	6022      	str	r2, [r4, #0]
 80053e6:	7019      	strb	r1, [r3, #0]
 80053e8:	e7cf      	b.n	800538a <_puts_r+0x2e>
 80053ea:	4622      	mov	r2, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f854 	bl	800549a <__swbuf_r>
 80053f2:	3001      	adds	r0, #1
 80053f4:	d1c9      	bne.n	800538a <_puts_r+0x2e>
 80053f6:	e7df      	b.n	80053b8 <_puts_r+0x5c>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	250a      	movs	r5, #10
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	6022      	str	r2, [r4, #0]
 8005400:	701d      	strb	r5, [r3, #0]
 8005402:	e7db      	b.n	80053bc <_puts_r+0x60>

08005404 <puts>:
 8005404:	4b02      	ldr	r3, [pc, #8]	; (8005410 <puts+0xc>)
 8005406:	4601      	mov	r1, r0
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	f7ff bfa7 	b.w	800535c <_puts_r>
 800540e:	bf00      	nop
 8005410:	20000068 	.word	0x20000068

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f952 	bl	80056c4 <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	; 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	05db      	lsls	r3, r3, #23
 8005440:	4605      	mov	r5, r0
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544c:	2302      	movs	r3, #2
 800544e:	2200      	movs	r2, #0
 8005450:	f000 f926 	bl	80056a0 <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800545a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b93d 	b.w	80056e8 <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f913 	bl	80056a0 <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	; 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b89d 	b.w	80055d4 <_close_r>

0800549a <__swbuf_r>:
 800549a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549c:	460e      	mov	r6, r1
 800549e:	4614      	mov	r4, r2
 80054a0:	4605      	mov	r5, r0
 80054a2:	b118      	cbz	r0, 80054ac <__swbuf_r+0x12>
 80054a4:	6a03      	ldr	r3, [r0, #32]
 80054a6:	b90b      	cbnz	r3, 80054ac <__swbuf_r+0x12>
 80054a8:	f7ff ff22 	bl	80052f0 <__sinit>
 80054ac:	69a3      	ldr	r3, [r4, #24]
 80054ae:	60a3      	str	r3, [r4, #8]
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	071a      	lsls	r2, r3, #28
 80054b4:	d525      	bpl.n	8005502 <__swbuf_r+0x68>
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	b31b      	cbz	r3, 8005502 <__swbuf_r+0x68>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	6922      	ldr	r2, [r4, #16]
 80054be:	1a98      	subs	r0, r3, r2
 80054c0:	6963      	ldr	r3, [r4, #20]
 80054c2:	b2f6      	uxtb	r6, r6
 80054c4:	4283      	cmp	r3, r0
 80054c6:	4637      	mov	r7, r6
 80054c8:	dc04      	bgt.n	80054d4 <__swbuf_r+0x3a>
 80054ca:	4621      	mov	r1, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 fad5 	bl	8005a7c <_fflush_r>
 80054d2:	b9e0      	cbnz	r0, 800550e <__swbuf_r+0x74>
 80054d4:	68a3      	ldr	r3, [r4, #8]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	60a3      	str	r3, [r4, #8]
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	6022      	str	r2, [r4, #0]
 80054e0:	701e      	strb	r6, [r3, #0]
 80054e2:	6962      	ldr	r2, [r4, #20]
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d004      	beq.n	80054f4 <__swbuf_r+0x5a>
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	07db      	lsls	r3, r3, #31
 80054ee:	d506      	bpl.n	80054fe <__swbuf_r+0x64>
 80054f0:	2e0a      	cmp	r6, #10
 80054f2:	d104      	bne.n	80054fe <__swbuf_r+0x64>
 80054f4:	4621      	mov	r1, r4
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 fac0 	bl	8005a7c <_fflush_r>
 80054fc:	b938      	cbnz	r0, 800550e <__swbuf_r+0x74>
 80054fe:	4638      	mov	r0, r7
 8005500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005502:	4621      	mov	r1, r4
 8005504:	4628      	mov	r0, r5
 8005506:	f000 f805 	bl	8005514 <__swsetup_r>
 800550a:	2800      	cmp	r0, #0
 800550c:	d0d5      	beq.n	80054ba <__swbuf_r+0x20>
 800550e:	f04f 37ff 	mov.w	r7, #4294967295
 8005512:	e7f4      	b.n	80054fe <__swbuf_r+0x64>

08005514 <__swsetup_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <__swsetup_r+0xac>)
 8005518:	4605      	mov	r5, r0
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	460c      	mov	r4, r1
 800551e:	b118      	cbz	r0, 8005528 <__swsetup_r+0x14>
 8005520:	6a03      	ldr	r3, [r0, #32]
 8005522:	b90b      	cbnz	r3, 8005528 <__swsetup_r+0x14>
 8005524:	f7ff fee4 	bl	80052f0 <__sinit>
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800552e:	0718      	lsls	r0, r3, #28
 8005530:	d422      	bmi.n	8005578 <__swsetup_r+0x64>
 8005532:	06d9      	lsls	r1, r3, #27
 8005534:	d407      	bmi.n	8005546 <__swsetup_r+0x32>
 8005536:	2309      	movs	r3, #9
 8005538:	602b      	str	r3, [r5, #0]
 800553a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	e034      	b.n	80055b0 <__swsetup_r+0x9c>
 8005546:	0758      	lsls	r0, r3, #29
 8005548:	d512      	bpl.n	8005570 <__swsetup_r+0x5c>
 800554a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800554c:	b141      	cbz	r1, 8005560 <__swsetup_r+0x4c>
 800554e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005552:	4299      	cmp	r1, r3
 8005554:	d002      	beq.n	800555c <__swsetup_r+0x48>
 8005556:	4628      	mov	r0, r5
 8005558:	f000 f912 	bl	8005780 <_free_r>
 800555c:	2300      	movs	r3, #0
 800555e:	6363      	str	r3, [r4, #52]	; 0x34
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	2300      	movs	r3, #0
 800556a:	6063      	str	r3, [r4, #4]
 800556c:	6923      	ldr	r3, [r4, #16]
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	f043 0308 	orr.w	r3, r3, #8
 8005576:	81a3      	strh	r3, [r4, #12]
 8005578:	6923      	ldr	r3, [r4, #16]
 800557a:	b94b      	cbnz	r3, 8005590 <__swsetup_r+0x7c>
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005586:	d003      	beq.n	8005590 <__swsetup_r+0x7c>
 8005588:	4621      	mov	r1, r4
 800558a:	4628      	mov	r0, r5
 800558c:	f000 fac4 	bl	8005b18 <__smakebuf_r>
 8005590:	89a0      	ldrh	r0, [r4, #12]
 8005592:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005596:	f010 0301 	ands.w	r3, r0, #1
 800559a:	d00a      	beq.n	80055b2 <__swsetup_r+0x9e>
 800559c:	2300      	movs	r3, #0
 800559e:	60a3      	str	r3, [r4, #8]
 80055a0:	6963      	ldr	r3, [r4, #20]
 80055a2:	425b      	negs	r3, r3
 80055a4:	61a3      	str	r3, [r4, #24]
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	b943      	cbnz	r3, 80055bc <__swsetup_r+0xa8>
 80055aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055ae:	d1c4      	bne.n	800553a <__swsetup_r+0x26>
 80055b0:	bd38      	pop	{r3, r4, r5, pc}
 80055b2:	0781      	lsls	r1, r0, #30
 80055b4:	bf58      	it	pl
 80055b6:	6963      	ldrpl	r3, [r4, #20]
 80055b8:	60a3      	str	r3, [r4, #8]
 80055ba:	e7f4      	b.n	80055a6 <__swsetup_r+0x92>
 80055bc:	2000      	movs	r0, #0
 80055be:	e7f7      	b.n	80055b0 <__swsetup_r+0x9c>
 80055c0:	20000068 	.word	0x20000068

080055c4 <memset>:
 80055c4:	4402      	add	r2, r0
 80055c6:	4603      	mov	r3, r0
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d100      	bne.n	80055ce <memset+0xa>
 80055cc:	4770      	bx	lr
 80055ce:	f803 1b01 	strb.w	r1, [r3], #1
 80055d2:	e7f9      	b.n	80055c8 <memset+0x4>

080055d4 <_close_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d06      	ldr	r5, [pc, #24]	; (80055f0 <_close_r+0x1c>)
 80055d8:	2300      	movs	r3, #0
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	602b      	str	r3, [r5, #0]
 80055e0:	f7fb fb99 	bl	8000d16 <_close>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_close_r+0x1a>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_close_r+0x1a>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	20004260 	.word	0x20004260

080055f4 <_reclaim_reent>:
 80055f4:	4b29      	ldr	r3, [pc, #164]	; (800569c <_reclaim_reent+0xa8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4283      	cmp	r3, r0
 80055fa:	b570      	push	{r4, r5, r6, lr}
 80055fc:	4604      	mov	r4, r0
 80055fe:	d04b      	beq.n	8005698 <_reclaim_reent+0xa4>
 8005600:	69c3      	ldr	r3, [r0, #28]
 8005602:	b143      	cbz	r3, 8005616 <_reclaim_reent+0x22>
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d144      	bne.n	8005694 <_reclaim_reent+0xa0>
 800560a:	69e3      	ldr	r3, [r4, #28]
 800560c:	6819      	ldr	r1, [r3, #0]
 800560e:	b111      	cbz	r1, 8005616 <_reclaim_reent+0x22>
 8005610:	4620      	mov	r0, r4
 8005612:	f000 f8b5 	bl	8005780 <_free_r>
 8005616:	6961      	ldr	r1, [r4, #20]
 8005618:	b111      	cbz	r1, 8005620 <_reclaim_reent+0x2c>
 800561a:	4620      	mov	r0, r4
 800561c:	f000 f8b0 	bl	8005780 <_free_r>
 8005620:	69e1      	ldr	r1, [r4, #28]
 8005622:	b111      	cbz	r1, 800562a <_reclaim_reent+0x36>
 8005624:	4620      	mov	r0, r4
 8005626:	f000 f8ab 	bl	8005780 <_free_r>
 800562a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800562c:	b111      	cbz	r1, 8005634 <_reclaim_reent+0x40>
 800562e:	4620      	mov	r0, r4
 8005630:	f000 f8a6 	bl	8005780 <_free_r>
 8005634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005636:	b111      	cbz	r1, 800563e <_reclaim_reent+0x4a>
 8005638:	4620      	mov	r0, r4
 800563a:	f000 f8a1 	bl	8005780 <_free_r>
 800563e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005640:	b111      	cbz	r1, 8005648 <_reclaim_reent+0x54>
 8005642:	4620      	mov	r0, r4
 8005644:	f000 f89c 	bl	8005780 <_free_r>
 8005648:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800564a:	b111      	cbz	r1, 8005652 <_reclaim_reent+0x5e>
 800564c:	4620      	mov	r0, r4
 800564e:	f000 f897 	bl	8005780 <_free_r>
 8005652:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005654:	b111      	cbz	r1, 800565c <_reclaim_reent+0x68>
 8005656:	4620      	mov	r0, r4
 8005658:	f000 f892 	bl	8005780 <_free_r>
 800565c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800565e:	b111      	cbz	r1, 8005666 <_reclaim_reent+0x72>
 8005660:	4620      	mov	r0, r4
 8005662:	f000 f88d 	bl	8005780 <_free_r>
 8005666:	6a23      	ldr	r3, [r4, #32]
 8005668:	b1b3      	cbz	r3, 8005698 <_reclaim_reent+0xa4>
 800566a:	4620      	mov	r0, r4
 800566c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005670:	4718      	bx	r3
 8005672:	5949      	ldr	r1, [r1, r5]
 8005674:	b941      	cbnz	r1, 8005688 <_reclaim_reent+0x94>
 8005676:	3504      	adds	r5, #4
 8005678:	69e3      	ldr	r3, [r4, #28]
 800567a:	2d80      	cmp	r5, #128	; 0x80
 800567c:	68d9      	ldr	r1, [r3, #12]
 800567e:	d1f8      	bne.n	8005672 <_reclaim_reent+0x7e>
 8005680:	4620      	mov	r0, r4
 8005682:	f000 f87d 	bl	8005780 <_free_r>
 8005686:	e7c0      	b.n	800560a <_reclaim_reent+0x16>
 8005688:	680e      	ldr	r6, [r1, #0]
 800568a:	4620      	mov	r0, r4
 800568c:	f000 f878 	bl	8005780 <_free_r>
 8005690:	4631      	mov	r1, r6
 8005692:	e7ef      	b.n	8005674 <_reclaim_reent+0x80>
 8005694:	2500      	movs	r5, #0
 8005696:	e7ef      	b.n	8005678 <_reclaim_reent+0x84>
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	bf00      	nop
 800569c:	20000068 	.word	0x20000068

080056a0 <_lseek_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4d07      	ldr	r5, [pc, #28]	; (80056c0 <_lseek_r+0x20>)
 80056a4:	4604      	mov	r4, r0
 80056a6:	4608      	mov	r0, r1
 80056a8:	4611      	mov	r1, r2
 80056aa:	2200      	movs	r2, #0
 80056ac:	602a      	str	r2, [r5, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	f7fb fb58 	bl	8000d64 <_lseek>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d102      	bne.n	80056be <_lseek_r+0x1e>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	b103      	cbz	r3, 80056be <_lseek_r+0x1e>
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	bd38      	pop	{r3, r4, r5, pc}
 80056c0:	20004260 	.word	0x20004260

080056c4 <_read_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4d07      	ldr	r5, [pc, #28]	; (80056e4 <_read_r+0x20>)
 80056c8:	4604      	mov	r4, r0
 80056ca:	4608      	mov	r0, r1
 80056cc:	4611      	mov	r1, r2
 80056ce:	2200      	movs	r2, #0
 80056d0:	602a      	str	r2, [r5, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f7fb fae6 	bl	8000ca4 <_read>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_read_r+0x1e>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_read_r+0x1e>
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	20004260 	.word	0x20004260

080056e8 <_write_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d07      	ldr	r5, [pc, #28]	; (8005708 <_write_r+0x20>)
 80056ec:	4604      	mov	r4, r0
 80056ee:	4608      	mov	r0, r1
 80056f0:	4611      	mov	r1, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	602a      	str	r2, [r5, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f7fb faf1 	bl	8000cde <_write>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_write_r+0x1e>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	b103      	cbz	r3, 8005706 <_write_r+0x1e>
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	20004260 	.word	0x20004260

0800570c <__errno>:
 800570c:	4b01      	ldr	r3, [pc, #4]	; (8005714 <__errno+0x8>)
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000068 	.word	0x20000068

08005718 <__libc_init_array>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	4d0d      	ldr	r5, [pc, #52]	; (8005750 <__libc_init_array+0x38>)
 800571c:	4c0d      	ldr	r4, [pc, #52]	; (8005754 <__libc_init_array+0x3c>)
 800571e:	1b64      	subs	r4, r4, r5
 8005720:	10a4      	asrs	r4, r4, #2
 8005722:	2600      	movs	r6, #0
 8005724:	42a6      	cmp	r6, r4
 8005726:	d109      	bne.n	800573c <__libc_init_array+0x24>
 8005728:	4d0b      	ldr	r5, [pc, #44]	; (8005758 <__libc_init_array+0x40>)
 800572a:	4c0c      	ldr	r4, [pc, #48]	; (800575c <__libc_init_array+0x44>)
 800572c:	f000 fa62 	bl	8005bf4 <_init>
 8005730:	1b64      	subs	r4, r4, r5
 8005732:	10a4      	asrs	r4, r4, #2
 8005734:	2600      	movs	r6, #0
 8005736:	42a6      	cmp	r6, r4
 8005738:	d105      	bne.n	8005746 <__libc_init_array+0x2e>
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005740:	4798      	blx	r3
 8005742:	3601      	adds	r6, #1
 8005744:	e7ee      	b.n	8005724 <__libc_init_array+0xc>
 8005746:	f855 3b04 	ldr.w	r3, [r5], #4
 800574a:	4798      	blx	r3
 800574c:	3601      	adds	r6, #1
 800574e:	e7f2      	b.n	8005736 <__libc_init_array+0x1e>
 8005750:	08005d7c 	.word	0x08005d7c
 8005754:	08005d7c 	.word	0x08005d7c
 8005758:	08005d7c 	.word	0x08005d7c
 800575c:	08005d80 	.word	0x08005d80

08005760 <__retarget_lock_acquire_recursive>:
 8005760:	4770      	bx	lr

08005762 <__retarget_lock_release_recursive>:
 8005762:	4770      	bx	lr

08005764 <memcpy>:
 8005764:	440a      	add	r2, r1
 8005766:	4291      	cmp	r1, r2
 8005768:	f100 33ff 	add.w	r3, r0, #4294967295
 800576c:	d100      	bne.n	8005770 <memcpy+0xc>
 800576e:	4770      	bx	lr
 8005770:	b510      	push	{r4, lr}
 8005772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800577a:	4291      	cmp	r1, r2
 800577c:	d1f9      	bne.n	8005772 <memcpy+0xe>
 800577e:	bd10      	pop	{r4, pc}

08005780 <_free_r>:
 8005780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005782:	2900      	cmp	r1, #0
 8005784:	d044      	beq.n	8005810 <_free_r+0x90>
 8005786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578a:	9001      	str	r0, [sp, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f1a1 0404 	sub.w	r4, r1, #4
 8005792:	bfb8      	it	lt
 8005794:	18e4      	addlt	r4, r4, r3
 8005796:	f000 f8df 	bl	8005958 <__malloc_lock>
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <_free_r+0x94>)
 800579c:	9801      	ldr	r0, [sp, #4]
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	b933      	cbnz	r3, 80057b0 <_free_r+0x30>
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	6014      	str	r4, [r2, #0]
 80057a6:	b003      	add	sp, #12
 80057a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ac:	f000 b8da 	b.w	8005964 <__malloc_unlock>
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d908      	bls.n	80057c6 <_free_r+0x46>
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	1961      	adds	r1, r4, r5
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf01      	itttt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	1949      	addeq	r1, r1, r5
 80057c2:	6021      	streq	r1, [r4, #0]
 80057c4:	e7ed      	b.n	80057a2 <_free_r+0x22>
 80057c6:	461a      	mov	r2, r3
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b10b      	cbz	r3, 80057d0 <_free_r+0x50>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d9fa      	bls.n	80057c6 <_free_r+0x46>
 80057d0:	6811      	ldr	r1, [r2, #0]
 80057d2:	1855      	adds	r5, r2, r1
 80057d4:	42a5      	cmp	r5, r4
 80057d6:	d10b      	bne.n	80057f0 <_free_r+0x70>
 80057d8:	6824      	ldr	r4, [r4, #0]
 80057da:	4421      	add	r1, r4
 80057dc:	1854      	adds	r4, r2, r1
 80057de:	42a3      	cmp	r3, r4
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	d1e0      	bne.n	80057a6 <_free_r+0x26>
 80057e4:	681c      	ldr	r4, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	6053      	str	r3, [r2, #4]
 80057ea:	440c      	add	r4, r1
 80057ec:	6014      	str	r4, [r2, #0]
 80057ee:	e7da      	b.n	80057a6 <_free_r+0x26>
 80057f0:	d902      	bls.n	80057f8 <_free_r+0x78>
 80057f2:	230c      	movs	r3, #12
 80057f4:	6003      	str	r3, [r0, #0]
 80057f6:	e7d6      	b.n	80057a6 <_free_r+0x26>
 80057f8:	6825      	ldr	r5, [r4, #0]
 80057fa:	1961      	adds	r1, r4, r5
 80057fc:	428b      	cmp	r3, r1
 80057fe:	bf04      	itt	eq
 8005800:	6819      	ldreq	r1, [r3, #0]
 8005802:	685b      	ldreq	r3, [r3, #4]
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	bf04      	itt	eq
 8005808:	1949      	addeq	r1, r1, r5
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	6054      	str	r4, [r2, #4]
 800580e:	e7ca      	b.n	80057a6 <_free_r+0x26>
 8005810:	b003      	add	sp, #12
 8005812:	bd30      	pop	{r4, r5, pc}
 8005814:	20004268 	.word	0x20004268

08005818 <sbrk_aligned>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4e0e      	ldr	r6, [pc, #56]	; (8005854 <sbrk_aligned+0x3c>)
 800581c:	460c      	mov	r4, r1
 800581e:	6831      	ldr	r1, [r6, #0]
 8005820:	4605      	mov	r5, r0
 8005822:	b911      	cbnz	r1, 800582a <sbrk_aligned+0x12>
 8005824:	f000 f9d6 	bl	8005bd4 <_sbrk_r>
 8005828:	6030      	str	r0, [r6, #0]
 800582a:	4621      	mov	r1, r4
 800582c:	4628      	mov	r0, r5
 800582e:	f000 f9d1 	bl	8005bd4 <_sbrk_r>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	d00a      	beq.n	800584c <sbrk_aligned+0x34>
 8005836:	1cc4      	adds	r4, r0, #3
 8005838:	f024 0403 	bic.w	r4, r4, #3
 800583c:	42a0      	cmp	r0, r4
 800583e:	d007      	beq.n	8005850 <sbrk_aligned+0x38>
 8005840:	1a21      	subs	r1, r4, r0
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f9c6 	bl	8005bd4 <_sbrk_r>
 8005848:	3001      	adds	r0, #1
 800584a:	d101      	bne.n	8005850 <sbrk_aligned+0x38>
 800584c:	f04f 34ff 	mov.w	r4, #4294967295
 8005850:	4620      	mov	r0, r4
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	2000426c 	.word	0x2000426c

08005858 <_malloc_r>:
 8005858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800585c:	1ccd      	adds	r5, r1, #3
 800585e:	f025 0503 	bic.w	r5, r5, #3
 8005862:	3508      	adds	r5, #8
 8005864:	2d0c      	cmp	r5, #12
 8005866:	bf38      	it	cc
 8005868:	250c      	movcc	r5, #12
 800586a:	2d00      	cmp	r5, #0
 800586c:	4607      	mov	r7, r0
 800586e:	db01      	blt.n	8005874 <_malloc_r+0x1c>
 8005870:	42a9      	cmp	r1, r5
 8005872:	d905      	bls.n	8005880 <_malloc_r+0x28>
 8005874:	230c      	movs	r3, #12
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	2600      	movs	r6, #0
 800587a:	4630      	mov	r0, r6
 800587c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005880:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005954 <_malloc_r+0xfc>
 8005884:	f000 f868 	bl	8005958 <__malloc_lock>
 8005888:	f8d8 3000 	ldr.w	r3, [r8]
 800588c:	461c      	mov	r4, r3
 800588e:	bb5c      	cbnz	r4, 80058e8 <_malloc_r+0x90>
 8005890:	4629      	mov	r1, r5
 8005892:	4638      	mov	r0, r7
 8005894:	f7ff ffc0 	bl	8005818 <sbrk_aligned>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	4604      	mov	r4, r0
 800589c:	d155      	bne.n	800594a <_malloc_r+0xf2>
 800589e:	f8d8 4000 	ldr.w	r4, [r8]
 80058a2:	4626      	mov	r6, r4
 80058a4:	2e00      	cmp	r6, #0
 80058a6:	d145      	bne.n	8005934 <_malloc_r+0xdc>
 80058a8:	2c00      	cmp	r4, #0
 80058aa:	d048      	beq.n	800593e <_malloc_r+0xe6>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	4631      	mov	r1, r6
 80058b0:	4638      	mov	r0, r7
 80058b2:	eb04 0903 	add.w	r9, r4, r3
 80058b6:	f000 f98d 	bl	8005bd4 <_sbrk_r>
 80058ba:	4581      	cmp	r9, r0
 80058bc:	d13f      	bne.n	800593e <_malloc_r+0xe6>
 80058be:	6821      	ldr	r1, [r4, #0]
 80058c0:	1a6d      	subs	r5, r5, r1
 80058c2:	4629      	mov	r1, r5
 80058c4:	4638      	mov	r0, r7
 80058c6:	f7ff ffa7 	bl	8005818 <sbrk_aligned>
 80058ca:	3001      	adds	r0, #1
 80058cc:	d037      	beq.n	800593e <_malloc_r+0xe6>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	442b      	add	r3, r5
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	f8d8 3000 	ldr.w	r3, [r8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d038      	beq.n	800594e <_malloc_r+0xf6>
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	42a2      	cmp	r2, r4
 80058e0:	d12b      	bne.n	800593a <_malloc_r+0xe2>
 80058e2:	2200      	movs	r2, #0
 80058e4:	605a      	str	r2, [r3, #4]
 80058e6:	e00f      	b.n	8005908 <_malloc_r+0xb0>
 80058e8:	6822      	ldr	r2, [r4, #0]
 80058ea:	1b52      	subs	r2, r2, r5
 80058ec:	d41f      	bmi.n	800592e <_malloc_r+0xd6>
 80058ee:	2a0b      	cmp	r2, #11
 80058f0:	d917      	bls.n	8005922 <_malloc_r+0xca>
 80058f2:	1961      	adds	r1, r4, r5
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	6025      	str	r5, [r4, #0]
 80058f8:	bf18      	it	ne
 80058fa:	6059      	strne	r1, [r3, #4]
 80058fc:	6863      	ldr	r3, [r4, #4]
 80058fe:	bf08      	it	eq
 8005900:	f8c8 1000 	streq.w	r1, [r8]
 8005904:	5162      	str	r2, [r4, r5]
 8005906:	604b      	str	r3, [r1, #4]
 8005908:	4638      	mov	r0, r7
 800590a:	f104 060b 	add.w	r6, r4, #11
 800590e:	f000 f829 	bl	8005964 <__malloc_unlock>
 8005912:	f026 0607 	bic.w	r6, r6, #7
 8005916:	1d23      	adds	r3, r4, #4
 8005918:	1af2      	subs	r2, r6, r3
 800591a:	d0ae      	beq.n	800587a <_malloc_r+0x22>
 800591c:	1b9b      	subs	r3, r3, r6
 800591e:	50a3      	str	r3, [r4, r2]
 8005920:	e7ab      	b.n	800587a <_malloc_r+0x22>
 8005922:	42a3      	cmp	r3, r4
 8005924:	6862      	ldr	r2, [r4, #4]
 8005926:	d1dd      	bne.n	80058e4 <_malloc_r+0x8c>
 8005928:	f8c8 2000 	str.w	r2, [r8]
 800592c:	e7ec      	b.n	8005908 <_malloc_r+0xb0>
 800592e:	4623      	mov	r3, r4
 8005930:	6864      	ldr	r4, [r4, #4]
 8005932:	e7ac      	b.n	800588e <_malloc_r+0x36>
 8005934:	4634      	mov	r4, r6
 8005936:	6876      	ldr	r6, [r6, #4]
 8005938:	e7b4      	b.n	80058a4 <_malloc_r+0x4c>
 800593a:	4613      	mov	r3, r2
 800593c:	e7cc      	b.n	80058d8 <_malloc_r+0x80>
 800593e:	230c      	movs	r3, #12
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4638      	mov	r0, r7
 8005944:	f000 f80e 	bl	8005964 <__malloc_unlock>
 8005948:	e797      	b.n	800587a <_malloc_r+0x22>
 800594a:	6025      	str	r5, [r4, #0]
 800594c:	e7dc      	b.n	8005908 <_malloc_r+0xb0>
 800594e:	605b      	str	r3, [r3, #4]
 8005950:	deff      	udf	#255	; 0xff
 8005952:	bf00      	nop
 8005954:	20004268 	.word	0x20004268

08005958 <__malloc_lock>:
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <__malloc_lock+0x8>)
 800595a:	f7ff bf01 	b.w	8005760 <__retarget_lock_acquire_recursive>
 800595e:	bf00      	nop
 8005960:	20004264 	.word	0x20004264

08005964 <__malloc_unlock>:
 8005964:	4801      	ldr	r0, [pc, #4]	; (800596c <__malloc_unlock+0x8>)
 8005966:	f7ff befc 	b.w	8005762 <__retarget_lock_release_recursive>
 800596a:	bf00      	nop
 800596c:	20004264 	.word	0x20004264

08005970 <__sflush_r>:
 8005970:	898a      	ldrh	r2, [r1, #12]
 8005972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005976:	4605      	mov	r5, r0
 8005978:	0710      	lsls	r0, r2, #28
 800597a:	460c      	mov	r4, r1
 800597c:	d458      	bmi.n	8005a30 <__sflush_r+0xc0>
 800597e:	684b      	ldr	r3, [r1, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	dc05      	bgt.n	8005990 <__sflush_r+0x20>
 8005984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	dc02      	bgt.n	8005990 <__sflush_r+0x20>
 800598a:	2000      	movs	r0, #0
 800598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005992:	2e00      	cmp	r6, #0
 8005994:	d0f9      	beq.n	800598a <__sflush_r+0x1a>
 8005996:	2300      	movs	r3, #0
 8005998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800599c:	682f      	ldr	r7, [r5, #0]
 800599e:	6a21      	ldr	r1, [r4, #32]
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	d032      	beq.n	8005a0a <__sflush_r+0x9a>
 80059a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	075a      	lsls	r2, r3, #29
 80059aa:	d505      	bpl.n	80059b8 <__sflush_r+0x48>
 80059ac:	6863      	ldr	r3, [r4, #4]
 80059ae:	1ac0      	subs	r0, r0, r3
 80059b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059b2:	b10b      	cbz	r3, 80059b8 <__sflush_r+0x48>
 80059b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059b6:	1ac0      	subs	r0, r0, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	4602      	mov	r2, r0
 80059bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059be:	6a21      	ldr	r1, [r4, #32]
 80059c0:	4628      	mov	r0, r5
 80059c2:	47b0      	blx	r6
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	d106      	bne.n	80059d8 <__sflush_r+0x68>
 80059ca:	6829      	ldr	r1, [r5, #0]
 80059cc:	291d      	cmp	r1, #29
 80059ce:	d82b      	bhi.n	8005a28 <__sflush_r+0xb8>
 80059d0:	4a29      	ldr	r2, [pc, #164]	; (8005a78 <__sflush_r+0x108>)
 80059d2:	410a      	asrs	r2, r1
 80059d4:	07d6      	lsls	r6, r2, #31
 80059d6:	d427      	bmi.n	8005a28 <__sflush_r+0xb8>
 80059d8:	2200      	movs	r2, #0
 80059da:	6062      	str	r2, [r4, #4]
 80059dc:	04d9      	lsls	r1, r3, #19
 80059de:	6922      	ldr	r2, [r4, #16]
 80059e0:	6022      	str	r2, [r4, #0]
 80059e2:	d504      	bpl.n	80059ee <__sflush_r+0x7e>
 80059e4:	1c42      	adds	r2, r0, #1
 80059e6:	d101      	bne.n	80059ec <__sflush_r+0x7c>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	b903      	cbnz	r3, 80059ee <__sflush_r+0x7e>
 80059ec:	6560      	str	r0, [r4, #84]	; 0x54
 80059ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059f0:	602f      	str	r7, [r5, #0]
 80059f2:	2900      	cmp	r1, #0
 80059f4:	d0c9      	beq.n	800598a <__sflush_r+0x1a>
 80059f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059fa:	4299      	cmp	r1, r3
 80059fc:	d002      	beq.n	8005a04 <__sflush_r+0x94>
 80059fe:	4628      	mov	r0, r5
 8005a00:	f7ff febe 	bl	8005780 <_free_r>
 8005a04:	2000      	movs	r0, #0
 8005a06:	6360      	str	r0, [r4, #52]	; 0x34
 8005a08:	e7c0      	b.n	800598c <__sflush_r+0x1c>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b0      	blx	r6
 8005a10:	1c41      	adds	r1, r0, #1
 8005a12:	d1c8      	bne.n	80059a6 <__sflush_r+0x36>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0c5      	beq.n	80059a6 <__sflush_r+0x36>
 8005a1a:	2b1d      	cmp	r3, #29
 8005a1c:	d001      	beq.n	8005a22 <__sflush_r+0xb2>
 8005a1e:	2b16      	cmp	r3, #22
 8005a20:	d101      	bne.n	8005a26 <__sflush_r+0xb6>
 8005a22:	602f      	str	r7, [r5, #0]
 8005a24:	e7b1      	b.n	800598a <__sflush_r+0x1a>
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a2c:	81a3      	strh	r3, [r4, #12]
 8005a2e:	e7ad      	b.n	800598c <__sflush_r+0x1c>
 8005a30:	690f      	ldr	r7, [r1, #16]
 8005a32:	2f00      	cmp	r7, #0
 8005a34:	d0a9      	beq.n	800598a <__sflush_r+0x1a>
 8005a36:	0793      	lsls	r3, r2, #30
 8005a38:	680e      	ldr	r6, [r1, #0]
 8005a3a:	bf08      	it	eq
 8005a3c:	694b      	ldreq	r3, [r1, #20]
 8005a3e:	600f      	str	r7, [r1, #0]
 8005a40:	bf18      	it	ne
 8005a42:	2300      	movne	r3, #0
 8005a44:	eba6 0807 	sub.w	r8, r6, r7
 8005a48:	608b      	str	r3, [r1, #8]
 8005a4a:	f1b8 0f00 	cmp.w	r8, #0
 8005a4e:	dd9c      	ble.n	800598a <__sflush_r+0x1a>
 8005a50:	6a21      	ldr	r1, [r4, #32]
 8005a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a54:	4643      	mov	r3, r8
 8005a56:	463a      	mov	r2, r7
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b0      	blx	r6
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	dc06      	bgt.n	8005a6e <__sflush_r+0xfe>
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e78e      	b.n	800598c <__sflush_r+0x1c>
 8005a6e:	4407      	add	r7, r0
 8005a70:	eba8 0800 	sub.w	r8, r8, r0
 8005a74:	e7e9      	b.n	8005a4a <__sflush_r+0xda>
 8005a76:	bf00      	nop
 8005a78:	dfbffffe 	.word	0xdfbffffe

08005a7c <_fflush_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	690b      	ldr	r3, [r1, #16]
 8005a80:	4605      	mov	r5, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	b913      	cbnz	r3, 8005a8c <_fflush_r+0x10>
 8005a86:	2500      	movs	r5, #0
 8005a88:	4628      	mov	r0, r5
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	b118      	cbz	r0, 8005a96 <_fflush_r+0x1a>
 8005a8e:	6a03      	ldr	r3, [r0, #32]
 8005a90:	b90b      	cbnz	r3, 8005a96 <_fflush_r+0x1a>
 8005a92:	f7ff fc2d 	bl	80052f0 <__sinit>
 8005a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f3      	beq.n	8005a86 <_fflush_r+0xa>
 8005a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005aa0:	07d0      	lsls	r0, r2, #31
 8005aa2:	d404      	bmi.n	8005aae <_fflush_r+0x32>
 8005aa4:	0599      	lsls	r1, r3, #22
 8005aa6:	d402      	bmi.n	8005aae <_fflush_r+0x32>
 8005aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aaa:	f7ff fe59 	bl	8005760 <__retarget_lock_acquire_recursive>
 8005aae:	4628      	mov	r0, r5
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	f7ff ff5d 	bl	8005970 <__sflush_r>
 8005ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ab8:	07da      	lsls	r2, r3, #31
 8005aba:	4605      	mov	r5, r0
 8005abc:	d4e4      	bmi.n	8005a88 <_fflush_r+0xc>
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	059b      	lsls	r3, r3, #22
 8005ac2:	d4e1      	bmi.n	8005a88 <_fflush_r+0xc>
 8005ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ac6:	f7ff fe4c 	bl	8005762 <__retarget_lock_release_recursive>
 8005aca:	e7dd      	b.n	8005a88 <_fflush_r+0xc>

08005acc <__swhatbuf_r>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	460c      	mov	r4, r1
 8005ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	b096      	sub	sp, #88	; 0x58
 8005ad8:	4615      	mov	r5, r2
 8005ada:	461e      	mov	r6, r3
 8005adc:	da0d      	bge.n	8005afa <__swhatbuf_r+0x2e>
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ae4:	f04f 0100 	mov.w	r1, #0
 8005ae8:	bf0c      	ite	eq
 8005aea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005aee:	2340      	movne	r3, #64	; 0x40
 8005af0:	2000      	movs	r0, #0
 8005af2:	6031      	str	r1, [r6, #0]
 8005af4:	602b      	str	r3, [r5, #0]
 8005af6:	b016      	add	sp, #88	; 0x58
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
 8005afa:	466a      	mov	r2, sp
 8005afc:	f000 f848 	bl	8005b90 <_fstat_r>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	dbec      	blt.n	8005ade <__swhatbuf_r+0x12>
 8005b04:	9901      	ldr	r1, [sp, #4]
 8005b06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005b0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005b0e:	4259      	negs	r1, r3
 8005b10:	4159      	adcs	r1, r3
 8005b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b16:	e7eb      	b.n	8005af0 <__swhatbuf_r+0x24>

08005b18 <__smakebuf_r>:
 8005b18:	898b      	ldrh	r3, [r1, #12]
 8005b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b1c:	079d      	lsls	r5, r3, #30
 8005b1e:	4606      	mov	r6, r0
 8005b20:	460c      	mov	r4, r1
 8005b22:	d507      	bpl.n	8005b34 <__smakebuf_r+0x1c>
 8005b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	6123      	str	r3, [r4, #16]
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	6163      	str	r3, [r4, #20]
 8005b30:	b002      	add	sp, #8
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	ab01      	add	r3, sp, #4
 8005b36:	466a      	mov	r2, sp
 8005b38:	f7ff ffc8 	bl	8005acc <__swhatbuf_r>
 8005b3c:	9900      	ldr	r1, [sp, #0]
 8005b3e:	4605      	mov	r5, r0
 8005b40:	4630      	mov	r0, r6
 8005b42:	f7ff fe89 	bl	8005858 <_malloc_r>
 8005b46:	b948      	cbnz	r0, 8005b5c <__smakebuf_r+0x44>
 8005b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b4c:	059a      	lsls	r2, r3, #22
 8005b4e:	d4ef      	bmi.n	8005b30 <__smakebuf_r+0x18>
 8005b50:	f023 0303 	bic.w	r3, r3, #3
 8005b54:	f043 0302 	orr.w	r3, r3, #2
 8005b58:	81a3      	strh	r3, [r4, #12]
 8005b5a:	e7e3      	b.n	8005b24 <__smakebuf_r+0xc>
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	6020      	str	r0, [r4, #0]
 8005b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	9b00      	ldr	r3, [sp, #0]
 8005b68:	6163      	str	r3, [r4, #20]
 8005b6a:	9b01      	ldr	r3, [sp, #4]
 8005b6c:	6120      	str	r0, [r4, #16]
 8005b6e:	b15b      	cbz	r3, 8005b88 <__smakebuf_r+0x70>
 8005b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b74:	4630      	mov	r0, r6
 8005b76:	f000 f81d 	bl	8005bb4 <_isatty_r>
 8005b7a:	b128      	cbz	r0, 8005b88 <__smakebuf_r+0x70>
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	81a3      	strh	r3, [r4, #12]
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	431d      	orrs	r5, r3
 8005b8c:	81a5      	strh	r5, [r4, #12]
 8005b8e:	e7cf      	b.n	8005b30 <__smakebuf_r+0x18>

08005b90 <_fstat_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4d07      	ldr	r5, [pc, #28]	; (8005bb0 <_fstat_r+0x20>)
 8005b94:	2300      	movs	r3, #0
 8005b96:	4604      	mov	r4, r0
 8005b98:	4608      	mov	r0, r1
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	f7fb f8c6 	bl	8000d2e <_fstat>
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	d102      	bne.n	8005bac <_fstat_r+0x1c>
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	b103      	cbz	r3, 8005bac <_fstat_r+0x1c>
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	bd38      	pop	{r3, r4, r5, pc}
 8005bae:	bf00      	nop
 8005bb0:	20004260 	.word	0x20004260

08005bb4 <_isatty_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d06      	ldr	r5, [pc, #24]	; (8005bd0 <_isatty_r+0x1c>)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	f7fb f8c5 	bl	8000d4e <_isatty>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_isatty_r+0x1a>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_isatty_r+0x1a>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20004260 	.word	0x20004260

08005bd4 <_sbrk_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d06      	ldr	r5, [pc, #24]	; (8005bf0 <_sbrk_r+0x1c>)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	f7fb f8ce 	bl	8000d80 <_sbrk>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_sbrk_r+0x1a>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_sbrk_r+0x1a>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	20004260 	.word	0x20004260

08005bf4 <_init>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	bf00      	nop
 8005bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	469e      	mov	lr, r3
 8005bfe:	4770      	bx	lr

08005c00 <_fini>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	bf00      	nop
 8005c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c06:	bc08      	pop	{r3}
 8005c08:	469e      	mov	lr, r3
 8005c0a:	4770      	bx	lr
