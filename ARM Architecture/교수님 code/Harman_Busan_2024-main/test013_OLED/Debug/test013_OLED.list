
test013_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003370  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002258  08003510  08003510  00004510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005768  08005768  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  08005768  08005768  00006768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005770  08005770  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005770  08005770  00006770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005774  08005774  00006774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005778  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20000078  080057f0  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  080057f0  00007690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b083  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002056  00000000  00000000  0001212b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00014188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080a  00000000  00000000  00014c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172e4  00000000  00000000  00015432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d983  00000000  00000000  0002c716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000898bf  00000000  00000000  0003a099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3958  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003340  00000000  00000000  000c399c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c6cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080034f8 	.word	0x080034f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080034f8 	.word	0x080034f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <delay>:

			 
	}

void delay(int ms)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

	SysTick->LOAD=16000-1;
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <delay+0x50>)
 800057a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800057e:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <delay+0x50>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=0x5;
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <delay+0x50>)
 8000588:	2205      	movs	r2, #5
 800058a:	601a      	str	r2, [r3, #0]
		for (int i=0;i<ms;i++)
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	e009      	b.n	80005a6 <delay+0x36>
		{
			while(!(SysTick->CTRL &0x10000)){}
 8000592:	bf00      	nop
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <delay+0x50>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f9      	beq.n	8000594 <delay+0x24>
		for (int i=0;i<ms;i++)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	dbf1      	blt.n	8000592 <delay+0x22>
		}
	SysTick->CTRL=0;	
 80005ae:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <delay+0x50>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]

}
 80005b4:	bf00      	nop
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000e010 	.word	0xe000e010

080005c4 <SSD1306_WRITECOMMAND>:
/* SSD1306 data buffer */
static char SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];


void SSD1306_WRITECOMMAND(char command)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	OLED_CommMode();
 80005ce:	f000 fb3f 	bl	8000c50 <OLED_CommMode>
	OLED_Select();
 80005d2:	f000 fb13 	bl	8000bfc <OLED_Select>
	OLED_SPI_Write(&command,1);
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fad8 	bl	8000b90 <OLED_SPI_Write>
	OLED_Deselect();
 80005e0:	f000 fb1a 	bl	8000c18 <OLED_Deselect>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <SSD1306_Write_Multi_Data>:
	OLED_SPI_Write(&command,1);
	OLED_Deselect();
}

void SSD1306_Write_Multi_Data(char * data, uint16_t length)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
	OLED_DataMode();
 80005f8:	f000 fb1c 	bl	8000c34 <OLED_DataMode>
	OLED_Select();
 80005fc:	f000 fafe 	bl	8000bfc <OLED_Select>
	OLED_SPI_Write((char*)data,length);
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	4619      	mov	r1, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 fac3 	bl	8000b90 <OLED_SPI_Write>
	OLED_Deselect();
 800060a:	f000 fb05 	bl	8000c18 <OLED_Deselect>

}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b086      	sub	sp, #24
 800061a:	af00      	add	r7, sp, #0
 800061c:	60ba      	str	r2, [r7, #8]
 800061e:	461a      	mov	r2, r3
 8000620:	4603      	mov	r3, r0
 8000622:	81fb      	strh	r3, [r7, #14]
 8000624:	460b      	mov	r3, r1
 8000626:	81bb      	strh	r3, [r7, #12]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800062c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000630:	3307      	adds	r3, #7
 8000632:	2b00      	cmp	r3, #0
 8000634:	da00      	bge.n	8000638 <SSD1306_DrawBitmap+0x22>
 8000636:	3307      	adds	r3, #7
 8000638:	10db      	asrs	r3, r3, #3
 800063a:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000640:	2300      	movs	r3, #0
 8000642:	82bb      	strh	r3, [r7, #20]
 8000644:	e044      	b.n	80006d0 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000646:	2300      	movs	r3, #0
 8000648:	827b      	strh	r3, [r7, #18]
 800064a:	e02f      	b.n	80006ac <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800064c:	8a7b      	ldrh	r3, [r7, #18]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000656:	7dfb      	ldrb	r3, [r7, #23]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	75fb      	strb	r3, [r7, #23]
 800065c:	e012      	b.n	8000684 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800065e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000662:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000666:	fb03 f202 	mul.w	r2, r3, r2
 800066a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800066e:	2b00      	cmp	r3, #0
 8000670:	da00      	bge.n	8000674 <SSD1306_DrawBitmap+0x5e>
 8000672:	3307      	adds	r3, #7
 8000674:	10db      	asrs	r3, r3, #3
 8000676:	b21b      	sxth	r3, r3
 8000678:	4413      	add	r3, r2
 800067a:	461a      	mov	r2, r3
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4413      	add	r3, r2
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000688:	2b00      	cmp	r3, #0
 800068a:	da09      	bge.n	80006a0 <SSD1306_DrawBitmap+0x8a>
 800068c:	89fa      	ldrh	r2, [r7, #14]
 800068e:	8a7b      	ldrh	r3, [r7, #18]
 8000690:	4413      	add	r3, r2
 8000692:	b29b      	uxth	r3, r3
 8000694:	89b9      	ldrh	r1, [r7, #12]
 8000696:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f8e2 	bl	8000864 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80006a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	3301      	adds	r3, #1
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	827b      	strh	r3, [r7, #18]
 80006ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80006b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbc9      	blt.n	800064c <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80006b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	3301      	adds	r3, #1
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	82bb      	strh	r3, [r7, #20]
 80006c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	3301      	adds	r3, #1
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	81bb      	strh	r3, [r7, #12]
 80006d0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80006d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbb4      	blt.n	8000646 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <SSD1306_Init>:




uint8_t SSD1306_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	 OLED_SPI_Pins_Init();
 80006ee:	f000 f9db 	bl	8000aa8 <OLED_SPI_Pins_Init>

	 OLED_SPI_Configure();
 80006f2:	f000 f9ff 	bl	8000af4 <OLED_SPI_Configure>
	/* A little delay */
	uint32_t p = 2500;
 80006f6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80006fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006fc:	e002      	b.n	8000704 <SSD1306_Init+0x1c>
		p--;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3b01      	subs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1f9      	bne.n	80006fe <SSD1306_Init+0x16>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800070a:	20ae      	movs	r0, #174	@ 0xae
 800070c:	f7ff ff5a 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000710:	2020      	movs	r0, #32
 8000712:	f7ff ff57 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000716:	2010      	movs	r0, #16
 8000718:	f7ff ff54 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800071c:	20b0      	movs	r0, #176	@ 0xb0
 800071e:	f7ff ff51 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000722:	20c8      	movs	r0, #200	@ 0xc8
 8000724:	f7ff ff4e 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff4b 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800072e:	2010      	movs	r0, #16
 8000730:	f7ff ff48 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000734:	2040      	movs	r0, #64	@ 0x40
 8000736:	f7ff ff45 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800073a:	2081      	movs	r0, #129	@ 0x81
 800073c:	f7ff ff42 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xFF);
 8000740:	20ff      	movs	r0, #255	@ 0xff
 8000742:	f7ff ff3f 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000746:	20a1      	movs	r0, #161	@ 0xa1
 8000748:	f7ff ff3c 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800074c:	20a6      	movs	r0, #166	@ 0xa6
 800074e:	f7ff ff39 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000752:	20a8      	movs	r0, #168	@ 0xa8
 8000754:	f7ff ff36 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x3F); //
 8000758:	203f      	movs	r0, #63	@ 0x3f
 800075a:	f7ff ff33 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800075e:	20a4      	movs	r0, #164	@ 0xa4
 8000760:	f7ff ff30 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000764:	20d3      	movs	r0, #211	@ 0xd3
 8000766:	f7ff ff2d 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff ff2a 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000770:	20d5      	movs	r0, #213	@ 0xd5
 8000772:	f7ff ff27 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000776:	20f0      	movs	r0, #240	@ 0xf0
 8000778:	f7ff ff24 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800077c:	20d9      	movs	r0, #217	@ 0xd9
 800077e:	f7ff ff21 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x22); //
 8000782:	2022      	movs	r0, #34	@ 0x22
 8000784:	f7ff ff1e 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000788:	20da      	movs	r0, #218	@ 0xda
 800078a:	f7ff ff1b 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x12);
 800078e:	2012      	movs	r0, #18
 8000790:	f7ff ff18 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000794:	20db      	movs	r0, #219	@ 0xdb
 8000796:	f7ff ff15 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800079a:	2020      	movs	r0, #32
 800079c:	f7ff ff12 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80007a0:	208d      	movs	r0, #141	@ 0x8d
 80007a2:	f7ff ff0f 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x14); //
 80007a6:	2014      	movs	r0, #20
 80007a8:	f7ff ff0c 	bl	80005c4 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80007ac:	20af      	movs	r0, #175	@ 0xaf
 80007ae:	f7ff ff09 	bl	80005c4 <SSD1306_WRITECOMMAND>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80007b2:	202e      	movs	r0, #46	@ 0x2e
 80007b4:	f7ff ff06 	bl	80005c4 <SSD1306_WRITECOMMAND>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 f83b 	bl	8000834 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80007be:	f000 f811 	bl	80007e4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80007c2:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <SSD1306_Init+0xf8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <SSD1306_Init+0xf8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80007ce:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <SSD1306_Init+0xf8>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80007d4:	2301      	movs	r3, #1
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000494 	.word	0x20000494

080007e4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	71fb      	strb	r3, [r7, #7]
 80007ee:	e016      	b.n	800081e <SSD1306_UpdateScreen+0x3a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	3b50      	subs	r3, #80	@ 0x50
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fee4 	bl	80005c4 <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x00);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fee1 	bl	80005c4 <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x10);
 8000802:	2010      	movs	r0, #16
 8000804:	f7ff fede 	bl	80005c4 <SSD1306_WRITECOMMAND>
		
		/* Write multi data */

		SSD1306_Write_Multi_Data(&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	01db      	lsls	r3, r3, #7
 800080c:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <SSD1306_UpdateScreen+0x4c>)
 800080e:	4413      	add	r3, r2
 8000810:	2180      	movs	r1, #128	@ 0x80
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff feea 	bl	80005ec <SSD1306_Write_Multi_Data>
	for (m = 0; m < 8; m++) {
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3301      	adds	r3, #1
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b07      	cmp	r3, #7
 8000822:	d9e5      	bls.n	80007f0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000094 	.word	0x20000094

08000834 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <SSD1306_Fill+0x14>
 8000844:	2300      	movs	r3, #0
 8000846:	e000      	b.n	800084a <SSD1306_Fill+0x16>
 8000848:	23ff      	movs	r3, #255	@ 0xff
 800084a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800084e:	4619      	mov	r1, r3
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <SSD1306_Fill+0x2c>)
 8000852:	f001 ff17 	bl	8002684 <memset>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000094 	.word	0x20000094

08000864 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
 800086e:	460b      	mov	r3, r1
 8000870:	80bb      	strh	r3, [r7, #4]
 8000872:	4613      	mov	r3, r2
 8000874:	70fb      	strb	r3, [r7, #3]
	if (
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	2b7f      	cmp	r3, #127	@ 0x7f
 800087a:	d848      	bhi.n	800090e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800087c:	88bb      	ldrh	r3, [r7, #4]
 800087e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000880:	d845      	bhi.n	800090e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000882:	4b26      	ldr	r3, [pc, #152]	@ (800091c <SSD1306_DrawPixel+0xb8>)
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d006      	beq.n	8000898 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	2b00      	cmp	r3, #0
 800088e:	bf0c      	ite	eq
 8000890:	2301      	moveq	r3, #1
 8000892:	2300      	movne	r3, #0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d11a      	bne.n	80008d4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800089e:	88fa      	ldrh	r2, [r7, #6]
 80008a0:	88bb      	ldrh	r3, [r7, #4]
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	b298      	uxth	r0, r3
 80008a6:	4603      	mov	r3, r0
 80008a8:	01db      	lsls	r3, r3, #7
 80008aa:	4413      	add	r3, r2
 80008ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000920 <SSD1306_DrawPixel+0xbc>)
 80008ae:	5cd3      	ldrb	r3, [r2, r3]
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	88bb      	ldrh	r3, [r7, #4]
 80008b4:	f003 0307 	and.w	r3, r3, #7
 80008b8:	2101      	movs	r1, #1
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b259      	sxtb	r1, r3
 80008c4:	88fa      	ldrh	r2, [r7, #6]
 80008c6:	4603      	mov	r3, r0
 80008c8:	01db      	lsls	r3, r3, #7
 80008ca:	4413      	add	r3, r2
 80008cc:	b2c9      	uxtb	r1, r1
 80008ce:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <SSD1306_DrawPixel+0xbc>)
 80008d0:	54d1      	strb	r1, [r2, r3]
 80008d2:	e01d      	b.n	8000910 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008d4:	88fa      	ldrh	r2, [r7, #6]
 80008d6:	88bb      	ldrh	r3, [r7, #4]
 80008d8:	08db      	lsrs	r3, r3, #3
 80008da:	b298      	uxth	r0, r3
 80008dc:	4603      	mov	r3, r0
 80008de:	01db      	lsls	r3, r3, #7
 80008e0:	4413      	add	r3, r2
 80008e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <SSD1306_DrawPixel+0xbc>)
 80008e4:	5cd3      	ldrb	r3, [r2, r3]
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	88bb      	ldrh	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	2101      	movs	r1, #1
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	4013      	ands	r3, r2
 80008fc:	b259      	sxtb	r1, r3
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	4603      	mov	r3, r0
 8000902:	01db      	lsls	r3, r3, #7
 8000904:	4413      	add	r3, r2
 8000906:	b2c9      	uxtb	r1, r1
 8000908:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SSD1306_DrawPixel+0xbc>)
 800090a:	54d1      	strb	r1, [r2, r3]
 800090c:	e000      	b.n	8000910 <SSD1306_DrawPixel+0xac>
		return;
 800090e:	bf00      	nop
	}
}
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000494 	.word	0x20000494
 8000920:	20000094 	.word	0x20000094

08000924 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	80fb      	strh	r3, [r7, #6]
 8000930:	4613      	mov	r3, r2
 8000932:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000934:	4a05      	ldr	r2, [pc, #20]	@ (800094c <SSD1306_GotoXY+0x28>)
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800093a:	4a04      	ldr	r2, [pc, #16]	@ (800094c <SSD1306_GotoXY+0x28>)
 800093c:	88bb      	ldrh	r3, [r7, #4]
 800093e:	8053      	strh	r3, [r2, #2]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	20000494 	.word	0x20000494

08000950 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000960:	4b39      	ldr	r3, [pc, #228]	@ (8000a48 <SSD1306_Putc+0xf8>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
	if (
 800096c:	2b7f      	cmp	r3, #127	@ 0x7f
 800096e:	dc07      	bgt.n	8000980 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000970:	4b35      	ldr	r3, [pc, #212]	@ (8000a48 <SSD1306_Putc+0xf8>)
 8000972:	885b      	ldrh	r3, [r3, #2]
 8000974:	461a      	mov	r2, r3
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	785b      	ldrb	r3, [r3, #1]
 800097a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800097c:	2b3f      	cmp	r3, #63	@ 0x3f
 800097e:	dd01      	ble.n	8000984 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000980:	2300      	movs	r3, #0
 8000982:	e05d      	b.n	8000a40 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e04b      	b.n	8000a22 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	3b20      	subs	r3, #32
 8000992:	6839      	ldr	r1, [r7, #0]
 8000994:	7849      	ldrb	r1, [r1, #1]
 8000996:	fb01 f303 	mul.w	r3, r1, r3
 800099a:	4619      	mov	r1, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	440b      	add	r3, r1
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	e030      	b.n	8000a10 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d010      	beq.n	80009e0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80009be:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <SSD1306_Putc+0xf8>)
 80009c0:	881a      	ldrh	r2, [r3, #0]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4413      	add	r3, r2
 80009c8:	b298      	uxth	r0, r3
 80009ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <SSD1306_Putc+0xf8>)
 80009cc:	885a      	ldrh	r2, [r3, #2]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	79ba      	ldrb	r2, [r7, #6]
 80009d8:	4619      	mov	r1, r3
 80009da:	f7ff ff43 	bl	8000864 <SSD1306_DrawPixel>
 80009de:	e014      	b.n	8000a0a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <SSD1306_Putc+0xf8>)
 80009e2:	881a      	ldrh	r2, [r3, #0]
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	b298      	uxth	r0, r3
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <SSD1306_Putc+0xf8>)
 80009ee:	885a      	ldrh	r2, [r3, #2]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4413      	add	r3, r2
 80009f6:	b299      	uxth	r1, r3
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf0c      	ite	eq
 80009fe:	2301      	moveq	r3, #1
 8000a00:	2300      	movne	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	f7ff ff2d 	bl	8000864 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d3c8      	bcc.n	80009ae <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	461a      	mov	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d3ad      	bcc.n	800098a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <SSD1306_Putc+0xf8>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <SSD1306_Putc+0xf8>)
 8000a3c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000494 	.word	0x20000494

08000a4c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	4613      	mov	r3, r2
 8000a58:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000a5a:	e012      	b.n	8000a82 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff73 	bl	8000950 <SSD1306_Putc>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d002      	beq.n	8000a7c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	e008      	b.n	8000a8e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1e8      	bne.n	8000a5c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff feca 	bl	8000834 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000aa0:	f7ff fea0 	bl	80007e4 <SSD1306_UpdateScreen>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <OLED_SPI_Pins_Init>:

#include "stm32f4xx.h"


void OLED_SPI_Pins_Init()
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN; //enable clock for GPIOA
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <OLED_SPI_Pins_Init+0x44>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <OLED_SPI_Pins_Init+0x44>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6313      	str	r3, [r2, #48]	@ 0x30

	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE7_1;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <OLED_SPI_Pins_Init+0x48>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0c      	ldr	r2, [pc, #48]	@ (8000af0 <OLED_SPI_Pins_Init+0x48>)
 8000abe:	f443 4308 	orr.w	r3, r3, #34816	@ 0x8800
 8000ac2:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER &=~(GPIO_MODER_MODE5_0|GPIO_MODER_MODE7_0);

	//Set PA9 and PA10 as Output
	GPIOA->MODER|=GPIO_MODER_MODE9_0|GPIO_MODER_MODE10_0;//|GPIO_MODER_MODE6_0;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <OLED_SPI_Pins_Init+0x48>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	@ (8000af0 <OLED_SPI_Pins_Init+0x48>)
 8000aca:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8000ace:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER&=~(GPIO_MODER_MODE9_1|GPIO_MODER_MODE10_1);//|GPIO_MODER_MODE6_1);

	/*select which AF for PA5, PA6 and PA7*/
	GPIOA->AFR[0]|=(0x05<<20)|(0x05<<24)|(0x05<<28);
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <OLED_SPI_Pins_Init+0x48>)
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	4a06      	ldr	r2, [pc, #24]	@ (8000af0 <OLED_SPI_Pins_Init+0x48>)
 8000ad6:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000ada:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000ade:	6213      	str	r3, [r2, #32]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000

08000af4 <OLED_SPI_Configure>:

void OLED_SPI_Configure()
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	/*Enable clock access to SPI1 module*/
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000af8:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <OLED_SPI_Configure+0x94>)
 8000afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afc:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <OLED_SPI_Configure+0x94>)
 8000afe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b02:	6453      	str	r3, [r2, #68]	@ 0x44

		/*Set clock to fPCLK/2*/
		SPI1->CR1 &=~(1U<<3);
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a20      	ldr	r2, [pc, #128]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b0a:	f023 0308 	bic.w	r3, r3, #8
 8000b0e:	6013      	str	r3, [r2, #0]
		SPI1->CR1 &=~(1U<<4);
 8000b10:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1d      	ldr	r2, [pc, #116]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b16:	f023 0310 	bic.w	r3, r3, #16
 8000b1a:	6013      	str	r3, [r2, #0]
		SPI1->CR1 &=~(1U<<5);
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1a      	ldr	r2, [pc, #104]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b22:	f023 0320 	bic.w	r3, r3, #32
 8000b26:	6013      	str	r3, [r2, #0]

		/*Enable full duplex*/
		SPI1->CR1 &=~(1U<<10);
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000b32:	6013      	str	r3, [r2, #0]

		/*Set MSB first*/
		SPI1->CR1 &= ~(1U<<7);
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b3e:	6013      	str	r3, [r2, #0]

		/*Set mode to MASTER*/
		SPI1->CR1 |= (1U<<2);
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a11      	ldr	r2, [pc, #68]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6013      	str	r3, [r2, #0]

		/*Set 8 bit data mode*/
		SPI1->CR1 &= ~(1U<<11);
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000b56:	6013      	str	r3, [r2, #0]

		/*Select software slave management by
		 * setting SSM=1 and SSI=1*/
		SPI1->CR1 |= (1<<8);
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b62:	6013      	str	r3, [r2, #0]
		SPI1->CR1 |= (1<<9);
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b6e:	6013      	str	r3, [r2, #0]

		/*Enable SPI module*/
		SPI1->CR1 |= (1<<6);
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <OLED_SPI_Configure+0x98>)
 8000b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40013000 	.word	0x40013000

08000b90 <OLED_SPI_Write>:

void OLED_SPI_Write(char *data,uint32_t size)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]

	while(i<size)
 8000b9e:	e00f      	b.n	8000bc0 <OLED_SPI_Write+0x30>
	{
		/*Wait until TXE is set*/
		while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000ba0:	bf00      	nop
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <OLED_SPI_Write+0x68>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f9      	beq.n	8000ba2 <OLED_SPI_Write+0x12>

		/*Write the data to the data register*/
		SPI1->DR =(uint8_t) data[i];
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <OLED_SPI_Write+0x68>)
 8000bb8:	60da      	str	r2, [r3, #12]
		i++;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
	while(i<size)
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d3eb      	bcc.n	8000ba0 <OLED_SPI_Write+0x10>
	}
	/*Wait until TXE is set*/
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000bc8:	bf00      	nop
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <OLED_SPI_Write+0x68>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f9      	beq.n	8000bca <OLED_SPI_Write+0x3a>

	/*Wait for BUSY flag to reset*/
	while((SPI1->SR & (SPI_SR_BSY))){}
 8000bd6:	bf00      	nop
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <OLED_SPI_Write+0x68>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f9      	bne.n	8000bd8 <OLED_SPI_Write+0x48>

	/*Clear OVR flag*/
	(void)SPI1->DR;
 8000be4:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <OLED_SPI_Write+0x68>)
 8000be6:	68db      	ldr	r3, [r3, #12]
	(void)SPI1->SR;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <OLED_SPI_Write+0x68>)
 8000bea:	689b      	ldr	r3, [r3, #8]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40013000 	.word	0x40013000

08000bfc <OLED_Select>:



void OLED_Select(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	GPIOA->BSRR =GPIO_BSRR_BR9;
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <OLED_Select+0x18>)
 8000c02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c06:	619a      	str	r2, [r3, #24]

}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40020000 	.word	0x40020000

08000c18 <OLED_Deselect>:

/*Pull high to disable*/
void OLED_Deselect(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	GPIOA->BSRR =GPIO_BSRR_BS9;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <OLED_Deselect+0x18>)
 8000c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c22:	619a      	str	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40020000 	.word	0x40020000

08000c34 <OLED_DataMode>:

void OLED_DataMode()
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	GPIOA->BSRR=GPIO_BSRR_BS10;
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <OLED_DataMode+0x18>)
 8000c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3e:	619a      	str	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40020000 	.word	0x40020000

08000c50 <OLED_CommMode>:

void OLED_CommMode()
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	GPIOA->BSRR=GPIO_BSRR_BR10;
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <OLED_CommMode+0x18>)
 8000c56:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c5a:	619a      	str	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40020000 	.word	0x40020000

08000c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f000 fb21 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f000 f8b1 	bl	8000ddc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c7a:	f000 f885 	bl	8000d88 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000c7e:	f000 f84d 	bl	8000d1c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart();
 8000c82:	f000 f91d 	bl	8000ec0 <ProgramStart>
  SSD1306_Init();
 8000c86:	f7ff fd2f 	bl	80006e8 <SSD1306_Init>

  SSD1306_Clear();
 8000c8a:	f7ff ff04 	bl	8000a96 <SSD1306_Clear>
  SSD1306_GotoXY(32, 20);
 8000c8e:	2114      	movs	r1, #20
 8000c90:	2020      	movs	r0, #32
 8000c92:	f7ff fe47 	bl	8000924 <SSD1306_GotoXY>
  SSD1306_Puts("Hello", &Font_16x26, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	491b      	ldr	r1, [pc, #108]	@ (8000d08 <main+0x9c>)
 8000c9a:	481c      	ldr	r0, [pc, #112]	@ (8000d0c <main+0xa0>)
 8000c9c:	f7ff fed6 	bl	8000a4c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000ca0:	f7ff fda0 	bl	80007e4 <SSD1306_UpdateScreen>
  delay(2000);
 8000ca4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ca8:	f7ff fc62 	bl	8000570 <delay>

  char dum[20];
  for(int i=0;i<50;i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e016      	b.n	8000ce0 <main+0x74>
  {
	  SSD1306_GotoXY(1, i);
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff fe33 	bl	8000924 <SSD1306_GotoXY>
	  sprintf(dum, "Hello(%d)",i);
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	4913      	ldr	r1, [pc, #76]	@ (8000d10 <main+0xa4>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 fbe5 	bl	8002494 <siprintf>
	  SSD1306_Puts(dum, &Font_11x18, 1);
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4911      	ldr	r1, [pc, #68]	@ (8000d14 <main+0xa8>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff febb 	bl	8000a4c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000cd6:	f7ff fd85 	bl	80007e4 <SSD1306_UpdateScreen>
  for(int i=0;i<50;i++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	2b31      	cmp	r3, #49	@ 0x31
 8000ce4:	dde5      	ble.n	8000cb2 <main+0x46>
  }

  SSD1306_Clear();
 8000ce6:	f7ff fed6 	bl	8000a96 <SSD1306_Clear>
  SSD1306_DrawBitmap(0, 0, img, 48, 48, 1);
 8000cea:	2301      	movs	r3, #1
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	2330      	movs	r3, #48	@ 0x30
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2330      	movs	r3, #48	@ 0x30
 8000cf4:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <main+0xac>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff fc8c 	bl	8000616 <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 8000cfe:	f7ff fd71 	bl	80007e4 <SSD1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d02:	bf00      	nop
 8000d04:	e7fd      	b.n	8000d02 <main+0x96>
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	08003510 	.word	0x08003510
 8000d10:	08003518 	.word	0x08003518
 8000d14:	20000000 	.word	0x20000000
 8000d18:	0800560c 	.word	0x0800560c

08000d1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d20:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d22:	4a18      	ldr	r2, [pc, #96]	@ (8000d84 <MX_SPI1_Init+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d68:	220a      	movs	r2, #10
 8000d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	@ (8000d80 <MX_SPI1_Init+0x64>)
 8000d6e:	f000 fdcb 	bl	8001908 <HAL_SPI_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d78:	f000 f88a 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000049c 	.word	0x2000049c
 8000d84:	40013000 	.word	0x40013000

08000d88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <MX_USART2_UART_Init+0x4c>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <MX_USART2_UART_Init+0x4c>)
 8000d94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <MX_USART2_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <MX_USART2_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <MX_USART2_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <MX_USART2_UART_Init+0x4c>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <MX_USART2_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <MX_USART2_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	f000 fe2b 	bl	8001a1a <HAL_UART_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dca:	f000 f861 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200004f4 	.word	0x200004f4
 8000dd8:	40004400 	.word	0x40004400

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a23      	ldr	r2, [pc, #140]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a1c      	ldr	r2, [pc, #112]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a15      	ldr	r2, [pc, #84]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_GPIO_Init+0xac>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e68:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_GPIO_Init+0xb0>)
 8000e7a:	f000 fb75 	bl	8001568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020800 	.word	0x40020800

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <__io_putchar>:
//extern ADC_HandleTypeDef hadc1;
//extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000ea4:	1d39      	adds	r1, r7, #4
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <__io_putchar+0x20>)
 8000eac:	f000 fe05 	bl	8001aba <HAL_UART_Transmit>
	return ch;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200004f4 	.word	0x200004f4

08000ec0 <ProgramStart>:
	//HAL_ADC_PollForConversion(&hadc1, 10);
	//return HAL_ADC_GetValue(&hadc1);
}

void ProgramStart()
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	printf("\033[2J");	// screen clear
 8000ec4:	4808      	ldr	r0, [pc, #32]	@ (8000ee8 <ProgramStart+0x28>)
 8000ec6:	f001 fa75 	bl	80023b4 <iprintf>
	printf("\033[1;1H");	// Move cursor pos to (1,1)
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <ProgramStart+0x2c>)
 8000ecc:	f001 fa72 	bl	80023b4 <iprintf>
	printf("Program Started");
 8000ed0:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <ProgramStart+0x30>)
 8000ed2:	f001 fa6f 	bl	80023b4 <iprintf>
	Wait(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 f80c 	bl	8000ef4 <Wait>
	printf("\033[2J");	// screen clear
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <ProgramStart+0x28>)
 8000ede:	f001 fa69 	bl	80023b4 <iprintf>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08003524 	.word	0x08003524
 8000eec:	0800352c 	.word	0x0800352c
 8000ef0:	08003534 	.word	0x08003534

08000ef4 <Wait>:

void Wait(int o)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(o) printf("Press Blue button to continue\r\n");
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <Wait+0x14>
 8000f02:	4808      	ldr	r0, [pc, #32]	@ (8000f24 <Wait+0x30>)
 8000f04:	f001 fabe 	bl	8002484 <puts>
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));  // (B1 == 0) if pressed
 8000f08:	bf00      	nop
 8000f0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <Wait+0x34>)
 8000f10:	f000 fcae 	bl	8001870 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f7      	bne.n	8000f0a <Wait+0x16>
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08003544 	.word	0x08003544
 8000f28:	40020800 	.word	0x40020800

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f6a:	2007      	movs	r0, #7
 8000f6c:	f000 fac8 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <HAL_SPI_MspInit+0x84>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12b      	bne.n	8000ff6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a17      	ldr	r2, [pc, #92]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fd6:	23a0      	movs	r3, #160	@ 0xa0
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_SPI_MspInit+0x8c>)
 8000ff2:	f000 fab9 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	@ 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40013000 	.word	0x40013000
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	@ (8001090 <HAL_UART_MspInit+0x84>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12b      	bne.n	8001086 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <HAL_UART_MspInit+0x88>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <HAL_UART_MspInit+0x88>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103c:	6413      	str	r3, [r2, #64]	@ 0x40
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <HAL_UART_MspInit+0x88>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <HAL_UART_MspInit+0x88>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	@ (8001094 <HAL_UART_MspInit+0x88>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <HAL_UART_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001066:	230c      	movs	r3, #12
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001076:	2307      	movs	r3, #7
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <HAL_UART_MspInit+0x8c>)
 8001082:	f000 fa71 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	@ 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40004400 	.word	0x40004400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <NMI_Handler+0x4>

080010a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <MemManage_Handler+0x4>

080010b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f2:	f000 f933 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e00a      	b.n	8001122 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110c:	f3af 8000 	nop.w
 8001110:	4601      	mov	r1, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	60ba      	str	r2, [r7, #8]
 8001118:	b2ca      	uxtb	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	dbf0      	blt.n	800110c <_read+0x12>
  }

  return len;
 800112a:	687b      	ldr	r3, [r7, #4]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e009      	b.n	800115a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	60ba      	str	r2, [r7, #8]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fea4 	bl	8000e9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	dbf1      	blt.n	8001146 <_write+0x12>
  }
  return len;
 8001162:	687b      	ldr	r3, [r7, #4]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_close>:

int _close(int file)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001194:	605a      	str	r2, [r3, #4]
  return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_isatty>:

int _isatty(int file)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	@ (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	@ (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f001 fa8c 	bl	8002720 <__errno>
 8001208:	4603      	mov	r3, r0
 800120a:	220c      	movs	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a05      	ldr	r2, [pc, #20]	@ (8001238 <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20020000 	.word	0x20020000
 8001234:	00000400 	.word	0x00000400
 8001238:	2000053c 	.word	0x2000053c
 800123c:	20000690 	.word	0x20000690

08001240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <SystemInit+0x20>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800124a:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <SystemInit+0x20>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800129c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001268:	f7ff ffea 	bl	8001240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	@ (80012a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	@ (80012a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	@ (80012b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001292:	f001 fa4b 	bl	800272c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001296:	f7ff fce9 	bl	8000c6c <main>
  bx  lr    
 800129a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800129c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012a8:	08005778 	.word	0x08005778
  ldr r2, =_sbss
 80012ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012b0:	20000690 	.word	0x20000690

080012b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012bc:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <HAL_Init+0x40>)
 80012c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <HAL_Init+0x40>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <HAL_Init+0x40>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f90d 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fe1e 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f917 	bl	800154e <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f8ed 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000010 	.word	0x20000010
 8001354:	20000018 	.word	0x20000018
 8001358:	20000014 	.word	0x20000014

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000018 	.word	0x20000018
 8001380:	20000540 	.word	0x20000540

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000540 	.word	0x20000540

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	@ (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	@ 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff47 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff5c 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff8e 	bl	8001454 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5d 	bl	8001400 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffb0 	bl	80014bc <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	@ 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e159      	b.n	8001838 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	f040 8148 	bne.w	8001832 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d005      	beq.n	80015ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d130      	bne.n	800161c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 0201 	and.w	r2, r3, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b03      	cmp	r3, #3
 8001626:	d017      	beq.n	8001658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a2 	beq.w	8001832 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b57      	ldr	r3, [pc, #348]	@ (8001850 <HAL_GPIO_Init+0x2e8>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	4a56      	ldr	r2, [pc, #344]	@ (8001850 <HAL_GPIO_Init+0x2e8>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fe:	4b54      	ldr	r3, [pc, #336]	@ (8001850 <HAL_GPIO_Init+0x2e8>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170a:	4a52      	ldr	r2, [pc, #328]	@ (8001854 <HAL_GPIO_Init+0x2ec>)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a49      	ldr	r2, [pc, #292]	@ (8001858 <HAL_GPIO_Init+0x2f0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d019      	beq.n	800176a <HAL_GPIO_Init+0x202>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a48      	ldr	r2, [pc, #288]	@ (800185c <HAL_GPIO_Init+0x2f4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0x1fe>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a47      	ldr	r2, [pc, #284]	@ (8001860 <HAL_GPIO_Init+0x2f8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00d      	beq.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a46      	ldr	r2, [pc, #280]	@ (8001864 <HAL_GPIO_Init+0x2fc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x1f6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a45      	ldr	r2, [pc, #276]	@ (8001868 <HAL_GPIO_Init+0x300>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_GPIO_Init+0x1f2>
 8001756:	2304      	movs	r3, #4
 8001758:	e008      	b.n	800176c <HAL_GPIO_Init+0x204>
 800175a:	2307      	movs	r3, #7
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x204>
 800175e:	2303      	movs	r3, #3
 8001760:	e004      	b.n	800176c <HAL_GPIO_Init+0x204>
 8001762:	2302      	movs	r3, #2
 8001764:	e002      	b.n	800176c <HAL_GPIO_Init+0x204>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x204>
 800176a:	2300      	movs	r3, #0
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f002 0203 	and.w	r2, r2, #3
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	4093      	lsls	r3, r2
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800177c:	4935      	ldr	r1, [pc, #212]	@ (8001854 <HAL_GPIO_Init+0x2ec>)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178a:	4b38      	ldr	r3, [pc, #224]	@ (800186c <HAL_GPIO_Init+0x304>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ae:	4a2f      	ldr	r2, [pc, #188]	@ (800186c <HAL_GPIO_Init+0x304>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	@ (800186c <HAL_GPIO_Init+0x304>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d8:	4a24      	ldr	r2, [pc, #144]	@ (800186c <HAL_GPIO_Init+0x304>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017de:	4b23      	ldr	r3, [pc, #140]	@ (800186c <HAL_GPIO_Init+0x304>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001802:	4a1a      	ldr	r2, [pc, #104]	@ (800186c <HAL_GPIO_Init+0x304>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001808:	4b18      	ldr	r3, [pc, #96]	@ (800186c <HAL_GPIO_Init+0x304>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800182c:	4a0f      	ldr	r2, [pc, #60]	@ (800186c <HAL_GPIO_Init+0x304>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3301      	adds	r3, #1
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	f67f aea2 	bls.w	8001584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3724      	adds	r7, #36	@ 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40013800 	.word	0x40013800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400
 8001860:	40020800 	.word	0x40020800
 8001864:	40020c00 	.word	0x40020c00
 8001868:	40021000 	.word	0x40021000
 800186c:	40013c00 	.word	0x40013c00

08001870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e001      	b.n	8001892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000010 	.word	0x20000010

080018b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018bc:	f7ff fff0 	bl	80018a0 <HAL_RCC_GetHCLKFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	0a9b      	lsrs	r3, r3, #10
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	4903      	ldr	r1, [pc, #12]	@ (80018dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	0800572c 	.word	0x0800572c

080018e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018e4:	f7ff ffdc 	bl	80018a0 <HAL_RCC_GetHCLKFreq>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	0b5b      	lsrs	r3, r3, #13
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	4903      	ldr	r1, [pc, #12]	@ (8001904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018f6:	5ccb      	ldrb	r3, [r1, r3]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40023800 	.word	0x40023800
 8001904:	0800572c 	.word	0x0800572c

08001908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07b      	b.n	8001a12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	2b00      	cmp	r3, #0
 8001920:	d108      	bne.n	8001934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800192a:	d009      	beq.n	8001940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
 8001932:	e005      	b.n	8001940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d106      	bne.n	8001960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fb0e 	bl	8000f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001976:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c4:	ea42 0103 	orr.w	r1, r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	f003 0104 	and.w	r1, r3, #4
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	f003 0210 	and.w	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	69da      	ldr	r2, [r3, #28]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e042      	b.n	8001ab2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d106      	bne.n	8001a46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fae3 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2224      	movs	r2, #36	@ 0x24
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f972 	bl	8001d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b08a      	sub	sp, #40	@ 0x28
 8001abe:	af02      	add	r7, sp, #8
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	d175      	bne.n	8001bc6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_UART_Transmit+0x2c>
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06e      	b.n	8001bc8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2221      	movs	r2, #33	@ 0x21
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001af8:	f7ff fc44 	bl	8001384 <HAL_GetTick>
 8001afc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	88fa      	ldrh	r2, [r7, #6]
 8001b02:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	88fa      	ldrh	r2, [r7, #6]
 8001b08:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b12:	d108      	bne.n	8001b26 <HAL_UART_Transmit+0x6c>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d104      	bne.n	8001b26 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	e003      	b.n	8001b2e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b2e:	e02e      	b.n	8001b8e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2200      	movs	r2, #0
 8001b38:	2180      	movs	r1, #128	@ 0x80
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f848 	bl	8001bd0 <UART_WaitOnFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e03a      	b.n	8001bc8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10b      	bne.n	8001b70 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b66:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	e007      	b.n	8001b80 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1cb      	bne.n	8001b30 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2140      	movs	r1, #64	@ 0x40
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f814 	bl	8001bd0 <UART_WaitOnFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e006      	b.n	8001bc8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
  }
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be0:	e03b      	b.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d037      	beq.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7ff fbcb 	bl	8001384 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	6a3a      	ldr	r2, [r7, #32]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d302      	bcc.n	8001c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e03a      	b.n	8001c7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d023      	beq.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b80      	cmp	r3, #128	@ 0x80
 8001c16:	d020      	beq.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b40      	cmp	r3, #64	@ 0x40
 8001c1c:	d01d      	beq.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d116      	bne.n	8001c5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f81d 	bl	8001c82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4013      	ands	r3, r2
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d0b4      	beq.n	8001be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b095      	sub	sp, #84	@ 0x54
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	330c      	adds	r3, #12
 8001c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c94:	e853 3f00 	ldrex	r3, [r3]
 8001c98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001caa:	643a      	str	r2, [r7, #64]	@ 0x40
 8001cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001cb2:	e841 2300 	strex	r3, r2, [r1]
 8001cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e5      	bne.n	8001c8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3314      	adds	r3, #20
 8001cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	e853 3f00 	ldrex	r3, [r3]
 8001ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3314      	adds	r3, #20
 8001cdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ce6:	e841 2300 	strex	r3, r2, [r1]
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1e5      	bne.n	8001cbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d119      	bne.n	8001d2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	330c      	adds	r3, #12
 8001d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	e853 3f00 	ldrex	r3, [r3]
 8001d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f023 0310 	bic.w	r3, r3, #16
 8001d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	330c      	adds	r3, #12
 8001d18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d1a:	61ba      	str	r2, [r7, #24]
 8001d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d1e:	6979      	ldr	r1, [r7, #20]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	e841 2300 	strex	r3, r2, [r1]
 8001d26:	613b      	str	r3, [r7, #16]
   return(result);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e5      	bne.n	8001cfa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d3c:	bf00      	nop
 8001d3e:	3754      	adds	r7, #84	@ 0x54
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d4c:	b0c0      	sub	sp, #256	@ 0x100
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d64:	68d9      	ldr	r1, [r3, #12]
 8001d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	ea40 0301 	orr.w	r3, r0, r1
 8001d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001da0:	f021 010c 	bic.w	r1, r1, #12
 8001da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001dae:	430b      	orrs	r3, r1
 8001db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc2:	6999      	ldr	r1, [r3, #24]
 8001dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	ea40 0301 	orr.w	r3, r0, r1
 8001dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b8f      	ldr	r3, [pc, #572]	@ (8002014 <UART_SetConfig+0x2cc>)
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d005      	beq.n	8001de8 <UART_SetConfig+0xa0>
 8001ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b8d      	ldr	r3, [pc, #564]	@ (8002018 <UART_SetConfig+0x2d0>)
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d104      	bne.n	8001df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001de8:	f7ff fd7a 	bl	80018e0 <HAL_RCC_GetPCLK2Freq>
 8001dec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001df0:	e003      	b.n	8001dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001df2:	f7ff fd61 	bl	80018b8 <HAL_RCC_GetPCLK1Freq>
 8001df6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e04:	f040 810c 	bne.w	8002020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	1891      	adds	r1, r2, r2
 8001e20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e22:	415b      	adcs	r3, r3
 8001e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	eb12 0801 	adds.w	r8, r2, r1
 8001e30:	4629      	mov	r1, r5
 8001e32:	eb43 0901 	adc.w	r9, r3, r1
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e4a:	4690      	mov	r8, r2
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	eb18 0303 	adds.w	r3, r8, r3
 8001e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e58:	462b      	mov	r3, r5
 8001e5a:	eb49 0303 	adc.w	r3, r9, r3
 8001e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e76:	460b      	mov	r3, r1
 8001e78:	18db      	adds	r3, r3, r3
 8001e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	eb42 0303 	adc.w	r3, r2, r3
 8001e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e8c:	f7fe f9f8 	bl	8000280 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4b61      	ldr	r3, [pc, #388]	@ (800201c <UART_SetConfig+0x2d4>)
 8001e96:	fba3 2302 	umull	r2, r3, r3, r2
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	011c      	lsls	r4, r3, #4
 8001e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	1891      	adds	r1, r2, r2
 8001eb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001eb8:	415b      	adcs	r3, r3
 8001eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ec0:	4641      	mov	r1, r8
 8001ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ee0:	4692      	mov	sl, r2
 8001ee2:	469b      	mov	fp, r3
 8001ee4:	4643      	mov	r3, r8
 8001ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8001eea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001eee:	464b      	mov	r3, r9
 8001ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	18db      	adds	r3, r3, r3
 8001f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f12:	4613      	mov	r3, r2
 8001f14:	eb42 0303 	adc.w	r3, r2, r3
 8001f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f22:	f7fe f9ad 	bl	8000280 <__aeabi_uldivmod>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <UART_SetConfig+0x2d4>)
 8001f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2264      	movs	r2, #100	@ 0x64
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	1acb      	subs	r3, r1, r3
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f42:	4b36      	ldr	r3, [pc, #216]	@ (800201c <UART_SetConfig+0x2d4>)
 8001f44:	fba3 2302 	umull	r2, r3, r3, r2
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f50:	441c      	add	r4, r3
 8001f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f56:	2200      	movs	r2, #0
 8001f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f64:	4642      	mov	r2, r8
 8001f66:	464b      	mov	r3, r9
 8001f68:	1891      	adds	r1, r2, r2
 8001f6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f6c:	415b      	adcs	r3, r3
 8001f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f74:	4641      	mov	r1, r8
 8001f76:	1851      	adds	r1, r2, r1
 8001f78:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f7a:	4649      	mov	r1, r9
 8001f7c:	414b      	adcs	r3, r1
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f8c:	4659      	mov	r1, fp
 8001f8e:	00cb      	lsls	r3, r1, #3
 8001f90:	4651      	mov	r1, sl
 8001f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f96:	4651      	mov	r1, sl
 8001f98:	00ca      	lsls	r2, r1, #3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fa8:	464b      	mov	r3, r9
 8001faa:	460a      	mov	r2, r1
 8001fac:	eb42 0303 	adc.w	r3, r2, r3
 8001fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001fc8:	460b      	mov	r3, r1
 8001fca:	18db      	adds	r3, r3, r3
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fce:	4613      	mov	r3, r2
 8001fd0:	eb42 0303 	adc.w	r3, r2, r3
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001fde:	f7fe f94f 	bl	8000280 <__aeabi_uldivmod>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <UART_SetConfig+0x2d4>)
 8001fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	2164      	movs	r1, #100	@ 0x64
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	3332      	adds	r3, #50	@ 0x32
 8001ffa:	4a08      	ldr	r2, [pc, #32]	@ (800201c <UART_SetConfig+0x2d4>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	095b      	lsrs	r3, r3, #5
 8002002:	f003 0207 	and.w	r2, r3, #7
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4422      	add	r2, r4
 800200e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002010:	e106      	b.n	8002220 <UART_SetConfig+0x4d8>
 8002012:	bf00      	nop
 8002014:	40011000 	.word	0x40011000
 8002018:	40011400 	.word	0x40011400
 800201c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002024:	2200      	movs	r2, #0
 8002026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800202a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800202e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002032:	4642      	mov	r2, r8
 8002034:	464b      	mov	r3, r9
 8002036:	1891      	adds	r1, r2, r2
 8002038:	6239      	str	r1, [r7, #32]
 800203a:	415b      	adcs	r3, r3
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
 800203e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002042:	4641      	mov	r1, r8
 8002044:	1854      	adds	r4, r2, r1
 8002046:	4649      	mov	r1, r9
 8002048:	eb43 0501 	adc.w	r5, r3, r1
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	00eb      	lsls	r3, r5, #3
 8002056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800205a:	00e2      	lsls	r2, r4, #3
 800205c:	4614      	mov	r4, r2
 800205e:	461d      	mov	r5, r3
 8002060:	4643      	mov	r3, r8
 8002062:	18e3      	adds	r3, r4, r3
 8002064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002068:	464b      	mov	r3, r9
 800206a:	eb45 0303 	adc.w	r3, r5, r3
 800206e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800207e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800208e:	4629      	mov	r1, r5
 8002090:	008b      	lsls	r3, r1, #2
 8002092:	4621      	mov	r1, r4
 8002094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002098:	4621      	mov	r1, r4
 800209a:	008a      	lsls	r2, r1, #2
 800209c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80020a0:	f7fe f8ee 	bl	8000280 <__aeabi_uldivmod>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4b60      	ldr	r3, [pc, #384]	@ (800222c <UART_SetConfig+0x4e4>)
 80020aa:	fba3 2302 	umull	r2, r3, r3, r2
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	011c      	lsls	r4, r3, #4
 80020b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020b6:	2200      	movs	r2, #0
 80020b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020c4:	4642      	mov	r2, r8
 80020c6:	464b      	mov	r3, r9
 80020c8:	1891      	adds	r1, r2, r2
 80020ca:	61b9      	str	r1, [r7, #24]
 80020cc:	415b      	adcs	r3, r3
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d4:	4641      	mov	r1, r8
 80020d6:	1851      	adds	r1, r2, r1
 80020d8:	6139      	str	r1, [r7, #16]
 80020da:	4649      	mov	r1, r9
 80020dc:	414b      	adcs	r3, r1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020ec:	4659      	mov	r1, fp
 80020ee:	00cb      	lsls	r3, r1, #3
 80020f0:	4651      	mov	r1, sl
 80020f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020f6:	4651      	mov	r1, sl
 80020f8:	00ca      	lsls	r2, r1, #3
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	4642      	mov	r2, r8
 8002102:	189b      	adds	r3, r3, r2
 8002104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002108:	464b      	mov	r3, r9
 800210a:	460a      	mov	r2, r1
 800210c:	eb42 0303 	adc.w	r3, r2, r3
 8002110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800211e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800212c:	4649      	mov	r1, r9
 800212e:	008b      	lsls	r3, r1, #2
 8002130:	4641      	mov	r1, r8
 8002132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002136:	4641      	mov	r1, r8
 8002138:	008a      	lsls	r2, r1, #2
 800213a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800213e:	f7fe f89f 	bl	8000280 <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4611      	mov	r1, r2
 8002148:	4b38      	ldr	r3, [pc, #224]	@ (800222c <UART_SetConfig+0x4e4>)
 800214a:	fba3 2301 	umull	r2, r3, r3, r1
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2264      	movs	r2, #100	@ 0x64
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	1acb      	subs	r3, r1, r3
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	3332      	adds	r3, #50	@ 0x32
 800215c:	4a33      	ldr	r2, [pc, #204]	@ (800222c <UART_SetConfig+0x4e4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002168:	441c      	add	r4, r3
 800216a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800216e:	2200      	movs	r2, #0
 8002170:	673b      	str	r3, [r7, #112]	@ 0x70
 8002172:	677a      	str	r2, [r7, #116]	@ 0x74
 8002174:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002178:	4642      	mov	r2, r8
 800217a:	464b      	mov	r3, r9
 800217c:	1891      	adds	r1, r2, r2
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	415b      	adcs	r3, r3
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002188:	4641      	mov	r1, r8
 800218a:	1851      	adds	r1, r2, r1
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	4649      	mov	r1, r9
 8002190:	414b      	adcs	r3, r1
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021a0:	4659      	mov	r1, fp
 80021a2:	00cb      	lsls	r3, r1, #3
 80021a4:	4651      	mov	r1, sl
 80021a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021aa:	4651      	mov	r1, sl
 80021ac:	00ca      	lsls	r2, r1, #3
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	4642      	mov	r2, r8
 80021b6:	189b      	adds	r3, r3, r2
 80021b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021ba:	464b      	mov	r3, r9
 80021bc:	460a      	mov	r2, r1
 80021be:	eb42 0303 	adc.w	r3, r2, r3
 80021c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80021ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80021dc:	4649      	mov	r1, r9
 80021de:	008b      	lsls	r3, r1, #2
 80021e0:	4641      	mov	r1, r8
 80021e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021e6:	4641      	mov	r1, r8
 80021e8:	008a      	lsls	r2, r1, #2
 80021ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021ee:	f7fe f847 	bl	8000280 <__aeabi_uldivmod>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <UART_SetConfig+0x4e4>)
 80021f8:	fba3 1302 	umull	r1, r3, r3, r2
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	2164      	movs	r1, #100	@ 0x64
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	3332      	adds	r3, #50	@ 0x32
 800220a:	4a08      	ldr	r2, [pc, #32]	@ (800222c <UART_SetConfig+0x4e4>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	f003 020f 	and.w	r2, r3, #15
 8002216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4422      	add	r2, r4
 800221e:	609a      	str	r2, [r3, #8]
}
 8002220:	bf00      	nop
 8002222:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002226:	46bd      	mov	sp, r7
 8002228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800222c:	51eb851f 	.word	0x51eb851f

08002230 <std>:
 8002230:	2300      	movs	r3, #0
 8002232:	b510      	push	{r4, lr}
 8002234:	4604      	mov	r4, r0
 8002236:	e9c0 3300 	strd	r3, r3, [r0]
 800223a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800223e:	6083      	str	r3, [r0, #8]
 8002240:	8181      	strh	r1, [r0, #12]
 8002242:	6643      	str	r3, [r0, #100]	@ 0x64
 8002244:	81c2      	strh	r2, [r0, #14]
 8002246:	6183      	str	r3, [r0, #24]
 8002248:	4619      	mov	r1, r3
 800224a:	2208      	movs	r2, #8
 800224c:	305c      	adds	r0, #92	@ 0x5c
 800224e:	f000 fa19 	bl	8002684 <memset>
 8002252:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <std+0x58>)
 8002254:	6263      	str	r3, [r4, #36]	@ 0x24
 8002256:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <std+0x5c>)
 8002258:	62a3      	str	r3, [r4, #40]	@ 0x28
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <std+0x60>)
 800225c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800225e:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <std+0x64>)
 8002260:	6323      	str	r3, [r4, #48]	@ 0x30
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <std+0x68>)
 8002264:	6224      	str	r4, [r4, #32]
 8002266:	429c      	cmp	r4, r3
 8002268:	d006      	beq.n	8002278 <std+0x48>
 800226a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800226e:	4294      	cmp	r4, r2
 8002270:	d002      	beq.n	8002278 <std+0x48>
 8002272:	33d0      	adds	r3, #208	@ 0xd0
 8002274:	429c      	cmp	r4, r3
 8002276:	d105      	bne.n	8002284 <std+0x54>
 8002278:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800227c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002280:	f000 ba78 	b.w	8002774 <__retarget_lock_init_recursive>
 8002284:	bd10      	pop	{r4, pc}
 8002286:	bf00      	nop
 8002288:	080024d5 	.word	0x080024d5
 800228c:	080024f7 	.word	0x080024f7
 8002290:	0800252f 	.word	0x0800252f
 8002294:	08002553 	.word	0x08002553
 8002298:	20000544 	.word	0x20000544

0800229c <stdio_exit_handler>:
 800229c:	4a02      	ldr	r2, [pc, #8]	@ (80022a8 <stdio_exit_handler+0xc>)
 800229e:	4903      	ldr	r1, [pc, #12]	@ (80022ac <stdio_exit_handler+0x10>)
 80022a0:	4803      	ldr	r0, [pc, #12]	@ (80022b0 <stdio_exit_handler+0x14>)
 80022a2:	f000 b869 	b.w	8002378 <_fwalk_sglue>
 80022a6:	bf00      	nop
 80022a8:	2000001c 	.word	0x2000001c
 80022ac:	080032c5 	.word	0x080032c5
 80022b0:	2000002c 	.word	0x2000002c

080022b4 <cleanup_stdio>:
 80022b4:	6841      	ldr	r1, [r0, #4]
 80022b6:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <cleanup_stdio+0x34>)
 80022b8:	4299      	cmp	r1, r3
 80022ba:	b510      	push	{r4, lr}
 80022bc:	4604      	mov	r4, r0
 80022be:	d001      	beq.n	80022c4 <cleanup_stdio+0x10>
 80022c0:	f001 f800 	bl	80032c4 <_fflush_r>
 80022c4:	68a1      	ldr	r1, [r4, #8]
 80022c6:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <cleanup_stdio+0x38>)
 80022c8:	4299      	cmp	r1, r3
 80022ca:	d002      	beq.n	80022d2 <cleanup_stdio+0x1e>
 80022cc:	4620      	mov	r0, r4
 80022ce:	f000 fff9 	bl	80032c4 <_fflush_r>
 80022d2:	68e1      	ldr	r1, [r4, #12]
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <cleanup_stdio+0x3c>)
 80022d6:	4299      	cmp	r1, r3
 80022d8:	d004      	beq.n	80022e4 <cleanup_stdio+0x30>
 80022da:	4620      	mov	r0, r4
 80022dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022e0:	f000 bff0 	b.w	80032c4 <_fflush_r>
 80022e4:	bd10      	pop	{r4, pc}
 80022e6:	bf00      	nop
 80022e8:	20000544 	.word	0x20000544
 80022ec:	200005ac 	.word	0x200005ac
 80022f0:	20000614 	.word	0x20000614

080022f4 <global_stdio_init.part.0>:
 80022f4:	b510      	push	{r4, lr}
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <global_stdio_init.part.0+0x30>)
 80022f8:	4c0b      	ldr	r4, [pc, #44]	@ (8002328 <global_stdio_init.part.0+0x34>)
 80022fa:	4a0c      	ldr	r2, [pc, #48]	@ (800232c <global_stdio_init.part.0+0x38>)
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	4620      	mov	r0, r4
 8002300:	2200      	movs	r2, #0
 8002302:	2104      	movs	r1, #4
 8002304:	f7ff ff94 	bl	8002230 <std>
 8002308:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800230c:	2201      	movs	r2, #1
 800230e:	2109      	movs	r1, #9
 8002310:	f7ff ff8e 	bl	8002230 <std>
 8002314:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002318:	2202      	movs	r2, #2
 800231a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800231e:	2112      	movs	r1, #18
 8002320:	f7ff bf86 	b.w	8002230 <std>
 8002324:	2000067c 	.word	0x2000067c
 8002328:	20000544 	.word	0x20000544
 800232c:	0800229d 	.word	0x0800229d

08002330 <__sfp_lock_acquire>:
 8002330:	4801      	ldr	r0, [pc, #4]	@ (8002338 <__sfp_lock_acquire+0x8>)
 8002332:	f000 ba20 	b.w	8002776 <__retarget_lock_acquire_recursive>
 8002336:	bf00      	nop
 8002338:	20000685 	.word	0x20000685

0800233c <__sfp_lock_release>:
 800233c:	4801      	ldr	r0, [pc, #4]	@ (8002344 <__sfp_lock_release+0x8>)
 800233e:	f000 ba1b 	b.w	8002778 <__retarget_lock_release_recursive>
 8002342:	bf00      	nop
 8002344:	20000685 	.word	0x20000685

08002348 <__sinit>:
 8002348:	b510      	push	{r4, lr}
 800234a:	4604      	mov	r4, r0
 800234c:	f7ff fff0 	bl	8002330 <__sfp_lock_acquire>
 8002350:	6a23      	ldr	r3, [r4, #32]
 8002352:	b11b      	cbz	r3, 800235c <__sinit+0x14>
 8002354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002358:	f7ff bff0 	b.w	800233c <__sfp_lock_release>
 800235c:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <__sinit+0x28>)
 800235e:	6223      	str	r3, [r4, #32]
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <__sinit+0x2c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f5      	bne.n	8002354 <__sinit+0xc>
 8002368:	f7ff ffc4 	bl	80022f4 <global_stdio_init.part.0>
 800236c:	e7f2      	b.n	8002354 <__sinit+0xc>
 800236e:	bf00      	nop
 8002370:	080022b5 	.word	0x080022b5
 8002374:	2000067c 	.word	0x2000067c

08002378 <_fwalk_sglue>:
 8002378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800237c:	4607      	mov	r7, r0
 800237e:	4688      	mov	r8, r1
 8002380:	4614      	mov	r4, r2
 8002382:	2600      	movs	r6, #0
 8002384:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002388:	f1b9 0901 	subs.w	r9, r9, #1
 800238c:	d505      	bpl.n	800239a <_fwalk_sglue+0x22>
 800238e:	6824      	ldr	r4, [r4, #0]
 8002390:	2c00      	cmp	r4, #0
 8002392:	d1f7      	bne.n	8002384 <_fwalk_sglue+0xc>
 8002394:	4630      	mov	r0, r6
 8002396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800239a:	89ab      	ldrh	r3, [r5, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d907      	bls.n	80023b0 <_fwalk_sglue+0x38>
 80023a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023a4:	3301      	adds	r3, #1
 80023a6:	d003      	beq.n	80023b0 <_fwalk_sglue+0x38>
 80023a8:	4629      	mov	r1, r5
 80023aa:	4638      	mov	r0, r7
 80023ac:	47c0      	blx	r8
 80023ae:	4306      	orrs	r6, r0
 80023b0:	3568      	adds	r5, #104	@ 0x68
 80023b2:	e7e9      	b.n	8002388 <_fwalk_sglue+0x10>

080023b4 <iprintf>:
 80023b4:	b40f      	push	{r0, r1, r2, r3}
 80023b6:	b507      	push	{r0, r1, r2, lr}
 80023b8:	4906      	ldr	r1, [pc, #24]	@ (80023d4 <iprintf+0x20>)
 80023ba:	ab04      	add	r3, sp, #16
 80023bc:	6808      	ldr	r0, [r1, #0]
 80023be:	f853 2b04 	ldr.w	r2, [r3], #4
 80023c2:	6881      	ldr	r1, [r0, #8]
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	f000 fc53 	bl	8002c70 <_vfiprintf_r>
 80023ca:	b003      	add	sp, #12
 80023cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80023d0:	b004      	add	sp, #16
 80023d2:	4770      	bx	lr
 80023d4:	20000028 	.word	0x20000028

080023d8 <_puts_r>:
 80023d8:	6a03      	ldr	r3, [r0, #32]
 80023da:	b570      	push	{r4, r5, r6, lr}
 80023dc:	6884      	ldr	r4, [r0, #8]
 80023de:	4605      	mov	r5, r0
 80023e0:	460e      	mov	r6, r1
 80023e2:	b90b      	cbnz	r3, 80023e8 <_puts_r+0x10>
 80023e4:	f7ff ffb0 	bl	8002348 <__sinit>
 80023e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023ea:	07db      	lsls	r3, r3, #31
 80023ec:	d405      	bmi.n	80023fa <_puts_r+0x22>
 80023ee:	89a3      	ldrh	r3, [r4, #12]
 80023f0:	0598      	lsls	r0, r3, #22
 80023f2:	d402      	bmi.n	80023fa <_puts_r+0x22>
 80023f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023f6:	f000 f9be 	bl	8002776 <__retarget_lock_acquire_recursive>
 80023fa:	89a3      	ldrh	r3, [r4, #12]
 80023fc:	0719      	lsls	r1, r3, #28
 80023fe:	d502      	bpl.n	8002406 <_puts_r+0x2e>
 8002400:	6923      	ldr	r3, [r4, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d135      	bne.n	8002472 <_puts_r+0x9a>
 8002406:	4621      	mov	r1, r4
 8002408:	4628      	mov	r0, r5
 800240a:	f000 f8e5 	bl	80025d8 <__swsetup_r>
 800240e:	b380      	cbz	r0, 8002472 <_puts_r+0x9a>
 8002410:	f04f 35ff 	mov.w	r5, #4294967295
 8002414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002416:	07da      	lsls	r2, r3, #31
 8002418:	d405      	bmi.n	8002426 <_puts_r+0x4e>
 800241a:	89a3      	ldrh	r3, [r4, #12]
 800241c:	059b      	lsls	r3, r3, #22
 800241e:	d402      	bmi.n	8002426 <_puts_r+0x4e>
 8002420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002422:	f000 f9a9 	bl	8002778 <__retarget_lock_release_recursive>
 8002426:	4628      	mov	r0, r5
 8002428:	bd70      	pop	{r4, r5, r6, pc}
 800242a:	2b00      	cmp	r3, #0
 800242c:	da04      	bge.n	8002438 <_puts_r+0x60>
 800242e:	69a2      	ldr	r2, [r4, #24]
 8002430:	429a      	cmp	r2, r3
 8002432:	dc17      	bgt.n	8002464 <_puts_r+0x8c>
 8002434:	290a      	cmp	r1, #10
 8002436:	d015      	beq.n	8002464 <_puts_r+0x8c>
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	6022      	str	r2, [r4, #0]
 800243e:	7019      	strb	r1, [r3, #0]
 8002440:	68a3      	ldr	r3, [r4, #8]
 8002442:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002446:	3b01      	subs	r3, #1
 8002448:	60a3      	str	r3, [r4, #8]
 800244a:	2900      	cmp	r1, #0
 800244c:	d1ed      	bne.n	800242a <_puts_r+0x52>
 800244e:	2b00      	cmp	r3, #0
 8002450:	da11      	bge.n	8002476 <_puts_r+0x9e>
 8002452:	4622      	mov	r2, r4
 8002454:	210a      	movs	r1, #10
 8002456:	4628      	mov	r0, r5
 8002458:	f000 f87f 	bl	800255a <__swbuf_r>
 800245c:	3001      	adds	r0, #1
 800245e:	d0d7      	beq.n	8002410 <_puts_r+0x38>
 8002460:	250a      	movs	r5, #10
 8002462:	e7d7      	b.n	8002414 <_puts_r+0x3c>
 8002464:	4622      	mov	r2, r4
 8002466:	4628      	mov	r0, r5
 8002468:	f000 f877 	bl	800255a <__swbuf_r>
 800246c:	3001      	adds	r0, #1
 800246e:	d1e7      	bne.n	8002440 <_puts_r+0x68>
 8002470:	e7ce      	b.n	8002410 <_puts_r+0x38>
 8002472:	3e01      	subs	r6, #1
 8002474:	e7e4      	b.n	8002440 <_puts_r+0x68>
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	6022      	str	r2, [r4, #0]
 800247c:	220a      	movs	r2, #10
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e7ee      	b.n	8002460 <_puts_r+0x88>
	...

08002484 <puts>:
 8002484:	4b02      	ldr	r3, [pc, #8]	@ (8002490 <puts+0xc>)
 8002486:	4601      	mov	r1, r0
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	f7ff bfa5 	b.w	80023d8 <_puts_r>
 800248e:	bf00      	nop
 8002490:	20000028 	.word	0x20000028

08002494 <siprintf>:
 8002494:	b40e      	push	{r1, r2, r3}
 8002496:	b500      	push	{lr}
 8002498:	b09c      	sub	sp, #112	@ 0x70
 800249a:	ab1d      	add	r3, sp, #116	@ 0x74
 800249c:	9002      	str	r0, [sp, #8]
 800249e:	9006      	str	r0, [sp, #24]
 80024a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80024a4:	4809      	ldr	r0, [pc, #36]	@ (80024cc <siprintf+0x38>)
 80024a6:	9107      	str	r1, [sp, #28]
 80024a8:	9104      	str	r1, [sp, #16]
 80024aa:	4909      	ldr	r1, [pc, #36]	@ (80024d0 <siprintf+0x3c>)
 80024ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80024b0:	9105      	str	r1, [sp, #20]
 80024b2:	6800      	ldr	r0, [r0, #0]
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	a902      	add	r1, sp, #8
 80024b8:	f000 fab4 	bl	8002a24 <_svfiprintf_r>
 80024bc:	9b02      	ldr	r3, [sp, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	b01c      	add	sp, #112	@ 0x70
 80024c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80024c8:	b003      	add	sp, #12
 80024ca:	4770      	bx	lr
 80024cc:	20000028 	.word	0x20000028
 80024d0:	ffff0208 	.word	0xffff0208

080024d4 <__sread>:
 80024d4:	b510      	push	{r4, lr}
 80024d6:	460c      	mov	r4, r1
 80024d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024dc:	f000 f8fc 	bl	80026d8 <_read_r>
 80024e0:	2800      	cmp	r0, #0
 80024e2:	bfab      	itete	ge
 80024e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80024e6:	89a3      	ldrhlt	r3, [r4, #12]
 80024e8:	181b      	addge	r3, r3, r0
 80024ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80024ee:	bfac      	ite	ge
 80024f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80024f2:	81a3      	strhlt	r3, [r4, #12]
 80024f4:	bd10      	pop	{r4, pc}

080024f6 <__swrite>:
 80024f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024fa:	461f      	mov	r7, r3
 80024fc:	898b      	ldrh	r3, [r1, #12]
 80024fe:	05db      	lsls	r3, r3, #23
 8002500:	4605      	mov	r5, r0
 8002502:	460c      	mov	r4, r1
 8002504:	4616      	mov	r6, r2
 8002506:	d505      	bpl.n	8002514 <__swrite+0x1e>
 8002508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800250c:	2302      	movs	r3, #2
 800250e:	2200      	movs	r2, #0
 8002510:	f000 f8d0 	bl	80026b4 <_lseek_r>
 8002514:	89a3      	ldrh	r3, [r4, #12]
 8002516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800251a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800251e:	81a3      	strh	r3, [r4, #12]
 8002520:	4632      	mov	r2, r6
 8002522:	463b      	mov	r3, r7
 8002524:	4628      	mov	r0, r5
 8002526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800252a:	f000 b8e7 	b.w	80026fc <_write_r>

0800252e <__sseek>:
 800252e:	b510      	push	{r4, lr}
 8002530:	460c      	mov	r4, r1
 8002532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002536:	f000 f8bd 	bl	80026b4 <_lseek_r>
 800253a:	1c43      	adds	r3, r0, #1
 800253c:	89a3      	ldrh	r3, [r4, #12]
 800253e:	bf15      	itete	ne
 8002540:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002542:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002546:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800254a:	81a3      	strheq	r3, [r4, #12]
 800254c:	bf18      	it	ne
 800254e:	81a3      	strhne	r3, [r4, #12]
 8002550:	bd10      	pop	{r4, pc}

08002552 <__sclose>:
 8002552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002556:	f000 b89d 	b.w	8002694 <_close_r>

0800255a <__swbuf_r>:
 800255a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255c:	460e      	mov	r6, r1
 800255e:	4614      	mov	r4, r2
 8002560:	4605      	mov	r5, r0
 8002562:	b118      	cbz	r0, 800256c <__swbuf_r+0x12>
 8002564:	6a03      	ldr	r3, [r0, #32]
 8002566:	b90b      	cbnz	r3, 800256c <__swbuf_r+0x12>
 8002568:	f7ff feee 	bl	8002348 <__sinit>
 800256c:	69a3      	ldr	r3, [r4, #24]
 800256e:	60a3      	str	r3, [r4, #8]
 8002570:	89a3      	ldrh	r3, [r4, #12]
 8002572:	071a      	lsls	r2, r3, #28
 8002574:	d501      	bpl.n	800257a <__swbuf_r+0x20>
 8002576:	6923      	ldr	r3, [r4, #16]
 8002578:	b943      	cbnz	r3, 800258c <__swbuf_r+0x32>
 800257a:	4621      	mov	r1, r4
 800257c:	4628      	mov	r0, r5
 800257e:	f000 f82b 	bl	80025d8 <__swsetup_r>
 8002582:	b118      	cbz	r0, 800258c <__swbuf_r+0x32>
 8002584:	f04f 37ff 	mov.w	r7, #4294967295
 8002588:	4638      	mov	r0, r7
 800258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	6922      	ldr	r2, [r4, #16]
 8002590:	1a98      	subs	r0, r3, r2
 8002592:	6963      	ldr	r3, [r4, #20]
 8002594:	b2f6      	uxtb	r6, r6
 8002596:	4283      	cmp	r3, r0
 8002598:	4637      	mov	r7, r6
 800259a:	dc05      	bgt.n	80025a8 <__swbuf_r+0x4e>
 800259c:	4621      	mov	r1, r4
 800259e:	4628      	mov	r0, r5
 80025a0:	f000 fe90 	bl	80032c4 <_fflush_r>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d1ed      	bne.n	8002584 <__swbuf_r+0x2a>
 80025a8:	68a3      	ldr	r3, [r4, #8]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60a3      	str	r3, [r4, #8]
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	6022      	str	r2, [r4, #0]
 80025b4:	701e      	strb	r6, [r3, #0]
 80025b6:	6962      	ldr	r2, [r4, #20]
 80025b8:	1c43      	adds	r3, r0, #1
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d004      	beq.n	80025c8 <__swbuf_r+0x6e>
 80025be:	89a3      	ldrh	r3, [r4, #12]
 80025c0:	07db      	lsls	r3, r3, #31
 80025c2:	d5e1      	bpl.n	8002588 <__swbuf_r+0x2e>
 80025c4:	2e0a      	cmp	r6, #10
 80025c6:	d1df      	bne.n	8002588 <__swbuf_r+0x2e>
 80025c8:	4621      	mov	r1, r4
 80025ca:	4628      	mov	r0, r5
 80025cc:	f000 fe7a 	bl	80032c4 <_fflush_r>
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d0d9      	beq.n	8002588 <__swbuf_r+0x2e>
 80025d4:	e7d6      	b.n	8002584 <__swbuf_r+0x2a>
	...

080025d8 <__swsetup_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4b29      	ldr	r3, [pc, #164]	@ (8002680 <__swsetup_r+0xa8>)
 80025dc:	4605      	mov	r5, r0
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	460c      	mov	r4, r1
 80025e2:	b118      	cbz	r0, 80025ec <__swsetup_r+0x14>
 80025e4:	6a03      	ldr	r3, [r0, #32]
 80025e6:	b90b      	cbnz	r3, 80025ec <__swsetup_r+0x14>
 80025e8:	f7ff feae 	bl	8002348 <__sinit>
 80025ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025f0:	0719      	lsls	r1, r3, #28
 80025f2:	d422      	bmi.n	800263a <__swsetup_r+0x62>
 80025f4:	06da      	lsls	r2, r3, #27
 80025f6:	d407      	bmi.n	8002608 <__swsetup_r+0x30>
 80025f8:	2209      	movs	r2, #9
 80025fa:	602a      	str	r2, [r5, #0]
 80025fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002600:	81a3      	strh	r3, [r4, #12]
 8002602:	f04f 30ff 	mov.w	r0, #4294967295
 8002606:	e033      	b.n	8002670 <__swsetup_r+0x98>
 8002608:	0758      	lsls	r0, r3, #29
 800260a:	d512      	bpl.n	8002632 <__swsetup_r+0x5a>
 800260c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800260e:	b141      	cbz	r1, 8002622 <__swsetup_r+0x4a>
 8002610:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002614:	4299      	cmp	r1, r3
 8002616:	d002      	beq.n	800261e <__swsetup_r+0x46>
 8002618:	4628      	mov	r0, r5
 800261a:	f000 f8af 	bl	800277c <_free_r>
 800261e:	2300      	movs	r3, #0
 8002620:	6363      	str	r3, [r4, #52]	@ 0x34
 8002622:	89a3      	ldrh	r3, [r4, #12]
 8002624:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002628:	81a3      	strh	r3, [r4, #12]
 800262a:	2300      	movs	r3, #0
 800262c:	6063      	str	r3, [r4, #4]
 800262e:	6923      	ldr	r3, [r4, #16]
 8002630:	6023      	str	r3, [r4, #0]
 8002632:	89a3      	ldrh	r3, [r4, #12]
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	81a3      	strh	r3, [r4, #12]
 800263a:	6923      	ldr	r3, [r4, #16]
 800263c:	b94b      	cbnz	r3, 8002652 <__swsetup_r+0x7a>
 800263e:	89a3      	ldrh	r3, [r4, #12]
 8002640:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002648:	d003      	beq.n	8002652 <__swsetup_r+0x7a>
 800264a:	4621      	mov	r1, r4
 800264c:	4628      	mov	r0, r5
 800264e:	f000 fe87 	bl	8003360 <__smakebuf_r>
 8002652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002656:	f013 0201 	ands.w	r2, r3, #1
 800265a:	d00a      	beq.n	8002672 <__swsetup_r+0x9a>
 800265c:	2200      	movs	r2, #0
 800265e:	60a2      	str	r2, [r4, #8]
 8002660:	6962      	ldr	r2, [r4, #20]
 8002662:	4252      	negs	r2, r2
 8002664:	61a2      	str	r2, [r4, #24]
 8002666:	6922      	ldr	r2, [r4, #16]
 8002668:	b942      	cbnz	r2, 800267c <__swsetup_r+0xa4>
 800266a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800266e:	d1c5      	bne.n	80025fc <__swsetup_r+0x24>
 8002670:	bd38      	pop	{r3, r4, r5, pc}
 8002672:	0799      	lsls	r1, r3, #30
 8002674:	bf58      	it	pl
 8002676:	6962      	ldrpl	r2, [r4, #20]
 8002678:	60a2      	str	r2, [r4, #8]
 800267a:	e7f4      	b.n	8002666 <__swsetup_r+0x8e>
 800267c:	2000      	movs	r0, #0
 800267e:	e7f7      	b.n	8002670 <__swsetup_r+0x98>
 8002680:	20000028 	.word	0x20000028

08002684 <memset>:
 8002684:	4402      	add	r2, r0
 8002686:	4603      	mov	r3, r0
 8002688:	4293      	cmp	r3, r2
 800268a:	d100      	bne.n	800268e <memset+0xa>
 800268c:	4770      	bx	lr
 800268e:	f803 1b01 	strb.w	r1, [r3], #1
 8002692:	e7f9      	b.n	8002688 <memset+0x4>

08002694 <_close_r>:
 8002694:	b538      	push	{r3, r4, r5, lr}
 8002696:	4d06      	ldr	r5, [pc, #24]	@ (80026b0 <_close_r+0x1c>)
 8002698:	2300      	movs	r3, #0
 800269a:	4604      	mov	r4, r0
 800269c:	4608      	mov	r0, r1
 800269e:	602b      	str	r3, [r5, #0]
 80026a0:	f7fe fd64 	bl	800116c <_close>
 80026a4:	1c43      	adds	r3, r0, #1
 80026a6:	d102      	bne.n	80026ae <_close_r+0x1a>
 80026a8:	682b      	ldr	r3, [r5, #0]
 80026aa:	b103      	cbz	r3, 80026ae <_close_r+0x1a>
 80026ac:	6023      	str	r3, [r4, #0]
 80026ae:	bd38      	pop	{r3, r4, r5, pc}
 80026b0:	20000680 	.word	0x20000680

080026b4 <_lseek_r>:
 80026b4:	b538      	push	{r3, r4, r5, lr}
 80026b6:	4d07      	ldr	r5, [pc, #28]	@ (80026d4 <_lseek_r+0x20>)
 80026b8:	4604      	mov	r4, r0
 80026ba:	4608      	mov	r0, r1
 80026bc:	4611      	mov	r1, r2
 80026be:	2200      	movs	r2, #0
 80026c0:	602a      	str	r2, [r5, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f7fe fd79 	bl	80011ba <_lseek>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d102      	bne.n	80026d2 <_lseek_r+0x1e>
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	b103      	cbz	r3, 80026d2 <_lseek_r+0x1e>
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
 80026d4:	20000680 	.word	0x20000680

080026d8 <_read_r>:
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4d07      	ldr	r5, [pc, #28]	@ (80026f8 <_read_r+0x20>)
 80026dc:	4604      	mov	r4, r0
 80026de:	4608      	mov	r0, r1
 80026e0:	4611      	mov	r1, r2
 80026e2:	2200      	movs	r2, #0
 80026e4:	602a      	str	r2, [r5, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7fe fd07 	bl	80010fa <_read>
 80026ec:	1c43      	adds	r3, r0, #1
 80026ee:	d102      	bne.n	80026f6 <_read_r+0x1e>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	b103      	cbz	r3, 80026f6 <_read_r+0x1e>
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	20000680 	.word	0x20000680

080026fc <_write_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4d07      	ldr	r5, [pc, #28]	@ (800271c <_write_r+0x20>)
 8002700:	4604      	mov	r4, r0
 8002702:	4608      	mov	r0, r1
 8002704:	4611      	mov	r1, r2
 8002706:	2200      	movs	r2, #0
 8002708:	602a      	str	r2, [r5, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	f7fe fd12 	bl	8001134 <_write>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d102      	bne.n	800271a <_write_r+0x1e>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	b103      	cbz	r3, 800271a <_write_r+0x1e>
 8002718:	6023      	str	r3, [r4, #0]
 800271a:	bd38      	pop	{r3, r4, r5, pc}
 800271c:	20000680 	.word	0x20000680

08002720 <__errno>:
 8002720:	4b01      	ldr	r3, [pc, #4]	@ (8002728 <__errno+0x8>)
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000028 	.word	0x20000028

0800272c <__libc_init_array>:
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	4d0d      	ldr	r5, [pc, #52]	@ (8002764 <__libc_init_array+0x38>)
 8002730:	4c0d      	ldr	r4, [pc, #52]	@ (8002768 <__libc_init_array+0x3c>)
 8002732:	1b64      	subs	r4, r4, r5
 8002734:	10a4      	asrs	r4, r4, #2
 8002736:	2600      	movs	r6, #0
 8002738:	42a6      	cmp	r6, r4
 800273a:	d109      	bne.n	8002750 <__libc_init_array+0x24>
 800273c:	4d0b      	ldr	r5, [pc, #44]	@ (800276c <__libc_init_array+0x40>)
 800273e:	4c0c      	ldr	r4, [pc, #48]	@ (8002770 <__libc_init_array+0x44>)
 8002740:	f000 feda 	bl	80034f8 <_init>
 8002744:	1b64      	subs	r4, r4, r5
 8002746:	10a4      	asrs	r4, r4, #2
 8002748:	2600      	movs	r6, #0
 800274a:	42a6      	cmp	r6, r4
 800274c:	d105      	bne.n	800275a <__libc_init_array+0x2e>
 800274e:	bd70      	pop	{r4, r5, r6, pc}
 8002750:	f855 3b04 	ldr.w	r3, [r5], #4
 8002754:	4798      	blx	r3
 8002756:	3601      	adds	r6, #1
 8002758:	e7ee      	b.n	8002738 <__libc_init_array+0xc>
 800275a:	f855 3b04 	ldr.w	r3, [r5], #4
 800275e:	4798      	blx	r3
 8002760:	3601      	adds	r6, #1
 8002762:	e7f2      	b.n	800274a <__libc_init_array+0x1e>
 8002764:	08005770 	.word	0x08005770
 8002768:	08005770 	.word	0x08005770
 800276c:	08005770 	.word	0x08005770
 8002770:	08005774 	.word	0x08005774

08002774 <__retarget_lock_init_recursive>:
 8002774:	4770      	bx	lr

08002776 <__retarget_lock_acquire_recursive>:
 8002776:	4770      	bx	lr

08002778 <__retarget_lock_release_recursive>:
 8002778:	4770      	bx	lr
	...

0800277c <_free_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4605      	mov	r5, r0
 8002780:	2900      	cmp	r1, #0
 8002782:	d041      	beq.n	8002808 <_free_r+0x8c>
 8002784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002788:	1f0c      	subs	r4, r1, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	bfb8      	it	lt
 800278e:	18e4      	addlt	r4, r4, r3
 8002790:	f000 f8e0 	bl	8002954 <__malloc_lock>
 8002794:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <_free_r+0x90>)
 8002796:	6813      	ldr	r3, [r2, #0]
 8002798:	b933      	cbnz	r3, 80027a8 <_free_r+0x2c>
 800279a:	6063      	str	r3, [r4, #4]
 800279c:	6014      	str	r4, [r2, #0]
 800279e:	4628      	mov	r0, r5
 80027a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027a4:	f000 b8dc 	b.w	8002960 <__malloc_unlock>
 80027a8:	42a3      	cmp	r3, r4
 80027aa:	d908      	bls.n	80027be <_free_r+0x42>
 80027ac:	6820      	ldr	r0, [r4, #0]
 80027ae:	1821      	adds	r1, r4, r0
 80027b0:	428b      	cmp	r3, r1
 80027b2:	bf01      	itttt	eq
 80027b4:	6819      	ldreq	r1, [r3, #0]
 80027b6:	685b      	ldreq	r3, [r3, #4]
 80027b8:	1809      	addeq	r1, r1, r0
 80027ba:	6021      	streq	r1, [r4, #0]
 80027bc:	e7ed      	b.n	800279a <_free_r+0x1e>
 80027be:	461a      	mov	r2, r3
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b10b      	cbz	r3, 80027c8 <_free_r+0x4c>
 80027c4:	42a3      	cmp	r3, r4
 80027c6:	d9fa      	bls.n	80027be <_free_r+0x42>
 80027c8:	6811      	ldr	r1, [r2, #0]
 80027ca:	1850      	adds	r0, r2, r1
 80027cc:	42a0      	cmp	r0, r4
 80027ce:	d10b      	bne.n	80027e8 <_free_r+0x6c>
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	4401      	add	r1, r0
 80027d4:	1850      	adds	r0, r2, r1
 80027d6:	4283      	cmp	r3, r0
 80027d8:	6011      	str	r1, [r2, #0]
 80027da:	d1e0      	bne.n	800279e <_free_r+0x22>
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	6053      	str	r3, [r2, #4]
 80027e2:	4408      	add	r0, r1
 80027e4:	6010      	str	r0, [r2, #0]
 80027e6:	e7da      	b.n	800279e <_free_r+0x22>
 80027e8:	d902      	bls.n	80027f0 <_free_r+0x74>
 80027ea:	230c      	movs	r3, #12
 80027ec:	602b      	str	r3, [r5, #0]
 80027ee:	e7d6      	b.n	800279e <_free_r+0x22>
 80027f0:	6820      	ldr	r0, [r4, #0]
 80027f2:	1821      	adds	r1, r4, r0
 80027f4:	428b      	cmp	r3, r1
 80027f6:	bf04      	itt	eq
 80027f8:	6819      	ldreq	r1, [r3, #0]
 80027fa:	685b      	ldreq	r3, [r3, #4]
 80027fc:	6063      	str	r3, [r4, #4]
 80027fe:	bf04      	itt	eq
 8002800:	1809      	addeq	r1, r1, r0
 8002802:	6021      	streq	r1, [r4, #0]
 8002804:	6054      	str	r4, [r2, #4]
 8002806:	e7ca      	b.n	800279e <_free_r+0x22>
 8002808:	bd38      	pop	{r3, r4, r5, pc}
 800280a:	bf00      	nop
 800280c:	2000068c 	.word	0x2000068c

08002810 <sbrk_aligned>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	4e0f      	ldr	r6, [pc, #60]	@ (8002850 <sbrk_aligned+0x40>)
 8002814:	460c      	mov	r4, r1
 8002816:	6831      	ldr	r1, [r6, #0]
 8002818:	4605      	mov	r5, r0
 800281a:	b911      	cbnz	r1, 8002822 <sbrk_aligned+0x12>
 800281c:	f000 fe18 	bl	8003450 <_sbrk_r>
 8002820:	6030      	str	r0, [r6, #0]
 8002822:	4621      	mov	r1, r4
 8002824:	4628      	mov	r0, r5
 8002826:	f000 fe13 	bl	8003450 <_sbrk_r>
 800282a:	1c43      	adds	r3, r0, #1
 800282c:	d103      	bne.n	8002836 <sbrk_aligned+0x26>
 800282e:	f04f 34ff 	mov.w	r4, #4294967295
 8002832:	4620      	mov	r0, r4
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	1cc4      	adds	r4, r0, #3
 8002838:	f024 0403 	bic.w	r4, r4, #3
 800283c:	42a0      	cmp	r0, r4
 800283e:	d0f8      	beq.n	8002832 <sbrk_aligned+0x22>
 8002840:	1a21      	subs	r1, r4, r0
 8002842:	4628      	mov	r0, r5
 8002844:	f000 fe04 	bl	8003450 <_sbrk_r>
 8002848:	3001      	adds	r0, #1
 800284a:	d1f2      	bne.n	8002832 <sbrk_aligned+0x22>
 800284c:	e7ef      	b.n	800282e <sbrk_aligned+0x1e>
 800284e:	bf00      	nop
 8002850:	20000688 	.word	0x20000688

08002854 <_malloc_r>:
 8002854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002858:	1ccd      	adds	r5, r1, #3
 800285a:	f025 0503 	bic.w	r5, r5, #3
 800285e:	3508      	adds	r5, #8
 8002860:	2d0c      	cmp	r5, #12
 8002862:	bf38      	it	cc
 8002864:	250c      	movcc	r5, #12
 8002866:	2d00      	cmp	r5, #0
 8002868:	4606      	mov	r6, r0
 800286a:	db01      	blt.n	8002870 <_malloc_r+0x1c>
 800286c:	42a9      	cmp	r1, r5
 800286e:	d904      	bls.n	800287a <_malloc_r+0x26>
 8002870:	230c      	movs	r3, #12
 8002872:	6033      	str	r3, [r6, #0]
 8002874:	2000      	movs	r0, #0
 8002876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800287a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002950 <_malloc_r+0xfc>
 800287e:	f000 f869 	bl	8002954 <__malloc_lock>
 8002882:	f8d8 3000 	ldr.w	r3, [r8]
 8002886:	461c      	mov	r4, r3
 8002888:	bb44      	cbnz	r4, 80028dc <_malloc_r+0x88>
 800288a:	4629      	mov	r1, r5
 800288c:	4630      	mov	r0, r6
 800288e:	f7ff ffbf 	bl	8002810 <sbrk_aligned>
 8002892:	1c43      	adds	r3, r0, #1
 8002894:	4604      	mov	r4, r0
 8002896:	d158      	bne.n	800294a <_malloc_r+0xf6>
 8002898:	f8d8 4000 	ldr.w	r4, [r8]
 800289c:	4627      	mov	r7, r4
 800289e:	2f00      	cmp	r7, #0
 80028a0:	d143      	bne.n	800292a <_malloc_r+0xd6>
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	d04b      	beq.n	800293e <_malloc_r+0xea>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	4639      	mov	r1, r7
 80028aa:	4630      	mov	r0, r6
 80028ac:	eb04 0903 	add.w	r9, r4, r3
 80028b0:	f000 fdce 	bl	8003450 <_sbrk_r>
 80028b4:	4581      	cmp	r9, r0
 80028b6:	d142      	bne.n	800293e <_malloc_r+0xea>
 80028b8:	6821      	ldr	r1, [r4, #0]
 80028ba:	1a6d      	subs	r5, r5, r1
 80028bc:	4629      	mov	r1, r5
 80028be:	4630      	mov	r0, r6
 80028c0:	f7ff ffa6 	bl	8002810 <sbrk_aligned>
 80028c4:	3001      	adds	r0, #1
 80028c6:	d03a      	beq.n	800293e <_malloc_r+0xea>
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	442b      	add	r3, r5
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	f8d8 3000 	ldr.w	r3, [r8]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	bb62      	cbnz	r2, 8002930 <_malloc_r+0xdc>
 80028d6:	f8c8 7000 	str.w	r7, [r8]
 80028da:	e00f      	b.n	80028fc <_malloc_r+0xa8>
 80028dc:	6822      	ldr	r2, [r4, #0]
 80028de:	1b52      	subs	r2, r2, r5
 80028e0:	d420      	bmi.n	8002924 <_malloc_r+0xd0>
 80028e2:	2a0b      	cmp	r2, #11
 80028e4:	d917      	bls.n	8002916 <_malloc_r+0xc2>
 80028e6:	1961      	adds	r1, r4, r5
 80028e8:	42a3      	cmp	r3, r4
 80028ea:	6025      	str	r5, [r4, #0]
 80028ec:	bf18      	it	ne
 80028ee:	6059      	strne	r1, [r3, #4]
 80028f0:	6863      	ldr	r3, [r4, #4]
 80028f2:	bf08      	it	eq
 80028f4:	f8c8 1000 	streq.w	r1, [r8]
 80028f8:	5162      	str	r2, [r4, r5]
 80028fa:	604b      	str	r3, [r1, #4]
 80028fc:	4630      	mov	r0, r6
 80028fe:	f000 f82f 	bl	8002960 <__malloc_unlock>
 8002902:	f104 000b 	add.w	r0, r4, #11
 8002906:	1d23      	adds	r3, r4, #4
 8002908:	f020 0007 	bic.w	r0, r0, #7
 800290c:	1ac2      	subs	r2, r0, r3
 800290e:	bf1c      	itt	ne
 8002910:	1a1b      	subne	r3, r3, r0
 8002912:	50a3      	strne	r3, [r4, r2]
 8002914:	e7af      	b.n	8002876 <_malloc_r+0x22>
 8002916:	6862      	ldr	r2, [r4, #4]
 8002918:	42a3      	cmp	r3, r4
 800291a:	bf0c      	ite	eq
 800291c:	f8c8 2000 	streq.w	r2, [r8]
 8002920:	605a      	strne	r2, [r3, #4]
 8002922:	e7eb      	b.n	80028fc <_malloc_r+0xa8>
 8002924:	4623      	mov	r3, r4
 8002926:	6864      	ldr	r4, [r4, #4]
 8002928:	e7ae      	b.n	8002888 <_malloc_r+0x34>
 800292a:	463c      	mov	r4, r7
 800292c:	687f      	ldr	r7, [r7, #4]
 800292e:	e7b6      	b.n	800289e <_malloc_r+0x4a>
 8002930:	461a      	mov	r2, r3
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	42a3      	cmp	r3, r4
 8002936:	d1fb      	bne.n	8002930 <_malloc_r+0xdc>
 8002938:	2300      	movs	r3, #0
 800293a:	6053      	str	r3, [r2, #4]
 800293c:	e7de      	b.n	80028fc <_malloc_r+0xa8>
 800293e:	230c      	movs	r3, #12
 8002940:	6033      	str	r3, [r6, #0]
 8002942:	4630      	mov	r0, r6
 8002944:	f000 f80c 	bl	8002960 <__malloc_unlock>
 8002948:	e794      	b.n	8002874 <_malloc_r+0x20>
 800294a:	6005      	str	r5, [r0, #0]
 800294c:	e7d6      	b.n	80028fc <_malloc_r+0xa8>
 800294e:	bf00      	nop
 8002950:	2000068c 	.word	0x2000068c

08002954 <__malloc_lock>:
 8002954:	4801      	ldr	r0, [pc, #4]	@ (800295c <__malloc_lock+0x8>)
 8002956:	f7ff bf0e 	b.w	8002776 <__retarget_lock_acquire_recursive>
 800295a:	bf00      	nop
 800295c:	20000684 	.word	0x20000684

08002960 <__malloc_unlock>:
 8002960:	4801      	ldr	r0, [pc, #4]	@ (8002968 <__malloc_unlock+0x8>)
 8002962:	f7ff bf09 	b.w	8002778 <__retarget_lock_release_recursive>
 8002966:	bf00      	nop
 8002968:	20000684 	.word	0x20000684

0800296c <__ssputs_r>:
 800296c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002970:	688e      	ldr	r6, [r1, #8]
 8002972:	461f      	mov	r7, r3
 8002974:	42be      	cmp	r6, r7
 8002976:	680b      	ldr	r3, [r1, #0]
 8002978:	4682      	mov	sl, r0
 800297a:	460c      	mov	r4, r1
 800297c:	4690      	mov	r8, r2
 800297e:	d82d      	bhi.n	80029dc <__ssputs_r+0x70>
 8002980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002984:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002988:	d026      	beq.n	80029d8 <__ssputs_r+0x6c>
 800298a:	6965      	ldr	r5, [r4, #20]
 800298c:	6909      	ldr	r1, [r1, #16]
 800298e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002992:	eba3 0901 	sub.w	r9, r3, r1
 8002996:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800299a:	1c7b      	adds	r3, r7, #1
 800299c:	444b      	add	r3, r9
 800299e:	106d      	asrs	r5, r5, #1
 80029a0:	429d      	cmp	r5, r3
 80029a2:	bf38      	it	cc
 80029a4:	461d      	movcc	r5, r3
 80029a6:	0553      	lsls	r3, r2, #21
 80029a8:	d527      	bpl.n	80029fa <__ssputs_r+0x8e>
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7ff ff52 	bl	8002854 <_malloc_r>
 80029b0:	4606      	mov	r6, r0
 80029b2:	b360      	cbz	r0, 8002a0e <__ssputs_r+0xa2>
 80029b4:	6921      	ldr	r1, [r4, #16]
 80029b6:	464a      	mov	r2, r9
 80029b8:	f000 fd5a 	bl	8003470 <memcpy>
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80029c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c6:	81a3      	strh	r3, [r4, #12]
 80029c8:	6126      	str	r6, [r4, #16]
 80029ca:	6165      	str	r5, [r4, #20]
 80029cc:	444e      	add	r6, r9
 80029ce:	eba5 0509 	sub.w	r5, r5, r9
 80029d2:	6026      	str	r6, [r4, #0]
 80029d4:	60a5      	str	r5, [r4, #8]
 80029d6:	463e      	mov	r6, r7
 80029d8:	42be      	cmp	r6, r7
 80029da:	d900      	bls.n	80029de <__ssputs_r+0x72>
 80029dc:	463e      	mov	r6, r7
 80029de:	6820      	ldr	r0, [r4, #0]
 80029e0:	4632      	mov	r2, r6
 80029e2:	4641      	mov	r1, r8
 80029e4:	f000 fcf8 	bl	80033d8 <memmove>
 80029e8:	68a3      	ldr	r3, [r4, #8]
 80029ea:	1b9b      	subs	r3, r3, r6
 80029ec:	60a3      	str	r3, [r4, #8]
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	4433      	add	r3, r6
 80029f2:	6023      	str	r3, [r4, #0]
 80029f4:	2000      	movs	r0, #0
 80029f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029fa:	462a      	mov	r2, r5
 80029fc:	f000 fd46 	bl	800348c <_realloc_r>
 8002a00:	4606      	mov	r6, r0
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d1e0      	bne.n	80029c8 <__ssputs_r+0x5c>
 8002a06:	6921      	ldr	r1, [r4, #16]
 8002a08:	4650      	mov	r0, sl
 8002a0a:	f7ff feb7 	bl	800277c <_free_r>
 8002a0e:	230c      	movs	r3, #12
 8002a10:	f8ca 3000 	str.w	r3, [sl]
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a1a:	81a3      	strh	r3, [r4, #12]
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	e7e9      	b.n	80029f6 <__ssputs_r+0x8a>
	...

08002a24 <_svfiprintf_r>:
 8002a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a28:	4698      	mov	r8, r3
 8002a2a:	898b      	ldrh	r3, [r1, #12]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	b09d      	sub	sp, #116	@ 0x74
 8002a30:	4607      	mov	r7, r0
 8002a32:	460d      	mov	r5, r1
 8002a34:	4614      	mov	r4, r2
 8002a36:	d510      	bpl.n	8002a5a <_svfiprintf_r+0x36>
 8002a38:	690b      	ldr	r3, [r1, #16]
 8002a3a:	b973      	cbnz	r3, 8002a5a <_svfiprintf_r+0x36>
 8002a3c:	2140      	movs	r1, #64	@ 0x40
 8002a3e:	f7ff ff09 	bl	8002854 <_malloc_r>
 8002a42:	6028      	str	r0, [r5, #0]
 8002a44:	6128      	str	r0, [r5, #16]
 8002a46:	b930      	cbnz	r0, 8002a56 <_svfiprintf_r+0x32>
 8002a48:	230c      	movs	r3, #12
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	b01d      	add	sp, #116	@ 0x74
 8002a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a56:	2340      	movs	r3, #64	@ 0x40
 8002a58:	616b      	str	r3, [r5, #20]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a5e:	2320      	movs	r3, #32
 8002a60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a68:	2330      	movs	r3, #48	@ 0x30
 8002a6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002c08 <_svfiprintf_r+0x1e4>
 8002a6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a72:	f04f 0901 	mov.w	r9, #1
 8002a76:	4623      	mov	r3, r4
 8002a78:	469a      	mov	sl, r3
 8002a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a7e:	b10a      	cbz	r2, 8002a84 <_svfiprintf_r+0x60>
 8002a80:	2a25      	cmp	r2, #37	@ 0x25
 8002a82:	d1f9      	bne.n	8002a78 <_svfiprintf_r+0x54>
 8002a84:	ebba 0b04 	subs.w	fp, sl, r4
 8002a88:	d00b      	beq.n	8002aa2 <_svfiprintf_r+0x7e>
 8002a8a:	465b      	mov	r3, fp
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	4629      	mov	r1, r5
 8002a90:	4638      	mov	r0, r7
 8002a92:	f7ff ff6b 	bl	800296c <__ssputs_r>
 8002a96:	3001      	adds	r0, #1
 8002a98:	f000 80a7 	beq.w	8002bea <_svfiprintf_r+0x1c6>
 8002a9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a9e:	445a      	add	r2, fp
 8002aa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8002aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 809f 	beq.w	8002bea <_svfiprintf_r+0x1c6>
 8002aac:	2300      	movs	r3, #0
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ab6:	f10a 0a01 	add.w	sl, sl, #1
 8002aba:	9304      	str	r3, [sp, #16]
 8002abc:	9307      	str	r3, [sp, #28]
 8002abe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ac2:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ac4:	4654      	mov	r4, sl
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002acc:	484e      	ldr	r0, [pc, #312]	@ (8002c08 <_svfiprintf_r+0x1e4>)
 8002ace:	f7fd fb87 	bl	80001e0 <memchr>
 8002ad2:	9a04      	ldr	r2, [sp, #16]
 8002ad4:	b9d8      	cbnz	r0, 8002b0e <_svfiprintf_r+0xea>
 8002ad6:	06d0      	lsls	r0, r2, #27
 8002ad8:	bf44      	itt	mi
 8002ada:	2320      	movmi	r3, #32
 8002adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ae0:	0711      	lsls	r1, r2, #28
 8002ae2:	bf44      	itt	mi
 8002ae4:	232b      	movmi	r3, #43	@ 0x2b
 8002ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002aea:	f89a 3000 	ldrb.w	r3, [sl]
 8002aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8002af0:	d015      	beq.n	8002b1e <_svfiprintf_r+0xfa>
 8002af2:	9a07      	ldr	r2, [sp, #28]
 8002af4:	4654      	mov	r4, sl
 8002af6:	2000      	movs	r0, #0
 8002af8:	f04f 0c0a 	mov.w	ip, #10
 8002afc:	4621      	mov	r1, r4
 8002afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b02:	3b30      	subs	r3, #48	@ 0x30
 8002b04:	2b09      	cmp	r3, #9
 8002b06:	d94b      	bls.n	8002ba0 <_svfiprintf_r+0x17c>
 8002b08:	b1b0      	cbz	r0, 8002b38 <_svfiprintf_r+0x114>
 8002b0a:	9207      	str	r2, [sp, #28]
 8002b0c:	e014      	b.n	8002b38 <_svfiprintf_r+0x114>
 8002b0e:	eba0 0308 	sub.w	r3, r0, r8
 8002b12:	fa09 f303 	lsl.w	r3, r9, r3
 8002b16:	4313      	orrs	r3, r2
 8002b18:	9304      	str	r3, [sp, #16]
 8002b1a:	46a2      	mov	sl, r4
 8002b1c:	e7d2      	b.n	8002ac4 <_svfiprintf_r+0xa0>
 8002b1e:	9b03      	ldr	r3, [sp, #12]
 8002b20:	1d19      	adds	r1, r3, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	9103      	str	r1, [sp, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bfbb      	ittet	lt
 8002b2a:	425b      	neglt	r3, r3
 8002b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8002b30:	9307      	strge	r3, [sp, #28]
 8002b32:	9307      	strlt	r3, [sp, #28]
 8002b34:	bfb8      	it	lt
 8002b36:	9204      	strlt	r2, [sp, #16]
 8002b38:	7823      	ldrb	r3, [r4, #0]
 8002b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b3c:	d10a      	bne.n	8002b54 <_svfiprintf_r+0x130>
 8002b3e:	7863      	ldrb	r3, [r4, #1]
 8002b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b42:	d132      	bne.n	8002baa <_svfiprintf_r+0x186>
 8002b44:	9b03      	ldr	r3, [sp, #12]
 8002b46:	1d1a      	adds	r2, r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	9203      	str	r2, [sp, #12]
 8002b4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b50:	3402      	adds	r4, #2
 8002b52:	9305      	str	r3, [sp, #20]
 8002b54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002c18 <_svfiprintf_r+0x1f4>
 8002b58:	7821      	ldrb	r1, [r4, #0]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	4650      	mov	r0, sl
 8002b5e:	f7fd fb3f 	bl	80001e0 <memchr>
 8002b62:	b138      	cbz	r0, 8002b74 <_svfiprintf_r+0x150>
 8002b64:	9b04      	ldr	r3, [sp, #16]
 8002b66:	eba0 000a 	sub.w	r0, r0, sl
 8002b6a:	2240      	movs	r2, #64	@ 0x40
 8002b6c:	4082      	lsls	r2, r0
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	3401      	adds	r4, #1
 8002b72:	9304      	str	r3, [sp, #16]
 8002b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b78:	4824      	ldr	r0, [pc, #144]	@ (8002c0c <_svfiprintf_r+0x1e8>)
 8002b7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b7e:	2206      	movs	r2, #6
 8002b80:	f7fd fb2e 	bl	80001e0 <memchr>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d036      	beq.n	8002bf6 <_svfiprintf_r+0x1d2>
 8002b88:	4b21      	ldr	r3, [pc, #132]	@ (8002c10 <_svfiprintf_r+0x1ec>)
 8002b8a:	bb1b      	cbnz	r3, 8002bd4 <_svfiprintf_r+0x1b0>
 8002b8c:	9b03      	ldr	r3, [sp, #12]
 8002b8e:	3307      	adds	r3, #7
 8002b90:	f023 0307 	bic.w	r3, r3, #7
 8002b94:	3308      	adds	r3, #8
 8002b96:	9303      	str	r3, [sp, #12]
 8002b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b9a:	4433      	add	r3, r6
 8002b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b9e:	e76a      	b.n	8002a76 <_svfiprintf_r+0x52>
 8002ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ba4:	460c      	mov	r4, r1
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	e7a8      	b.n	8002afc <_svfiprintf_r+0xd8>
 8002baa:	2300      	movs	r3, #0
 8002bac:	3401      	adds	r4, #1
 8002bae:	9305      	str	r3, [sp, #20]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f04f 0c0a 	mov.w	ip, #10
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bbc:	3a30      	subs	r2, #48	@ 0x30
 8002bbe:	2a09      	cmp	r2, #9
 8002bc0:	d903      	bls.n	8002bca <_svfiprintf_r+0x1a6>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0c6      	beq.n	8002b54 <_svfiprintf_r+0x130>
 8002bc6:	9105      	str	r1, [sp, #20]
 8002bc8:	e7c4      	b.n	8002b54 <_svfiprintf_r+0x130>
 8002bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bce:	4604      	mov	r4, r0
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e7f0      	b.n	8002bb6 <_svfiprintf_r+0x192>
 8002bd4:	ab03      	add	r3, sp, #12
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	462a      	mov	r2, r5
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <_svfiprintf_r+0x1f0>)
 8002bdc:	a904      	add	r1, sp, #16
 8002bde:	4638      	mov	r0, r7
 8002be0:	f3af 8000 	nop.w
 8002be4:	1c42      	adds	r2, r0, #1
 8002be6:	4606      	mov	r6, r0
 8002be8:	d1d6      	bne.n	8002b98 <_svfiprintf_r+0x174>
 8002bea:	89ab      	ldrh	r3, [r5, #12]
 8002bec:	065b      	lsls	r3, r3, #25
 8002bee:	f53f af2d 	bmi.w	8002a4c <_svfiprintf_r+0x28>
 8002bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002bf4:	e72c      	b.n	8002a50 <_svfiprintf_r+0x2c>
 8002bf6:	ab03      	add	r3, sp, #12
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	462a      	mov	r2, r5
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <_svfiprintf_r+0x1f0>)
 8002bfe:	a904      	add	r1, sp, #16
 8002c00:	4638      	mov	r0, r7
 8002c02:	f000 f9bb 	bl	8002f7c <_printf_i>
 8002c06:	e7ed      	b.n	8002be4 <_svfiprintf_r+0x1c0>
 8002c08:	08005734 	.word	0x08005734
 8002c0c:	0800573e 	.word	0x0800573e
 8002c10:	00000000 	.word	0x00000000
 8002c14:	0800296d 	.word	0x0800296d
 8002c18:	0800573a 	.word	0x0800573a

08002c1c <__sfputc_r>:
 8002c1c:	6893      	ldr	r3, [r2, #8]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	b410      	push	{r4}
 8002c24:	6093      	str	r3, [r2, #8]
 8002c26:	da08      	bge.n	8002c3a <__sfputc_r+0x1e>
 8002c28:	6994      	ldr	r4, [r2, #24]
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	db01      	blt.n	8002c32 <__sfputc_r+0x16>
 8002c2e:	290a      	cmp	r1, #10
 8002c30:	d103      	bne.n	8002c3a <__sfputc_r+0x1e>
 8002c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c36:	f7ff bc90 	b.w	800255a <__swbuf_r>
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	1c58      	adds	r0, r3, #1
 8002c3e:	6010      	str	r0, [r2, #0]
 8002c40:	7019      	strb	r1, [r3, #0]
 8002c42:	4608      	mov	r0, r1
 8002c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <__sfputs_r>:
 8002c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	460f      	mov	r7, r1
 8002c50:	4614      	mov	r4, r2
 8002c52:	18d5      	adds	r5, r2, r3
 8002c54:	42ac      	cmp	r4, r5
 8002c56:	d101      	bne.n	8002c5c <__sfputs_r+0x12>
 8002c58:	2000      	movs	r0, #0
 8002c5a:	e007      	b.n	8002c6c <__sfputs_r+0x22>
 8002c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c60:	463a      	mov	r2, r7
 8002c62:	4630      	mov	r0, r6
 8002c64:	f7ff ffda 	bl	8002c1c <__sfputc_r>
 8002c68:	1c43      	adds	r3, r0, #1
 8002c6a:	d1f3      	bne.n	8002c54 <__sfputs_r+0xa>
 8002c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c70 <_vfiprintf_r>:
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	460d      	mov	r5, r1
 8002c76:	b09d      	sub	sp, #116	@ 0x74
 8002c78:	4614      	mov	r4, r2
 8002c7a:	4698      	mov	r8, r3
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	b118      	cbz	r0, 8002c88 <_vfiprintf_r+0x18>
 8002c80:	6a03      	ldr	r3, [r0, #32]
 8002c82:	b90b      	cbnz	r3, 8002c88 <_vfiprintf_r+0x18>
 8002c84:	f7ff fb60 	bl	8002348 <__sinit>
 8002c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c8a:	07d9      	lsls	r1, r3, #31
 8002c8c:	d405      	bmi.n	8002c9a <_vfiprintf_r+0x2a>
 8002c8e:	89ab      	ldrh	r3, [r5, #12]
 8002c90:	059a      	lsls	r2, r3, #22
 8002c92:	d402      	bmi.n	8002c9a <_vfiprintf_r+0x2a>
 8002c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c96:	f7ff fd6e 	bl	8002776 <__retarget_lock_acquire_recursive>
 8002c9a:	89ab      	ldrh	r3, [r5, #12]
 8002c9c:	071b      	lsls	r3, r3, #28
 8002c9e:	d501      	bpl.n	8002ca4 <_vfiprintf_r+0x34>
 8002ca0:	692b      	ldr	r3, [r5, #16]
 8002ca2:	b99b      	cbnz	r3, 8002ccc <_vfiprintf_r+0x5c>
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f7ff fc96 	bl	80025d8 <__swsetup_r>
 8002cac:	b170      	cbz	r0, 8002ccc <_vfiprintf_r+0x5c>
 8002cae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002cb0:	07dc      	lsls	r4, r3, #31
 8002cb2:	d504      	bpl.n	8002cbe <_vfiprintf_r+0x4e>
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	b01d      	add	sp, #116	@ 0x74
 8002cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cbe:	89ab      	ldrh	r3, [r5, #12]
 8002cc0:	0598      	lsls	r0, r3, #22
 8002cc2:	d4f7      	bmi.n	8002cb4 <_vfiprintf_r+0x44>
 8002cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cc6:	f7ff fd57 	bl	8002778 <__retarget_lock_release_recursive>
 8002cca:	e7f3      	b.n	8002cb4 <_vfiprintf_r+0x44>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cda:	2330      	movs	r3, #48	@ 0x30
 8002cdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002e8c <_vfiprintf_r+0x21c>
 8002ce0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ce4:	f04f 0901 	mov.w	r9, #1
 8002ce8:	4623      	mov	r3, r4
 8002cea:	469a      	mov	sl, r3
 8002cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cf0:	b10a      	cbz	r2, 8002cf6 <_vfiprintf_r+0x86>
 8002cf2:	2a25      	cmp	r2, #37	@ 0x25
 8002cf4:	d1f9      	bne.n	8002cea <_vfiprintf_r+0x7a>
 8002cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8002cfa:	d00b      	beq.n	8002d14 <_vfiprintf_r+0xa4>
 8002cfc:	465b      	mov	r3, fp
 8002cfe:	4622      	mov	r2, r4
 8002d00:	4629      	mov	r1, r5
 8002d02:	4630      	mov	r0, r6
 8002d04:	f7ff ffa1 	bl	8002c4a <__sfputs_r>
 8002d08:	3001      	adds	r0, #1
 8002d0a:	f000 80a7 	beq.w	8002e5c <_vfiprintf_r+0x1ec>
 8002d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d10:	445a      	add	r2, fp
 8002d12:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d14:	f89a 3000 	ldrb.w	r3, [sl]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 809f 	beq.w	8002e5c <_vfiprintf_r+0x1ec>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d28:	f10a 0a01 	add.w	sl, sl, #1
 8002d2c:	9304      	str	r3, [sp, #16]
 8002d2e:	9307      	str	r3, [sp, #28]
 8002d30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d34:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d36:	4654      	mov	r4, sl
 8002d38:	2205      	movs	r2, #5
 8002d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d3e:	4853      	ldr	r0, [pc, #332]	@ (8002e8c <_vfiprintf_r+0x21c>)
 8002d40:	f7fd fa4e 	bl	80001e0 <memchr>
 8002d44:	9a04      	ldr	r2, [sp, #16]
 8002d46:	b9d8      	cbnz	r0, 8002d80 <_vfiprintf_r+0x110>
 8002d48:	06d1      	lsls	r1, r2, #27
 8002d4a:	bf44      	itt	mi
 8002d4c:	2320      	movmi	r3, #32
 8002d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d52:	0713      	lsls	r3, r2, #28
 8002d54:	bf44      	itt	mi
 8002d56:	232b      	movmi	r3, #43	@ 0x2b
 8002d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d62:	d015      	beq.n	8002d90 <_vfiprintf_r+0x120>
 8002d64:	9a07      	ldr	r2, [sp, #28]
 8002d66:	4654      	mov	r4, sl
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f04f 0c0a 	mov.w	ip, #10
 8002d6e:	4621      	mov	r1, r4
 8002d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d74:	3b30      	subs	r3, #48	@ 0x30
 8002d76:	2b09      	cmp	r3, #9
 8002d78:	d94b      	bls.n	8002e12 <_vfiprintf_r+0x1a2>
 8002d7a:	b1b0      	cbz	r0, 8002daa <_vfiprintf_r+0x13a>
 8002d7c:	9207      	str	r2, [sp, #28]
 8002d7e:	e014      	b.n	8002daa <_vfiprintf_r+0x13a>
 8002d80:	eba0 0308 	sub.w	r3, r0, r8
 8002d84:	fa09 f303 	lsl.w	r3, r9, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	9304      	str	r3, [sp, #16]
 8002d8c:	46a2      	mov	sl, r4
 8002d8e:	e7d2      	b.n	8002d36 <_vfiprintf_r+0xc6>
 8002d90:	9b03      	ldr	r3, [sp, #12]
 8002d92:	1d19      	adds	r1, r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	9103      	str	r1, [sp, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bfbb      	ittet	lt
 8002d9c:	425b      	neglt	r3, r3
 8002d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8002da2:	9307      	strge	r3, [sp, #28]
 8002da4:	9307      	strlt	r3, [sp, #28]
 8002da6:	bfb8      	it	lt
 8002da8:	9204      	strlt	r2, [sp, #16]
 8002daa:	7823      	ldrb	r3, [r4, #0]
 8002dac:	2b2e      	cmp	r3, #46	@ 0x2e
 8002dae:	d10a      	bne.n	8002dc6 <_vfiprintf_r+0x156>
 8002db0:	7863      	ldrb	r3, [r4, #1]
 8002db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002db4:	d132      	bne.n	8002e1c <_vfiprintf_r+0x1ac>
 8002db6:	9b03      	ldr	r3, [sp, #12]
 8002db8:	1d1a      	adds	r2, r3, #4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	9203      	str	r2, [sp, #12]
 8002dbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002dc2:	3402      	adds	r4, #2
 8002dc4:	9305      	str	r3, [sp, #20]
 8002dc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002e9c <_vfiprintf_r+0x22c>
 8002dca:	7821      	ldrb	r1, [r4, #0]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	4650      	mov	r0, sl
 8002dd0:	f7fd fa06 	bl	80001e0 <memchr>
 8002dd4:	b138      	cbz	r0, 8002de6 <_vfiprintf_r+0x176>
 8002dd6:	9b04      	ldr	r3, [sp, #16]
 8002dd8:	eba0 000a 	sub.w	r0, r0, sl
 8002ddc:	2240      	movs	r2, #64	@ 0x40
 8002dde:	4082      	lsls	r2, r0
 8002de0:	4313      	orrs	r3, r2
 8002de2:	3401      	adds	r4, #1
 8002de4:	9304      	str	r3, [sp, #16]
 8002de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dea:	4829      	ldr	r0, [pc, #164]	@ (8002e90 <_vfiprintf_r+0x220>)
 8002dec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002df0:	2206      	movs	r2, #6
 8002df2:	f7fd f9f5 	bl	80001e0 <memchr>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d03f      	beq.n	8002e7a <_vfiprintf_r+0x20a>
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <_vfiprintf_r+0x224>)
 8002dfc:	bb1b      	cbnz	r3, 8002e46 <_vfiprintf_r+0x1d6>
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	3307      	adds	r3, #7
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	3308      	adds	r3, #8
 8002e08:	9303      	str	r3, [sp, #12]
 8002e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e0c:	443b      	add	r3, r7
 8002e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e10:	e76a      	b.n	8002ce8 <_vfiprintf_r+0x78>
 8002e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e16:	460c      	mov	r4, r1
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e7a8      	b.n	8002d6e <_vfiprintf_r+0xfe>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	3401      	adds	r4, #1
 8002e20:	9305      	str	r3, [sp, #20]
 8002e22:	4619      	mov	r1, r3
 8002e24:	f04f 0c0a 	mov.w	ip, #10
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e2e:	3a30      	subs	r2, #48	@ 0x30
 8002e30:	2a09      	cmp	r2, #9
 8002e32:	d903      	bls.n	8002e3c <_vfiprintf_r+0x1cc>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0c6      	beq.n	8002dc6 <_vfiprintf_r+0x156>
 8002e38:	9105      	str	r1, [sp, #20]
 8002e3a:	e7c4      	b.n	8002dc6 <_vfiprintf_r+0x156>
 8002e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e40:	4604      	mov	r4, r0
 8002e42:	2301      	movs	r3, #1
 8002e44:	e7f0      	b.n	8002e28 <_vfiprintf_r+0x1b8>
 8002e46:	ab03      	add	r3, sp, #12
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	462a      	mov	r2, r5
 8002e4c:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <_vfiprintf_r+0x228>)
 8002e4e:	a904      	add	r1, sp, #16
 8002e50:	4630      	mov	r0, r6
 8002e52:	f3af 8000 	nop.w
 8002e56:	4607      	mov	r7, r0
 8002e58:	1c78      	adds	r0, r7, #1
 8002e5a:	d1d6      	bne.n	8002e0a <_vfiprintf_r+0x19a>
 8002e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e5e:	07d9      	lsls	r1, r3, #31
 8002e60:	d405      	bmi.n	8002e6e <_vfiprintf_r+0x1fe>
 8002e62:	89ab      	ldrh	r3, [r5, #12]
 8002e64:	059a      	lsls	r2, r3, #22
 8002e66:	d402      	bmi.n	8002e6e <_vfiprintf_r+0x1fe>
 8002e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e6a:	f7ff fc85 	bl	8002778 <__retarget_lock_release_recursive>
 8002e6e:	89ab      	ldrh	r3, [r5, #12]
 8002e70:	065b      	lsls	r3, r3, #25
 8002e72:	f53f af1f 	bmi.w	8002cb4 <_vfiprintf_r+0x44>
 8002e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e78:	e71e      	b.n	8002cb8 <_vfiprintf_r+0x48>
 8002e7a:	ab03      	add	r3, sp, #12
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	462a      	mov	r2, r5
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <_vfiprintf_r+0x228>)
 8002e82:	a904      	add	r1, sp, #16
 8002e84:	4630      	mov	r0, r6
 8002e86:	f000 f879 	bl	8002f7c <_printf_i>
 8002e8a:	e7e4      	b.n	8002e56 <_vfiprintf_r+0x1e6>
 8002e8c:	08005734 	.word	0x08005734
 8002e90:	0800573e 	.word	0x0800573e
 8002e94:	00000000 	.word	0x00000000
 8002e98:	08002c4b 	.word	0x08002c4b
 8002e9c:	0800573a 	.word	0x0800573a

08002ea0 <_printf_common>:
 8002ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ea4:	4616      	mov	r6, r2
 8002ea6:	4698      	mov	r8, r3
 8002ea8:	688a      	ldr	r2, [r1, #8]
 8002eaa:	690b      	ldr	r3, [r1, #16]
 8002eac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	bfb8      	it	lt
 8002eb4:	4613      	movlt	r3, r2
 8002eb6:	6033      	str	r3, [r6, #0]
 8002eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ebc:	4607      	mov	r7, r0
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	b10a      	cbz	r2, 8002ec6 <_printf_common+0x26>
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	6033      	str	r3, [r6, #0]
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	0699      	lsls	r1, r3, #26
 8002eca:	bf42      	ittt	mi
 8002ecc:	6833      	ldrmi	r3, [r6, #0]
 8002ece:	3302      	addmi	r3, #2
 8002ed0:	6033      	strmi	r3, [r6, #0]
 8002ed2:	6825      	ldr	r5, [r4, #0]
 8002ed4:	f015 0506 	ands.w	r5, r5, #6
 8002ed8:	d106      	bne.n	8002ee8 <_printf_common+0x48>
 8002eda:	f104 0a19 	add.w	sl, r4, #25
 8002ede:	68e3      	ldr	r3, [r4, #12]
 8002ee0:	6832      	ldr	r2, [r6, #0]
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	42ab      	cmp	r3, r5
 8002ee6:	dc26      	bgt.n	8002f36 <_printf_common+0x96>
 8002ee8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	3b00      	subs	r3, #0
 8002ef0:	bf18      	it	ne
 8002ef2:	2301      	movne	r3, #1
 8002ef4:	0692      	lsls	r2, r2, #26
 8002ef6:	d42b      	bmi.n	8002f50 <_printf_common+0xb0>
 8002ef8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002efc:	4641      	mov	r1, r8
 8002efe:	4638      	mov	r0, r7
 8002f00:	47c8      	blx	r9
 8002f02:	3001      	adds	r0, #1
 8002f04:	d01e      	beq.n	8002f44 <_printf_common+0xa4>
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	6922      	ldr	r2, [r4, #16]
 8002f0a:	f003 0306 	and.w	r3, r3, #6
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	bf02      	ittt	eq
 8002f12:	68e5      	ldreq	r5, [r4, #12]
 8002f14:	6833      	ldreq	r3, [r6, #0]
 8002f16:	1aed      	subeq	r5, r5, r3
 8002f18:	68a3      	ldr	r3, [r4, #8]
 8002f1a:	bf0c      	ite	eq
 8002f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f20:	2500      	movne	r5, #0
 8002f22:	4293      	cmp	r3, r2
 8002f24:	bfc4      	itt	gt
 8002f26:	1a9b      	subgt	r3, r3, r2
 8002f28:	18ed      	addgt	r5, r5, r3
 8002f2a:	2600      	movs	r6, #0
 8002f2c:	341a      	adds	r4, #26
 8002f2e:	42b5      	cmp	r5, r6
 8002f30:	d11a      	bne.n	8002f68 <_printf_common+0xc8>
 8002f32:	2000      	movs	r0, #0
 8002f34:	e008      	b.n	8002f48 <_printf_common+0xa8>
 8002f36:	2301      	movs	r3, #1
 8002f38:	4652      	mov	r2, sl
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	47c8      	blx	r9
 8002f40:	3001      	adds	r0, #1
 8002f42:	d103      	bne.n	8002f4c <_printf_common+0xac>
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f4c:	3501      	adds	r5, #1
 8002f4e:	e7c6      	b.n	8002ede <_printf_common+0x3e>
 8002f50:	18e1      	adds	r1, r4, r3
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	2030      	movs	r0, #48	@ 0x30
 8002f56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f5a:	4422      	add	r2, r4
 8002f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f64:	3302      	adds	r3, #2
 8002f66:	e7c7      	b.n	8002ef8 <_printf_common+0x58>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	4638      	mov	r0, r7
 8002f70:	47c8      	blx	r9
 8002f72:	3001      	adds	r0, #1
 8002f74:	d0e6      	beq.n	8002f44 <_printf_common+0xa4>
 8002f76:	3601      	adds	r6, #1
 8002f78:	e7d9      	b.n	8002f2e <_printf_common+0x8e>
	...

08002f7c <_printf_i>:
 8002f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f80:	7e0f      	ldrb	r7, [r1, #24]
 8002f82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f84:	2f78      	cmp	r7, #120	@ 0x78
 8002f86:	4691      	mov	r9, r2
 8002f88:	4680      	mov	r8, r0
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	469a      	mov	sl, r3
 8002f8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f92:	d807      	bhi.n	8002fa4 <_printf_i+0x28>
 8002f94:	2f62      	cmp	r7, #98	@ 0x62
 8002f96:	d80a      	bhi.n	8002fae <_printf_i+0x32>
 8002f98:	2f00      	cmp	r7, #0
 8002f9a:	f000 80d2 	beq.w	8003142 <_printf_i+0x1c6>
 8002f9e:	2f58      	cmp	r7, #88	@ 0x58
 8002fa0:	f000 80b9 	beq.w	8003116 <_printf_i+0x19a>
 8002fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fac:	e03a      	b.n	8003024 <_printf_i+0xa8>
 8002fae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002fb2:	2b15      	cmp	r3, #21
 8002fb4:	d8f6      	bhi.n	8002fa4 <_printf_i+0x28>
 8002fb6:	a101      	add	r1, pc, #4	@ (adr r1, 8002fbc <_printf_i+0x40>)
 8002fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fbc:	08003015 	.word	0x08003015
 8002fc0:	08003029 	.word	0x08003029
 8002fc4:	08002fa5 	.word	0x08002fa5
 8002fc8:	08002fa5 	.word	0x08002fa5
 8002fcc:	08002fa5 	.word	0x08002fa5
 8002fd0:	08002fa5 	.word	0x08002fa5
 8002fd4:	08003029 	.word	0x08003029
 8002fd8:	08002fa5 	.word	0x08002fa5
 8002fdc:	08002fa5 	.word	0x08002fa5
 8002fe0:	08002fa5 	.word	0x08002fa5
 8002fe4:	08002fa5 	.word	0x08002fa5
 8002fe8:	08003129 	.word	0x08003129
 8002fec:	08003053 	.word	0x08003053
 8002ff0:	080030e3 	.word	0x080030e3
 8002ff4:	08002fa5 	.word	0x08002fa5
 8002ff8:	08002fa5 	.word	0x08002fa5
 8002ffc:	0800314b 	.word	0x0800314b
 8003000:	08002fa5 	.word	0x08002fa5
 8003004:	08003053 	.word	0x08003053
 8003008:	08002fa5 	.word	0x08002fa5
 800300c:	08002fa5 	.word	0x08002fa5
 8003010:	080030eb 	.word	0x080030eb
 8003014:	6833      	ldr	r3, [r6, #0]
 8003016:	1d1a      	adds	r2, r3, #4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6032      	str	r2, [r6, #0]
 800301c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003024:	2301      	movs	r3, #1
 8003026:	e09d      	b.n	8003164 <_printf_i+0x1e8>
 8003028:	6833      	ldr	r3, [r6, #0]
 800302a:	6820      	ldr	r0, [r4, #0]
 800302c:	1d19      	adds	r1, r3, #4
 800302e:	6031      	str	r1, [r6, #0]
 8003030:	0606      	lsls	r6, r0, #24
 8003032:	d501      	bpl.n	8003038 <_printf_i+0xbc>
 8003034:	681d      	ldr	r5, [r3, #0]
 8003036:	e003      	b.n	8003040 <_printf_i+0xc4>
 8003038:	0645      	lsls	r5, r0, #25
 800303a:	d5fb      	bpl.n	8003034 <_printf_i+0xb8>
 800303c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003040:	2d00      	cmp	r5, #0
 8003042:	da03      	bge.n	800304c <_printf_i+0xd0>
 8003044:	232d      	movs	r3, #45	@ 0x2d
 8003046:	426d      	negs	r5, r5
 8003048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800304c:	4859      	ldr	r0, [pc, #356]	@ (80031b4 <_printf_i+0x238>)
 800304e:	230a      	movs	r3, #10
 8003050:	e011      	b.n	8003076 <_printf_i+0xfa>
 8003052:	6821      	ldr	r1, [r4, #0]
 8003054:	6833      	ldr	r3, [r6, #0]
 8003056:	0608      	lsls	r0, r1, #24
 8003058:	f853 5b04 	ldr.w	r5, [r3], #4
 800305c:	d402      	bmi.n	8003064 <_printf_i+0xe8>
 800305e:	0649      	lsls	r1, r1, #25
 8003060:	bf48      	it	mi
 8003062:	b2ad      	uxthmi	r5, r5
 8003064:	2f6f      	cmp	r7, #111	@ 0x6f
 8003066:	4853      	ldr	r0, [pc, #332]	@ (80031b4 <_printf_i+0x238>)
 8003068:	6033      	str	r3, [r6, #0]
 800306a:	bf14      	ite	ne
 800306c:	230a      	movne	r3, #10
 800306e:	2308      	moveq	r3, #8
 8003070:	2100      	movs	r1, #0
 8003072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003076:	6866      	ldr	r6, [r4, #4]
 8003078:	60a6      	str	r6, [r4, #8]
 800307a:	2e00      	cmp	r6, #0
 800307c:	bfa2      	ittt	ge
 800307e:	6821      	ldrge	r1, [r4, #0]
 8003080:	f021 0104 	bicge.w	r1, r1, #4
 8003084:	6021      	strge	r1, [r4, #0]
 8003086:	b90d      	cbnz	r5, 800308c <_printf_i+0x110>
 8003088:	2e00      	cmp	r6, #0
 800308a:	d04b      	beq.n	8003124 <_printf_i+0x1a8>
 800308c:	4616      	mov	r6, r2
 800308e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003092:	fb03 5711 	mls	r7, r3, r1, r5
 8003096:	5dc7      	ldrb	r7, [r0, r7]
 8003098:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800309c:	462f      	mov	r7, r5
 800309e:	42bb      	cmp	r3, r7
 80030a0:	460d      	mov	r5, r1
 80030a2:	d9f4      	bls.n	800308e <_printf_i+0x112>
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d10b      	bne.n	80030c0 <_printf_i+0x144>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	07df      	lsls	r7, r3, #31
 80030ac:	d508      	bpl.n	80030c0 <_printf_i+0x144>
 80030ae:	6923      	ldr	r3, [r4, #16]
 80030b0:	6861      	ldr	r1, [r4, #4]
 80030b2:	4299      	cmp	r1, r3
 80030b4:	bfde      	ittt	le
 80030b6:	2330      	movle	r3, #48	@ 0x30
 80030b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030c0:	1b92      	subs	r2, r2, r6
 80030c2:	6122      	str	r2, [r4, #16]
 80030c4:	f8cd a000 	str.w	sl, [sp]
 80030c8:	464b      	mov	r3, r9
 80030ca:	aa03      	add	r2, sp, #12
 80030cc:	4621      	mov	r1, r4
 80030ce:	4640      	mov	r0, r8
 80030d0:	f7ff fee6 	bl	8002ea0 <_printf_common>
 80030d4:	3001      	adds	r0, #1
 80030d6:	d14a      	bne.n	800316e <_printf_i+0x1f2>
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	b004      	add	sp, #16
 80030de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	f043 0320 	orr.w	r3, r3, #32
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	4833      	ldr	r0, [pc, #204]	@ (80031b8 <_printf_i+0x23c>)
 80030ec:	2778      	movs	r7, #120	@ 0x78
 80030ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	6831      	ldr	r1, [r6, #0]
 80030f6:	061f      	lsls	r7, r3, #24
 80030f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80030fc:	d402      	bmi.n	8003104 <_printf_i+0x188>
 80030fe:	065f      	lsls	r7, r3, #25
 8003100:	bf48      	it	mi
 8003102:	b2ad      	uxthmi	r5, r5
 8003104:	6031      	str	r1, [r6, #0]
 8003106:	07d9      	lsls	r1, r3, #31
 8003108:	bf44      	itt	mi
 800310a:	f043 0320 	orrmi.w	r3, r3, #32
 800310e:	6023      	strmi	r3, [r4, #0]
 8003110:	b11d      	cbz	r5, 800311a <_printf_i+0x19e>
 8003112:	2310      	movs	r3, #16
 8003114:	e7ac      	b.n	8003070 <_printf_i+0xf4>
 8003116:	4827      	ldr	r0, [pc, #156]	@ (80031b4 <_printf_i+0x238>)
 8003118:	e7e9      	b.n	80030ee <_printf_i+0x172>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	f023 0320 	bic.w	r3, r3, #32
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	e7f6      	b.n	8003112 <_printf_i+0x196>
 8003124:	4616      	mov	r6, r2
 8003126:	e7bd      	b.n	80030a4 <_printf_i+0x128>
 8003128:	6833      	ldr	r3, [r6, #0]
 800312a:	6825      	ldr	r5, [r4, #0]
 800312c:	6961      	ldr	r1, [r4, #20]
 800312e:	1d18      	adds	r0, r3, #4
 8003130:	6030      	str	r0, [r6, #0]
 8003132:	062e      	lsls	r6, r5, #24
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	d501      	bpl.n	800313c <_printf_i+0x1c0>
 8003138:	6019      	str	r1, [r3, #0]
 800313a:	e002      	b.n	8003142 <_printf_i+0x1c6>
 800313c:	0668      	lsls	r0, r5, #25
 800313e:	d5fb      	bpl.n	8003138 <_printf_i+0x1bc>
 8003140:	8019      	strh	r1, [r3, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	6123      	str	r3, [r4, #16]
 8003146:	4616      	mov	r6, r2
 8003148:	e7bc      	b.n	80030c4 <_printf_i+0x148>
 800314a:	6833      	ldr	r3, [r6, #0]
 800314c:	1d1a      	adds	r2, r3, #4
 800314e:	6032      	str	r2, [r6, #0]
 8003150:	681e      	ldr	r6, [r3, #0]
 8003152:	6862      	ldr	r2, [r4, #4]
 8003154:	2100      	movs	r1, #0
 8003156:	4630      	mov	r0, r6
 8003158:	f7fd f842 	bl	80001e0 <memchr>
 800315c:	b108      	cbz	r0, 8003162 <_printf_i+0x1e6>
 800315e:	1b80      	subs	r0, r0, r6
 8003160:	6060      	str	r0, [r4, #4]
 8003162:	6863      	ldr	r3, [r4, #4]
 8003164:	6123      	str	r3, [r4, #16]
 8003166:	2300      	movs	r3, #0
 8003168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800316c:	e7aa      	b.n	80030c4 <_printf_i+0x148>
 800316e:	6923      	ldr	r3, [r4, #16]
 8003170:	4632      	mov	r2, r6
 8003172:	4649      	mov	r1, r9
 8003174:	4640      	mov	r0, r8
 8003176:	47d0      	blx	sl
 8003178:	3001      	adds	r0, #1
 800317a:	d0ad      	beq.n	80030d8 <_printf_i+0x15c>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	079b      	lsls	r3, r3, #30
 8003180:	d413      	bmi.n	80031aa <_printf_i+0x22e>
 8003182:	68e0      	ldr	r0, [r4, #12]
 8003184:	9b03      	ldr	r3, [sp, #12]
 8003186:	4298      	cmp	r0, r3
 8003188:	bfb8      	it	lt
 800318a:	4618      	movlt	r0, r3
 800318c:	e7a6      	b.n	80030dc <_printf_i+0x160>
 800318e:	2301      	movs	r3, #1
 8003190:	4632      	mov	r2, r6
 8003192:	4649      	mov	r1, r9
 8003194:	4640      	mov	r0, r8
 8003196:	47d0      	blx	sl
 8003198:	3001      	adds	r0, #1
 800319a:	d09d      	beq.n	80030d8 <_printf_i+0x15c>
 800319c:	3501      	adds	r5, #1
 800319e:	68e3      	ldr	r3, [r4, #12]
 80031a0:	9903      	ldr	r1, [sp, #12]
 80031a2:	1a5b      	subs	r3, r3, r1
 80031a4:	42ab      	cmp	r3, r5
 80031a6:	dcf2      	bgt.n	800318e <_printf_i+0x212>
 80031a8:	e7eb      	b.n	8003182 <_printf_i+0x206>
 80031aa:	2500      	movs	r5, #0
 80031ac:	f104 0619 	add.w	r6, r4, #25
 80031b0:	e7f5      	b.n	800319e <_printf_i+0x222>
 80031b2:	bf00      	nop
 80031b4:	08005745 	.word	0x08005745
 80031b8:	08005756 	.word	0x08005756

080031bc <__sflush_r>:
 80031bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c4:	0716      	lsls	r6, r2, #28
 80031c6:	4605      	mov	r5, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	d454      	bmi.n	8003276 <__sflush_r+0xba>
 80031cc:	684b      	ldr	r3, [r1, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	dc02      	bgt.n	80031d8 <__sflush_r+0x1c>
 80031d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	dd48      	ble.n	800326a <__sflush_r+0xae>
 80031d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031da:	2e00      	cmp	r6, #0
 80031dc:	d045      	beq.n	800326a <__sflush_r+0xae>
 80031de:	2300      	movs	r3, #0
 80031e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031e4:	682f      	ldr	r7, [r5, #0]
 80031e6:	6a21      	ldr	r1, [r4, #32]
 80031e8:	602b      	str	r3, [r5, #0]
 80031ea:	d030      	beq.n	800324e <__sflush_r+0x92>
 80031ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031ee:	89a3      	ldrh	r3, [r4, #12]
 80031f0:	0759      	lsls	r1, r3, #29
 80031f2:	d505      	bpl.n	8003200 <__sflush_r+0x44>
 80031f4:	6863      	ldr	r3, [r4, #4]
 80031f6:	1ad2      	subs	r2, r2, r3
 80031f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031fa:	b10b      	cbz	r3, 8003200 <__sflush_r+0x44>
 80031fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	2300      	movs	r3, #0
 8003202:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003204:	6a21      	ldr	r1, [r4, #32]
 8003206:	4628      	mov	r0, r5
 8003208:	47b0      	blx	r6
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	d106      	bne.n	800321e <__sflush_r+0x62>
 8003210:	6829      	ldr	r1, [r5, #0]
 8003212:	291d      	cmp	r1, #29
 8003214:	d82b      	bhi.n	800326e <__sflush_r+0xb2>
 8003216:	4a2a      	ldr	r2, [pc, #168]	@ (80032c0 <__sflush_r+0x104>)
 8003218:	410a      	asrs	r2, r1
 800321a:	07d6      	lsls	r6, r2, #31
 800321c:	d427      	bmi.n	800326e <__sflush_r+0xb2>
 800321e:	2200      	movs	r2, #0
 8003220:	6062      	str	r2, [r4, #4]
 8003222:	04d9      	lsls	r1, r3, #19
 8003224:	6922      	ldr	r2, [r4, #16]
 8003226:	6022      	str	r2, [r4, #0]
 8003228:	d504      	bpl.n	8003234 <__sflush_r+0x78>
 800322a:	1c42      	adds	r2, r0, #1
 800322c:	d101      	bne.n	8003232 <__sflush_r+0x76>
 800322e:	682b      	ldr	r3, [r5, #0]
 8003230:	b903      	cbnz	r3, 8003234 <__sflush_r+0x78>
 8003232:	6560      	str	r0, [r4, #84]	@ 0x54
 8003234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003236:	602f      	str	r7, [r5, #0]
 8003238:	b1b9      	cbz	r1, 800326a <__sflush_r+0xae>
 800323a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800323e:	4299      	cmp	r1, r3
 8003240:	d002      	beq.n	8003248 <__sflush_r+0x8c>
 8003242:	4628      	mov	r0, r5
 8003244:	f7ff fa9a 	bl	800277c <_free_r>
 8003248:	2300      	movs	r3, #0
 800324a:	6363      	str	r3, [r4, #52]	@ 0x34
 800324c:	e00d      	b.n	800326a <__sflush_r+0xae>
 800324e:	2301      	movs	r3, #1
 8003250:	4628      	mov	r0, r5
 8003252:	47b0      	blx	r6
 8003254:	4602      	mov	r2, r0
 8003256:	1c50      	adds	r0, r2, #1
 8003258:	d1c9      	bne.n	80031ee <__sflush_r+0x32>
 800325a:	682b      	ldr	r3, [r5, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0c6      	beq.n	80031ee <__sflush_r+0x32>
 8003260:	2b1d      	cmp	r3, #29
 8003262:	d001      	beq.n	8003268 <__sflush_r+0xac>
 8003264:	2b16      	cmp	r3, #22
 8003266:	d11e      	bne.n	80032a6 <__sflush_r+0xea>
 8003268:	602f      	str	r7, [r5, #0]
 800326a:	2000      	movs	r0, #0
 800326c:	e022      	b.n	80032b4 <__sflush_r+0xf8>
 800326e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003272:	b21b      	sxth	r3, r3
 8003274:	e01b      	b.n	80032ae <__sflush_r+0xf2>
 8003276:	690f      	ldr	r7, [r1, #16]
 8003278:	2f00      	cmp	r7, #0
 800327a:	d0f6      	beq.n	800326a <__sflush_r+0xae>
 800327c:	0793      	lsls	r3, r2, #30
 800327e:	680e      	ldr	r6, [r1, #0]
 8003280:	bf08      	it	eq
 8003282:	694b      	ldreq	r3, [r1, #20]
 8003284:	600f      	str	r7, [r1, #0]
 8003286:	bf18      	it	ne
 8003288:	2300      	movne	r3, #0
 800328a:	eba6 0807 	sub.w	r8, r6, r7
 800328e:	608b      	str	r3, [r1, #8]
 8003290:	f1b8 0f00 	cmp.w	r8, #0
 8003294:	dde9      	ble.n	800326a <__sflush_r+0xae>
 8003296:	6a21      	ldr	r1, [r4, #32]
 8003298:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800329a:	4643      	mov	r3, r8
 800329c:	463a      	mov	r2, r7
 800329e:	4628      	mov	r0, r5
 80032a0:	47b0      	blx	r6
 80032a2:	2800      	cmp	r0, #0
 80032a4:	dc08      	bgt.n	80032b8 <__sflush_r+0xfc>
 80032a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ae:	81a3      	strh	r3, [r4, #12]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032b8:	4407      	add	r7, r0
 80032ba:	eba8 0800 	sub.w	r8, r8, r0
 80032be:	e7e7      	b.n	8003290 <__sflush_r+0xd4>
 80032c0:	dfbffffe 	.word	0xdfbffffe

080032c4 <_fflush_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	690b      	ldr	r3, [r1, #16]
 80032c8:	4605      	mov	r5, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	b913      	cbnz	r3, 80032d4 <_fflush_r+0x10>
 80032ce:	2500      	movs	r5, #0
 80032d0:	4628      	mov	r0, r5
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	b118      	cbz	r0, 80032de <_fflush_r+0x1a>
 80032d6:	6a03      	ldr	r3, [r0, #32]
 80032d8:	b90b      	cbnz	r3, 80032de <_fflush_r+0x1a>
 80032da:	f7ff f835 	bl	8002348 <__sinit>
 80032de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f3      	beq.n	80032ce <_fflush_r+0xa>
 80032e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032e8:	07d0      	lsls	r0, r2, #31
 80032ea:	d404      	bmi.n	80032f6 <_fflush_r+0x32>
 80032ec:	0599      	lsls	r1, r3, #22
 80032ee:	d402      	bmi.n	80032f6 <_fflush_r+0x32>
 80032f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032f2:	f7ff fa40 	bl	8002776 <__retarget_lock_acquire_recursive>
 80032f6:	4628      	mov	r0, r5
 80032f8:	4621      	mov	r1, r4
 80032fa:	f7ff ff5f 	bl	80031bc <__sflush_r>
 80032fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003300:	07da      	lsls	r2, r3, #31
 8003302:	4605      	mov	r5, r0
 8003304:	d4e4      	bmi.n	80032d0 <_fflush_r+0xc>
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	059b      	lsls	r3, r3, #22
 800330a:	d4e1      	bmi.n	80032d0 <_fflush_r+0xc>
 800330c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800330e:	f7ff fa33 	bl	8002778 <__retarget_lock_release_recursive>
 8003312:	e7dd      	b.n	80032d0 <_fflush_r+0xc>

08003314 <__swhatbuf_r>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	460c      	mov	r4, r1
 8003318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800331c:	2900      	cmp	r1, #0
 800331e:	b096      	sub	sp, #88	@ 0x58
 8003320:	4615      	mov	r5, r2
 8003322:	461e      	mov	r6, r3
 8003324:	da0d      	bge.n	8003342 <__swhatbuf_r+0x2e>
 8003326:	89a3      	ldrh	r3, [r4, #12]
 8003328:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	bf14      	ite	ne
 8003332:	2340      	movne	r3, #64	@ 0x40
 8003334:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003338:	2000      	movs	r0, #0
 800333a:	6031      	str	r1, [r6, #0]
 800333c:	602b      	str	r3, [r5, #0]
 800333e:	b016      	add	sp, #88	@ 0x58
 8003340:	bd70      	pop	{r4, r5, r6, pc}
 8003342:	466a      	mov	r2, sp
 8003344:	f000 f862 	bl	800340c <_fstat_r>
 8003348:	2800      	cmp	r0, #0
 800334a:	dbec      	blt.n	8003326 <__swhatbuf_r+0x12>
 800334c:	9901      	ldr	r1, [sp, #4]
 800334e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003352:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003356:	4259      	negs	r1, r3
 8003358:	4159      	adcs	r1, r3
 800335a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800335e:	e7eb      	b.n	8003338 <__swhatbuf_r+0x24>

08003360 <__smakebuf_r>:
 8003360:	898b      	ldrh	r3, [r1, #12]
 8003362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003364:	079d      	lsls	r5, r3, #30
 8003366:	4606      	mov	r6, r0
 8003368:	460c      	mov	r4, r1
 800336a:	d507      	bpl.n	800337c <__smakebuf_r+0x1c>
 800336c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	6123      	str	r3, [r4, #16]
 8003374:	2301      	movs	r3, #1
 8003376:	6163      	str	r3, [r4, #20]
 8003378:	b003      	add	sp, #12
 800337a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800337c:	ab01      	add	r3, sp, #4
 800337e:	466a      	mov	r2, sp
 8003380:	f7ff ffc8 	bl	8003314 <__swhatbuf_r>
 8003384:	9f00      	ldr	r7, [sp, #0]
 8003386:	4605      	mov	r5, r0
 8003388:	4639      	mov	r1, r7
 800338a:	4630      	mov	r0, r6
 800338c:	f7ff fa62 	bl	8002854 <_malloc_r>
 8003390:	b948      	cbnz	r0, 80033a6 <__smakebuf_r+0x46>
 8003392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003396:	059a      	lsls	r2, r3, #22
 8003398:	d4ee      	bmi.n	8003378 <__smakebuf_r+0x18>
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	f043 0302 	orr.w	r3, r3, #2
 80033a2:	81a3      	strh	r3, [r4, #12]
 80033a4:	e7e2      	b.n	800336c <__smakebuf_r+0xc>
 80033a6:	89a3      	ldrh	r3, [r4, #12]
 80033a8:	6020      	str	r0, [r4, #0]
 80033aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033ae:	81a3      	strh	r3, [r4, #12]
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80033b6:	b15b      	cbz	r3, 80033d0 <__smakebuf_r+0x70>
 80033b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033bc:	4630      	mov	r0, r6
 80033be:	f000 f837 	bl	8003430 <_isatty_r>
 80033c2:	b128      	cbz	r0, 80033d0 <__smakebuf_r+0x70>
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	81a3      	strh	r3, [r4, #12]
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	431d      	orrs	r5, r3
 80033d4:	81a5      	strh	r5, [r4, #12]
 80033d6:	e7cf      	b.n	8003378 <__smakebuf_r+0x18>

080033d8 <memmove>:
 80033d8:	4288      	cmp	r0, r1
 80033da:	b510      	push	{r4, lr}
 80033dc:	eb01 0402 	add.w	r4, r1, r2
 80033e0:	d902      	bls.n	80033e8 <memmove+0x10>
 80033e2:	4284      	cmp	r4, r0
 80033e4:	4623      	mov	r3, r4
 80033e6:	d807      	bhi.n	80033f8 <memmove+0x20>
 80033e8:	1e43      	subs	r3, r0, #1
 80033ea:	42a1      	cmp	r1, r4
 80033ec:	d008      	beq.n	8003400 <memmove+0x28>
 80033ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033f6:	e7f8      	b.n	80033ea <memmove+0x12>
 80033f8:	4402      	add	r2, r0
 80033fa:	4601      	mov	r1, r0
 80033fc:	428a      	cmp	r2, r1
 80033fe:	d100      	bne.n	8003402 <memmove+0x2a>
 8003400:	bd10      	pop	{r4, pc}
 8003402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800340a:	e7f7      	b.n	80033fc <memmove+0x24>

0800340c <_fstat_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4d07      	ldr	r5, [pc, #28]	@ (800342c <_fstat_r+0x20>)
 8003410:	2300      	movs	r3, #0
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	602b      	str	r3, [r5, #0]
 800341a:	f7fd feb3 	bl	8001184 <_fstat>
 800341e:	1c43      	adds	r3, r0, #1
 8003420:	d102      	bne.n	8003428 <_fstat_r+0x1c>
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	b103      	cbz	r3, 8003428 <_fstat_r+0x1c>
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	bd38      	pop	{r3, r4, r5, pc}
 800342a:	bf00      	nop
 800342c:	20000680 	.word	0x20000680

08003430 <_isatty_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4d06      	ldr	r5, [pc, #24]	@ (800344c <_isatty_r+0x1c>)
 8003434:	2300      	movs	r3, #0
 8003436:	4604      	mov	r4, r0
 8003438:	4608      	mov	r0, r1
 800343a:	602b      	str	r3, [r5, #0]
 800343c:	f7fd feb2 	bl	80011a4 <_isatty>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d102      	bne.n	800344a <_isatty_r+0x1a>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	b103      	cbz	r3, 800344a <_isatty_r+0x1a>
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	bd38      	pop	{r3, r4, r5, pc}
 800344c:	20000680 	.word	0x20000680

08003450 <_sbrk_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	4d06      	ldr	r5, [pc, #24]	@ (800346c <_sbrk_r+0x1c>)
 8003454:	2300      	movs	r3, #0
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	f7fd feba 	bl	80011d4 <_sbrk>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_sbrk_r+0x1a>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_sbrk_r+0x1a>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	20000680 	.word	0x20000680

08003470 <memcpy>:
 8003470:	440a      	add	r2, r1
 8003472:	4291      	cmp	r1, r2
 8003474:	f100 33ff 	add.w	r3, r0, #4294967295
 8003478:	d100      	bne.n	800347c <memcpy+0xc>
 800347a:	4770      	bx	lr
 800347c:	b510      	push	{r4, lr}
 800347e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003486:	4291      	cmp	r1, r2
 8003488:	d1f9      	bne.n	800347e <memcpy+0xe>
 800348a:	bd10      	pop	{r4, pc}

0800348c <_realloc_r>:
 800348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003490:	4680      	mov	r8, r0
 8003492:	4615      	mov	r5, r2
 8003494:	460c      	mov	r4, r1
 8003496:	b921      	cbnz	r1, 80034a2 <_realloc_r+0x16>
 8003498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800349c:	4611      	mov	r1, r2
 800349e:	f7ff b9d9 	b.w	8002854 <_malloc_r>
 80034a2:	b92a      	cbnz	r2, 80034b0 <_realloc_r+0x24>
 80034a4:	f7ff f96a 	bl	800277c <_free_r>
 80034a8:	2400      	movs	r4, #0
 80034aa:	4620      	mov	r0, r4
 80034ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b0:	f000 f81a 	bl	80034e8 <_malloc_usable_size_r>
 80034b4:	4285      	cmp	r5, r0
 80034b6:	4606      	mov	r6, r0
 80034b8:	d802      	bhi.n	80034c0 <_realloc_r+0x34>
 80034ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80034be:	d8f4      	bhi.n	80034aa <_realloc_r+0x1e>
 80034c0:	4629      	mov	r1, r5
 80034c2:	4640      	mov	r0, r8
 80034c4:	f7ff f9c6 	bl	8002854 <_malloc_r>
 80034c8:	4607      	mov	r7, r0
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d0ec      	beq.n	80034a8 <_realloc_r+0x1c>
 80034ce:	42b5      	cmp	r5, r6
 80034d0:	462a      	mov	r2, r5
 80034d2:	4621      	mov	r1, r4
 80034d4:	bf28      	it	cs
 80034d6:	4632      	movcs	r2, r6
 80034d8:	f7ff ffca 	bl	8003470 <memcpy>
 80034dc:	4621      	mov	r1, r4
 80034de:	4640      	mov	r0, r8
 80034e0:	f7ff f94c 	bl	800277c <_free_r>
 80034e4:	463c      	mov	r4, r7
 80034e6:	e7e0      	b.n	80034aa <_realloc_r+0x1e>

080034e8 <_malloc_usable_size_r>:
 80034e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034ec:	1f18      	subs	r0, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bfbc      	itt	lt
 80034f2:	580b      	ldrlt	r3, [r1, r0]
 80034f4:	18c0      	addlt	r0, r0, r3
 80034f6:	4770      	bx	lr

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
