
2024_04_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08003f94  08003f94  00004f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004180  08004180  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004180  08004180  00005180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004188  08004188  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004188  08004188  00005188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800418c  0800418c  0000518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004190  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  080041f8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080041f8  00006284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b7c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001621  00000000  00000000  0000dc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000546  00000000  00000000  0000f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016140  00000000  00000000  0000fe76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086b9  00000000  00000000  00025fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087598  00000000  00000000  0002e66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5c07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002670  00000000  00000000  000b5c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000b82bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f7c 	.word	0x08003f7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003f7c 	.word	0x08003f7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)	// 1 char output
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	230a      	movs	r3, #10
 800057c:	2201      	movs	r2, #1
 800057e:	4804      	ldr	r0, [pc, #16]	@ (8000590 <__io_putchar+0x20>)
 8000580:	f001 fb68 	bl	8001c54 <HAL_UART_Transmit>
	return ch;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000084 	.word	0x20000084

08000594 <__io_getchar>:
char Buf[100];	// Receive buffer from UART
int __io_getchar()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2, Buf, 1, 10);	// 1 Byte receive
 8000598:	230a      	movs	r3, #10
 800059a:	2201      	movs	r2, #1
 800059c:	4906      	ldr	r1, [pc, #24]	@ (80005b8 <__io_getchar+0x24>)
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <__io_getchar+0x28>)
 80005a0:	f001 fbe3 	bl	8001d6a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, Buf, 1, 10);	// Echo
 80005a4:	230a      	movs	r3, #10
 80005a6:	2201      	movs	r2, #1
 80005a8:	4903      	ldr	r1, [pc, #12]	@ (80005b8 <__io_getchar+0x24>)
 80005aa:	4804      	ldr	r0, [pc, #16]	@ (80005bc <__io_getchar+0x28>)
 80005ac:	f001 fb52 	bl	8001c54 <HAL_UART_Transmit>
	return Buf[10];
 80005b0:	4b01      	ldr	r3, [pc, #4]	@ (80005b8 <__io_getchar+0x24>)
 80005b2:	7a9b      	ldrb	r3, [r3, #10]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000cc 	.word	0x200000cc
 80005bc:	20000084 	.word	0x20000084

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fadb 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f843 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8d5 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f8a9 	bl	8000728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Program Started.... Press Blue button to continue \r\n");	// start message
 80005d6:	481a      	ldr	r0, [pc, #104]	@ (8000640 <main+0x80>)
 80005d8:	f002 f8b8 	bl	800274c <puts>
  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));	// If pressed -> B1 == 0
 80005dc:	bf00      	nop
 80005de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e2:	4818      	ldr	r0, [pc, #96]	@ (8000644 <main+0x84>)
 80005e4:	f000 fdf8 	bl	80011d8 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f7      	bne.n	80005de <main+0x1e>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int cnt = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
  int mode = 1;	// If mode == 1 -> continue
 80005f2:	2301      	movs	r3, #1
 80005f4:	607b      	str	r3, [r7, #4]

  scanf("%d", &cnt);
 80005f6:	463b      	mov	r3, r7
 80005f8:	4619      	mov	r1, r3
 80005fa:	4813      	ldr	r0, [pc, #76]	@ (8000648 <main+0x88>)
 80005fc:	f002 f8ae 	bl	800275c <iscanf>
  while (1)
  {
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 8000600:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000604:	480f      	ldr	r0, [pc, #60]	@ (8000644 <main+0x84>)
 8000606:	f000 fde7 	bl	80011d8 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d109      	bne.n	8000624 <main+0x64>
	  {
		  mode = !mode;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	bf0c      	ite	eq
 8000616:	2301      	moveq	r3, #1
 8000618:	2300      	movne	r3, #0
 800061a:	b2db      	uxtb	r3, r3
 800061c:	607b      	str	r3, [r7, #4]
		  printf("Paused. Press Blue button to continue. \r\n");
 800061e:	480b      	ldr	r0, [pc, #44]	@ (800064c <main+0x8c>)
 8000620:	f002 f894 	bl	800274c <puts>
	  else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0 && mode == 0)
	  {
		  mode = 1;	// end of pause mode & resume
	  }
	  */
	  if(mode == 1)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d106      	bne.n	8000638 <main+0x78>
	  {
		  printf("count loop %4d \r\n", cnt++);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	603a      	str	r2, [r7, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	4807      	ldr	r0, [pc, #28]	@ (8000650 <main+0x90>)
 8000634:	f002 f822 	bl	800267c <iprintf>
	  }
	  HAL_Delay(200);
 8000638:	20c8      	movs	r0, #200	@ 0xc8
 800063a:	f000 fb13 	bl	8000c64 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 800063e:	e7df      	b.n	8000600 <main+0x40>
 8000640:	08003f94 	.word	0x08003f94
 8000644:	40020800 	.word	0x40020800
 8000648:	08003fc8 	.word	0x08003fc8
 800064c:	08003fcc 	.word	0x08003fcc
 8000650:	08003ff8 	.word	0x08003ff8

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	@ 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 f964 	bl	8002930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a27      	ldr	r2, [pc, #156]	@ (8000720 <SystemClock_Config+0xcc>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SystemClock_Config+0xd0>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c4:	2310      	movs	r3, #16
 80006c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fdd2 	bl	8001284 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e6:	f000 f8bf 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f834 	bl	8001774 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000712:	f000 f8a9 	bl	8000868 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	@ 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f001 fa28 	bl	8001bb4 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f87d 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000084 	.word	0x20000084
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b31      	ldr	r3, [pc, #196]	@ (800085c <MX_GPIO_Init+0xe0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a30      	ldr	r2, [pc, #192]	@ (800085c <MX_GPIO_Init+0xe0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b2e      	ldr	r3, [pc, #184]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a29      	ldr	r2, [pc, #164]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b27      	ldr	r3, [pc, #156]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b23      	ldr	r3, [pc, #140]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a22      	ldr	r2, [pc, #136]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b20      	ldr	r3, [pc, #128]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a1b      	ldr	r2, [pc, #108]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <MX_GPIO_Init+0xe0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	4816      	ldr	r0, [pc, #88]	@ (8000860 <MX_GPIO_Init+0xe4>)
 8000808:	f000 fcfe 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000812:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4810      	ldr	r0, [pc, #64]	@ (8000864 <MX_GPIO_Init+0xe8>)
 8000824:	f000 fb54 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000828:	2320      	movs	r3, #32
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4808      	ldr	r0, [pc, #32]	@ (8000860 <MX_GPIO_Init+0xe4>)
 8000840:	f000 fb46 	bl	8000ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2028      	movs	r0, #40	@ 0x28
 800084a:	f000 fb0a 	bl	8000e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800084e:	2028      	movs	r0, #40	@ 0x28
 8000850:	f000 fb23 	bl	8000e9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	@ 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020800 	.word	0x40020800

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000888:	6453      	str	r3, [r2, #68]	@ 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008b2:	2007      	movs	r0, #7
 80008b4:	f000 faca 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a19      	ldr	r2, [pc, #100]	@ (8000948 <HAL_UART_MspInit+0x84>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12b      	bne.n	800093e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <HAL_UART_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a17      	ldr	r2, [pc, #92]	@ (800094c <HAL_UART_MspInit+0x88>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <HAL_UART_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <HAL_UART_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a10      	ldr	r2, [pc, #64]	@ (800094c <HAL_UART_MspInit+0x88>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091e:	230c      	movs	r3, #12
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092e:	2307      	movs	r3, #7
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <HAL_UART_MspInit+0x8c>)
 800093a:	f000 fac9 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	@ 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40004400 	.word	0x40004400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 f93b 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009b6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009ba:	f000 fc3f 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e00a      	b.n	80009ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d4:	f7ff fdde 	bl	8000594 <__io_getchar>
 80009d8:	4601      	mov	r1, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	60ba      	str	r2, [r7, #8]
 80009e0:	b2ca      	uxtb	r2, r1
 80009e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3301      	adds	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbf0      	blt.n	80009d4 <_read+0x12>
  }

  return len;
 80009f2:	687b      	ldr	r3, [r7, #4]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e009      	b.n	8000a22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	60ba      	str	r2, [r7, #8]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fdaa 	bl	8000570 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbf1      	blt.n	8000a0e <_write+0x12>
  }
  return len;
 8000a2a:	687b      	ldr	r3, [r7, #4]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_close>:

int _close(int file)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_isatty>:

int _isatty(int file)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f001 ff7e 	bl	80029cc <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20020000 	.word	0x20020000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	20000130 	.word	0x20000130
 8000b04:	20000288 	.word	0x20000288

08000b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b30:	f7ff ffea 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	@ (8000b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	@ (8000b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f001 ff3d 	bl	80029d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fd2f 	bl	80005c0 <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b70:	08004190 	.word	0x08004190
  ldr r2, =_sbss
 8000b74:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b78:	20000284 	.word	0x20000284

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f94f 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe5e 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f967 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f92f 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	@ (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000134 	.word	0x20000134

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000134 	.word	0x20000134

08000c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff ffee 	bl	8000c4c <HAL_GetTick>
 8000c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d005      	beq.n	8000c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <HAL_Delay+0x44>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c8a:	bf00      	nop
 8000c8c:	f7ff ffde 	bl	8000c4c <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8f7      	bhi.n	8000c8c <HAL_Delay+0x28>
  {
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	@ (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	@ (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	@ (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	@ 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	@ 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff29 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff3e 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff31 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffa2 	bl	8000e08 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e159      	b.n	80011a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f040 8148 	bne.w	800119a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d005      	beq.n	8000f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d130      	bne.n	8000f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d017      	beq.n	8000fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d123      	bne.n	8001014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	69b9      	ldr	r1, [r7, #24]
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0203 	and.w	r2, r3, #3
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80a2 	beq.w	800119a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b57      	ldr	r3, [pc, #348]	@ (80011b8 <HAL_GPIO_Init+0x2e8>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	4a56      	ldr	r2, [pc, #344]	@ (80011b8 <HAL_GPIO_Init+0x2e8>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001064:	6453      	str	r3, [r2, #68]	@ 0x44
 8001066:	4b54      	ldr	r3, [pc, #336]	@ (80011b8 <HAL_GPIO_Init+0x2e8>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001072:	4a52      	ldr	r2, [pc, #328]	@ (80011bc <HAL_GPIO_Init+0x2ec>)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a49      	ldr	r2, [pc, #292]	@ (80011c0 <HAL_GPIO_Init+0x2f0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x202>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a48      	ldr	r2, [pc, #288]	@ (80011c4 <HAL_GPIO_Init+0x2f4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x1fe>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a47      	ldr	r2, [pc, #284]	@ (80011c8 <HAL_GPIO_Init+0x2f8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a46      	ldr	r2, [pc, #280]	@ (80011cc <HAL_GPIO_Init+0x2fc>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x1f6>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a45      	ldr	r2, [pc, #276]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x1f2>
 80010be:	2304      	movs	r3, #4
 80010c0:	e008      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010d2:	2300      	movs	r3, #0
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	f002 0203 	and.w	r2, r2, #3
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4093      	lsls	r3, r2
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e4:	4935      	ldr	r1, [pc, #212]	@ (80011bc <HAL_GPIO_Init+0x2ec>)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001116:	4a2f      	ldr	r2, [pc, #188]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111c:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001140:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001146:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800116a:	4a1a      	ldr	r2, [pc, #104]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001194:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3301      	adds	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	f67f aea2 	bls.w	8000eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3724      	adds	r7, #36	@ 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020400 	.word	0x40020400
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40013c00 	.word	0x40013c00

080011d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e001      	b.n	80011fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f806 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e267      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d075      	beq.n	800138e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a2:	4b88      	ldr	r3, [pc, #544]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d00c      	beq.n	80012c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ae:	4b85      	ldr	r3, [pc, #532]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d112      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ba:	4b82      	ldr	r3, [pc, #520]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012c6:	d10b      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	4b7e      	ldr	r3, [pc, #504]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d05b      	beq.n	800138c <HAL_RCC_OscConfig+0x108>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d157      	bne.n	800138c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e242      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e8:	d106      	bne.n	80012f8 <HAL_RCC_OscConfig+0x74>
 80012ea:	4b76      	ldr	r3, [pc, #472]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a75      	ldr	r2, [pc, #468]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e01d      	b.n	8001334 <HAL_RCC_OscConfig+0xb0>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x98>
 8001302:	4b70      	ldr	r3, [pc, #448]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a6f      	ldr	r2, [pc, #444]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b6d      	ldr	r3, [pc, #436]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6c      	ldr	r2, [pc, #432]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e00b      	b.n	8001334 <HAL_RCC_OscConfig+0xb0>
 800131c:	4b69      	ldr	r3, [pc, #420]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a68      	ldr	r2, [pc, #416]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b66      	ldr	r3, [pc, #408]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a65      	ldr	r2, [pc, #404]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fc86 	bl	8000c4c <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fc82 	bl	8000c4c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	@ 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e207      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	4b5b      	ldr	r3, [pc, #364]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0xc0>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fc72 	bl	8000c4c <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fc6e 	bl	8000c4c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	@ 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e1f3      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0xe8>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d063      	beq.n	8001462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139a:	4b4a      	ldr	r3, [pc, #296]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a6:	4b47      	ldr	r3, [pc, #284]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d11c      	bne.n	80013ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b44      	ldr	r3, [pc, #272]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d116      	bne.n	80013ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	4b41      	ldr	r3, [pc, #260]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x152>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e1c7      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b3b      	ldr	r3, [pc, #236]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4937      	ldr	r1, [pc, #220]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	e03a      	b.n	8001462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f4:	4b34      	ldr	r3, [pc, #208]	@ (80014c8 <HAL_RCC_OscConfig+0x244>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fc27 	bl	8000c4c <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fc23 	bl	8000c4c <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e1a8      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	4b2b      	ldr	r3, [pc, #172]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4925      	ldr	r1, [pc, #148]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <HAL_RCC_OscConfig+0x244>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fc06 	bl	8000c4c <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001444:	f7ff fc02 	bl	8000c4c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e187      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d036      	beq.n	80014dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d016      	beq.n	80014a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_RCC_OscConfig+0x248>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fbe6 	bl	8000c4c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff fbe2 	bl	8000c4c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e167      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x200>
 80014a2:	e01b      	b.n	80014dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HAL_RCC_OscConfig+0x248>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fbcf 	bl	8000c4c <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b0:	e00e      	b.n	80014d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff fbcb 	bl	8000c4c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d907      	bls.n	80014d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e150      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
 80014c4:	40023800 	.word	0x40023800
 80014c8:	42470000 	.word	0x42470000
 80014cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	4b88      	ldr	r3, [pc, #544]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ea      	bne.n	80014b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8097 	beq.w	8001618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ee:	4b81      	ldr	r3, [pc, #516]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b7d      	ldr	r3, [pc, #500]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	4a7c      	ldr	r2, [pc, #496]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	@ 0x40
 800150a:	4b7a      	ldr	r3, [pc, #488]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b77      	ldr	r3, [pc, #476]	@ (80016f8 <HAL_RCC_OscConfig+0x474>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d118      	bne.n	8001558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001526:	4b74      	ldr	r3, [pc, #464]	@ (80016f8 <HAL_RCC_OscConfig+0x474>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a73      	ldr	r2, [pc, #460]	@ (80016f8 <HAL_RCC_OscConfig+0x474>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff fb8b 	bl	8000c4c <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff fb87 	bl	8000c4c <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e10c      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	4b6a      	ldr	r3, [pc, #424]	@ (80016f8 <HAL_RCC_OscConfig+0x474>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x2ea>
 8001560:	4b64      	ldr	r3, [pc, #400]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001564:	4a63      	ldr	r2, [pc, #396]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	@ 0x70
 800156c:	e01c      	b.n	80015a8 <HAL_RCC_OscConfig+0x324>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x30c>
 8001576:	4b5f      	ldr	r3, [pc, #380]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157a:	4a5e      	ldr	r2, [pc, #376]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6713      	str	r3, [r2, #112]	@ 0x70
 8001582:	4b5c      	ldr	r3, [pc, #368]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001586:	4a5b      	ldr	r2, [pc, #364]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6713      	str	r3, [r2, #112]	@ 0x70
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0x324>
 8001590:	4b58      	ldr	r3, [pc, #352]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001594:	4a57      	ldr	r2, [pc, #348]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	@ 0x70
 800159c:	4b55      	ldr	r3, [pc, #340]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a0:	4a54      	ldr	r2, [pc, #336]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f023 0304 	bic.w	r3, r3, #4
 80015a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d015      	beq.n	80015dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fb4c 	bl	8000c4c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b8:	f7ff fb48 	bl	8000c4c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0cb      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ce:	4b49      	ldr	r3, [pc, #292]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0ee      	beq.n	80015b8 <HAL_RCC_OscConfig+0x334>
 80015da:	e014      	b.n	8001606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fb36 	bl	8000c4c <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff fb32 	bl	8000c4c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e0b5      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fa:	4b3e      	ldr	r3, [pc, #248]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ee      	bne.n	80015e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160c:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	4a38      	ldr	r2, [pc, #224]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80a1 	beq.w	8001764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001622:	4b34      	ldr	r3, [pc, #208]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b08      	cmp	r3, #8
 800162c:	d05c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d141      	bne.n	80016ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b31      	ldr	r3, [pc, #196]	@ (80016fc <HAL_RCC_OscConfig+0x478>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fb06 	bl	8000c4c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fb02 	bl	8000c4c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e087      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001678:	085b      	lsrs	r3, r3, #1
 800167a:	3b01      	subs	r3, #1
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001684:	061b      	lsls	r3, r3, #24
 8001686:	491b      	ldr	r1, [pc, #108]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_RCC_OscConfig+0x478>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fadb 	bl	8000c4c <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff fad7 	bl	8000c4c <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e05c      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x416>
 80016b8:	e054      	b.n	8001764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <HAL_RCC_OscConfig+0x478>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fac4 	bl	8000c4c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff fac0 	bl	8000c4c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e045      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_RCC_OscConfig+0x470>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x444>
 80016e6:	e03d      	b.n	8001764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e038      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000
 80016fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_RCC_OscConfig+0x4ec>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d028      	beq.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d121      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d11a      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001730:	4013      	ands	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001738:	4293      	cmp	r3, r2
 800173a:	d111      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	3b01      	subs	r3, #1
 800174a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0cc      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b68      	ldr	r3, [pc, #416]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d90c      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b65      	ldr	r3, [pc, #404]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a58      	ldr	r2, [pc, #352]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a52      	ldr	r2, [pc, #328]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d044      	beq.n	8001894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d003      	beq.n	8001832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	2b03      	cmp	r3, #3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b3f      	ldr	r3, [pc, #252]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	4b3b      	ldr	r3, [pc, #236]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e067      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4934      	ldr	r1, [pc, #208]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff f9f2 	bl	8000c4c <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff f9ee 	bl	8000c4c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e04f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b25      	ldr	r3, [pc, #148]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20c      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b22      	ldr	r3, [pc, #136]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490a      	ldr	r1, [pc, #40]	@ (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f952 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	08004018 	.word	0x08004018
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b094      	sub	sp, #80	@ 0x50
 8001946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	647b      	str	r3, [r7, #68]	@ 0x44
 800194c:	2300      	movs	r3, #0
 800194e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001950:	2300      	movs	r3, #0
 8001952:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001958:	4b79      	ldr	r3, [pc, #484]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d00d      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x40>
 8001964:	2b08      	cmp	r3, #8
 8001966:	f200 80e1 	bhi.w	8001b2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x34>
 800196e:	2b04      	cmp	r3, #4
 8001970:	d003      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x3a>
 8001972:	e0db      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b73      	ldr	r3, [pc, #460]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001976:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001978:	e0db      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197a:	4b73      	ldr	r3, [pc, #460]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x208>)
 800197c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800197e:	e0d8      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001980:	4b6f      	ldr	r3, [pc, #444]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001988:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b6a      	ldr	r3, [pc, #424]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	2200      	movs	r2, #0
 800199e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019b2:	4622      	mov	r2, r4
 80019b4:	462b      	mov	r3, r5
 80019b6:	f04f 0000 	mov.w	r0, #0
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	0159      	lsls	r1, r3, #5
 80019c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c4:	0150      	lsls	r0, r2, #5
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4621      	mov	r1, r4
 80019cc:	1a51      	subs	r1, r2, r1
 80019ce:	6139      	str	r1, [r7, #16]
 80019d0:	4629      	mov	r1, r5
 80019d2:	eb63 0301 	sbc.w	r3, r3, r1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e4:	4659      	mov	r1, fp
 80019e6:	018b      	lsls	r3, r1, #6
 80019e8:	4651      	mov	r1, sl
 80019ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ee:	4651      	mov	r1, sl
 80019f0:	018a      	lsls	r2, r1, #6
 80019f2:	4651      	mov	r1, sl
 80019f4:	ebb2 0801 	subs.w	r8, r2, r1
 80019f8:	4659      	mov	r1, fp
 80019fa:	eb63 0901 	sbc.w	r9, r3, r1
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a12:	4690      	mov	r8, r2
 8001a14:	4699      	mov	r9, r3
 8001a16:	4623      	mov	r3, r4
 8001a18:	eb18 0303 	adds.w	r3, r8, r3
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	462b      	mov	r3, r5
 8001a20:	eb49 0303 	adc.w	r3, r9, r3
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a32:	4629      	mov	r1, r5
 8001a34:	024b      	lsls	r3, r1, #9
 8001a36:	4621      	mov	r1, r4
 8001a38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	024a      	lsls	r2, r1, #9
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a46:	2200      	movs	r2, #0
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a50:	f7fe fc16 	bl	8000280 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a5c:	e058      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5e:	4b38      	ldr	r3, [pc, #224]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	2200      	movs	r2, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	4611      	mov	r1, r2
 8001a6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a78:	4642      	mov	r2, r8
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	f04f 0000 	mov.w	r0, #0
 8001a80:	f04f 0100 	mov.w	r1, #0
 8001a84:	0159      	lsls	r1, r3, #5
 8001a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8a:	0150      	lsls	r0, r2, #5
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4641      	mov	r1, r8
 8001a92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a96:	4649      	mov	r1, r9
 8001a98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	00eb      	lsls	r3, r5, #3
 8001ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ac6:	00e2      	lsls	r2, r4, #3
 8001ac8:	4614      	mov	r4, r2
 8001aca:	461d      	mov	r5, r3
 8001acc:	4643      	mov	r3, r8
 8001ace:	18e3      	adds	r3, r4, r3
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	eb45 0303 	adc.w	r3, r5, r3
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	028b      	lsls	r3, r1, #10
 8001aea:	4621      	mov	r1, r4
 8001aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af0:	4621      	mov	r1, r4
 8001af2:	028a      	lsls	r2, r1, #10
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001afa:	2200      	movs	r2, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	61fa      	str	r2, [r7, #28]
 8001b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b04:	f7fe fbbc 	bl	8000280 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b2a:	e002      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3750      	adds	r7, #80	@ 0x50
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	00f42400 	.word	0x00f42400
 8001b48:	007a1200 	.word	0x007a1200

08001b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b68:	f7ff fff0 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	0a9b      	lsrs	r3, r3, #10
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	4903      	ldr	r1, [pc, #12]	@ (8001b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08004028 	.word	0x08004028

08001b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b90:	f7ff ffdc 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0b5b      	lsrs	r3, r3, #13
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	@ (8001bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08004028 	.word	0x08004028

08001bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e042      	b.n	8001c4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fe72 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	@ 0x24
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fa09 	bl	8002010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d175      	bne.n	8001d60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_UART_Transmit+0x2c>
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e06e      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2221      	movs	r2, #33	@ 0x21
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c92:	f7fe ffdb 	bl	8000c4c <HAL_GetTick>
 8001c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cac:	d108      	bne.n	8001cc0 <HAL_UART_Transmit+0x6c>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	e003      	b.n	8001cc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cc8:	e02e      	b.n	8001d28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2180      	movs	r1, #128	@ 0x80
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f8df 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e03a      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	3302      	adds	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	e007      	b.n	8001d1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	3301      	adds	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1cb      	bne.n	8001cca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2140      	movs	r1, #64	@ 0x40
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f8ab 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e006      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b08a      	sub	sp, #40	@ 0x28
 8001d6e:	af02      	add	r7, sp, #8
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	f040 8081 	bne.w	8001e8e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_UART_Receive+0x2e>
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e079      	b.n	8001e90 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2222      	movs	r2, #34	@ 0x22
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001db0:	f7fe ff4c 	bl	8000c4c <HAL_GetTick>
 8001db4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	88fa      	ldrh	r2, [r7, #6]
 8001dba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dca:	d108      	bne.n	8001dde <HAL_UART_Receive+0x74>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d104      	bne.n	8001dde <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	e003      	b.n	8001de6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001de6:	e047      	b.n	8001e78 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2200      	movs	r2, #0
 8001df0:	2120      	movs	r1, #32
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f850 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e042      	b.n	8001e90 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10c      	bne.n	8001e2a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	3302      	adds	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	e01f      	b.n	8001e6a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e32:	d007      	beq.n	8001e44 <HAL_UART_Receive+0xda>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_UART_Receive+0xe8>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d106      	bne.n	8001e52 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e008      	b.n	8001e64 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1b2      	bne.n	8001de8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea8:	e03b      	b.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d037      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb2:	f7fe fecb 	bl	8000c4c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d302      	bcc.n	8001ec8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e03a      	b.n	8001f42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d023      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d020      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b40      	cmp	r3, #64	@ 0x40
 8001ee4:	d01d      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d116      	bne.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f81d 	bl	8001f4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2208      	movs	r2, #8
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d0b4      	beq.n	8001eaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b095      	sub	sp, #84	@ 0x54
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	330c      	adds	r3, #12
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5c:	e853 3f00 	ldrex	r3, [r3]
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	330c      	adds	r3, #12
 8001f70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f72:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f7a:	e841 2300 	strex	r3, r2, [r1]
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e5      	bne.n	8001f52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3314      	adds	r3, #20
 8001f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	e853 3f00 	ldrex	r3, [r3]
 8001f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3314      	adds	r3, #20
 8001fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fae:	e841 2300 	strex	r3, r2, [r1]
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1e5      	bne.n	8001f86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d119      	bne.n	8001ff6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	e853 3f00 	ldrex	r3, [r3]
 8001fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f023 0310 	bic.w	r3, r3, #16
 8001fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fe2:	61ba      	str	r2, [r7, #24]
 8001fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe6:	6979      	ldr	r1, [r7, #20]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	e841 2300 	strex	r3, r2, [r1]
 8001fee:	613b      	str	r3, [r7, #16]
   return(result);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1e5      	bne.n	8001fc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002004:	bf00      	nop
 8002006:	3754      	adds	r7, #84	@ 0x54
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002014:	b0c0      	sub	sp, #256	@ 0x100
 8002016:	af00      	add	r7, sp, #0
 8002018:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800201c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202c:	68d9      	ldr	r1, [r3, #12]
 800202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	ea40 0301 	orr.w	r3, r0, r1
 8002038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800203a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	431a      	orrs	r2, r3
 8002048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	431a      	orrs	r2, r3
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002068:	f021 010c 	bic.w	r1, r1, #12
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002076:	430b      	orrs	r3, r1
 8002078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800207a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800208a:	6999      	ldr	r1, [r3, #24]
 800208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	ea40 0301 	orr.w	r3, r0, r1
 8002096:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b8f      	ldr	r3, [pc, #572]	@ (80022dc <UART_SetConfig+0x2cc>)
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d005      	beq.n	80020b0 <UART_SetConfig+0xa0>
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b8d      	ldr	r3, [pc, #564]	@ (80022e0 <UART_SetConfig+0x2d0>)
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d104      	bne.n	80020ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020b0:	f7ff fd6c 	bl	8001b8c <HAL_RCC_GetPCLK2Freq>
 80020b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80020b8:	e003      	b.n	80020c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020ba:	f7ff fd53 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 80020be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020cc:	f040 810c 	bne.w	80022e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020d4:	2200      	movs	r2, #0
 80020d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80020da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80020de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80020e2:	4622      	mov	r2, r4
 80020e4:	462b      	mov	r3, r5
 80020e6:	1891      	adds	r1, r2, r2
 80020e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020ea:	415b      	adcs	r3, r3
 80020ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020f2:	4621      	mov	r1, r4
 80020f4:	eb12 0801 	adds.w	r8, r2, r1
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb43 0901 	adc.w	r9, r3, r1
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800210a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002112:	4690      	mov	r8, r2
 8002114:	4699      	mov	r9, r3
 8002116:	4623      	mov	r3, r4
 8002118:	eb18 0303 	adds.w	r3, r8, r3
 800211c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002120:	462b      	mov	r3, r5
 8002122:	eb49 0303 	adc.w	r3, r9, r3
 8002126:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800212a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002136:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800213a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800213e:	460b      	mov	r3, r1
 8002140:	18db      	adds	r3, r3, r3
 8002142:	653b      	str	r3, [r7, #80]	@ 0x50
 8002144:	4613      	mov	r3, r2
 8002146:	eb42 0303 	adc.w	r3, r2, r3
 800214a:	657b      	str	r3, [r7, #84]	@ 0x54
 800214c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002150:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002154:	f7fe f894 	bl	8000280 <__aeabi_uldivmod>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <UART_SetConfig+0x2d4>)
 800215e:	fba3 2302 	umull	r2, r3, r3, r2
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	011c      	lsls	r4, r3, #4
 8002166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800216a:	2200      	movs	r2, #0
 800216c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002170:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002174:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002178:	4642      	mov	r2, r8
 800217a:	464b      	mov	r3, r9
 800217c:	1891      	adds	r1, r2, r2
 800217e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002180:	415b      	adcs	r3, r3
 8002182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002184:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002188:	4641      	mov	r1, r8
 800218a:	eb12 0a01 	adds.w	sl, r2, r1
 800218e:	4649      	mov	r1, r9
 8002190:	eb43 0b01 	adc.w	fp, r3, r1
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021a8:	4692      	mov	sl, r2
 80021aa:	469b      	mov	fp, r3
 80021ac:	4643      	mov	r3, r8
 80021ae:	eb1a 0303 	adds.w	r3, sl, r3
 80021b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80021b6:	464b      	mov	r3, r9
 80021b8:	eb4b 0303 	adc.w	r3, fp, r3
 80021bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80021d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80021d4:	460b      	mov	r3, r1
 80021d6:	18db      	adds	r3, r3, r3
 80021d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80021da:	4613      	mov	r3, r2
 80021dc:	eb42 0303 	adc.w	r3, r2, r3
 80021e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80021ea:	f7fe f849 	bl	8000280 <__aeabi_uldivmod>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <UART_SetConfig+0x2d4>)
 80021f6:	fba3 2301 	umull	r2, r3, r3, r1
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2264      	movs	r2, #100	@ 0x64
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	1acb      	subs	r3, r1, r3
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800220a:	4b36      	ldr	r3, [pc, #216]	@ (80022e4 <UART_SetConfig+0x2d4>)
 800220c:	fba3 2302 	umull	r2, r3, r3, r2
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002218:	441c      	add	r4, r3
 800221a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800221e:	2200      	movs	r2, #0
 8002220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002224:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002228:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800222c:	4642      	mov	r2, r8
 800222e:	464b      	mov	r3, r9
 8002230:	1891      	adds	r1, r2, r2
 8002232:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002234:	415b      	adcs	r3, r3
 8002236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800223c:	4641      	mov	r1, r8
 800223e:	1851      	adds	r1, r2, r1
 8002240:	6339      	str	r1, [r7, #48]	@ 0x30
 8002242:	4649      	mov	r1, r9
 8002244:	414b      	adcs	r3, r1
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002254:	4659      	mov	r1, fp
 8002256:	00cb      	lsls	r3, r1, #3
 8002258:	4651      	mov	r1, sl
 800225a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800225e:	4651      	mov	r1, sl
 8002260:	00ca      	lsls	r2, r1, #3
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	4603      	mov	r3, r0
 8002268:	4642      	mov	r2, r8
 800226a:	189b      	adds	r3, r3, r2
 800226c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002270:	464b      	mov	r3, r9
 8002272:	460a      	mov	r2, r1
 8002274:	eb42 0303 	adc.w	r3, r2, r3
 8002278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002288:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800228c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002290:	460b      	mov	r3, r1
 8002292:	18db      	adds	r3, r3, r3
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002296:	4613      	mov	r3, r2
 8002298:	eb42 0303 	adc.w	r3, r2, r3
 800229c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800229e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80022a6:	f7fd ffeb 	bl	8000280 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <UART_SetConfig+0x2d4>)
 80022b0:	fba3 1302 	umull	r1, r3, r3, r2
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	2164      	movs	r1, #100	@ 0x64
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	3332      	adds	r3, #50	@ 0x32
 80022c2:	4a08      	ldr	r2, [pc, #32]	@ (80022e4 <UART_SetConfig+0x2d4>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	f003 0207 	and.w	r2, r3, #7
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4422      	add	r2, r4
 80022d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022d8:	e106      	b.n	80024e8 <UART_SetConfig+0x4d8>
 80022da:	bf00      	nop
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40011400 	.word	0x40011400
 80022e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022ec:	2200      	movs	r2, #0
 80022ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80022f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022fa:	4642      	mov	r2, r8
 80022fc:	464b      	mov	r3, r9
 80022fe:	1891      	adds	r1, r2, r2
 8002300:	6239      	str	r1, [r7, #32]
 8002302:	415b      	adcs	r3, r3
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
 8002306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800230a:	4641      	mov	r1, r8
 800230c:	1854      	adds	r4, r2, r1
 800230e:	4649      	mov	r1, r9
 8002310:	eb43 0501 	adc.w	r5, r3, r1
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	00eb      	lsls	r3, r5, #3
 800231e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002322:	00e2      	lsls	r2, r4, #3
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	4643      	mov	r3, r8
 800232a:	18e3      	adds	r3, r4, r3
 800232c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002330:	464b      	mov	r3, r9
 8002332:	eb45 0303 	adc.w	r3, r5, r3
 8002336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002346:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002356:	4629      	mov	r1, r5
 8002358:	008b      	lsls	r3, r1, #2
 800235a:	4621      	mov	r1, r4
 800235c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002360:	4621      	mov	r1, r4
 8002362:	008a      	lsls	r2, r1, #2
 8002364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002368:	f7fd ff8a 	bl	8000280 <__aeabi_uldivmod>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4b60      	ldr	r3, [pc, #384]	@ (80024f4 <UART_SetConfig+0x4e4>)
 8002372:	fba3 2302 	umull	r2, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	011c      	lsls	r4, r3, #4
 800237a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800237e:	2200      	movs	r2, #0
 8002380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002384:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002388:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800238c:	4642      	mov	r2, r8
 800238e:	464b      	mov	r3, r9
 8002390:	1891      	adds	r1, r2, r2
 8002392:	61b9      	str	r1, [r7, #24]
 8002394:	415b      	adcs	r3, r3
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800239c:	4641      	mov	r1, r8
 800239e:	1851      	adds	r1, r2, r1
 80023a0:	6139      	str	r1, [r7, #16]
 80023a2:	4649      	mov	r1, r9
 80023a4:	414b      	adcs	r3, r1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023b4:	4659      	mov	r1, fp
 80023b6:	00cb      	lsls	r3, r1, #3
 80023b8:	4651      	mov	r1, sl
 80023ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023be:	4651      	mov	r1, sl
 80023c0:	00ca      	lsls	r2, r1, #3
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	4603      	mov	r3, r0
 80023c8:	4642      	mov	r2, r8
 80023ca:	189b      	adds	r3, r3, r2
 80023cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023d0:	464b      	mov	r3, r9
 80023d2:	460a      	mov	r2, r1
 80023d4:	eb42 0303 	adc.w	r3, r2, r3
 80023d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80023f4:	4649      	mov	r1, r9
 80023f6:	008b      	lsls	r3, r1, #2
 80023f8:	4641      	mov	r1, r8
 80023fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023fe:	4641      	mov	r1, r8
 8002400:	008a      	lsls	r2, r1, #2
 8002402:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002406:	f7fd ff3b 	bl	8000280 <__aeabi_uldivmod>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4611      	mov	r1, r2
 8002410:	4b38      	ldr	r3, [pc, #224]	@ (80024f4 <UART_SetConfig+0x4e4>)
 8002412:	fba3 2301 	umull	r2, r3, r3, r1
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2264      	movs	r2, #100	@ 0x64
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	1acb      	subs	r3, r1, r3
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	3332      	adds	r3, #50	@ 0x32
 8002424:	4a33      	ldr	r2, [pc, #204]	@ (80024f4 <UART_SetConfig+0x4e4>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002430:	441c      	add	r4, r3
 8002432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002436:	2200      	movs	r2, #0
 8002438:	673b      	str	r3, [r7, #112]	@ 0x70
 800243a:	677a      	str	r2, [r7, #116]	@ 0x74
 800243c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002440:	4642      	mov	r2, r8
 8002442:	464b      	mov	r3, r9
 8002444:	1891      	adds	r1, r2, r2
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	415b      	adcs	r3, r3
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002450:	4641      	mov	r1, r8
 8002452:	1851      	adds	r1, r2, r1
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	4649      	mov	r1, r9
 8002458:	414b      	adcs	r3, r1
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002468:	4659      	mov	r1, fp
 800246a:	00cb      	lsls	r3, r1, #3
 800246c:	4651      	mov	r1, sl
 800246e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002472:	4651      	mov	r1, sl
 8002474:	00ca      	lsls	r2, r1, #3
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	4603      	mov	r3, r0
 800247c:	4642      	mov	r2, r8
 800247e:	189b      	adds	r3, r3, r2
 8002480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002482:	464b      	mov	r3, r9
 8002484:	460a      	mov	r2, r1
 8002486:	eb42 0303 	adc.w	r3, r2, r3
 800248a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	663b      	str	r3, [r7, #96]	@ 0x60
 8002496:	667a      	str	r2, [r7, #100]	@ 0x64
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80024a4:	4649      	mov	r1, r9
 80024a6:	008b      	lsls	r3, r1, #2
 80024a8:	4641      	mov	r1, r8
 80024aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ae:	4641      	mov	r1, r8
 80024b0:	008a      	lsls	r2, r1, #2
 80024b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80024b6:	f7fd fee3 	bl	8000280 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <UART_SetConfig+0x4e4>)
 80024c0:	fba3 1302 	umull	r1, r3, r3, r2
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	2164      	movs	r1, #100	@ 0x64
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	3332      	adds	r3, #50	@ 0x32
 80024d2:	4a08      	ldr	r2, [pc, #32]	@ (80024f4 <UART_SetConfig+0x4e4>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	f003 020f 	and.w	r2, r3, #15
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4422      	add	r2, r4
 80024e6:	609a      	str	r2, [r3, #8]
}
 80024e8:	bf00      	nop
 80024ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80024ee:	46bd      	mov	sp, r7
 80024f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024f4:	51eb851f 	.word	0x51eb851f

080024f8 <std>:
 80024f8:	2300      	movs	r3, #0
 80024fa:	b510      	push	{r4, lr}
 80024fc:	4604      	mov	r4, r0
 80024fe:	e9c0 3300 	strd	r3, r3, [r0]
 8002502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002506:	6083      	str	r3, [r0, #8]
 8002508:	8181      	strh	r1, [r0, #12]
 800250a:	6643      	str	r3, [r0, #100]	@ 0x64
 800250c:	81c2      	strh	r2, [r0, #14]
 800250e:	6183      	str	r3, [r0, #24]
 8002510:	4619      	mov	r1, r3
 8002512:	2208      	movs	r2, #8
 8002514:	305c      	adds	r0, #92	@ 0x5c
 8002516:	f000 fa0b 	bl	8002930 <memset>
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <std+0x58>)
 800251c:	6263      	str	r3, [r4, #36]	@ 0x24
 800251e:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <std+0x5c>)
 8002520:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002522:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <std+0x60>)
 8002524:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002526:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <std+0x64>)
 8002528:	6323      	str	r3, [r4, #48]	@ 0x30
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <std+0x68>)
 800252c:	6224      	str	r4, [r4, #32]
 800252e:	429c      	cmp	r4, r3
 8002530:	d006      	beq.n	8002540 <std+0x48>
 8002532:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002536:	4294      	cmp	r4, r2
 8002538:	d002      	beq.n	8002540 <std+0x48>
 800253a:	33d0      	adds	r3, #208	@ 0xd0
 800253c:	429c      	cmp	r4, r3
 800253e:	d105      	bne.n	800254c <std+0x54>
 8002540:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002548:	f000 ba6a 	b.w	8002a20 <__retarget_lock_init_recursive>
 800254c:	bd10      	pop	{r4, pc}
 800254e:	bf00      	nop
 8002550:	08002781 	.word	0x08002781
 8002554:	080027a3 	.word	0x080027a3
 8002558:	080027db 	.word	0x080027db
 800255c:	080027ff 	.word	0x080027ff
 8002560:	20000138 	.word	0x20000138

08002564 <stdio_exit_handler>:
 8002564:	4a02      	ldr	r2, [pc, #8]	@ (8002570 <stdio_exit_handler+0xc>)
 8002566:	4903      	ldr	r1, [pc, #12]	@ (8002574 <stdio_exit_handler+0x10>)
 8002568:	4803      	ldr	r0, [pc, #12]	@ (8002578 <stdio_exit_handler+0x14>)
 800256a:	f000 b869 	b.w	8002640 <_fwalk_sglue>
 800256e:	bf00      	nop
 8002570:	2000000c 	.word	0x2000000c
 8002574:	080038bd 	.word	0x080038bd
 8002578:	2000001c 	.word	0x2000001c

0800257c <cleanup_stdio>:
 800257c:	6841      	ldr	r1, [r0, #4]
 800257e:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <cleanup_stdio+0x34>)
 8002580:	4299      	cmp	r1, r3
 8002582:	b510      	push	{r4, lr}
 8002584:	4604      	mov	r4, r0
 8002586:	d001      	beq.n	800258c <cleanup_stdio+0x10>
 8002588:	f001 f998 	bl	80038bc <_fflush_r>
 800258c:	68a1      	ldr	r1, [r4, #8]
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <cleanup_stdio+0x38>)
 8002590:	4299      	cmp	r1, r3
 8002592:	d002      	beq.n	800259a <cleanup_stdio+0x1e>
 8002594:	4620      	mov	r0, r4
 8002596:	f001 f991 	bl	80038bc <_fflush_r>
 800259a:	68e1      	ldr	r1, [r4, #12]
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <cleanup_stdio+0x3c>)
 800259e:	4299      	cmp	r1, r3
 80025a0:	d004      	beq.n	80025ac <cleanup_stdio+0x30>
 80025a2:	4620      	mov	r0, r4
 80025a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a8:	f001 b988 	b.w	80038bc <_fflush_r>
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	bf00      	nop
 80025b0:	20000138 	.word	0x20000138
 80025b4:	200001a0 	.word	0x200001a0
 80025b8:	20000208 	.word	0x20000208

080025bc <global_stdio_init.part.0>:
 80025bc:	b510      	push	{r4, lr}
 80025be:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <global_stdio_init.part.0+0x30>)
 80025c0:	4c0b      	ldr	r4, [pc, #44]	@ (80025f0 <global_stdio_init.part.0+0x34>)
 80025c2:	4a0c      	ldr	r2, [pc, #48]	@ (80025f4 <global_stdio_init.part.0+0x38>)
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	4620      	mov	r0, r4
 80025c8:	2200      	movs	r2, #0
 80025ca:	2104      	movs	r1, #4
 80025cc:	f7ff ff94 	bl	80024f8 <std>
 80025d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80025d4:	2201      	movs	r2, #1
 80025d6:	2109      	movs	r1, #9
 80025d8:	f7ff ff8e 	bl	80024f8 <std>
 80025dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80025e0:	2202      	movs	r2, #2
 80025e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025e6:	2112      	movs	r1, #18
 80025e8:	f7ff bf86 	b.w	80024f8 <std>
 80025ec:	20000270 	.word	0x20000270
 80025f0:	20000138 	.word	0x20000138
 80025f4:	08002565 	.word	0x08002565

080025f8 <__sfp_lock_acquire>:
 80025f8:	4801      	ldr	r0, [pc, #4]	@ (8002600 <__sfp_lock_acquire+0x8>)
 80025fa:	f000 ba12 	b.w	8002a22 <__retarget_lock_acquire_recursive>
 80025fe:	bf00      	nop
 8002600:	20000279 	.word	0x20000279

08002604 <__sfp_lock_release>:
 8002604:	4801      	ldr	r0, [pc, #4]	@ (800260c <__sfp_lock_release+0x8>)
 8002606:	f000 ba0d 	b.w	8002a24 <__retarget_lock_release_recursive>
 800260a:	bf00      	nop
 800260c:	20000279 	.word	0x20000279

08002610 <__sinit>:
 8002610:	b510      	push	{r4, lr}
 8002612:	4604      	mov	r4, r0
 8002614:	f7ff fff0 	bl	80025f8 <__sfp_lock_acquire>
 8002618:	6a23      	ldr	r3, [r4, #32]
 800261a:	b11b      	cbz	r3, 8002624 <__sinit+0x14>
 800261c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002620:	f7ff bff0 	b.w	8002604 <__sfp_lock_release>
 8002624:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <__sinit+0x28>)
 8002626:	6223      	str	r3, [r4, #32]
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <__sinit+0x2c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f5      	bne.n	800261c <__sinit+0xc>
 8002630:	f7ff ffc4 	bl	80025bc <global_stdio_init.part.0>
 8002634:	e7f2      	b.n	800261c <__sinit+0xc>
 8002636:	bf00      	nop
 8002638:	0800257d 	.word	0x0800257d
 800263c:	20000270 	.word	0x20000270

08002640 <_fwalk_sglue>:
 8002640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002644:	4607      	mov	r7, r0
 8002646:	4688      	mov	r8, r1
 8002648:	4614      	mov	r4, r2
 800264a:	2600      	movs	r6, #0
 800264c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002650:	f1b9 0901 	subs.w	r9, r9, #1
 8002654:	d505      	bpl.n	8002662 <_fwalk_sglue+0x22>
 8002656:	6824      	ldr	r4, [r4, #0]
 8002658:	2c00      	cmp	r4, #0
 800265a:	d1f7      	bne.n	800264c <_fwalk_sglue+0xc>
 800265c:	4630      	mov	r0, r6
 800265e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002662:	89ab      	ldrh	r3, [r5, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d907      	bls.n	8002678 <_fwalk_sglue+0x38>
 8002668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800266c:	3301      	adds	r3, #1
 800266e:	d003      	beq.n	8002678 <_fwalk_sglue+0x38>
 8002670:	4629      	mov	r1, r5
 8002672:	4638      	mov	r0, r7
 8002674:	47c0      	blx	r8
 8002676:	4306      	orrs	r6, r0
 8002678:	3568      	adds	r5, #104	@ 0x68
 800267a:	e7e9      	b.n	8002650 <_fwalk_sglue+0x10>

0800267c <iprintf>:
 800267c:	b40f      	push	{r0, r1, r2, r3}
 800267e:	b507      	push	{r0, r1, r2, lr}
 8002680:	4906      	ldr	r1, [pc, #24]	@ (800269c <iprintf+0x20>)
 8002682:	ab04      	add	r3, sp, #16
 8002684:	6808      	ldr	r0, [r1, #0]
 8002686:	f853 2b04 	ldr.w	r2, [r3], #4
 800268a:	6881      	ldr	r1, [r0, #8]
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	f000 faed 	bl	8002c6c <_vfiprintf_r>
 8002692:	b003      	add	sp, #12
 8002694:	f85d eb04 	ldr.w	lr, [sp], #4
 8002698:	b004      	add	sp, #16
 800269a:	4770      	bx	lr
 800269c:	20000018 	.word	0x20000018

080026a0 <_puts_r>:
 80026a0:	6a03      	ldr	r3, [r0, #32]
 80026a2:	b570      	push	{r4, r5, r6, lr}
 80026a4:	6884      	ldr	r4, [r0, #8]
 80026a6:	4605      	mov	r5, r0
 80026a8:	460e      	mov	r6, r1
 80026aa:	b90b      	cbnz	r3, 80026b0 <_puts_r+0x10>
 80026ac:	f7ff ffb0 	bl	8002610 <__sinit>
 80026b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80026b2:	07db      	lsls	r3, r3, #31
 80026b4:	d405      	bmi.n	80026c2 <_puts_r+0x22>
 80026b6:	89a3      	ldrh	r3, [r4, #12]
 80026b8:	0598      	lsls	r0, r3, #22
 80026ba:	d402      	bmi.n	80026c2 <_puts_r+0x22>
 80026bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026be:	f000 f9b0 	bl	8002a22 <__retarget_lock_acquire_recursive>
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	0719      	lsls	r1, r3, #28
 80026c6:	d502      	bpl.n	80026ce <_puts_r+0x2e>
 80026c8:	6923      	ldr	r3, [r4, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d135      	bne.n	800273a <_puts_r+0x9a>
 80026ce:	4621      	mov	r1, r4
 80026d0:	4628      	mov	r0, r5
 80026d2:	f000 f8d7 	bl	8002884 <__swsetup_r>
 80026d6:	b380      	cbz	r0, 800273a <_puts_r+0x9a>
 80026d8:	f04f 35ff 	mov.w	r5, #4294967295
 80026dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80026de:	07da      	lsls	r2, r3, #31
 80026e0:	d405      	bmi.n	80026ee <_puts_r+0x4e>
 80026e2:	89a3      	ldrh	r3, [r4, #12]
 80026e4:	059b      	lsls	r3, r3, #22
 80026e6:	d402      	bmi.n	80026ee <_puts_r+0x4e>
 80026e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026ea:	f000 f99b 	bl	8002a24 <__retarget_lock_release_recursive>
 80026ee:	4628      	mov	r0, r5
 80026f0:	bd70      	pop	{r4, r5, r6, pc}
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	da04      	bge.n	8002700 <_puts_r+0x60>
 80026f6:	69a2      	ldr	r2, [r4, #24]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dc17      	bgt.n	800272c <_puts_r+0x8c>
 80026fc:	290a      	cmp	r1, #10
 80026fe:	d015      	beq.n	800272c <_puts_r+0x8c>
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	6022      	str	r2, [r4, #0]
 8002706:	7019      	strb	r1, [r3, #0]
 8002708:	68a3      	ldr	r3, [r4, #8]
 800270a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800270e:	3b01      	subs	r3, #1
 8002710:	60a3      	str	r3, [r4, #8]
 8002712:	2900      	cmp	r1, #0
 8002714:	d1ed      	bne.n	80026f2 <_puts_r+0x52>
 8002716:	2b00      	cmp	r3, #0
 8002718:	da11      	bge.n	800273e <_puts_r+0x9e>
 800271a:	4622      	mov	r2, r4
 800271c:	210a      	movs	r1, #10
 800271e:	4628      	mov	r0, r5
 8002720:	f000 f871 	bl	8002806 <__swbuf_r>
 8002724:	3001      	adds	r0, #1
 8002726:	d0d7      	beq.n	80026d8 <_puts_r+0x38>
 8002728:	250a      	movs	r5, #10
 800272a:	e7d7      	b.n	80026dc <_puts_r+0x3c>
 800272c:	4622      	mov	r2, r4
 800272e:	4628      	mov	r0, r5
 8002730:	f000 f869 	bl	8002806 <__swbuf_r>
 8002734:	3001      	adds	r0, #1
 8002736:	d1e7      	bne.n	8002708 <_puts_r+0x68>
 8002738:	e7ce      	b.n	80026d8 <_puts_r+0x38>
 800273a:	3e01      	subs	r6, #1
 800273c:	e7e4      	b.n	8002708 <_puts_r+0x68>
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	6022      	str	r2, [r4, #0]
 8002744:	220a      	movs	r2, #10
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e7ee      	b.n	8002728 <_puts_r+0x88>
	...

0800274c <puts>:
 800274c:	4b02      	ldr	r3, [pc, #8]	@ (8002758 <puts+0xc>)
 800274e:	4601      	mov	r1, r0
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	f7ff bfa5 	b.w	80026a0 <_puts_r>
 8002756:	bf00      	nop
 8002758:	20000018 	.word	0x20000018

0800275c <iscanf>:
 800275c:	b40f      	push	{r0, r1, r2, r3}
 800275e:	b507      	push	{r0, r1, r2, lr}
 8002760:	4906      	ldr	r1, [pc, #24]	@ (800277c <iscanf+0x20>)
 8002762:	ab04      	add	r3, sp, #16
 8002764:	6808      	ldr	r0, [r1, #0]
 8002766:	f853 2b04 	ldr.w	r2, [r3], #4
 800276a:	6841      	ldr	r1, [r0, #4]
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	f000 febf 	bl	80034f0 <_vfiscanf_r>
 8002772:	b003      	add	sp, #12
 8002774:	f85d eb04 	ldr.w	lr, [sp], #4
 8002778:	b004      	add	sp, #16
 800277a:	4770      	bx	lr
 800277c:	20000018 	.word	0x20000018

08002780 <__sread>:
 8002780:	b510      	push	{r4, lr}
 8002782:	460c      	mov	r4, r1
 8002784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002788:	f000 f8fc 	bl	8002984 <_read_r>
 800278c:	2800      	cmp	r0, #0
 800278e:	bfab      	itete	ge
 8002790:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002792:	89a3      	ldrhlt	r3, [r4, #12]
 8002794:	181b      	addge	r3, r3, r0
 8002796:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800279a:	bfac      	ite	ge
 800279c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800279e:	81a3      	strhlt	r3, [r4, #12]
 80027a0:	bd10      	pop	{r4, pc}

080027a2 <__swrite>:
 80027a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a6:	461f      	mov	r7, r3
 80027a8:	898b      	ldrh	r3, [r1, #12]
 80027aa:	05db      	lsls	r3, r3, #23
 80027ac:	4605      	mov	r5, r0
 80027ae:	460c      	mov	r4, r1
 80027b0:	4616      	mov	r6, r2
 80027b2:	d505      	bpl.n	80027c0 <__swrite+0x1e>
 80027b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027b8:	2302      	movs	r3, #2
 80027ba:	2200      	movs	r2, #0
 80027bc:	f000 f8d0 	bl	8002960 <_lseek_r>
 80027c0:	89a3      	ldrh	r3, [r4, #12]
 80027c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027ca:	81a3      	strh	r3, [r4, #12]
 80027cc:	4632      	mov	r2, r6
 80027ce:	463b      	mov	r3, r7
 80027d0:	4628      	mov	r0, r5
 80027d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027d6:	f000 b8e7 	b.w	80029a8 <_write_r>

080027da <__sseek>:
 80027da:	b510      	push	{r4, lr}
 80027dc:	460c      	mov	r4, r1
 80027de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e2:	f000 f8bd 	bl	8002960 <_lseek_r>
 80027e6:	1c43      	adds	r3, r0, #1
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	bf15      	itete	ne
 80027ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80027ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80027f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80027f6:	81a3      	strheq	r3, [r4, #12]
 80027f8:	bf18      	it	ne
 80027fa:	81a3      	strhne	r3, [r4, #12]
 80027fc:	bd10      	pop	{r4, pc}

080027fe <__sclose>:
 80027fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002802:	f000 b89d 	b.w	8002940 <_close_r>

08002806 <__swbuf_r>:
 8002806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002808:	460e      	mov	r6, r1
 800280a:	4614      	mov	r4, r2
 800280c:	4605      	mov	r5, r0
 800280e:	b118      	cbz	r0, 8002818 <__swbuf_r+0x12>
 8002810:	6a03      	ldr	r3, [r0, #32]
 8002812:	b90b      	cbnz	r3, 8002818 <__swbuf_r+0x12>
 8002814:	f7ff fefc 	bl	8002610 <__sinit>
 8002818:	69a3      	ldr	r3, [r4, #24]
 800281a:	60a3      	str	r3, [r4, #8]
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	071a      	lsls	r2, r3, #28
 8002820:	d501      	bpl.n	8002826 <__swbuf_r+0x20>
 8002822:	6923      	ldr	r3, [r4, #16]
 8002824:	b943      	cbnz	r3, 8002838 <__swbuf_r+0x32>
 8002826:	4621      	mov	r1, r4
 8002828:	4628      	mov	r0, r5
 800282a:	f000 f82b 	bl	8002884 <__swsetup_r>
 800282e:	b118      	cbz	r0, 8002838 <__swbuf_r+0x32>
 8002830:	f04f 37ff 	mov.w	r7, #4294967295
 8002834:	4638      	mov	r0, r7
 8002836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	6922      	ldr	r2, [r4, #16]
 800283c:	1a98      	subs	r0, r3, r2
 800283e:	6963      	ldr	r3, [r4, #20]
 8002840:	b2f6      	uxtb	r6, r6
 8002842:	4283      	cmp	r3, r0
 8002844:	4637      	mov	r7, r6
 8002846:	dc05      	bgt.n	8002854 <__swbuf_r+0x4e>
 8002848:	4621      	mov	r1, r4
 800284a:	4628      	mov	r0, r5
 800284c:	f001 f836 	bl	80038bc <_fflush_r>
 8002850:	2800      	cmp	r0, #0
 8002852:	d1ed      	bne.n	8002830 <__swbuf_r+0x2a>
 8002854:	68a3      	ldr	r3, [r4, #8]
 8002856:	3b01      	subs	r3, #1
 8002858:	60a3      	str	r3, [r4, #8]
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	6022      	str	r2, [r4, #0]
 8002860:	701e      	strb	r6, [r3, #0]
 8002862:	6962      	ldr	r2, [r4, #20]
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	429a      	cmp	r2, r3
 8002868:	d004      	beq.n	8002874 <__swbuf_r+0x6e>
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	07db      	lsls	r3, r3, #31
 800286e:	d5e1      	bpl.n	8002834 <__swbuf_r+0x2e>
 8002870:	2e0a      	cmp	r6, #10
 8002872:	d1df      	bne.n	8002834 <__swbuf_r+0x2e>
 8002874:	4621      	mov	r1, r4
 8002876:	4628      	mov	r0, r5
 8002878:	f001 f820 	bl	80038bc <_fflush_r>
 800287c:	2800      	cmp	r0, #0
 800287e:	d0d9      	beq.n	8002834 <__swbuf_r+0x2e>
 8002880:	e7d6      	b.n	8002830 <__swbuf_r+0x2a>
	...

08002884 <__swsetup_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	4b29      	ldr	r3, [pc, #164]	@ (800292c <__swsetup_r+0xa8>)
 8002888:	4605      	mov	r5, r0
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	460c      	mov	r4, r1
 800288e:	b118      	cbz	r0, 8002898 <__swsetup_r+0x14>
 8002890:	6a03      	ldr	r3, [r0, #32]
 8002892:	b90b      	cbnz	r3, 8002898 <__swsetup_r+0x14>
 8002894:	f7ff febc 	bl	8002610 <__sinit>
 8002898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800289c:	0719      	lsls	r1, r3, #28
 800289e:	d422      	bmi.n	80028e6 <__swsetup_r+0x62>
 80028a0:	06da      	lsls	r2, r3, #27
 80028a2:	d407      	bmi.n	80028b4 <__swsetup_r+0x30>
 80028a4:	2209      	movs	r2, #9
 80028a6:	602a      	str	r2, [r5, #0]
 80028a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028ac:	81a3      	strh	r3, [r4, #12]
 80028ae:	f04f 30ff 	mov.w	r0, #4294967295
 80028b2:	e033      	b.n	800291c <__swsetup_r+0x98>
 80028b4:	0758      	lsls	r0, r3, #29
 80028b6:	d512      	bpl.n	80028de <__swsetup_r+0x5a>
 80028b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80028ba:	b141      	cbz	r1, 80028ce <__swsetup_r+0x4a>
 80028bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80028c0:	4299      	cmp	r1, r3
 80028c2:	d002      	beq.n	80028ca <__swsetup_r+0x46>
 80028c4:	4628      	mov	r0, r5
 80028c6:	f000 f8af 	bl	8002a28 <_free_r>
 80028ca:	2300      	movs	r3, #0
 80028cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80028d4:	81a3      	strh	r3, [r4, #12]
 80028d6:	2300      	movs	r3, #0
 80028d8:	6063      	str	r3, [r4, #4]
 80028da:	6923      	ldr	r3, [r4, #16]
 80028dc:	6023      	str	r3, [r4, #0]
 80028de:	89a3      	ldrh	r3, [r4, #12]
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	81a3      	strh	r3, [r4, #12]
 80028e6:	6923      	ldr	r3, [r4, #16]
 80028e8:	b94b      	cbnz	r3, 80028fe <__swsetup_r+0x7a>
 80028ea:	89a3      	ldrh	r3, [r4, #12]
 80028ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80028f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028f4:	d003      	beq.n	80028fe <__swsetup_r+0x7a>
 80028f6:	4621      	mov	r1, r4
 80028f8:	4628      	mov	r0, r5
 80028fa:	f001 f82d 	bl	8003958 <__smakebuf_r>
 80028fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002902:	f013 0201 	ands.w	r2, r3, #1
 8002906:	d00a      	beq.n	800291e <__swsetup_r+0x9a>
 8002908:	2200      	movs	r2, #0
 800290a:	60a2      	str	r2, [r4, #8]
 800290c:	6962      	ldr	r2, [r4, #20]
 800290e:	4252      	negs	r2, r2
 8002910:	61a2      	str	r2, [r4, #24]
 8002912:	6922      	ldr	r2, [r4, #16]
 8002914:	b942      	cbnz	r2, 8002928 <__swsetup_r+0xa4>
 8002916:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800291a:	d1c5      	bne.n	80028a8 <__swsetup_r+0x24>
 800291c:	bd38      	pop	{r3, r4, r5, pc}
 800291e:	0799      	lsls	r1, r3, #30
 8002920:	bf58      	it	pl
 8002922:	6962      	ldrpl	r2, [r4, #20]
 8002924:	60a2      	str	r2, [r4, #8]
 8002926:	e7f4      	b.n	8002912 <__swsetup_r+0x8e>
 8002928:	2000      	movs	r0, #0
 800292a:	e7f7      	b.n	800291c <__swsetup_r+0x98>
 800292c:	20000018 	.word	0x20000018

08002930 <memset>:
 8002930:	4402      	add	r2, r0
 8002932:	4603      	mov	r3, r0
 8002934:	4293      	cmp	r3, r2
 8002936:	d100      	bne.n	800293a <memset+0xa>
 8002938:	4770      	bx	lr
 800293a:	f803 1b01 	strb.w	r1, [r3], #1
 800293e:	e7f9      	b.n	8002934 <memset+0x4>

08002940 <_close_r>:
 8002940:	b538      	push	{r3, r4, r5, lr}
 8002942:	4d06      	ldr	r5, [pc, #24]	@ (800295c <_close_r+0x1c>)
 8002944:	2300      	movs	r3, #0
 8002946:	4604      	mov	r4, r0
 8002948:	4608      	mov	r0, r1
 800294a:	602b      	str	r3, [r5, #0]
 800294c:	f7fe f872 	bl	8000a34 <_close>
 8002950:	1c43      	adds	r3, r0, #1
 8002952:	d102      	bne.n	800295a <_close_r+0x1a>
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	b103      	cbz	r3, 800295a <_close_r+0x1a>
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	bd38      	pop	{r3, r4, r5, pc}
 800295c:	20000274 	.word	0x20000274

08002960 <_lseek_r>:
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	4d07      	ldr	r5, [pc, #28]	@ (8002980 <_lseek_r+0x20>)
 8002964:	4604      	mov	r4, r0
 8002966:	4608      	mov	r0, r1
 8002968:	4611      	mov	r1, r2
 800296a:	2200      	movs	r2, #0
 800296c:	602a      	str	r2, [r5, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	f7fe f887 	bl	8000a82 <_lseek>
 8002974:	1c43      	adds	r3, r0, #1
 8002976:	d102      	bne.n	800297e <_lseek_r+0x1e>
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	b103      	cbz	r3, 800297e <_lseek_r+0x1e>
 800297c:	6023      	str	r3, [r4, #0]
 800297e:	bd38      	pop	{r3, r4, r5, pc}
 8002980:	20000274 	.word	0x20000274

08002984 <_read_r>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	4d07      	ldr	r5, [pc, #28]	@ (80029a4 <_read_r+0x20>)
 8002988:	4604      	mov	r4, r0
 800298a:	4608      	mov	r0, r1
 800298c:	4611      	mov	r1, r2
 800298e:	2200      	movs	r2, #0
 8002990:	602a      	str	r2, [r5, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	f7fe f815 	bl	80009c2 <_read>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d102      	bne.n	80029a2 <_read_r+0x1e>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	b103      	cbz	r3, 80029a2 <_read_r+0x1e>
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	20000274 	.word	0x20000274

080029a8 <_write_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	4d07      	ldr	r5, [pc, #28]	@ (80029c8 <_write_r+0x20>)
 80029ac:	4604      	mov	r4, r0
 80029ae:	4608      	mov	r0, r1
 80029b0:	4611      	mov	r1, r2
 80029b2:	2200      	movs	r2, #0
 80029b4:	602a      	str	r2, [r5, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f7fe f820 	bl	80009fc <_write>
 80029bc:	1c43      	adds	r3, r0, #1
 80029be:	d102      	bne.n	80029c6 <_write_r+0x1e>
 80029c0:	682b      	ldr	r3, [r5, #0]
 80029c2:	b103      	cbz	r3, 80029c6 <_write_r+0x1e>
 80029c4:	6023      	str	r3, [r4, #0]
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
 80029c8:	20000274 	.word	0x20000274

080029cc <__errno>:
 80029cc:	4b01      	ldr	r3, [pc, #4]	@ (80029d4 <__errno+0x8>)
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000018 	.word	0x20000018

080029d8 <__libc_init_array>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	4d0d      	ldr	r5, [pc, #52]	@ (8002a10 <__libc_init_array+0x38>)
 80029dc:	4c0d      	ldr	r4, [pc, #52]	@ (8002a14 <__libc_init_array+0x3c>)
 80029de:	1b64      	subs	r4, r4, r5
 80029e0:	10a4      	asrs	r4, r4, #2
 80029e2:	2600      	movs	r6, #0
 80029e4:	42a6      	cmp	r6, r4
 80029e6:	d109      	bne.n	80029fc <__libc_init_array+0x24>
 80029e8:	4d0b      	ldr	r5, [pc, #44]	@ (8002a18 <__libc_init_array+0x40>)
 80029ea:	4c0c      	ldr	r4, [pc, #48]	@ (8002a1c <__libc_init_array+0x44>)
 80029ec:	f001 fac6 	bl	8003f7c <_init>
 80029f0:	1b64      	subs	r4, r4, r5
 80029f2:	10a4      	asrs	r4, r4, #2
 80029f4:	2600      	movs	r6, #0
 80029f6:	42a6      	cmp	r6, r4
 80029f8:	d105      	bne.n	8002a06 <__libc_init_array+0x2e>
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a00:	4798      	blx	r3
 8002a02:	3601      	adds	r6, #1
 8002a04:	e7ee      	b.n	80029e4 <__libc_init_array+0xc>
 8002a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0a:	4798      	blx	r3
 8002a0c:	3601      	adds	r6, #1
 8002a0e:	e7f2      	b.n	80029f6 <__libc_init_array+0x1e>
 8002a10:	08004188 	.word	0x08004188
 8002a14:	08004188 	.word	0x08004188
 8002a18:	08004188 	.word	0x08004188
 8002a1c:	0800418c 	.word	0x0800418c

08002a20 <__retarget_lock_init_recursive>:
 8002a20:	4770      	bx	lr

08002a22 <__retarget_lock_acquire_recursive>:
 8002a22:	4770      	bx	lr

08002a24 <__retarget_lock_release_recursive>:
 8002a24:	4770      	bx	lr
	...

08002a28 <_free_r>:
 8002a28:	b538      	push	{r3, r4, r5, lr}
 8002a2a:	4605      	mov	r5, r0
 8002a2c:	2900      	cmp	r1, #0
 8002a2e:	d041      	beq.n	8002ab4 <_free_r+0x8c>
 8002a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a34:	1f0c      	subs	r4, r1, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bfb8      	it	lt
 8002a3a:	18e4      	addlt	r4, r4, r3
 8002a3c:	f000 f8e0 	bl	8002c00 <__malloc_lock>
 8002a40:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab8 <_free_r+0x90>)
 8002a42:	6813      	ldr	r3, [r2, #0]
 8002a44:	b933      	cbnz	r3, 8002a54 <_free_r+0x2c>
 8002a46:	6063      	str	r3, [r4, #4]
 8002a48:	6014      	str	r4, [r2, #0]
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a50:	f000 b8dc 	b.w	8002c0c <__malloc_unlock>
 8002a54:	42a3      	cmp	r3, r4
 8002a56:	d908      	bls.n	8002a6a <_free_r+0x42>
 8002a58:	6820      	ldr	r0, [r4, #0]
 8002a5a:	1821      	adds	r1, r4, r0
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	bf01      	itttt	eq
 8002a60:	6819      	ldreq	r1, [r3, #0]
 8002a62:	685b      	ldreq	r3, [r3, #4]
 8002a64:	1809      	addeq	r1, r1, r0
 8002a66:	6021      	streq	r1, [r4, #0]
 8002a68:	e7ed      	b.n	8002a46 <_free_r+0x1e>
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	b10b      	cbz	r3, 8002a74 <_free_r+0x4c>
 8002a70:	42a3      	cmp	r3, r4
 8002a72:	d9fa      	bls.n	8002a6a <_free_r+0x42>
 8002a74:	6811      	ldr	r1, [r2, #0]
 8002a76:	1850      	adds	r0, r2, r1
 8002a78:	42a0      	cmp	r0, r4
 8002a7a:	d10b      	bne.n	8002a94 <_free_r+0x6c>
 8002a7c:	6820      	ldr	r0, [r4, #0]
 8002a7e:	4401      	add	r1, r0
 8002a80:	1850      	adds	r0, r2, r1
 8002a82:	4283      	cmp	r3, r0
 8002a84:	6011      	str	r1, [r2, #0]
 8002a86:	d1e0      	bne.n	8002a4a <_free_r+0x22>
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	6053      	str	r3, [r2, #4]
 8002a8e:	4408      	add	r0, r1
 8002a90:	6010      	str	r0, [r2, #0]
 8002a92:	e7da      	b.n	8002a4a <_free_r+0x22>
 8002a94:	d902      	bls.n	8002a9c <_free_r+0x74>
 8002a96:	230c      	movs	r3, #12
 8002a98:	602b      	str	r3, [r5, #0]
 8002a9a:	e7d6      	b.n	8002a4a <_free_r+0x22>
 8002a9c:	6820      	ldr	r0, [r4, #0]
 8002a9e:	1821      	adds	r1, r4, r0
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	bf04      	itt	eq
 8002aa4:	6819      	ldreq	r1, [r3, #0]
 8002aa6:	685b      	ldreq	r3, [r3, #4]
 8002aa8:	6063      	str	r3, [r4, #4]
 8002aaa:	bf04      	itt	eq
 8002aac:	1809      	addeq	r1, r1, r0
 8002aae:	6021      	streq	r1, [r4, #0]
 8002ab0:	6054      	str	r4, [r2, #4]
 8002ab2:	e7ca      	b.n	8002a4a <_free_r+0x22>
 8002ab4:	bd38      	pop	{r3, r4, r5, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000280 	.word	0x20000280

08002abc <sbrk_aligned>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	4e0f      	ldr	r6, [pc, #60]	@ (8002afc <sbrk_aligned+0x40>)
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	6831      	ldr	r1, [r6, #0]
 8002ac4:	4605      	mov	r5, r0
 8002ac6:	b911      	cbnz	r1, 8002ace <sbrk_aligned+0x12>
 8002ac8:	f001 f918 	bl	8003cfc <_sbrk_r>
 8002acc:	6030      	str	r0, [r6, #0]
 8002ace:	4621      	mov	r1, r4
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f001 f913 	bl	8003cfc <_sbrk_r>
 8002ad6:	1c43      	adds	r3, r0, #1
 8002ad8:	d103      	bne.n	8002ae2 <sbrk_aligned+0x26>
 8002ada:	f04f 34ff 	mov.w	r4, #4294967295
 8002ade:	4620      	mov	r0, r4
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
 8002ae2:	1cc4      	adds	r4, r0, #3
 8002ae4:	f024 0403 	bic.w	r4, r4, #3
 8002ae8:	42a0      	cmp	r0, r4
 8002aea:	d0f8      	beq.n	8002ade <sbrk_aligned+0x22>
 8002aec:	1a21      	subs	r1, r4, r0
 8002aee:	4628      	mov	r0, r5
 8002af0:	f001 f904 	bl	8003cfc <_sbrk_r>
 8002af4:	3001      	adds	r0, #1
 8002af6:	d1f2      	bne.n	8002ade <sbrk_aligned+0x22>
 8002af8:	e7ef      	b.n	8002ada <sbrk_aligned+0x1e>
 8002afa:	bf00      	nop
 8002afc:	2000027c 	.word	0x2000027c

08002b00 <_malloc_r>:
 8002b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b04:	1ccd      	adds	r5, r1, #3
 8002b06:	f025 0503 	bic.w	r5, r5, #3
 8002b0a:	3508      	adds	r5, #8
 8002b0c:	2d0c      	cmp	r5, #12
 8002b0e:	bf38      	it	cc
 8002b10:	250c      	movcc	r5, #12
 8002b12:	2d00      	cmp	r5, #0
 8002b14:	4606      	mov	r6, r0
 8002b16:	db01      	blt.n	8002b1c <_malloc_r+0x1c>
 8002b18:	42a9      	cmp	r1, r5
 8002b1a:	d904      	bls.n	8002b26 <_malloc_r+0x26>
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	6033      	str	r3, [r6, #0]
 8002b20:	2000      	movs	r0, #0
 8002b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bfc <_malloc_r+0xfc>
 8002b2a:	f000 f869 	bl	8002c00 <__malloc_lock>
 8002b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b32:	461c      	mov	r4, r3
 8002b34:	bb44      	cbnz	r4, 8002b88 <_malloc_r+0x88>
 8002b36:	4629      	mov	r1, r5
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f7ff ffbf 	bl	8002abc <sbrk_aligned>
 8002b3e:	1c43      	adds	r3, r0, #1
 8002b40:	4604      	mov	r4, r0
 8002b42:	d158      	bne.n	8002bf6 <_malloc_r+0xf6>
 8002b44:	f8d8 4000 	ldr.w	r4, [r8]
 8002b48:	4627      	mov	r7, r4
 8002b4a:	2f00      	cmp	r7, #0
 8002b4c:	d143      	bne.n	8002bd6 <_malloc_r+0xd6>
 8002b4e:	2c00      	cmp	r4, #0
 8002b50:	d04b      	beq.n	8002bea <_malloc_r+0xea>
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	4639      	mov	r1, r7
 8002b56:	4630      	mov	r0, r6
 8002b58:	eb04 0903 	add.w	r9, r4, r3
 8002b5c:	f001 f8ce 	bl	8003cfc <_sbrk_r>
 8002b60:	4581      	cmp	r9, r0
 8002b62:	d142      	bne.n	8002bea <_malloc_r+0xea>
 8002b64:	6821      	ldr	r1, [r4, #0]
 8002b66:	1a6d      	subs	r5, r5, r1
 8002b68:	4629      	mov	r1, r5
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	f7ff ffa6 	bl	8002abc <sbrk_aligned>
 8002b70:	3001      	adds	r0, #1
 8002b72:	d03a      	beq.n	8002bea <_malloc_r+0xea>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	442b      	add	r3, r5
 8002b78:	6023      	str	r3, [r4, #0]
 8002b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	bb62      	cbnz	r2, 8002bdc <_malloc_r+0xdc>
 8002b82:	f8c8 7000 	str.w	r7, [r8]
 8002b86:	e00f      	b.n	8002ba8 <_malloc_r+0xa8>
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	1b52      	subs	r2, r2, r5
 8002b8c:	d420      	bmi.n	8002bd0 <_malloc_r+0xd0>
 8002b8e:	2a0b      	cmp	r2, #11
 8002b90:	d917      	bls.n	8002bc2 <_malloc_r+0xc2>
 8002b92:	1961      	adds	r1, r4, r5
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	6025      	str	r5, [r4, #0]
 8002b98:	bf18      	it	ne
 8002b9a:	6059      	strne	r1, [r3, #4]
 8002b9c:	6863      	ldr	r3, [r4, #4]
 8002b9e:	bf08      	it	eq
 8002ba0:	f8c8 1000 	streq.w	r1, [r8]
 8002ba4:	5162      	str	r2, [r4, r5]
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	4630      	mov	r0, r6
 8002baa:	f000 f82f 	bl	8002c0c <__malloc_unlock>
 8002bae:	f104 000b 	add.w	r0, r4, #11
 8002bb2:	1d23      	adds	r3, r4, #4
 8002bb4:	f020 0007 	bic.w	r0, r0, #7
 8002bb8:	1ac2      	subs	r2, r0, r3
 8002bba:	bf1c      	itt	ne
 8002bbc:	1a1b      	subne	r3, r3, r0
 8002bbe:	50a3      	strne	r3, [r4, r2]
 8002bc0:	e7af      	b.n	8002b22 <_malloc_r+0x22>
 8002bc2:	6862      	ldr	r2, [r4, #4]
 8002bc4:	42a3      	cmp	r3, r4
 8002bc6:	bf0c      	ite	eq
 8002bc8:	f8c8 2000 	streq.w	r2, [r8]
 8002bcc:	605a      	strne	r2, [r3, #4]
 8002bce:	e7eb      	b.n	8002ba8 <_malloc_r+0xa8>
 8002bd0:	4623      	mov	r3, r4
 8002bd2:	6864      	ldr	r4, [r4, #4]
 8002bd4:	e7ae      	b.n	8002b34 <_malloc_r+0x34>
 8002bd6:	463c      	mov	r4, r7
 8002bd8:	687f      	ldr	r7, [r7, #4]
 8002bda:	e7b6      	b.n	8002b4a <_malloc_r+0x4a>
 8002bdc:	461a      	mov	r2, r3
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	42a3      	cmp	r3, r4
 8002be2:	d1fb      	bne.n	8002bdc <_malloc_r+0xdc>
 8002be4:	2300      	movs	r3, #0
 8002be6:	6053      	str	r3, [r2, #4]
 8002be8:	e7de      	b.n	8002ba8 <_malloc_r+0xa8>
 8002bea:	230c      	movs	r3, #12
 8002bec:	6033      	str	r3, [r6, #0]
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f000 f80c 	bl	8002c0c <__malloc_unlock>
 8002bf4:	e794      	b.n	8002b20 <_malloc_r+0x20>
 8002bf6:	6005      	str	r5, [r0, #0]
 8002bf8:	e7d6      	b.n	8002ba8 <_malloc_r+0xa8>
 8002bfa:	bf00      	nop
 8002bfc:	20000280 	.word	0x20000280

08002c00 <__malloc_lock>:
 8002c00:	4801      	ldr	r0, [pc, #4]	@ (8002c08 <__malloc_lock+0x8>)
 8002c02:	f7ff bf0e 	b.w	8002a22 <__retarget_lock_acquire_recursive>
 8002c06:	bf00      	nop
 8002c08:	20000278 	.word	0x20000278

08002c0c <__malloc_unlock>:
 8002c0c:	4801      	ldr	r0, [pc, #4]	@ (8002c14 <__malloc_unlock+0x8>)
 8002c0e:	f7ff bf09 	b.w	8002a24 <__retarget_lock_release_recursive>
 8002c12:	bf00      	nop
 8002c14:	20000278 	.word	0x20000278

08002c18 <__sfputc_r>:
 8002c18:	6893      	ldr	r3, [r2, #8]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	b410      	push	{r4}
 8002c20:	6093      	str	r3, [r2, #8]
 8002c22:	da08      	bge.n	8002c36 <__sfputc_r+0x1e>
 8002c24:	6994      	ldr	r4, [r2, #24]
 8002c26:	42a3      	cmp	r3, r4
 8002c28:	db01      	blt.n	8002c2e <__sfputc_r+0x16>
 8002c2a:	290a      	cmp	r1, #10
 8002c2c:	d103      	bne.n	8002c36 <__sfputc_r+0x1e>
 8002c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c32:	f7ff bde8 	b.w	8002806 <__swbuf_r>
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	1c58      	adds	r0, r3, #1
 8002c3a:	6010      	str	r0, [r2, #0]
 8002c3c:	7019      	strb	r1, [r3, #0]
 8002c3e:	4608      	mov	r0, r1
 8002c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <__sfputs_r>:
 8002c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c48:	4606      	mov	r6, r0
 8002c4a:	460f      	mov	r7, r1
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	18d5      	adds	r5, r2, r3
 8002c50:	42ac      	cmp	r4, r5
 8002c52:	d101      	bne.n	8002c58 <__sfputs_r+0x12>
 8002c54:	2000      	movs	r0, #0
 8002c56:	e007      	b.n	8002c68 <__sfputs_r+0x22>
 8002c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c5c:	463a      	mov	r2, r7
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f7ff ffda 	bl	8002c18 <__sfputc_r>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	d1f3      	bne.n	8002c50 <__sfputs_r+0xa>
 8002c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c6c <_vfiprintf_r>:
 8002c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c70:	460d      	mov	r5, r1
 8002c72:	b09d      	sub	sp, #116	@ 0x74
 8002c74:	4614      	mov	r4, r2
 8002c76:	4698      	mov	r8, r3
 8002c78:	4606      	mov	r6, r0
 8002c7a:	b118      	cbz	r0, 8002c84 <_vfiprintf_r+0x18>
 8002c7c:	6a03      	ldr	r3, [r0, #32]
 8002c7e:	b90b      	cbnz	r3, 8002c84 <_vfiprintf_r+0x18>
 8002c80:	f7ff fcc6 	bl	8002610 <__sinit>
 8002c84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c86:	07d9      	lsls	r1, r3, #31
 8002c88:	d405      	bmi.n	8002c96 <_vfiprintf_r+0x2a>
 8002c8a:	89ab      	ldrh	r3, [r5, #12]
 8002c8c:	059a      	lsls	r2, r3, #22
 8002c8e:	d402      	bmi.n	8002c96 <_vfiprintf_r+0x2a>
 8002c90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c92:	f7ff fec6 	bl	8002a22 <__retarget_lock_acquire_recursive>
 8002c96:	89ab      	ldrh	r3, [r5, #12]
 8002c98:	071b      	lsls	r3, r3, #28
 8002c9a:	d501      	bpl.n	8002ca0 <_vfiprintf_r+0x34>
 8002c9c:	692b      	ldr	r3, [r5, #16]
 8002c9e:	b99b      	cbnz	r3, 8002cc8 <_vfiprintf_r+0x5c>
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f7ff fdee 	bl	8002884 <__swsetup_r>
 8002ca8:	b170      	cbz	r0, 8002cc8 <_vfiprintf_r+0x5c>
 8002caa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002cac:	07dc      	lsls	r4, r3, #31
 8002cae:	d504      	bpl.n	8002cba <_vfiprintf_r+0x4e>
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	b01d      	add	sp, #116	@ 0x74
 8002cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cba:	89ab      	ldrh	r3, [r5, #12]
 8002cbc:	0598      	lsls	r0, r3, #22
 8002cbe:	d4f7      	bmi.n	8002cb0 <_vfiprintf_r+0x44>
 8002cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cc2:	f7ff feaf 	bl	8002a24 <__retarget_lock_release_recursive>
 8002cc6:	e7f3      	b.n	8002cb0 <_vfiprintf_r+0x44>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ccc:	2320      	movs	r3, #32
 8002cce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cd6:	2330      	movs	r3, #48	@ 0x30
 8002cd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002e88 <_vfiprintf_r+0x21c>
 8002cdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ce0:	f04f 0901 	mov.w	r9, #1
 8002ce4:	4623      	mov	r3, r4
 8002ce6:	469a      	mov	sl, r3
 8002ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cec:	b10a      	cbz	r2, 8002cf2 <_vfiprintf_r+0x86>
 8002cee:	2a25      	cmp	r2, #37	@ 0x25
 8002cf0:	d1f9      	bne.n	8002ce6 <_vfiprintf_r+0x7a>
 8002cf2:	ebba 0b04 	subs.w	fp, sl, r4
 8002cf6:	d00b      	beq.n	8002d10 <_vfiprintf_r+0xa4>
 8002cf8:	465b      	mov	r3, fp
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	4630      	mov	r0, r6
 8002d00:	f7ff ffa1 	bl	8002c46 <__sfputs_r>
 8002d04:	3001      	adds	r0, #1
 8002d06:	f000 80a7 	beq.w	8002e58 <_vfiprintf_r+0x1ec>
 8002d0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d0c:	445a      	add	r2, fp
 8002d0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d10:	f89a 3000 	ldrb.w	r3, [sl]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 809f 	beq.w	8002e58 <_vfiprintf_r+0x1ec>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d24:	f10a 0a01 	add.w	sl, sl, #1
 8002d28:	9304      	str	r3, [sp, #16]
 8002d2a:	9307      	str	r3, [sp, #28]
 8002d2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d30:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d32:	4654      	mov	r4, sl
 8002d34:	2205      	movs	r2, #5
 8002d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d3a:	4853      	ldr	r0, [pc, #332]	@ (8002e88 <_vfiprintf_r+0x21c>)
 8002d3c:	f7fd fa50 	bl	80001e0 <memchr>
 8002d40:	9a04      	ldr	r2, [sp, #16]
 8002d42:	b9d8      	cbnz	r0, 8002d7c <_vfiprintf_r+0x110>
 8002d44:	06d1      	lsls	r1, r2, #27
 8002d46:	bf44      	itt	mi
 8002d48:	2320      	movmi	r3, #32
 8002d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d4e:	0713      	lsls	r3, r2, #28
 8002d50:	bf44      	itt	mi
 8002d52:	232b      	movmi	r3, #43	@ 0x2b
 8002d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d58:	f89a 3000 	ldrb.w	r3, [sl]
 8002d5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d5e:	d015      	beq.n	8002d8c <_vfiprintf_r+0x120>
 8002d60:	9a07      	ldr	r2, [sp, #28]
 8002d62:	4654      	mov	r4, sl
 8002d64:	2000      	movs	r0, #0
 8002d66:	f04f 0c0a 	mov.w	ip, #10
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d70:	3b30      	subs	r3, #48	@ 0x30
 8002d72:	2b09      	cmp	r3, #9
 8002d74:	d94b      	bls.n	8002e0e <_vfiprintf_r+0x1a2>
 8002d76:	b1b0      	cbz	r0, 8002da6 <_vfiprintf_r+0x13a>
 8002d78:	9207      	str	r2, [sp, #28]
 8002d7a:	e014      	b.n	8002da6 <_vfiprintf_r+0x13a>
 8002d7c:	eba0 0308 	sub.w	r3, r0, r8
 8002d80:	fa09 f303 	lsl.w	r3, r9, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	9304      	str	r3, [sp, #16]
 8002d88:	46a2      	mov	sl, r4
 8002d8a:	e7d2      	b.n	8002d32 <_vfiprintf_r+0xc6>
 8002d8c:	9b03      	ldr	r3, [sp, #12]
 8002d8e:	1d19      	adds	r1, r3, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	9103      	str	r1, [sp, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bfbb      	ittet	lt
 8002d98:	425b      	neglt	r3, r3
 8002d9a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d9e:	9307      	strge	r3, [sp, #28]
 8002da0:	9307      	strlt	r3, [sp, #28]
 8002da2:	bfb8      	it	lt
 8002da4:	9204      	strlt	r2, [sp, #16]
 8002da6:	7823      	ldrb	r3, [r4, #0]
 8002da8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002daa:	d10a      	bne.n	8002dc2 <_vfiprintf_r+0x156>
 8002dac:	7863      	ldrb	r3, [r4, #1]
 8002dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8002db0:	d132      	bne.n	8002e18 <_vfiprintf_r+0x1ac>
 8002db2:	9b03      	ldr	r3, [sp, #12]
 8002db4:	1d1a      	adds	r2, r3, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	9203      	str	r2, [sp, #12]
 8002dba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002dbe:	3402      	adds	r4, #2
 8002dc0:	9305      	str	r3, [sp, #20]
 8002dc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002e98 <_vfiprintf_r+0x22c>
 8002dc6:	7821      	ldrb	r1, [r4, #0]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	4650      	mov	r0, sl
 8002dcc:	f7fd fa08 	bl	80001e0 <memchr>
 8002dd0:	b138      	cbz	r0, 8002de2 <_vfiprintf_r+0x176>
 8002dd2:	9b04      	ldr	r3, [sp, #16]
 8002dd4:	eba0 000a 	sub.w	r0, r0, sl
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	4082      	lsls	r2, r0
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	3401      	adds	r4, #1
 8002de0:	9304      	str	r3, [sp, #16]
 8002de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de6:	4829      	ldr	r0, [pc, #164]	@ (8002e8c <_vfiprintf_r+0x220>)
 8002de8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002dec:	2206      	movs	r2, #6
 8002dee:	f7fd f9f7 	bl	80001e0 <memchr>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d03f      	beq.n	8002e76 <_vfiprintf_r+0x20a>
 8002df6:	4b26      	ldr	r3, [pc, #152]	@ (8002e90 <_vfiprintf_r+0x224>)
 8002df8:	bb1b      	cbnz	r3, 8002e42 <_vfiprintf_r+0x1d6>
 8002dfa:	9b03      	ldr	r3, [sp, #12]
 8002dfc:	3307      	adds	r3, #7
 8002dfe:	f023 0307 	bic.w	r3, r3, #7
 8002e02:	3308      	adds	r3, #8
 8002e04:	9303      	str	r3, [sp, #12]
 8002e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e08:	443b      	add	r3, r7
 8002e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e0c:	e76a      	b.n	8002ce4 <_vfiprintf_r+0x78>
 8002e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e12:	460c      	mov	r4, r1
 8002e14:	2001      	movs	r0, #1
 8002e16:	e7a8      	b.n	8002d6a <_vfiprintf_r+0xfe>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	3401      	adds	r4, #1
 8002e1c:	9305      	str	r3, [sp, #20]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f04f 0c0a 	mov.w	ip, #10
 8002e24:	4620      	mov	r0, r4
 8002e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e2a:	3a30      	subs	r2, #48	@ 0x30
 8002e2c:	2a09      	cmp	r2, #9
 8002e2e:	d903      	bls.n	8002e38 <_vfiprintf_r+0x1cc>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0c6      	beq.n	8002dc2 <_vfiprintf_r+0x156>
 8002e34:	9105      	str	r1, [sp, #20]
 8002e36:	e7c4      	b.n	8002dc2 <_vfiprintf_r+0x156>
 8002e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e7f0      	b.n	8002e24 <_vfiprintf_r+0x1b8>
 8002e42:	ab03      	add	r3, sp, #12
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	462a      	mov	r2, r5
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <_vfiprintf_r+0x228>)
 8002e4a:	a904      	add	r1, sp, #16
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	f3af 8000 	nop.w
 8002e52:	4607      	mov	r7, r0
 8002e54:	1c78      	adds	r0, r7, #1
 8002e56:	d1d6      	bne.n	8002e06 <_vfiprintf_r+0x19a>
 8002e58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e5a:	07d9      	lsls	r1, r3, #31
 8002e5c:	d405      	bmi.n	8002e6a <_vfiprintf_r+0x1fe>
 8002e5e:	89ab      	ldrh	r3, [r5, #12]
 8002e60:	059a      	lsls	r2, r3, #22
 8002e62:	d402      	bmi.n	8002e6a <_vfiprintf_r+0x1fe>
 8002e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e66:	f7ff fddd 	bl	8002a24 <__retarget_lock_release_recursive>
 8002e6a:	89ab      	ldrh	r3, [r5, #12]
 8002e6c:	065b      	lsls	r3, r3, #25
 8002e6e:	f53f af1f 	bmi.w	8002cb0 <_vfiprintf_r+0x44>
 8002e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e74:	e71e      	b.n	8002cb4 <_vfiprintf_r+0x48>
 8002e76:	ab03      	add	r3, sp, #12
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	462a      	mov	r2, r5
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <_vfiprintf_r+0x228>)
 8002e7e:	a904      	add	r1, sp, #16
 8002e80:	4630      	mov	r0, r6
 8002e82:	f000 f879 	bl	8002f78 <_printf_i>
 8002e86:	e7e4      	b.n	8002e52 <_vfiprintf_r+0x1e6>
 8002e88:	08004030 	.word	0x08004030
 8002e8c:	0800403a 	.word	0x0800403a
 8002e90:	00000000 	.word	0x00000000
 8002e94:	08002c47 	.word	0x08002c47
 8002e98:	08004036 	.word	0x08004036

08002e9c <_printf_common>:
 8002e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ea0:	4616      	mov	r6, r2
 8002ea2:	4698      	mov	r8, r3
 8002ea4:	688a      	ldr	r2, [r1, #8]
 8002ea6:	690b      	ldr	r3, [r1, #16]
 8002ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bfb8      	it	lt
 8002eb0:	4613      	movlt	r3, r2
 8002eb2:	6033      	str	r3, [r6, #0]
 8002eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002eb8:	4607      	mov	r7, r0
 8002eba:	460c      	mov	r4, r1
 8002ebc:	b10a      	cbz	r2, 8002ec2 <_printf_common+0x26>
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	6033      	str	r3, [r6, #0]
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	0699      	lsls	r1, r3, #26
 8002ec6:	bf42      	ittt	mi
 8002ec8:	6833      	ldrmi	r3, [r6, #0]
 8002eca:	3302      	addmi	r3, #2
 8002ecc:	6033      	strmi	r3, [r6, #0]
 8002ece:	6825      	ldr	r5, [r4, #0]
 8002ed0:	f015 0506 	ands.w	r5, r5, #6
 8002ed4:	d106      	bne.n	8002ee4 <_printf_common+0x48>
 8002ed6:	f104 0a19 	add.w	sl, r4, #25
 8002eda:	68e3      	ldr	r3, [r4, #12]
 8002edc:	6832      	ldr	r2, [r6, #0]
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	42ab      	cmp	r3, r5
 8002ee2:	dc26      	bgt.n	8002f32 <_printf_common+0x96>
 8002ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ee8:	6822      	ldr	r2, [r4, #0]
 8002eea:	3b00      	subs	r3, #0
 8002eec:	bf18      	it	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	0692      	lsls	r2, r2, #26
 8002ef2:	d42b      	bmi.n	8002f4c <_printf_common+0xb0>
 8002ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ef8:	4641      	mov	r1, r8
 8002efa:	4638      	mov	r0, r7
 8002efc:	47c8      	blx	r9
 8002efe:	3001      	adds	r0, #1
 8002f00:	d01e      	beq.n	8002f40 <_printf_common+0xa4>
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	6922      	ldr	r2, [r4, #16]
 8002f06:	f003 0306 	and.w	r3, r3, #6
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	bf02      	ittt	eq
 8002f0e:	68e5      	ldreq	r5, [r4, #12]
 8002f10:	6833      	ldreq	r3, [r6, #0]
 8002f12:	1aed      	subeq	r5, r5, r3
 8002f14:	68a3      	ldr	r3, [r4, #8]
 8002f16:	bf0c      	ite	eq
 8002f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f1c:	2500      	movne	r5, #0
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	bfc4      	itt	gt
 8002f22:	1a9b      	subgt	r3, r3, r2
 8002f24:	18ed      	addgt	r5, r5, r3
 8002f26:	2600      	movs	r6, #0
 8002f28:	341a      	adds	r4, #26
 8002f2a:	42b5      	cmp	r5, r6
 8002f2c:	d11a      	bne.n	8002f64 <_printf_common+0xc8>
 8002f2e:	2000      	movs	r0, #0
 8002f30:	e008      	b.n	8002f44 <_printf_common+0xa8>
 8002f32:	2301      	movs	r3, #1
 8002f34:	4652      	mov	r2, sl
 8002f36:	4641      	mov	r1, r8
 8002f38:	4638      	mov	r0, r7
 8002f3a:	47c8      	blx	r9
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	d103      	bne.n	8002f48 <_printf_common+0xac>
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f48:	3501      	adds	r5, #1
 8002f4a:	e7c6      	b.n	8002eda <_printf_common+0x3e>
 8002f4c:	18e1      	adds	r1, r4, r3
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	2030      	movs	r0, #48	@ 0x30
 8002f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f56:	4422      	add	r2, r4
 8002f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f60:	3302      	adds	r3, #2
 8002f62:	e7c7      	b.n	8002ef4 <_printf_common+0x58>
 8002f64:	2301      	movs	r3, #1
 8002f66:	4622      	mov	r2, r4
 8002f68:	4641      	mov	r1, r8
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	47c8      	blx	r9
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d0e6      	beq.n	8002f40 <_printf_common+0xa4>
 8002f72:	3601      	adds	r6, #1
 8002f74:	e7d9      	b.n	8002f2a <_printf_common+0x8e>
	...

08002f78 <_printf_i>:
 8002f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f7c:	7e0f      	ldrb	r7, [r1, #24]
 8002f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f80:	2f78      	cmp	r7, #120	@ 0x78
 8002f82:	4691      	mov	r9, r2
 8002f84:	4680      	mov	r8, r0
 8002f86:	460c      	mov	r4, r1
 8002f88:	469a      	mov	sl, r3
 8002f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f8e:	d807      	bhi.n	8002fa0 <_printf_i+0x28>
 8002f90:	2f62      	cmp	r7, #98	@ 0x62
 8002f92:	d80a      	bhi.n	8002faa <_printf_i+0x32>
 8002f94:	2f00      	cmp	r7, #0
 8002f96:	f000 80d2 	beq.w	800313e <_printf_i+0x1c6>
 8002f9a:	2f58      	cmp	r7, #88	@ 0x58
 8002f9c:	f000 80b9 	beq.w	8003112 <_printf_i+0x19a>
 8002fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fa8:	e03a      	b.n	8003020 <_printf_i+0xa8>
 8002faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002fae:	2b15      	cmp	r3, #21
 8002fb0:	d8f6      	bhi.n	8002fa0 <_printf_i+0x28>
 8002fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8002fb8 <_printf_i+0x40>)
 8002fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fb8:	08003011 	.word	0x08003011
 8002fbc:	08003025 	.word	0x08003025
 8002fc0:	08002fa1 	.word	0x08002fa1
 8002fc4:	08002fa1 	.word	0x08002fa1
 8002fc8:	08002fa1 	.word	0x08002fa1
 8002fcc:	08002fa1 	.word	0x08002fa1
 8002fd0:	08003025 	.word	0x08003025
 8002fd4:	08002fa1 	.word	0x08002fa1
 8002fd8:	08002fa1 	.word	0x08002fa1
 8002fdc:	08002fa1 	.word	0x08002fa1
 8002fe0:	08002fa1 	.word	0x08002fa1
 8002fe4:	08003125 	.word	0x08003125
 8002fe8:	0800304f 	.word	0x0800304f
 8002fec:	080030df 	.word	0x080030df
 8002ff0:	08002fa1 	.word	0x08002fa1
 8002ff4:	08002fa1 	.word	0x08002fa1
 8002ff8:	08003147 	.word	0x08003147
 8002ffc:	08002fa1 	.word	0x08002fa1
 8003000:	0800304f 	.word	0x0800304f
 8003004:	08002fa1 	.word	0x08002fa1
 8003008:	08002fa1 	.word	0x08002fa1
 800300c:	080030e7 	.word	0x080030e7
 8003010:	6833      	ldr	r3, [r6, #0]
 8003012:	1d1a      	adds	r2, r3, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6032      	str	r2, [r6, #0]
 8003018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800301c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003020:	2301      	movs	r3, #1
 8003022:	e09d      	b.n	8003160 <_printf_i+0x1e8>
 8003024:	6833      	ldr	r3, [r6, #0]
 8003026:	6820      	ldr	r0, [r4, #0]
 8003028:	1d19      	adds	r1, r3, #4
 800302a:	6031      	str	r1, [r6, #0]
 800302c:	0606      	lsls	r6, r0, #24
 800302e:	d501      	bpl.n	8003034 <_printf_i+0xbc>
 8003030:	681d      	ldr	r5, [r3, #0]
 8003032:	e003      	b.n	800303c <_printf_i+0xc4>
 8003034:	0645      	lsls	r5, r0, #25
 8003036:	d5fb      	bpl.n	8003030 <_printf_i+0xb8>
 8003038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800303c:	2d00      	cmp	r5, #0
 800303e:	da03      	bge.n	8003048 <_printf_i+0xd0>
 8003040:	232d      	movs	r3, #45	@ 0x2d
 8003042:	426d      	negs	r5, r5
 8003044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003048:	4859      	ldr	r0, [pc, #356]	@ (80031b0 <_printf_i+0x238>)
 800304a:	230a      	movs	r3, #10
 800304c:	e011      	b.n	8003072 <_printf_i+0xfa>
 800304e:	6821      	ldr	r1, [r4, #0]
 8003050:	6833      	ldr	r3, [r6, #0]
 8003052:	0608      	lsls	r0, r1, #24
 8003054:	f853 5b04 	ldr.w	r5, [r3], #4
 8003058:	d402      	bmi.n	8003060 <_printf_i+0xe8>
 800305a:	0649      	lsls	r1, r1, #25
 800305c:	bf48      	it	mi
 800305e:	b2ad      	uxthmi	r5, r5
 8003060:	2f6f      	cmp	r7, #111	@ 0x6f
 8003062:	4853      	ldr	r0, [pc, #332]	@ (80031b0 <_printf_i+0x238>)
 8003064:	6033      	str	r3, [r6, #0]
 8003066:	bf14      	ite	ne
 8003068:	230a      	movne	r3, #10
 800306a:	2308      	moveq	r3, #8
 800306c:	2100      	movs	r1, #0
 800306e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003072:	6866      	ldr	r6, [r4, #4]
 8003074:	60a6      	str	r6, [r4, #8]
 8003076:	2e00      	cmp	r6, #0
 8003078:	bfa2      	ittt	ge
 800307a:	6821      	ldrge	r1, [r4, #0]
 800307c:	f021 0104 	bicge.w	r1, r1, #4
 8003080:	6021      	strge	r1, [r4, #0]
 8003082:	b90d      	cbnz	r5, 8003088 <_printf_i+0x110>
 8003084:	2e00      	cmp	r6, #0
 8003086:	d04b      	beq.n	8003120 <_printf_i+0x1a8>
 8003088:	4616      	mov	r6, r2
 800308a:	fbb5 f1f3 	udiv	r1, r5, r3
 800308e:	fb03 5711 	mls	r7, r3, r1, r5
 8003092:	5dc7      	ldrb	r7, [r0, r7]
 8003094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003098:	462f      	mov	r7, r5
 800309a:	42bb      	cmp	r3, r7
 800309c:	460d      	mov	r5, r1
 800309e:	d9f4      	bls.n	800308a <_printf_i+0x112>
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d10b      	bne.n	80030bc <_printf_i+0x144>
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	07df      	lsls	r7, r3, #31
 80030a8:	d508      	bpl.n	80030bc <_printf_i+0x144>
 80030aa:	6923      	ldr	r3, [r4, #16]
 80030ac:	6861      	ldr	r1, [r4, #4]
 80030ae:	4299      	cmp	r1, r3
 80030b0:	bfde      	ittt	le
 80030b2:	2330      	movle	r3, #48	@ 0x30
 80030b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030bc:	1b92      	subs	r2, r2, r6
 80030be:	6122      	str	r2, [r4, #16]
 80030c0:	f8cd a000 	str.w	sl, [sp]
 80030c4:	464b      	mov	r3, r9
 80030c6:	aa03      	add	r2, sp, #12
 80030c8:	4621      	mov	r1, r4
 80030ca:	4640      	mov	r0, r8
 80030cc:	f7ff fee6 	bl	8002e9c <_printf_common>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d14a      	bne.n	800316a <_printf_i+0x1f2>
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	b004      	add	sp, #16
 80030da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	f043 0320 	orr.w	r3, r3, #32
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	4833      	ldr	r0, [pc, #204]	@ (80031b4 <_printf_i+0x23c>)
 80030e8:	2778      	movs	r7, #120	@ 0x78
 80030ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	6831      	ldr	r1, [r6, #0]
 80030f2:	061f      	lsls	r7, r3, #24
 80030f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80030f8:	d402      	bmi.n	8003100 <_printf_i+0x188>
 80030fa:	065f      	lsls	r7, r3, #25
 80030fc:	bf48      	it	mi
 80030fe:	b2ad      	uxthmi	r5, r5
 8003100:	6031      	str	r1, [r6, #0]
 8003102:	07d9      	lsls	r1, r3, #31
 8003104:	bf44      	itt	mi
 8003106:	f043 0320 	orrmi.w	r3, r3, #32
 800310a:	6023      	strmi	r3, [r4, #0]
 800310c:	b11d      	cbz	r5, 8003116 <_printf_i+0x19e>
 800310e:	2310      	movs	r3, #16
 8003110:	e7ac      	b.n	800306c <_printf_i+0xf4>
 8003112:	4827      	ldr	r0, [pc, #156]	@ (80031b0 <_printf_i+0x238>)
 8003114:	e7e9      	b.n	80030ea <_printf_i+0x172>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	f023 0320 	bic.w	r3, r3, #32
 800311c:	6023      	str	r3, [r4, #0]
 800311e:	e7f6      	b.n	800310e <_printf_i+0x196>
 8003120:	4616      	mov	r6, r2
 8003122:	e7bd      	b.n	80030a0 <_printf_i+0x128>
 8003124:	6833      	ldr	r3, [r6, #0]
 8003126:	6825      	ldr	r5, [r4, #0]
 8003128:	6961      	ldr	r1, [r4, #20]
 800312a:	1d18      	adds	r0, r3, #4
 800312c:	6030      	str	r0, [r6, #0]
 800312e:	062e      	lsls	r6, r5, #24
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	d501      	bpl.n	8003138 <_printf_i+0x1c0>
 8003134:	6019      	str	r1, [r3, #0]
 8003136:	e002      	b.n	800313e <_printf_i+0x1c6>
 8003138:	0668      	lsls	r0, r5, #25
 800313a:	d5fb      	bpl.n	8003134 <_printf_i+0x1bc>
 800313c:	8019      	strh	r1, [r3, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	6123      	str	r3, [r4, #16]
 8003142:	4616      	mov	r6, r2
 8003144:	e7bc      	b.n	80030c0 <_printf_i+0x148>
 8003146:	6833      	ldr	r3, [r6, #0]
 8003148:	1d1a      	adds	r2, r3, #4
 800314a:	6032      	str	r2, [r6, #0]
 800314c:	681e      	ldr	r6, [r3, #0]
 800314e:	6862      	ldr	r2, [r4, #4]
 8003150:	2100      	movs	r1, #0
 8003152:	4630      	mov	r0, r6
 8003154:	f7fd f844 	bl	80001e0 <memchr>
 8003158:	b108      	cbz	r0, 800315e <_printf_i+0x1e6>
 800315a:	1b80      	subs	r0, r0, r6
 800315c:	6060      	str	r0, [r4, #4]
 800315e:	6863      	ldr	r3, [r4, #4]
 8003160:	6123      	str	r3, [r4, #16]
 8003162:	2300      	movs	r3, #0
 8003164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003168:	e7aa      	b.n	80030c0 <_printf_i+0x148>
 800316a:	6923      	ldr	r3, [r4, #16]
 800316c:	4632      	mov	r2, r6
 800316e:	4649      	mov	r1, r9
 8003170:	4640      	mov	r0, r8
 8003172:	47d0      	blx	sl
 8003174:	3001      	adds	r0, #1
 8003176:	d0ad      	beq.n	80030d4 <_printf_i+0x15c>
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	079b      	lsls	r3, r3, #30
 800317c:	d413      	bmi.n	80031a6 <_printf_i+0x22e>
 800317e:	68e0      	ldr	r0, [r4, #12]
 8003180:	9b03      	ldr	r3, [sp, #12]
 8003182:	4298      	cmp	r0, r3
 8003184:	bfb8      	it	lt
 8003186:	4618      	movlt	r0, r3
 8003188:	e7a6      	b.n	80030d8 <_printf_i+0x160>
 800318a:	2301      	movs	r3, #1
 800318c:	4632      	mov	r2, r6
 800318e:	4649      	mov	r1, r9
 8003190:	4640      	mov	r0, r8
 8003192:	47d0      	blx	sl
 8003194:	3001      	adds	r0, #1
 8003196:	d09d      	beq.n	80030d4 <_printf_i+0x15c>
 8003198:	3501      	adds	r5, #1
 800319a:	68e3      	ldr	r3, [r4, #12]
 800319c:	9903      	ldr	r1, [sp, #12]
 800319e:	1a5b      	subs	r3, r3, r1
 80031a0:	42ab      	cmp	r3, r5
 80031a2:	dcf2      	bgt.n	800318a <_printf_i+0x212>
 80031a4:	e7eb      	b.n	800317e <_printf_i+0x206>
 80031a6:	2500      	movs	r5, #0
 80031a8:	f104 0619 	add.w	r6, r4, #25
 80031ac:	e7f5      	b.n	800319a <_printf_i+0x222>
 80031ae:	bf00      	nop
 80031b0:	08004041 	.word	0x08004041
 80031b4:	08004052 	.word	0x08004052

080031b8 <__svfiscanf_r>:
 80031b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	461d      	mov	r5, r3
 80031be:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80031c0:	07df      	lsls	r7, r3, #31
 80031c2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80031c6:	4606      	mov	r6, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	4691      	mov	r9, r2
 80031cc:	d405      	bmi.n	80031da <__svfiscanf_r+0x22>
 80031ce:	898b      	ldrh	r3, [r1, #12]
 80031d0:	0598      	lsls	r0, r3, #22
 80031d2:	d402      	bmi.n	80031da <__svfiscanf_r+0x22>
 80031d4:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80031d6:	f7ff fc24 	bl	8002a22 <__retarget_lock_acquire_recursive>
 80031da:	2300      	movs	r3, #0
 80031dc:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 80031e0:	4ba7      	ldr	r3, [pc, #668]	@ (8003480 <__svfiscanf_r+0x2c8>)
 80031e2:	93a0      	str	r3, [sp, #640]	@ 0x280
 80031e4:	f10d 0804 	add.w	r8, sp, #4
 80031e8:	4ba6      	ldr	r3, [pc, #664]	@ (8003484 <__svfiscanf_r+0x2cc>)
 80031ea:	4fa7      	ldr	r7, [pc, #668]	@ (8003488 <__svfiscanf_r+0x2d0>)
 80031ec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80031f0:	93a1      	str	r3, [sp, #644]	@ 0x284
 80031f2:	9500      	str	r5, [sp, #0]
 80031f4:	f899 3000 	ldrb.w	r3, [r9]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 816c 	beq.w	80034d6 <__svfiscanf_r+0x31e>
 80031fe:	5cf9      	ldrb	r1, [r7, r3]
 8003200:	f011 0108 	ands.w	r1, r1, #8
 8003204:	f109 0501 	add.w	r5, r9, #1
 8003208:	d019      	beq.n	800323e <__svfiscanf_r+0x86>
 800320a:	6863      	ldr	r3, [r4, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	dd0f      	ble.n	8003230 <__svfiscanf_r+0x78>
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	5cba      	ldrb	r2, [r7, r2]
 8003216:	0711      	lsls	r1, r2, #28
 8003218:	d401      	bmi.n	800321e <__svfiscanf_r+0x66>
 800321a:	46a9      	mov	r9, r5
 800321c:	e7ea      	b.n	80031f4 <__svfiscanf_r+0x3c>
 800321e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003220:	3201      	adds	r2, #1
 8003222:	9245      	str	r2, [sp, #276]	@ 0x114
 8003224:	6862      	ldr	r2, [r4, #4]
 8003226:	3301      	adds	r3, #1
 8003228:	3a01      	subs	r2, #1
 800322a:	6062      	str	r2, [r4, #4]
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	e7ec      	b.n	800320a <__svfiscanf_r+0x52>
 8003230:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003232:	4621      	mov	r1, r4
 8003234:	4630      	mov	r0, r6
 8003236:	4798      	blx	r3
 8003238:	2800      	cmp	r0, #0
 800323a:	d0e9      	beq.n	8003210 <__svfiscanf_r+0x58>
 800323c:	e7ed      	b.n	800321a <__svfiscanf_r+0x62>
 800323e:	2b25      	cmp	r3, #37	@ 0x25
 8003240:	d012      	beq.n	8003268 <__svfiscanf_r+0xb0>
 8003242:	4699      	mov	r9, r3
 8003244:	6863      	ldr	r3, [r4, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f340 8095 	ble.w	8003376 <__svfiscanf_r+0x1be>
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	7813      	ldrb	r3, [r2, #0]
 8003250:	454b      	cmp	r3, r9
 8003252:	f040 8140 	bne.w	80034d6 <__svfiscanf_r+0x31e>
 8003256:	6863      	ldr	r3, [r4, #4]
 8003258:	3b01      	subs	r3, #1
 800325a:	6063      	str	r3, [r4, #4]
 800325c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800325e:	3201      	adds	r2, #1
 8003260:	3301      	adds	r3, #1
 8003262:	6022      	str	r2, [r4, #0]
 8003264:	9345      	str	r3, [sp, #276]	@ 0x114
 8003266:	e7d8      	b.n	800321a <__svfiscanf_r+0x62>
 8003268:	9141      	str	r1, [sp, #260]	@ 0x104
 800326a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800326c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8003270:	2b2a      	cmp	r3, #42	@ 0x2a
 8003272:	bf02      	ittt	eq
 8003274:	2310      	moveq	r3, #16
 8003276:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003278:	f109 0502 	addeq.w	r5, r9, #2
 800327c:	220a      	movs	r2, #10
 800327e:	46a9      	mov	r9, r5
 8003280:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003284:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003288:	2b09      	cmp	r3, #9
 800328a:	d91f      	bls.n	80032cc <__svfiscanf_r+0x114>
 800328c:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 800348c <__svfiscanf_r+0x2d4>
 8003290:	2203      	movs	r2, #3
 8003292:	4650      	mov	r0, sl
 8003294:	f7fc ffa4 	bl	80001e0 <memchr>
 8003298:	b138      	cbz	r0, 80032aa <__svfiscanf_r+0xf2>
 800329a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800329c:	eba0 000a 	sub.w	r0, r0, sl
 80032a0:	2301      	movs	r3, #1
 80032a2:	4083      	lsls	r3, r0
 80032a4:	4313      	orrs	r3, r2
 80032a6:	9341      	str	r3, [sp, #260]	@ 0x104
 80032a8:	464d      	mov	r5, r9
 80032aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80032ae:	2b78      	cmp	r3, #120	@ 0x78
 80032b0:	d807      	bhi.n	80032c2 <__svfiscanf_r+0x10a>
 80032b2:	2b57      	cmp	r3, #87	@ 0x57
 80032b4:	d811      	bhi.n	80032da <__svfiscanf_r+0x122>
 80032b6:	2b25      	cmp	r3, #37	@ 0x25
 80032b8:	d0c3      	beq.n	8003242 <__svfiscanf_r+0x8a>
 80032ba:	d857      	bhi.n	800336c <__svfiscanf_r+0x1b4>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80c1 	beq.w	8003444 <__svfiscanf_r+0x28c>
 80032c2:	2303      	movs	r3, #3
 80032c4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80032c6:	230a      	movs	r3, #10
 80032c8:	9342      	str	r3, [sp, #264]	@ 0x108
 80032ca:	e07e      	b.n	80033ca <__svfiscanf_r+0x212>
 80032cc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80032ce:	fb02 1103 	mla	r1, r2, r3, r1
 80032d2:	3930      	subs	r1, #48	@ 0x30
 80032d4:	9143      	str	r1, [sp, #268]	@ 0x10c
 80032d6:	464d      	mov	r5, r9
 80032d8:	e7d1      	b.n	800327e <__svfiscanf_r+0xc6>
 80032da:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80032de:	2a20      	cmp	r2, #32
 80032e0:	d8ef      	bhi.n	80032c2 <__svfiscanf_r+0x10a>
 80032e2:	a101      	add	r1, pc, #4	@ (adr r1, 80032e8 <__svfiscanf_r+0x130>)
 80032e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80032e8:	080033a9 	.word	0x080033a9
 80032ec:	080032c3 	.word	0x080032c3
 80032f0:	080032c3 	.word	0x080032c3
 80032f4:	08003403 	.word	0x08003403
 80032f8:	080032c3 	.word	0x080032c3
 80032fc:	080032c3 	.word	0x080032c3
 8003300:	080032c3 	.word	0x080032c3
 8003304:	080032c3 	.word	0x080032c3
 8003308:	080032c3 	.word	0x080032c3
 800330c:	080032c3 	.word	0x080032c3
 8003310:	080032c3 	.word	0x080032c3
 8003314:	08003419 	.word	0x08003419
 8003318:	080033ff 	.word	0x080033ff
 800331c:	08003373 	.word	0x08003373
 8003320:	08003373 	.word	0x08003373
 8003324:	08003373 	.word	0x08003373
 8003328:	080032c3 	.word	0x080032c3
 800332c:	080033bb 	.word	0x080033bb
 8003330:	080032c3 	.word	0x080032c3
 8003334:	080032c3 	.word	0x080032c3
 8003338:	080032c3 	.word	0x080032c3
 800333c:	080032c3 	.word	0x080032c3
 8003340:	08003429 	.word	0x08003429
 8003344:	080033c3 	.word	0x080033c3
 8003348:	080033a1 	.word	0x080033a1
 800334c:	080032c3 	.word	0x080032c3
 8003350:	080032c3 	.word	0x080032c3
 8003354:	08003425 	.word	0x08003425
 8003358:	080032c3 	.word	0x080032c3
 800335c:	080033ff 	.word	0x080033ff
 8003360:	080032c3 	.word	0x080032c3
 8003364:	080032c3 	.word	0x080032c3
 8003368:	080033a9 	.word	0x080033a9
 800336c:	3b45      	subs	r3, #69	@ 0x45
 800336e:	2b02      	cmp	r3, #2
 8003370:	d8a7      	bhi.n	80032c2 <__svfiscanf_r+0x10a>
 8003372:	2305      	movs	r3, #5
 8003374:	e028      	b.n	80033c8 <__svfiscanf_r+0x210>
 8003376:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003378:	4621      	mov	r1, r4
 800337a:	4630      	mov	r0, r6
 800337c:	4798      	blx	r3
 800337e:	2800      	cmp	r0, #0
 8003380:	f43f af64 	beq.w	800324c <__svfiscanf_r+0x94>
 8003384:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003386:	07da      	lsls	r2, r3, #31
 8003388:	f140 809d 	bpl.w	80034c6 <__svfiscanf_r+0x30e>
 800338c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800338e:	2800      	cmp	r0, #0
 8003390:	d061      	beq.n	8003456 <__svfiscanf_r+0x29e>
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	0659      	lsls	r1, r3, #25
 8003396:	d45e      	bmi.n	8003456 <__svfiscanf_r+0x29e>
 8003398:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800339c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80033a2:	f042 0220 	orr.w	r2, r2, #32
 80033a6:	9241      	str	r2, [sp, #260]	@ 0x104
 80033a8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80033aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ae:	9241      	str	r2, [sp, #260]	@ 0x104
 80033b0:	2210      	movs	r2, #16
 80033b2:	2b6e      	cmp	r3, #110	@ 0x6e
 80033b4:	9242      	str	r2, [sp, #264]	@ 0x108
 80033b6:	d902      	bls.n	80033be <__svfiscanf_r+0x206>
 80033b8:	e005      	b.n	80033c6 <__svfiscanf_r+0x20e>
 80033ba:	2300      	movs	r3, #0
 80033bc:	9342      	str	r3, [sp, #264]	@ 0x108
 80033be:	2303      	movs	r3, #3
 80033c0:	e002      	b.n	80033c8 <__svfiscanf_r+0x210>
 80033c2:	2308      	movs	r3, #8
 80033c4:	9342      	str	r3, [sp, #264]	@ 0x108
 80033c6:	2304      	movs	r3, #4
 80033c8:	9347      	str	r3, [sp, #284]	@ 0x11c
 80033ca:	6863      	ldr	r3, [r4, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	dd45      	ble.n	800345c <__svfiscanf_r+0x2a4>
 80033d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80033d2:	0659      	lsls	r1, r3, #25
 80033d4:	d404      	bmi.n	80033e0 <__svfiscanf_r+0x228>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	5cba      	ldrb	r2, [r7, r2]
 80033dc:	0712      	lsls	r2, r2, #28
 80033de:	d444      	bmi.n	800346a <__svfiscanf_r+0x2b2>
 80033e0:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	dc5b      	bgt.n	800349e <__svfiscanf_r+0x2e6>
 80033e6:	466b      	mov	r3, sp
 80033e8:	4622      	mov	r2, r4
 80033ea:	a941      	add	r1, sp, #260	@ 0x104
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 f893 	bl	8003518 <_scanf_chars>
 80033f2:	2801      	cmp	r0, #1
 80033f4:	d06f      	beq.n	80034d6 <__svfiscanf_r+0x31e>
 80033f6:	2802      	cmp	r0, #2
 80033f8:	f47f af0f 	bne.w	800321a <__svfiscanf_r+0x62>
 80033fc:	e7c2      	b.n	8003384 <__svfiscanf_r+0x1cc>
 80033fe:	220a      	movs	r2, #10
 8003400:	e7d7      	b.n	80033b2 <__svfiscanf_r+0x1fa>
 8003402:	4629      	mov	r1, r5
 8003404:	4640      	mov	r0, r8
 8003406:	f000 fb65 	bl	8003ad4 <__sccl>
 800340a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800340c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003410:	9341      	str	r3, [sp, #260]	@ 0x104
 8003412:	4605      	mov	r5, r0
 8003414:	2301      	movs	r3, #1
 8003416:	e7d7      	b.n	80033c8 <__svfiscanf_r+0x210>
 8003418:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800341a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800341e:	9341      	str	r3, [sp, #260]	@ 0x104
 8003420:	2300      	movs	r3, #0
 8003422:	e7d1      	b.n	80033c8 <__svfiscanf_r+0x210>
 8003424:	2302      	movs	r3, #2
 8003426:	e7cf      	b.n	80033c8 <__svfiscanf_r+0x210>
 8003428:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800342a:	06c3      	lsls	r3, r0, #27
 800342c:	f53f aef5 	bmi.w	800321a <__svfiscanf_r+0x62>
 8003430:	9b00      	ldr	r3, [sp, #0]
 8003432:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003434:	1d19      	adds	r1, r3, #4
 8003436:	9100      	str	r1, [sp, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	07c0      	lsls	r0, r0, #31
 800343c:	bf4c      	ite	mi
 800343e:	801a      	strhmi	r2, [r3, #0]
 8003440:	601a      	strpl	r2, [r3, #0]
 8003442:	e6ea      	b.n	800321a <__svfiscanf_r+0x62>
 8003444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003446:	07de      	lsls	r6, r3, #31
 8003448:	d405      	bmi.n	8003456 <__svfiscanf_r+0x29e>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	059d      	lsls	r5, r3, #22
 800344e:	d402      	bmi.n	8003456 <__svfiscanf_r+0x29e>
 8003450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003452:	f7ff fae7 	bl	8002a24 <__retarget_lock_release_recursive>
 8003456:	f04f 30ff 	mov.w	r0, #4294967295
 800345a:	e79d      	b.n	8003398 <__svfiscanf_r+0x1e0>
 800345c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800345e:	4621      	mov	r1, r4
 8003460:	4630      	mov	r0, r6
 8003462:	4798      	blx	r3
 8003464:	2800      	cmp	r0, #0
 8003466:	d0b3      	beq.n	80033d0 <__svfiscanf_r+0x218>
 8003468:	e78c      	b.n	8003384 <__svfiscanf_r+0x1cc>
 800346a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800346c:	3201      	adds	r2, #1
 800346e:	9245      	str	r2, [sp, #276]	@ 0x114
 8003470:	6862      	ldr	r2, [r4, #4]
 8003472:	3a01      	subs	r2, #1
 8003474:	2a00      	cmp	r2, #0
 8003476:	6062      	str	r2, [r4, #4]
 8003478:	dd0a      	ble.n	8003490 <__svfiscanf_r+0x2d8>
 800347a:	3301      	adds	r3, #1
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	e7aa      	b.n	80033d6 <__svfiscanf_r+0x21e>
 8003480:	08003bbb 	.word	0x08003bbb
 8003484:	080039ed 	.word	0x080039ed
 8003488:	0800407f 	.word	0x0800407f
 800348c:	08004036 	.word	0x08004036
 8003490:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003492:	4621      	mov	r1, r4
 8003494:	4630      	mov	r0, r6
 8003496:	4798      	blx	r3
 8003498:	2800      	cmp	r0, #0
 800349a:	d09c      	beq.n	80033d6 <__svfiscanf_r+0x21e>
 800349c:	e772      	b.n	8003384 <__svfiscanf_r+0x1cc>
 800349e:	2b04      	cmp	r3, #4
 80034a0:	dc06      	bgt.n	80034b0 <__svfiscanf_r+0x2f8>
 80034a2:	466b      	mov	r3, sp
 80034a4:	4622      	mov	r2, r4
 80034a6:	a941      	add	r1, sp, #260	@ 0x104
 80034a8:	4630      	mov	r0, r6
 80034aa:	f000 f88f 	bl	80035cc <_scanf_i>
 80034ae:	e7a0      	b.n	80033f2 <__svfiscanf_r+0x23a>
 80034b0:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__svfiscanf_r+0x334>)
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f43f aeb1 	beq.w	800321a <__svfiscanf_r+0x62>
 80034b8:	466b      	mov	r3, sp
 80034ba:	4622      	mov	r2, r4
 80034bc:	a941      	add	r1, sp, #260	@ 0x104
 80034be:	4630      	mov	r0, r6
 80034c0:	f3af 8000 	nop.w
 80034c4:	e795      	b.n	80033f2 <__svfiscanf_r+0x23a>
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	0598      	lsls	r0, r3, #22
 80034ca:	f53f af5f 	bmi.w	800338c <__svfiscanf_r+0x1d4>
 80034ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034d0:	f7ff faa8 	bl	8002a24 <__retarget_lock_release_recursive>
 80034d4:	e75a      	b.n	800338c <__svfiscanf_r+0x1d4>
 80034d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034d8:	07da      	lsls	r2, r3, #31
 80034da:	d405      	bmi.n	80034e8 <__svfiscanf_r+0x330>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	059b      	lsls	r3, r3, #22
 80034e0:	d402      	bmi.n	80034e8 <__svfiscanf_r+0x330>
 80034e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034e4:	f7ff fa9e 	bl	8002a24 <__retarget_lock_release_recursive>
 80034e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80034ea:	e755      	b.n	8003398 <__svfiscanf_r+0x1e0>
 80034ec:	00000000 	.word	0x00000000

080034f0 <_vfiscanf_r>:
 80034f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f4:	460d      	mov	r5, r1
 80034f6:	4616      	mov	r6, r2
 80034f8:	461f      	mov	r7, r3
 80034fa:	4604      	mov	r4, r0
 80034fc:	b118      	cbz	r0, 8003506 <_vfiscanf_r+0x16>
 80034fe:	6a03      	ldr	r3, [r0, #32]
 8003500:	b90b      	cbnz	r3, 8003506 <_vfiscanf_r+0x16>
 8003502:	f7ff f885 	bl	8002610 <__sinit>
 8003506:	463b      	mov	r3, r7
 8003508:	4632      	mov	r2, r6
 800350a:	4629      	mov	r1, r5
 800350c:	4620      	mov	r0, r4
 800350e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003512:	f7ff be51 	b.w	80031b8 <__svfiscanf_r>
	...

08003518 <_scanf_chars>:
 8003518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800351c:	4615      	mov	r5, r2
 800351e:	688a      	ldr	r2, [r1, #8]
 8003520:	4680      	mov	r8, r0
 8003522:	460c      	mov	r4, r1
 8003524:	b932      	cbnz	r2, 8003534 <_scanf_chars+0x1c>
 8003526:	698a      	ldr	r2, [r1, #24]
 8003528:	2a00      	cmp	r2, #0
 800352a:	bf14      	ite	ne
 800352c:	f04f 32ff 	movne.w	r2, #4294967295
 8003530:	2201      	moveq	r2, #1
 8003532:	608a      	str	r2, [r1, #8]
 8003534:	6822      	ldr	r2, [r4, #0]
 8003536:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80035c8 <_scanf_chars+0xb0>
 800353a:	06d1      	lsls	r1, r2, #27
 800353c:	bf5f      	itttt	pl
 800353e:	681a      	ldrpl	r2, [r3, #0]
 8003540:	1d11      	addpl	r1, r2, #4
 8003542:	6019      	strpl	r1, [r3, #0]
 8003544:	6816      	ldrpl	r6, [r2, #0]
 8003546:	2700      	movs	r7, #0
 8003548:	69a0      	ldr	r0, [r4, #24]
 800354a:	b188      	cbz	r0, 8003570 <_scanf_chars+0x58>
 800354c:	2801      	cmp	r0, #1
 800354e:	d107      	bne.n	8003560 <_scanf_chars+0x48>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	6963      	ldr	r3, [r4, #20]
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	b953      	cbnz	r3, 8003570 <_scanf_chars+0x58>
 800355a:	2f00      	cmp	r7, #0
 800355c:	d031      	beq.n	80035c2 <_scanf_chars+0xaa>
 800355e:	e022      	b.n	80035a6 <_scanf_chars+0x8e>
 8003560:	2802      	cmp	r0, #2
 8003562:	d120      	bne.n	80035a6 <_scanf_chars+0x8e>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f819 3003 	ldrb.w	r3, [r9, r3]
 800356c:	071b      	lsls	r3, r3, #28
 800356e:	d41a      	bmi.n	80035a6 <_scanf_chars+0x8e>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	06da      	lsls	r2, r3, #27
 8003574:	bf5e      	ittt	pl
 8003576:	682b      	ldrpl	r3, [r5, #0]
 8003578:	781b      	ldrbpl	r3, [r3, #0]
 800357a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800357e:	682a      	ldr	r2, [r5, #0]
 8003580:	686b      	ldr	r3, [r5, #4]
 8003582:	3201      	adds	r2, #1
 8003584:	602a      	str	r2, [r5, #0]
 8003586:	68a2      	ldr	r2, [r4, #8]
 8003588:	3b01      	subs	r3, #1
 800358a:	3a01      	subs	r2, #1
 800358c:	606b      	str	r3, [r5, #4]
 800358e:	3701      	adds	r7, #1
 8003590:	60a2      	str	r2, [r4, #8]
 8003592:	b142      	cbz	r2, 80035a6 <_scanf_chars+0x8e>
 8003594:	2b00      	cmp	r3, #0
 8003596:	dcd7      	bgt.n	8003548 <_scanf_chars+0x30>
 8003598:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800359c:	4629      	mov	r1, r5
 800359e:	4640      	mov	r0, r8
 80035a0:	4798      	blx	r3
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d0d0      	beq.n	8003548 <_scanf_chars+0x30>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	f013 0310 	ands.w	r3, r3, #16
 80035ac:	d105      	bne.n	80035ba <_scanf_chars+0xa2>
 80035ae:	68e2      	ldr	r2, [r4, #12]
 80035b0:	3201      	adds	r2, #1
 80035b2:	60e2      	str	r2, [r4, #12]
 80035b4:	69a2      	ldr	r2, [r4, #24]
 80035b6:	b102      	cbz	r2, 80035ba <_scanf_chars+0xa2>
 80035b8:	7033      	strb	r3, [r6, #0]
 80035ba:	6923      	ldr	r3, [r4, #16]
 80035bc:	443b      	add	r3, r7
 80035be:	6123      	str	r3, [r4, #16]
 80035c0:	2000      	movs	r0, #0
 80035c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035c6:	bf00      	nop
 80035c8:	0800407f 	.word	0x0800407f

080035cc <_scanf_i>:
 80035cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d0:	4698      	mov	r8, r3
 80035d2:	4b74      	ldr	r3, [pc, #464]	@ (80037a4 <_scanf_i+0x1d8>)
 80035d4:	460c      	mov	r4, r1
 80035d6:	4682      	mov	sl, r0
 80035d8:	4616      	mov	r6, r2
 80035da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035de:	b087      	sub	sp, #28
 80035e0:	ab03      	add	r3, sp, #12
 80035e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035e6:	4b70      	ldr	r3, [pc, #448]	@ (80037a8 <_scanf_i+0x1dc>)
 80035e8:	69a1      	ldr	r1, [r4, #24]
 80035ea:	4a70      	ldr	r2, [pc, #448]	@ (80037ac <_scanf_i+0x1e0>)
 80035ec:	2903      	cmp	r1, #3
 80035ee:	bf08      	it	eq
 80035f0:	461a      	moveq	r2, r3
 80035f2:	68a3      	ldr	r3, [r4, #8]
 80035f4:	9201      	str	r2, [sp, #4]
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80035fc:	bf88      	it	hi
 80035fe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003602:	4627      	mov	r7, r4
 8003604:	bf82      	ittt	hi
 8003606:	eb03 0905 	addhi.w	r9, r3, r5
 800360a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800360e:	60a3      	strhi	r3, [r4, #8]
 8003610:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003614:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8003618:	bf98      	it	ls
 800361a:	f04f 0900 	movls.w	r9, #0
 800361e:	6023      	str	r3, [r4, #0]
 8003620:	463d      	mov	r5, r7
 8003622:	f04f 0b00 	mov.w	fp, #0
 8003626:	6831      	ldr	r1, [r6, #0]
 8003628:	ab03      	add	r3, sp, #12
 800362a:	7809      	ldrb	r1, [r1, #0]
 800362c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003630:	2202      	movs	r2, #2
 8003632:	f7fc fdd5 	bl	80001e0 <memchr>
 8003636:	b328      	cbz	r0, 8003684 <_scanf_i+0xb8>
 8003638:	f1bb 0f01 	cmp.w	fp, #1
 800363c:	d159      	bne.n	80036f2 <_scanf_i+0x126>
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	b92a      	cbnz	r2, 800364e <_scanf_i+0x82>
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	2108      	movs	r1, #8
 8003646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364a:	6061      	str	r1, [r4, #4]
 800364c:	6022      	str	r2, [r4, #0]
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8003654:	6022      	str	r2, [r4, #0]
 8003656:	68a2      	ldr	r2, [r4, #8]
 8003658:	1e51      	subs	r1, r2, #1
 800365a:	60a1      	str	r1, [r4, #8]
 800365c:	b192      	cbz	r2, 8003684 <_scanf_i+0xb8>
 800365e:	6832      	ldr	r2, [r6, #0]
 8003660:	1c51      	adds	r1, r2, #1
 8003662:	6031      	str	r1, [r6, #0]
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	f805 2b01 	strb.w	r2, [r5], #1
 800366a:	6872      	ldr	r2, [r6, #4]
 800366c:	3a01      	subs	r2, #1
 800366e:	2a00      	cmp	r2, #0
 8003670:	6072      	str	r2, [r6, #4]
 8003672:	dc07      	bgt.n	8003684 <_scanf_i+0xb8>
 8003674:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8003678:	4631      	mov	r1, r6
 800367a:	4650      	mov	r0, sl
 800367c:	4790      	blx	r2
 800367e:	2800      	cmp	r0, #0
 8003680:	f040 8085 	bne.w	800378e <_scanf_i+0x1c2>
 8003684:	f10b 0b01 	add.w	fp, fp, #1
 8003688:	f1bb 0f03 	cmp.w	fp, #3
 800368c:	d1cb      	bne.n	8003626 <_scanf_i+0x5a>
 800368e:	6863      	ldr	r3, [r4, #4]
 8003690:	b90b      	cbnz	r3, 8003696 <_scanf_i+0xca>
 8003692:	230a      	movs	r3, #10
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	6863      	ldr	r3, [r4, #4]
 8003698:	4945      	ldr	r1, [pc, #276]	@ (80037b0 <_scanf_i+0x1e4>)
 800369a:	6960      	ldr	r0, [r4, #20]
 800369c:	1ac9      	subs	r1, r1, r3
 800369e:	f000 fa19 	bl	8003ad4 <__sccl>
 80036a2:	f04f 0b00 	mov.w	fp, #0
 80036a6:	68a3      	ldr	r3, [r4, #8]
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d03d      	beq.n	800372a <_scanf_i+0x15e>
 80036ae:	6831      	ldr	r1, [r6, #0]
 80036b0:	6960      	ldr	r0, [r4, #20]
 80036b2:	f891 c000 	ldrb.w	ip, [r1]
 80036b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d035      	beq.n	800372a <_scanf_i+0x15e>
 80036be:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80036c2:	d124      	bne.n	800370e <_scanf_i+0x142>
 80036c4:	0510      	lsls	r0, r2, #20
 80036c6:	d522      	bpl.n	800370e <_scanf_i+0x142>
 80036c8:	f10b 0b01 	add.w	fp, fp, #1
 80036cc:	f1b9 0f00 	cmp.w	r9, #0
 80036d0:	d003      	beq.n	80036da <_scanf_i+0x10e>
 80036d2:	3301      	adds	r3, #1
 80036d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80036d8:	60a3      	str	r3, [r4, #8]
 80036da:	6873      	ldr	r3, [r6, #4]
 80036dc:	3b01      	subs	r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	6073      	str	r3, [r6, #4]
 80036e2:	dd1b      	ble.n	800371c <_scanf_i+0x150>
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	6033      	str	r3, [r6, #0]
 80036ea:	68a3      	ldr	r3, [r4, #8]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	60a3      	str	r3, [r4, #8]
 80036f0:	e7d9      	b.n	80036a6 <_scanf_i+0xda>
 80036f2:	f1bb 0f02 	cmp.w	fp, #2
 80036f6:	d1ae      	bne.n	8003656 <_scanf_i+0x8a>
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80036fe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003702:	d1bf      	bne.n	8003684 <_scanf_i+0xb8>
 8003704:	2110      	movs	r1, #16
 8003706:	6061      	str	r1, [r4, #4]
 8003708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800370c:	e7a2      	b.n	8003654 <_scanf_i+0x88>
 800370e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8003712:	6022      	str	r2, [r4, #0]
 8003714:	780b      	ldrb	r3, [r1, #0]
 8003716:	f805 3b01 	strb.w	r3, [r5], #1
 800371a:	e7de      	b.n	80036da <_scanf_i+0x10e>
 800371c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003720:	4631      	mov	r1, r6
 8003722:	4650      	mov	r0, sl
 8003724:	4798      	blx	r3
 8003726:	2800      	cmp	r0, #0
 8003728:	d0df      	beq.n	80036ea <_scanf_i+0x11e>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	05d9      	lsls	r1, r3, #23
 800372e:	d50d      	bpl.n	800374c <_scanf_i+0x180>
 8003730:	42bd      	cmp	r5, r7
 8003732:	d909      	bls.n	8003748 <_scanf_i+0x17c>
 8003734:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003738:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800373c:	4632      	mov	r2, r6
 800373e:	4650      	mov	r0, sl
 8003740:	4798      	blx	r3
 8003742:	f105 39ff 	add.w	r9, r5, #4294967295
 8003746:	464d      	mov	r5, r9
 8003748:	42bd      	cmp	r5, r7
 800374a:	d028      	beq.n	800379e <_scanf_i+0x1d2>
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	f012 0210 	ands.w	r2, r2, #16
 8003752:	d113      	bne.n	800377c <_scanf_i+0x1b0>
 8003754:	702a      	strb	r2, [r5, #0]
 8003756:	6863      	ldr	r3, [r4, #4]
 8003758:	9e01      	ldr	r6, [sp, #4]
 800375a:	4639      	mov	r1, r7
 800375c:	4650      	mov	r0, sl
 800375e:	47b0      	blx	r6
 8003760:	f8d8 3000 	ldr.w	r3, [r8]
 8003764:	6821      	ldr	r1, [r4, #0]
 8003766:	1d1a      	adds	r2, r3, #4
 8003768:	f8c8 2000 	str.w	r2, [r8]
 800376c:	f011 0f20 	tst.w	r1, #32
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	d00f      	beq.n	8003794 <_scanf_i+0x1c8>
 8003774:	6018      	str	r0, [r3, #0]
 8003776:	68e3      	ldr	r3, [r4, #12]
 8003778:	3301      	adds	r3, #1
 800377a:	60e3      	str	r3, [r4, #12]
 800377c:	6923      	ldr	r3, [r4, #16]
 800377e:	1bed      	subs	r5, r5, r7
 8003780:	445d      	add	r5, fp
 8003782:	442b      	add	r3, r5
 8003784:	6123      	str	r3, [r4, #16]
 8003786:	2000      	movs	r0, #0
 8003788:	b007      	add	sp, #28
 800378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800378e:	f04f 0b00 	mov.w	fp, #0
 8003792:	e7ca      	b.n	800372a <_scanf_i+0x15e>
 8003794:	07ca      	lsls	r2, r1, #31
 8003796:	bf4c      	ite	mi
 8003798:	8018      	strhmi	r0, [r3, #0]
 800379a:	6018      	strpl	r0, [r3, #0]
 800379c:	e7eb      	b.n	8003776 <_scanf_i+0x1aa>
 800379e:	2001      	movs	r0, #1
 80037a0:	e7f2      	b.n	8003788 <_scanf_i+0x1bc>
 80037a2:	bf00      	nop
 80037a4:	0800400c 	.word	0x0800400c
 80037a8:	08003e89 	.word	0x08003e89
 80037ac:	08003f69 	.word	0x08003f69
 80037b0:	08004073 	.word	0x08004073

080037b4 <__sflush_r>:
 80037b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037bc:	0716      	lsls	r6, r2, #28
 80037be:	4605      	mov	r5, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	d454      	bmi.n	800386e <__sflush_r+0xba>
 80037c4:	684b      	ldr	r3, [r1, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	dc02      	bgt.n	80037d0 <__sflush_r+0x1c>
 80037ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	dd48      	ble.n	8003862 <__sflush_r+0xae>
 80037d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037d2:	2e00      	cmp	r6, #0
 80037d4:	d045      	beq.n	8003862 <__sflush_r+0xae>
 80037d6:	2300      	movs	r3, #0
 80037d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037dc:	682f      	ldr	r7, [r5, #0]
 80037de:	6a21      	ldr	r1, [r4, #32]
 80037e0:	602b      	str	r3, [r5, #0]
 80037e2:	d030      	beq.n	8003846 <__sflush_r+0x92>
 80037e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	0759      	lsls	r1, r3, #29
 80037ea:	d505      	bpl.n	80037f8 <__sflush_r+0x44>
 80037ec:	6863      	ldr	r3, [r4, #4]
 80037ee:	1ad2      	subs	r2, r2, r3
 80037f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037f2:	b10b      	cbz	r3, 80037f8 <__sflush_r+0x44>
 80037f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	2300      	movs	r3, #0
 80037fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037fc:	6a21      	ldr	r1, [r4, #32]
 80037fe:	4628      	mov	r0, r5
 8003800:	47b0      	blx	r6
 8003802:	1c43      	adds	r3, r0, #1
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	d106      	bne.n	8003816 <__sflush_r+0x62>
 8003808:	6829      	ldr	r1, [r5, #0]
 800380a:	291d      	cmp	r1, #29
 800380c:	d82b      	bhi.n	8003866 <__sflush_r+0xb2>
 800380e:	4a2a      	ldr	r2, [pc, #168]	@ (80038b8 <__sflush_r+0x104>)
 8003810:	410a      	asrs	r2, r1
 8003812:	07d6      	lsls	r6, r2, #31
 8003814:	d427      	bmi.n	8003866 <__sflush_r+0xb2>
 8003816:	2200      	movs	r2, #0
 8003818:	6062      	str	r2, [r4, #4]
 800381a:	04d9      	lsls	r1, r3, #19
 800381c:	6922      	ldr	r2, [r4, #16]
 800381e:	6022      	str	r2, [r4, #0]
 8003820:	d504      	bpl.n	800382c <__sflush_r+0x78>
 8003822:	1c42      	adds	r2, r0, #1
 8003824:	d101      	bne.n	800382a <__sflush_r+0x76>
 8003826:	682b      	ldr	r3, [r5, #0]
 8003828:	b903      	cbnz	r3, 800382c <__sflush_r+0x78>
 800382a:	6560      	str	r0, [r4, #84]	@ 0x54
 800382c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800382e:	602f      	str	r7, [r5, #0]
 8003830:	b1b9      	cbz	r1, 8003862 <__sflush_r+0xae>
 8003832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003836:	4299      	cmp	r1, r3
 8003838:	d002      	beq.n	8003840 <__sflush_r+0x8c>
 800383a:	4628      	mov	r0, r5
 800383c:	f7ff f8f4 	bl	8002a28 <_free_r>
 8003840:	2300      	movs	r3, #0
 8003842:	6363      	str	r3, [r4, #52]	@ 0x34
 8003844:	e00d      	b.n	8003862 <__sflush_r+0xae>
 8003846:	2301      	movs	r3, #1
 8003848:	4628      	mov	r0, r5
 800384a:	47b0      	blx	r6
 800384c:	4602      	mov	r2, r0
 800384e:	1c50      	adds	r0, r2, #1
 8003850:	d1c9      	bne.n	80037e6 <__sflush_r+0x32>
 8003852:	682b      	ldr	r3, [r5, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0c6      	beq.n	80037e6 <__sflush_r+0x32>
 8003858:	2b1d      	cmp	r3, #29
 800385a:	d001      	beq.n	8003860 <__sflush_r+0xac>
 800385c:	2b16      	cmp	r3, #22
 800385e:	d11e      	bne.n	800389e <__sflush_r+0xea>
 8003860:	602f      	str	r7, [r5, #0]
 8003862:	2000      	movs	r0, #0
 8003864:	e022      	b.n	80038ac <__sflush_r+0xf8>
 8003866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800386a:	b21b      	sxth	r3, r3
 800386c:	e01b      	b.n	80038a6 <__sflush_r+0xf2>
 800386e:	690f      	ldr	r7, [r1, #16]
 8003870:	2f00      	cmp	r7, #0
 8003872:	d0f6      	beq.n	8003862 <__sflush_r+0xae>
 8003874:	0793      	lsls	r3, r2, #30
 8003876:	680e      	ldr	r6, [r1, #0]
 8003878:	bf08      	it	eq
 800387a:	694b      	ldreq	r3, [r1, #20]
 800387c:	600f      	str	r7, [r1, #0]
 800387e:	bf18      	it	ne
 8003880:	2300      	movne	r3, #0
 8003882:	eba6 0807 	sub.w	r8, r6, r7
 8003886:	608b      	str	r3, [r1, #8]
 8003888:	f1b8 0f00 	cmp.w	r8, #0
 800388c:	dde9      	ble.n	8003862 <__sflush_r+0xae>
 800388e:	6a21      	ldr	r1, [r4, #32]
 8003890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003892:	4643      	mov	r3, r8
 8003894:	463a      	mov	r2, r7
 8003896:	4628      	mov	r0, r5
 8003898:	47b0      	blx	r6
 800389a:	2800      	cmp	r0, #0
 800389c:	dc08      	bgt.n	80038b0 <__sflush_r+0xfc>
 800389e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b0:	4407      	add	r7, r0
 80038b2:	eba8 0800 	sub.w	r8, r8, r0
 80038b6:	e7e7      	b.n	8003888 <__sflush_r+0xd4>
 80038b8:	dfbffffe 	.word	0xdfbffffe

080038bc <_fflush_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	690b      	ldr	r3, [r1, #16]
 80038c0:	4605      	mov	r5, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	b913      	cbnz	r3, 80038cc <_fflush_r+0x10>
 80038c6:	2500      	movs	r5, #0
 80038c8:	4628      	mov	r0, r5
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	b118      	cbz	r0, 80038d6 <_fflush_r+0x1a>
 80038ce:	6a03      	ldr	r3, [r0, #32]
 80038d0:	b90b      	cbnz	r3, 80038d6 <_fflush_r+0x1a>
 80038d2:	f7fe fe9d 	bl	8002610 <__sinit>
 80038d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f3      	beq.n	80038c6 <_fflush_r+0xa>
 80038de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038e0:	07d0      	lsls	r0, r2, #31
 80038e2:	d404      	bmi.n	80038ee <_fflush_r+0x32>
 80038e4:	0599      	lsls	r1, r3, #22
 80038e6:	d402      	bmi.n	80038ee <_fflush_r+0x32>
 80038e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038ea:	f7ff f89a 	bl	8002a22 <__retarget_lock_acquire_recursive>
 80038ee:	4628      	mov	r0, r5
 80038f0:	4621      	mov	r1, r4
 80038f2:	f7ff ff5f 	bl	80037b4 <__sflush_r>
 80038f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038f8:	07da      	lsls	r2, r3, #31
 80038fa:	4605      	mov	r5, r0
 80038fc:	d4e4      	bmi.n	80038c8 <_fflush_r+0xc>
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	059b      	lsls	r3, r3, #22
 8003902:	d4e1      	bmi.n	80038c8 <_fflush_r+0xc>
 8003904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003906:	f7ff f88d 	bl	8002a24 <__retarget_lock_release_recursive>
 800390a:	e7dd      	b.n	80038c8 <_fflush_r+0xc>

0800390c <__swhatbuf_r>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	460c      	mov	r4, r1
 8003910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003914:	2900      	cmp	r1, #0
 8003916:	b096      	sub	sp, #88	@ 0x58
 8003918:	4615      	mov	r5, r2
 800391a:	461e      	mov	r6, r3
 800391c:	da0d      	bge.n	800393a <__swhatbuf_r+0x2e>
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	bf14      	ite	ne
 800392a:	2340      	movne	r3, #64	@ 0x40
 800392c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003930:	2000      	movs	r0, #0
 8003932:	6031      	str	r1, [r6, #0]
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	b016      	add	sp, #88	@ 0x58
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	466a      	mov	r2, sp
 800393c:	f000 f9bc 	bl	8003cb8 <_fstat_r>
 8003940:	2800      	cmp	r0, #0
 8003942:	dbec      	blt.n	800391e <__swhatbuf_r+0x12>
 8003944:	9901      	ldr	r1, [sp, #4]
 8003946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800394a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800394e:	4259      	negs	r1, r3
 8003950:	4159      	adcs	r1, r3
 8003952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003956:	e7eb      	b.n	8003930 <__swhatbuf_r+0x24>

08003958 <__smakebuf_r>:
 8003958:	898b      	ldrh	r3, [r1, #12]
 800395a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800395c:	079d      	lsls	r5, r3, #30
 800395e:	4606      	mov	r6, r0
 8003960:	460c      	mov	r4, r1
 8003962:	d507      	bpl.n	8003974 <__smakebuf_r+0x1c>
 8003964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	6123      	str	r3, [r4, #16]
 800396c:	2301      	movs	r3, #1
 800396e:	6163      	str	r3, [r4, #20]
 8003970:	b003      	add	sp, #12
 8003972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003974:	ab01      	add	r3, sp, #4
 8003976:	466a      	mov	r2, sp
 8003978:	f7ff ffc8 	bl	800390c <__swhatbuf_r>
 800397c:	9f00      	ldr	r7, [sp, #0]
 800397e:	4605      	mov	r5, r0
 8003980:	4639      	mov	r1, r7
 8003982:	4630      	mov	r0, r6
 8003984:	f7ff f8bc 	bl	8002b00 <_malloc_r>
 8003988:	b948      	cbnz	r0, 800399e <__smakebuf_r+0x46>
 800398a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800398e:	059a      	lsls	r2, r3, #22
 8003990:	d4ee      	bmi.n	8003970 <__smakebuf_r+0x18>
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	f043 0302 	orr.w	r3, r3, #2
 800399a:	81a3      	strh	r3, [r4, #12]
 800399c:	e7e2      	b.n	8003964 <__smakebuf_r+0xc>
 800399e:	89a3      	ldrh	r3, [r4, #12]
 80039a0:	6020      	str	r0, [r4, #0]
 80039a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a6:	81a3      	strh	r3, [r4, #12]
 80039a8:	9b01      	ldr	r3, [sp, #4]
 80039aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80039ae:	b15b      	cbz	r3, 80039c8 <__smakebuf_r+0x70>
 80039b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039b4:	4630      	mov	r0, r6
 80039b6:	f000 f991 	bl	8003cdc <_isatty_r>
 80039ba:	b128      	cbz	r0, 80039c8 <__smakebuf_r+0x70>
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	81a3      	strh	r3, [r4, #12]
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	431d      	orrs	r5, r3
 80039cc:	81a5      	strh	r5, [r4, #12]
 80039ce:	e7cf      	b.n	8003970 <__smakebuf_r+0x18>

080039d0 <lflush>:
 80039d0:	898b      	ldrh	r3, [r1, #12]
 80039d2:	f003 0309 	and.w	r3, r3, #9
 80039d6:	2b09      	cmp	r3, #9
 80039d8:	d103      	bne.n	80039e2 <lflush+0x12>
 80039da:	4b03      	ldr	r3, [pc, #12]	@ (80039e8 <lflush+0x18>)
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	f7ff bf6d 	b.w	80038bc <_fflush_r>
 80039e2:	2000      	movs	r0, #0
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000018 	.word	0x20000018

080039ec <__srefill_r>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	460c      	mov	r4, r1
 80039f0:	4605      	mov	r5, r0
 80039f2:	b118      	cbz	r0, 80039fc <__srefill_r+0x10>
 80039f4:	6a03      	ldr	r3, [r0, #32]
 80039f6:	b90b      	cbnz	r3, 80039fc <__srefill_r+0x10>
 80039f8:	f7fe fe0a 	bl	8002610 <__sinit>
 80039fc:	2300      	movs	r3, #0
 80039fe:	6063      	str	r3, [r4, #4]
 8003a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a04:	069e      	lsls	r6, r3, #26
 8003a06:	d408      	bmi.n	8003a1a <__srefill_r+0x2e>
 8003a08:	0758      	lsls	r0, r3, #29
 8003a0a:	d445      	bmi.n	8003a98 <__srefill_r+0xac>
 8003a0c:	06d9      	lsls	r1, r3, #27
 8003a0e:	d407      	bmi.n	8003a20 <__srefill_r+0x34>
 8003a10:	2209      	movs	r2, #9
 8003a12:	602a      	str	r2, [r5, #0]
 8003a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a18:	81a3      	strh	r3, [r4, #12]
 8003a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	071a      	lsls	r2, r3, #28
 8003a22:	d50b      	bpl.n	8003a3c <__srefill_r+0x50>
 8003a24:	4621      	mov	r1, r4
 8003a26:	4628      	mov	r0, r5
 8003a28:	f7ff ff48 	bl	80038bc <_fflush_r>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d1f4      	bne.n	8003a1a <__srefill_r+0x2e>
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	60a0      	str	r0, [r4, #8]
 8003a34:	f023 0308 	bic.w	r3, r3, #8
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	61a0      	str	r0, [r4, #24]
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	6923      	ldr	r3, [r4, #16]
 8003a46:	b91b      	cbnz	r3, 8003a50 <__srefill_r+0x64>
 8003a48:	4621      	mov	r1, r4
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f7ff ff84 	bl	8003958 <__smakebuf_r>
 8003a50:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8003a54:	07b3      	lsls	r3, r6, #30
 8003a56:	d00f      	beq.n	8003a78 <__srefill_r+0x8c>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac8 <__srefill_r+0xdc>)
 8003a5c:	491b      	ldr	r1, [pc, #108]	@ (8003acc <__srefill_r+0xe0>)
 8003a5e:	481c      	ldr	r0, [pc, #112]	@ (8003ad0 <__srefill_r+0xe4>)
 8003a60:	81a3      	strh	r3, [r4, #12]
 8003a62:	f7fe fded 	bl	8002640 <_fwalk_sglue>
 8003a66:	81a6      	strh	r6, [r4, #12]
 8003a68:	f006 0609 	and.w	r6, r6, #9
 8003a6c:	2e09      	cmp	r6, #9
 8003a6e:	d103      	bne.n	8003a78 <__srefill_r+0x8c>
 8003a70:	4621      	mov	r1, r4
 8003a72:	4628      	mov	r0, r5
 8003a74:	f7ff fe9e 	bl	80037b4 <__sflush_r>
 8003a78:	6922      	ldr	r2, [r4, #16]
 8003a7a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8003a7c:	6963      	ldr	r3, [r4, #20]
 8003a7e:	6a21      	ldr	r1, [r4, #32]
 8003a80:	6022      	str	r2, [r4, #0]
 8003a82:	4628      	mov	r0, r5
 8003a84:	47b0      	blx	r6
 8003a86:	2800      	cmp	r0, #0
 8003a88:	6060      	str	r0, [r4, #4]
 8003a8a:	dc17      	bgt.n	8003abc <__srefill_r+0xd0>
 8003a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a90:	d116      	bne.n	8003ac0 <__srefill_r+0xd4>
 8003a92:	f043 0320 	orr.w	r3, r3, #32
 8003a96:	e7bf      	b.n	8003a18 <__srefill_r+0x2c>
 8003a98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a9a:	2900      	cmp	r1, #0
 8003a9c:	d0d2      	beq.n	8003a44 <__srefill_r+0x58>
 8003a9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003aa2:	4299      	cmp	r1, r3
 8003aa4:	d002      	beq.n	8003aac <__srefill_r+0xc0>
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f7fe ffbe 	bl	8002a28 <_free_r>
 8003aac:	2300      	movs	r3, #0
 8003aae:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ab2:	6063      	str	r3, [r4, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0c5      	beq.n	8003a44 <__srefill_r+0x58>
 8003ab8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	2000      	movs	r0, #0
 8003abe:	e7ae      	b.n	8003a1e <__srefill_r+0x32>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	6062      	str	r2, [r4, #4]
 8003ac4:	e7a6      	b.n	8003a14 <__srefill_r+0x28>
 8003ac6:	bf00      	nop
 8003ac8:	2000000c 	.word	0x2000000c
 8003acc:	080039d1 	.word	0x080039d1
 8003ad0:	2000001c 	.word	0x2000001c

08003ad4 <__sccl>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	780b      	ldrb	r3, [r1, #0]
 8003ad8:	4604      	mov	r4, r0
 8003ada:	2b5e      	cmp	r3, #94	@ 0x5e
 8003adc:	bf0b      	itete	eq
 8003ade:	784b      	ldrbeq	r3, [r1, #1]
 8003ae0:	1c4a      	addne	r2, r1, #1
 8003ae2:	1c8a      	addeq	r2, r1, #2
 8003ae4:	2100      	movne	r1, #0
 8003ae6:	bf08      	it	eq
 8003ae8:	2101      	moveq	r1, #1
 8003aea:	3801      	subs	r0, #1
 8003aec:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003af0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003af4:	42a8      	cmp	r0, r5
 8003af6:	d1fb      	bne.n	8003af0 <__sccl+0x1c>
 8003af8:	b90b      	cbnz	r3, 8003afe <__sccl+0x2a>
 8003afa:	1e50      	subs	r0, r2, #1
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
 8003afe:	f081 0101 	eor.w	r1, r1, #1
 8003b02:	54e1      	strb	r1, [r4, r3]
 8003b04:	4610      	mov	r0, r2
 8003b06:	4602      	mov	r2, r0
 8003b08:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003b0c:	2d2d      	cmp	r5, #45	@ 0x2d
 8003b0e:	d005      	beq.n	8003b1c <__sccl+0x48>
 8003b10:	2d5d      	cmp	r5, #93	@ 0x5d
 8003b12:	d016      	beq.n	8003b42 <__sccl+0x6e>
 8003b14:	2d00      	cmp	r5, #0
 8003b16:	d0f1      	beq.n	8003afc <__sccl+0x28>
 8003b18:	462b      	mov	r3, r5
 8003b1a:	e7f2      	b.n	8003b02 <__sccl+0x2e>
 8003b1c:	7846      	ldrb	r6, [r0, #1]
 8003b1e:	2e5d      	cmp	r6, #93	@ 0x5d
 8003b20:	d0fa      	beq.n	8003b18 <__sccl+0x44>
 8003b22:	42b3      	cmp	r3, r6
 8003b24:	dcf8      	bgt.n	8003b18 <__sccl+0x44>
 8003b26:	3002      	adds	r0, #2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	3201      	adds	r2, #1
 8003b2c:	4296      	cmp	r6, r2
 8003b2e:	54a1      	strb	r1, [r4, r2]
 8003b30:	dcfb      	bgt.n	8003b2a <__sccl+0x56>
 8003b32:	1af2      	subs	r2, r6, r3
 8003b34:	3a01      	subs	r2, #1
 8003b36:	1c5d      	adds	r5, r3, #1
 8003b38:	42b3      	cmp	r3, r6
 8003b3a:	bfa8      	it	ge
 8003b3c:	2200      	movge	r2, #0
 8003b3e:	18ab      	adds	r3, r5, r2
 8003b40:	e7e1      	b.n	8003b06 <__sccl+0x32>
 8003b42:	4610      	mov	r0, r2
 8003b44:	e7da      	b.n	8003afc <__sccl+0x28>

08003b46 <__submore>:
 8003b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003b4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b52:	4299      	cmp	r1, r3
 8003b54:	d11d      	bne.n	8003b92 <__submore+0x4c>
 8003b56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b5a:	f7fe ffd1 	bl	8002b00 <_malloc_r>
 8003b5e:	b918      	cbnz	r0, 8003b68 <__submore+0x22>
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b6c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003b6e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8003b72:	6360      	str	r0, [r4, #52]	@ 0x34
 8003b74:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8003b78:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003b7c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8003b80:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003b84:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8003b88:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8003b8c:	6020      	str	r0, [r4, #0]
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e7e8      	b.n	8003b64 <__submore+0x1e>
 8003b92:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003b94:	0077      	lsls	r7, r6, #1
 8003b96:	463a      	mov	r2, r7
 8003b98:	f000 f8ce 	bl	8003d38 <_realloc_r>
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d0de      	beq.n	8003b60 <__submore+0x1a>
 8003ba2:	eb00 0806 	add.w	r8, r0, r6
 8003ba6:	4601      	mov	r1, r0
 8003ba8:	4632      	mov	r2, r6
 8003baa:	4640      	mov	r0, r8
 8003bac:	f000 f8b6 	bl	8003d1c <memcpy>
 8003bb0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003bb4:	f8c4 8000 	str.w	r8, [r4]
 8003bb8:	e7e9      	b.n	8003b8e <__submore+0x48>

08003bba <_ungetc_r>:
 8003bba:	b570      	push	{r4, r5, r6, lr}
 8003bbc:	460d      	mov	r5, r1
 8003bbe:	1c69      	adds	r1, r5, #1
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	4614      	mov	r4, r2
 8003bc4:	d01e      	beq.n	8003c04 <_ungetc_r+0x4a>
 8003bc6:	b118      	cbz	r0, 8003bd0 <_ungetc_r+0x16>
 8003bc8:	6a03      	ldr	r3, [r0, #32]
 8003bca:	b90b      	cbnz	r3, 8003bd0 <_ungetc_r+0x16>
 8003bcc:	f7fe fd20 	bl	8002610 <__sinit>
 8003bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bd2:	07da      	lsls	r2, r3, #31
 8003bd4:	d405      	bmi.n	8003be2 <_ungetc_r+0x28>
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	059b      	lsls	r3, r3, #22
 8003bda:	d402      	bmi.n	8003be2 <_ungetc_r+0x28>
 8003bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bde:	f7fe ff20 	bl	8002a22 <__retarget_lock_acquire_recursive>
 8003be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be6:	f023 0220 	bic.w	r2, r3, #32
 8003bea:	0758      	lsls	r0, r3, #29
 8003bec:	81a2      	strh	r2, [r4, #12]
 8003bee:	d422      	bmi.n	8003c36 <_ungetc_r+0x7c>
 8003bf0:	06d9      	lsls	r1, r3, #27
 8003bf2:	d40a      	bmi.n	8003c0a <_ungetc_r+0x50>
 8003bf4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003bf6:	07d2      	lsls	r2, r2, #31
 8003bf8:	d404      	bmi.n	8003c04 <_ungetc_r+0x4a>
 8003bfa:	0599      	lsls	r1, r3, #22
 8003bfc:	d402      	bmi.n	8003c04 <_ungetc_r+0x4a>
 8003bfe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c00:	f7fe ff10 	bl	8002a24 <__retarget_lock_release_recursive>
 8003c04:	f04f 35ff 	mov.w	r5, #4294967295
 8003c08:	e046      	b.n	8003c98 <_ungetc_r+0xde>
 8003c0a:	071b      	lsls	r3, r3, #28
 8003c0c:	d50f      	bpl.n	8003c2e <_ungetc_r+0x74>
 8003c0e:	4621      	mov	r1, r4
 8003c10:	4630      	mov	r0, r6
 8003c12:	f7ff fe53 	bl	80038bc <_fflush_r>
 8003c16:	b120      	cbz	r0, 8003c22 <_ungetc_r+0x68>
 8003c18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c1a:	07d8      	lsls	r0, r3, #31
 8003c1c:	d4f2      	bmi.n	8003c04 <_ungetc_r+0x4a>
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	e7eb      	b.n	8003bfa <_ungetc_r+0x40>
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	60a0      	str	r0, [r4, #8]
 8003c26:	f023 0308 	bic.w	r3, r3, #8
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	61a0      	str	r0, [r4, #24]
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	f043 0304 	orr.w	r3, r3, #4
 8003c34:	81a3      	strh	r3, [r4, #12]
 8003c36:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c38:	6862      	ldr	r2, [r4, #4]
 8003c3a:	b2ed      	uxtb	r5, r5
 8003c3c:	b1d3      	cbz	r3, 8003c74 <_ungetc_r+0xba>
 8003c3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003c40:	4293      	cmp	r3, r2
 8003c42:	dc05      	bgt.n	8003c50 <_ungetc_r+0x96>
 8003c44:	4621      	mov	r1, r4
 8003c46:	4630      	mov	r0, r6
 8003c48:	f7ff ff7d 	bl	8003b46 <__submore>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d1e3      	bne.n	8003c18 <_ungetc_r+0x5e>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	6022      	str	r2, [r4, #0]
 8003c56:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003c5a:	6863      	ldr	r3, [r4, #4]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	6063      	str	r3, [r4, #4]
 8003c60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c62:	07da      	lsls	r2, r3, #31
 8003c64:	d418      	bmi.n	8003c98 <_ungetc_r+0xde>
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	059b      	lsls	r3, r3, #22
 8003c6a:	d415      	bmi.n	8003c98 <_ungetc_r+0xde>
 8003c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c6e:	f7fe fed9 	bl	8002a24 <__retarget_lock_release_recursive>
 8003c72:	e011      	b.n	8003c98 <_ungetc_r+0xde>
 8003c74:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003c76:	6920      	ldr	r0, [r4, #16]
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	f001 0101 	and.w	r1, r1, #1
 8003c7e:	b168      	cbz	r0, 8003c9c <_ungetc_r+0xe2>
 8003c80:	4298      	cmp	r0, r3
 8003c82:	d20b      	bcs.n	8003c9c <_ungetc_r+0xe2>
 8003c84:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8003c88:	42a8      	cmp	r0, r5
 8003c8a:	d107      	bne.n	8003c9c <_ungetc_r+0xe2>
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	3201      	adds	r2, #1
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	6062      	str	r2, [r4, #4]
 8003c94:	2900      	cmp	r1, #0
 8003c96:	d0e6      	beq.n	8003c66 <_ungetc_r+0xac>
 8003c98:	4628      	mov	r0, r5
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8003ca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003caa:	4623      	mov	r3, r4
 8003cac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	6063      	str	r3, [r4, #4]
 8003cb6:	e7ed      	b.n	8003c94 <_ungetc_r+0xda>

08003cb8 <_fstat_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4d07      	ldr	r5, [pc, #28]	@ (8003cd8 <_fstat_r+0x20>)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	602b      	str	r3, [r5, #0]
 8003cc6:	f7fc fec1 	bl	8000a4c <_fstat>
 8003cca:	1c43      	adds	r3, r0, #1
 8003ccc:	d102      	bne.n	8003cd4 <_fstat_r+0x1c>
 8003cce:	682b      	ldr	r3, [r5, #0]
 8003cd0:	b103      	cbz	r3, 8003cd4 <_fstat_r+0x1c>
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000274 	.word	0x20000274

08003cdc <_isatty_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4d06      	ldr	r5, [pc, #24]	@ (8003cf8 <_isatty_r+0x1c>)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	f7fc fec0 	bl	8000a6c <_isatty>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_isatty_r+0x1a>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_isatty_r+0x1a>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	20000274 	.word	0x20000274

08003cfc <_sbrk_r>:
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	4d06      	ldr	r5, [pc, #24]	@ (8003d18 <_sbrk_r+0x1c>)
 8003d00:	2300      	movs	r3, #0
 8003d02:	4604      	mov	r4, r0
 8003d04:	4608      	mov	r0, r1
 8003d06:	602b      	str	r3, [r5, #0]
 8003d08:	f7fc fec8 	bl	8000a9c <_sbrk>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d102      	bne.n	8003d16 <_sbrk_r+0x1a>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	b103      	cbz	r3, 8003d16 <_sbrk_r+0x1a>
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	20000274 	.word	0x20000274

08003d1c <memcpy>:
 8003d1c:	440a      	add	r2, r1
 8003d1e:	4291      	cmp	r1, r2
 8003d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d24:	d100      	bne.n	8003d28 <memcpy+0xc>
 8003d26:	4770      	bx	lr
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d32:	4291      	cmp	r1, r2
 8003d34:	d1f9      	bne.n	8003d2a <memcpy+0xe>
 8003d36:	bd10      	pop	{r4, pc}

08003d38 <_realloc_r>:
 8003d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	4615      	mov	r5, r2
 8003d40:	460c      	mov	r4, r1
 8003d42:	b921      	cbnz	r1, 8003d4e <_realloc_r+0x16>
 8003d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d48:	4611      	mov	r1, r2
 8003d4a:	f7fe bed9 	b.w	8002b00 <_malloc_r>
 8003d4e:	b92a      	cbnz	r2, 8003d5c <_realloc_r+0x24>
 8003d50:	f7fe fe6a 	bl	8002a28 <_free_r>
 8003d54:	2400      	movs	r4, #0
 8003d56:	4620      	mov	r0, r4
 8003d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d5c:	f000 f906 	bl	8003f6c <_malloc_usable_size_r>
 8003d60:	4285      	cmp	r5, r0
 8003d62:	4606      	mov	r6, r0
 8003d64:	d802      	bhi.n	8003d6c <_realloc_r+0x34>
 8003d66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d6a:	d8f4      	bhi.n	8003d56 <_realloc_r+0x1e>
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f7fe fec6 	bl	8002b00 <_malloc_r>
 8003d74:	4607      	mov	r7, r0
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d0ec      	beq.n	8003d54 <_realloc_r+0x1c>
 8003d7a:	42b5      	cmp	r5, r6
 8003d7c:	462a      	mov	r2, r5
 8003d7e:	4621      	mov	r1, r4
 8003d80:	bf28      	it	cs
 8003d82:	4632      	movcs	r2, r6
 8003d84:	f7ff ffca 	bl	8003d1c <memcpy>
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f7fe fe4c 	bl	8002a28 <_free_r>
 8003d90:	463c      	mov	r4, r7
 8003d92:	e7e0      	b.n	8003d56 <_realloc_r+0x1e>

08003d94 <_strtol_l.constprop.0>:
 8003d94:	2b24      	cmp	r3, #36	@ 0x24
 8003d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d9a:	4686      	mov	lr, r0
 8003d9c:	4690      	mov	r8, r2
 8003d9e:	d801      	bhi.n	8003da4 <_strtol_l.constprop.0+0x10>
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <_strtol_l.constprop.0+0x1e>
 8003da4:	f7fe fe12 	bl	80029cc <__errno>
 8003da8:	2316      	movs	r3, #22
 8003daa:	6003      	str	r3, [r0, #0]
 8003dac:	2000      	movs	r0, #0
 8003dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db2:	4834      	ldr	r0, [pc, #208]	@ (8003e84 <_strtol_l.constprop.0+0xf0>)
 8003db4:	460d      	mov	r5, r1
 8003db6:	462a      	mov	r2, r5
 8003db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003dbc:	5d06      	ldrb	r6, [r0, r4]
 8003dbe:	f016 0608 	ands.w	r6, r6, #8
 8003dc2:	d1f8      	bne.n	8003db6 <_strtol_l.constprop.0+0x22>
 8003dc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8003dc6:	d12d      	bne.n	8003e24 <_strtol_l.constprop.0+0x90>
 8003dc8:	782c      	ldrb	r4, [r5, #0]
 8003dca:	2601      	movs	r6, #1
 8003dcc:	1c95      	adds	r5, r2, #2
 8003dce:	f033 0210 	bics.w	r2, r3, #16
 8003dd2:	d109      	bne.n	8003de8 <_strtol_l.constprop.0+0x54>
 8003dd4:	2c30      	cmp	r4, #48	@ 0x30
 8003dd6:	d12a      	bne.n	8003e2e <_strtol_l.constprop.0+0x9a>
 8003dd8:	782a      	ldrb	r2, [r5, #0]
 8003dda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003dde:	2a58      	cmp	r2, #88	@ 0x58
 8003de0:	d125      	bne.n	8003e2e <_strtol_l.constprop.0+0x9a>
 8003de2:	786c      	ldrb	r4, [r5, #1]
 8003de4:	2310      	movs	r3, #16
 8003de6:	3502      	adds	r5, #2
 8003de8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003dec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003df0:	2200      	movs	r2, #0
 8003df2:	fbbc f9f3 	udiv	r9, ip, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	fb03 ca19 	mls	sl, r3, r9, ip
 8003dfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003e00:	2f09      	cmp	r7, #9
 8003e02:	d81b      	bhi.n	8003e3c <_strtol_l.constprop.0+0xa8>
 8003e04:	463c      	mov	r4, r7
 8003e06:	42a3      	cmp	r3, r4
 8003e08:	dd27      	ble.n	8003e5a <_strtol_l.constprop.0+0xc6>
 8003e0a:	1c57      	adds	r7, r2, #1
 8003e0c:	d007      	beq.n	8003e1e <_strtol_l.constprop.0+0x8a>
 8003e0e:	4581      	cmp	r9, r0
 8003e10:	d320      	bcc.n	8003e54 <_strtol_l.constprop.0+0xc0>
 8003e12:	d101      	bne.n	8003e18 <_strtol_l.constprop.0+0x84>
 8003e14:	45a2      	cmp	sl, r4
 8003e16:	db1d      	blt.n	8003e54 <_strtol_l.constprop.0+0xc0>
 8003e18:	fb00 4003 	mla	r0, r0, r3, r4
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e22:	e7eb      	b.n	8003dfc <_strtol_l.constprop.0+0x68>
 8003e24:	2c2b      	cmp	r4, #43	@ 0x2b
 8003e26:	bf04      	itt	eq
 8003e28:	782c      	ldrbeq	r4, [r5, #0]
 8003e2a:	1c95      	addeq	r5, r2, #2
 8003e2c:	e7cf      	b.n	8003dce <_strtol_l.constprop.0+0x3a>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1da      	bne.n	8003de8 <_strtol_l.constprop.0+0x54>
 8003e32:	2c30      	cmp	r4, #48	@ 0x30
 8003e34:	bf0c      	ite	eq
 8003e36:	2308      	moveq	r3, #8
 8003e38:	230a      	movne	r3, #10
 8003e3a:	e7d5      	b.n	8003de8 <_strtol_l.constprop.0+0x54>
 8003e3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003e40:	2f19      	cmp	r7, #25
 8003e42:	d801      	bhi.n	8003e48 <_strtol_l.constprop.0+0xb4>
 8003e44:	3c37      	subs	r4, #55	@ 0x37
 8003e46:	e7de      	b.n	8003e06 <_strtol_l.constprop.0+0x72>
 8003e48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003e4c:	2f19      	cmp	r7, #25
 8003e4e:	d804      	bhi.n	8003e5a <_strtol_l.constprop.0+0xc6>
 8003e50:	3c57      	subs	r4, #87	@ 0x57
 8003e52:	e7d8      	b.n	8003e06 <_strtol_l.constprop.0+0x72>
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	e7e1      	b.n	8003e1e <_strtol_l.constprop.0+0x8a>
 8003e5a:	1c53      	adds	r3, r2, #1
 8003e5c:	d108      	bne.n	8003e70 <_strtol_l.constprop.0+0xdc>
 8003e5e:	2322      	movs	r3, #34	@ 0x22
 8003e60:	f8ce 3000 	str.w	r3, [lr]
 8003e64:	4660      	mov	r0, ip
 8003e66:	f1b8 0f00 	cmp.w	r8, #0
 8003e6a:	d0a0      	beq.n	8003dae <_strtol_l.constprop.0+0x1a>
 8003e6c:	1e69      	subs	r1, r5, #1
 8003e6e:	e006      	b.n	8003e7e <_strtol_l.constprop.0+0xea>
 8003e70:	b106      	cbz	r6, 8003e74 <_strtol_l.constprop.0+0xe0>
 8003e72:	4240      	negs	r0, r0
 8003e74:	f1b8 0f00 	cmp.w	r8, #0
 8003e78:	d099      	beq.n	8003dae <_strtol_l.constprop.0+0x1a>
 8003e7a:	2a00      	cmp	r2, #0
 8003e7c:	d1f6      	bne.n	8003e6c <_strtol_l.constprop.0+0xd8>
 8003e7e:	f8c8 1000 	str.w	r1, [r8]
 8003e82:	e794      	b.n	8003dae <_strtol_l.constprop.0+0x1a>
 8003e84:	0800407f 	.word	0x0800407f

08003e88 <_strtol_r>:
 8003e88:	f7ff bf84 	b.w	8003d94 <_strtol_l.constprop.0>

08003e8c <_strtoul_l.constprop.0>:
 8003e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e90:	4e34      	ldr	r6, [pc, #208]	@ (8003f64 <_strtoul_l.constprop.0+0xd8>)
 8003e92:	4686      	mov	lr, r0
 8003e94:	460d      	mov	r5, r1
 8003e96:	4628      	mov	r0, r5
 8003e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e9c:	5d37      	ldrb	r7, [r6, r4]
 8003e9e:	f017 0708 	ands.w	r7, r7, #8
 8003ea2:	d1f8      	bne.n	8003e96 <_strtoul_l.constprop.0+0xa>
 8003ea4:	2c2d      	cmp	r4, #45	@ 0x2d
 8003ea6:	d12f      	bne.n	8003f08 <_strtoul_l.constprop.0+0x7c>
 8003ea8:	782c      	ldrb	r4, [r5, #0]
 8003eaa:	2701      	movs	r7, #1
 8003eac:	1c85      	adds	r5, r0, #2
 8003eae:	f033 0010 	bics.w	r0, r3, #16
 8003eb2:	d109      	bne.n	8003ec8 <_strtoul_l.constprop.0+0x3c>
 8003eb4:	2c30      	cmp	r4, #48	@ 0x30
 8003eb6:	d12c      	bne.n	8003f12 <_strtoul_l.constprop.0+0x86>
 8003eb8:	7828      	ldrb	r0, [r5, #0]
 8003eba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003ebe:	2858      	cmp	r0, #88	@ 0x58
 8003ec0:	d127      	bne.n	8003f12 <_strtoul_l.constprop.0+0x86>
 8003ec2:	786c      	ldrb	r4, [r5, #1]
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	3502      	adds	r5, #2
 8003ec8:	f04f 38ff 	mov.w	r8, #4294967295
 8003ecc:	2600      	movs	r6, #0
 8003ece:	fbb8 f8f3 	udiv	r8, r8, r3
 8003ed2:	fb03 f908 	mul.w	r9, r3, r8
 8003ed6:	ea6f 0909 	mvn.w	r9, r9
 8003eda:	4630      	mov	r0, r6
 8003edc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8003ee0:	f1bc 0f09 	cmp.w	ip, #9
 8003ee4:	d81c      	bhi.n	8003f20 <_strtoul_l.constprop.0+0x94>
 8003ee6:	4664      	mov	r4, ip
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	dd2a      	ble.n	8003f42 <_strtoul_l.constprop.0+0xb6>
 8003eec:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003ef0:	d007      	beq.n	8003f02 <_strtoul_l.constprop.0+0x76>
 8003ef2:	4580      	cmp	r8, r0
 8003ef4:	d322      	bcc.n	8003f3c <_strtoul_l.constprop.0+0xb0>
 8003ef6:	d101      	bne.n	8003efc <_strtoul_l.constprop.0+0x70>
 8003ef8:	45a1      	cmp	r9, r4
 8003efa:	db1f      	blt.n	8003f3c <_strtoul_l.constprop.0+0xb0>
 8003efc:	fb00 4003 	mla	r0, r0, r3, r4
 8003f00:	2601      	movs	r6, #1
 8003f02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f06:	e7e9      	b.n	8003edc <_strtoul_l.constprop.0+0x50>
 8003f08:	2c2b      	cmp	r4, #43	@ 0x2b
 8003f0a:	bf04      	itt	eq
 8003f0c:	782c      	ldrbeq	r4, [r5, #0]
 8003f0e:	1c85      	addeq	r5, r0, #2
 8003f10:	e7cd      	b.n	8003eae <_strtoul_l.constprop.0+0x22>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1d8      	bne.n	8003ec8 <_strtoul_l.constprop.0+0x3c>
 8003f16:	2c30      	cmp	r4, #48	@ 0x30
 8003f18:	bf0c      	ite	eq
 8003f1a:	2308      	moveq	r3, #8
 8003f1c:	230a      	movne	r3, #10
 8003f1e:	e7d3      	b.n	8003ec8 <_strtoul_l.constprop.0+0x3c>
 8003f20:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003f24:	f1bc 0f19 	cmp.w	ip, #25
 8003f28:	d801      	bhi.n	8003f2e <_strtoul_l.constprop.0+0xa2>
 8003f2a:	3c37      	subs	r4, #55	@ 0x37
 8003f2c:	e7dc      	b.n	8003ee8 <_strtoul_l.constprop.0+0x5c>
 8003f2e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003f32:	f1bc 0f19 	cmp.w	ip, #25
 8003f36:	d804      	bhi.n	8003f42 <_strtoul_l.constprop.0+0xb6>
 8003f38:	3c57      	subs	r4, #87	@ 0x57
 8003f3a:	e7d5      	b.n	8003ee8 <_strtoul_l.constprop.0+0x5c>
 8003f3c:	f04f 36ff 	mov.w	r6, #4294967295
 8003f40:	e7df      	b.n	8003f02 <_strtoul_l.constprop.0+0x76>
 8003f42:	1c73      	adds	r3, r6, #1
 8003f44:	d106      	bne.n	8003f54 <_strtoul_l.constprop.0+0xc8>
 8003f46:	2322      	movs	r3, #34	@ 0x22
 8003f48:	f8ce 3000 	str.w	r3, [lr]
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	b932      	cbnz	r2, 8003f5e <_strtoul_l.constprop.0+0xd2>
 8003f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f54:	b107      	cbz	r7, 8003f58 <_strtoul_l.constprop.0+0xcc>
 8003f56:	4240      	negs	r0, r0
 8003f58:	2a00      	cmp	r2, #0
 8003f5a:	d0f9      	beq.n	8003f50 <_strtoul_l.constprop.0+0xc4>
 8003f5c:	b106      	cbz	r6, 8003f60 <_strtoul_l.constprop.0+0xd4>
 8003f5e:	1e69      	subs	r1, r5, #1
 8003f60:	6011      	str	r1, [r2, #0]
 8003f62:	e7f5      	b.n	8003f50 <_strtoul_l.constprop.0+0xc4>
 8003f64:	0800407f 	.word	0x0800407f

08003f68 <_strtoul_r>:
 8003f68:	f7ff bf90 	b.w	8003e8c <_strtoul_l.constprop.0>

08003f6c <_malloc_usable_size_r>:
 8003f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f70:	1f18      	subs	r0, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bfbc      	itt	lt
 8003f76:	580b      	ldrlt	r3, [r1, r0]
 8003f78:	18c0      	addlt	r0, r0, r3
 8003f7a:	4770      	bx	lr

08003f7c <_init>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr

08003f88 <_fini>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr
