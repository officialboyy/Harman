
07_29_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003450  08003450  00004450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003478  08003478  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003478  08003478  00004478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003480  08003480  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003480  08003480  00004480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003484  08003484  00004484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003488  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  080034f0  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080034f0  00005220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088a4  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a7  00000000  00000000  0000d93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005af  00000000  00000000  0000f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162fa  00000000  00000000  0000ff17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000090f1  00000000  00000000  00026211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087864  00000000  00000000  0002f302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023ac  00000000  00000000  000b6bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000b8f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003438 	.word	0x08003438

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08003438 	.word	0x08003438

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 5);
 80004d0:	1d39      	adds	r1, r7, #4
 80004d2:	2305      	movs	r3, #5
 80004d4:	2201      	movs	r2, #1
 80004d6:	4804      	ldr	r0, [pc, #16]	@ (80004e8 <__io_putchar+0x20>)
 80004d8:	f001 fb50 	bl	8001b7c <HAL_UART_Transmit>
}
 80004dc:	bf00      	nop
 80004de:	4618      	mov	r0, r3
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000084 	.word	0x20000084

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 faa8 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f80c 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f89e 	bl	8000638 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fc:	f000 f872 	bl	80005e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello World!\n");
 8000500:	4802      	ldr	r0, [pc, #8]	@ (800050c <main+0x20>)
 8000502:	f002 fc05 	bl	8002d10 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000506:	bf00      	nop
 8000508:	e7fd      	b.n	8000506 <main+0x1a>
 800050a:	bf00      	nop
 800050c:	08003450 	.word	0x08003450

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	@ 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fbfe 	bl	8002d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	@ (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	@ (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	@ 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	@ (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000580:	2310      	movs	r3, #16
 8000582:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000584:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058a:	2304      	movs	r3, #4
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800058e:	2304      	movs	r3, #4
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fe08 	bl	80011ac <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a2:	f000 f8b7 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f86a 	bl	800169c <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ce:	f000 f8a1 	bl	8000714 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	@ 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <MX_USART2_UART_Init+0x50>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ee:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 800061c:	f001 fa5e 	bl	8001adc <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000626:	f000 f875 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000084 	.word	0x20000084
 8000634:	40004400 	.word	0x40004400

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a2c      	ldr	r2, [pc, #176]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a25      	ldr	r2, [pc, #148]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <MX_GPIO_Init+0xd0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <MX_GPIO_Init+0xd0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a1e      	ldr	r2, [pc, #120]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_GPIO_Init+0xd0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a17      	ldr	r2, [pc, #92]	@ (8000708 <MX_GPIO_Init+0xd0>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2120      	movs	r1, #32
 80006c2:	4812      	ldr	r0, [pc, #72]	@ (800070c <MX_GPIO_Init+0xd4>)
 80006c4:	f000 fd58 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	480c      	ldr	r0, [pc, #48]	@ (8000710 <MX_GPIO_Init+0xd8>)
 80006e0:	f000 fbc6 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006e4:	2320      	movs	r3, #32
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_GPIO_Init+0xd4>)
 80006fc:	f000 fbb8 	bl	8000e70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	@ 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40020000 	.word	0x40020000
 8000710:	40020800 	.word	0x40020800

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	@ (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000734:	6453      	str	r3, [r2, #68]	@ 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	@ 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800075e:	2007      	movs	r0, #7
 8000760:	f000 fab2 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800

08000770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a1d      	ldr	r2, [pc, #116]	@ (8000804 <HAL_UART_MspInit+0x94>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d133      	bne.n	80007fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <HAL_UART_MspInit+0x98>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a1b      	ldr	r2, [pc, #108]	@ (8000808 <HAL_UART_MspInit+0x98>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <HAL_UART_MspInit+0x98>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <HAL_UART_MspInit+0x98>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a14      	ldr	r2, [pc, #80]	@ (8000808 <HAL_UART_MspInit+0x98>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <HAL_UART_MspInit+0x98>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ca:	230c      	movs	r3, #12
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007da:	2307      	movs	r3, #7
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4809      	ldr	r0, [pc, #36]	@ (800080c <HAL_UART_MspInit+0x9c>)
 80007e6:	f000 fb43 	bl	8000e70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2026      	movs	r0, #38	@ 0x26
 80007f0:	f000 fa75 	bl	8000cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007f4:	2026      	movs	r0, #38	@ 0x26
 80007f6:	f000 fa8e 	bl	8000d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	@ 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40004400 	.word	0x40004400
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <NMI_Handler+0x4>

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <MemManage_Handler+0x4>

08000828 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <UsageFault_Handler+0x4>

08000838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000866:	f000 f93f 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000874:	4802      	ldr	r0, [pc, #8]	@ (8000880 <USART2_IRQHandler+0x10>)
 8000876:	f001 fa0d 	bl	8001c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000084 	.word	0x20000084

08000884 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e00a      	b.n	80008ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000896:	f3af 8000 	nop.w
 800089a:	4601      	mov	r1, r0
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	b2ca      	uxtb	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dbf0      	blt.n	8000896 <_read+0x12>
  }

  return len;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e009      	b.n	80008e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	60ba      	str	r2, [r7, #8]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fdf5 	bl	80004c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbf1      	blt.n	80008d0 <_write+0x12>
  }
  return len;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_close>:

int _close(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800091e:	605a      	str	r2, [r3, #4]
  return 0;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_isatty>:

int _isatty(int file)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	@ (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f002 f9ce 	bl	8002d30 <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20020000 	.word	0x20020000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	200000cc 	.word	0x200000cc
 80009c8:	20000220 	.word	0x20000220

080009cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f4:	f7ff ffea 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f002 f98d 	bl	8002d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fd63 	bl	80004ec <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a34:	08003488 	.word	0x08003488
  ldr r2, =_sbss
 8000a38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a3c:	20000220 	.word	0x20000220

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <HAL_Init+0x40>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <HAL_Init+0x40>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	@ (8000a84 <HAL_Init+0x40>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f92b 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe52 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f943 	bl	8000d32 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac4:	f000 f90b 	bl	8000cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200000d0 	.word	0x200000d0

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000d0 	.word	0x200000d0

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db0b      	blt.n	8000bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 021f 	and.w	r2, r3, #31
 8000ba4:	4907      	ldr	r1, [pc, #28]	@ (8000bc4 <__NVIC_EnableIRQ+0x38>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	2001      	movs	r0, #1
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	@ (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	@ (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	@ 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	@ 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c94:	d301      	bcc.n	8000c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00f      	b.n	8000cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <SysTick_Config+0x40>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca8:	f7ff ff8e 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <SysTick_Config+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <SysTick_Config+0x40>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff29 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff3e 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff8e 	bl	8000c1c <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5d 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff31 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffa2 	bl	8000c84 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff feda 	bl	8000b10 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d008      	beq.n	8000d7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2280      	movs	r2, #128	@ 0x80
 8000d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e052      	b.n	8000e22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0216 	bic.w	r2, r2, #22
 8000d8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	695a      	ldr	r2, [r3, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d103      	bne.n	8000dac <HAL_DMA_Abort+0x62>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d007      	beq.n	8000dbc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0208 	bic.w	r2, r2, #8
 8000dba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0201 	bic.w	r2, r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dcc:	e013      	b.n	8000df6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dce:	f7ff fe9f 	bl	8000b10 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b05      	cmp	r3, #5
 8000dda:	d90c      	bls.n	8000df6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2220      	movs	r2, #32
 8000de0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2203      	movs	r2, #3
 8000de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e015      	b.n	8000e22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1e4      	bne.n	8000dce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e08:	223f      	movs	r2, #63	@ 0x3f
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d004      	beq.n	8000e48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2280      	movs	r2, #128	@ 0x80
 8000e42:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e00c      	b.n	8000e62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e159      	b.n	8001140 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8148 	bne.w	800113a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a2 	beq.w	800113a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b57      	ldr	r3, [pc, #348]	@ (8001158 <HAL_GPIO_Init+0x2e8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	4a56      	ldr	r2, [pc, #344]	@ (8001158 <HAL_GPIO_Init+0x2e8>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001004:	6453      	str	r3, [r2, #68]	@ 0x44
 8001006:	4b54      	ldr	r3, [pc, #336]	@ (8001158 <HAL_GPIO_Init+0x2e8>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a52      	ldr	r2, [pc, #328]	@ (800115c <HAL_GPIO_Init+0x2ec>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a49      	ldr	r2, [pc, #292]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x202>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a48      	ldr	r2, [pc, #288]	@ (8001164 <HAL_GPIO_Init+0x2f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x1fe>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a47      	ldr	r2, [pc, #284]	@ (8001168 <HAL_GPIO_Init+0x2f8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x1fa>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a46      	ldr	r2, [pc, #280]	@ (800116c <HAL_GPIO_Init+0x2fc>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x1f6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a45      	ldr	r2, [pc, #276]	@ (8001170 <HAL_GPIO_Init+0x300>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x1f2>
 800105e:	2304      	movs	r3, #4
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001062:	2307      	movs	r3, #7
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	@ (800115c <HAL_GPIO_Init+0x2ec>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <HAL_GPIO_Init+0x304>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001174 <HAL_GPIO_Init+0x304>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <HAL_GPIO_Init+0x304>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a24      	ldr	r2, [pc, #144]	@ (8001174 <HAL_GPIO_Init+0x304>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b23      	ldr	r3, [pc, #140]	@ (8001174 <HAL_GPIO_Init+0x304>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1a      	ldr	r2, [pc, #104]	@ (8001174 <HAL_GPIO_Init+0x304>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <HAL_GPIO_Init+0x304>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <HAL_GPIO_Init+0x304>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f aea2 	bls.w	8000e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001194:	e003      	b.n	800119e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e267      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d075      	beq.n	80012b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ca:	4b88      	ldr	r3, [pc, #544]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d00c      	beq.n	80011f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d6:	4b85      	ldr	r3, [pc, #532]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d112      	bne.n	8001208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e2:	4b82      	ldr	r3, [pc, #520]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011ee:	d10b      	bne.n	8001208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	4b7e      	ldr	r3, [pc, #504]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d05b      	beq.n	80012b4 <HAL_RCC_OscConfig+0x108>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d157      	bne.n	80012b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e242      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001210:	d106      	bne.n	8001220 <HAL_RCC_OscConfig+0x74>
 8001212:	4b76      	ldr	r3, [pc, #472]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a75      	ldr	r2, [pc, #468]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e01d      	b.n	800125c <HAL_RCC_OscConfig+0xb0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0x98>
 800122a:	4b70      	ldr	r3, [pc, #448]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6f      	ldr	r2, [pc, #444]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b6d      	ldr	r3, [pc, #436]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6c      	ldr	r2, [pc, #432]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e00b      	b.n	800125c <HAL_RCC_OscConfig+0xb0>
 8001244:	4b69      	ldr	r3, [pc, #420]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a68      	ldr	r2, [pc, #416]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 800124a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b66      	ldr	r3, [pc, #408]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a65      	ldr	r2, [pc, #404]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fc54 	bl	8000b10 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fc50 	bl	8000b10 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	@ 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e207      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b5b      	ldr	r3, [pc, #364]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0xc0>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc40 	bl	8000b10 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fc3c 	bl	8000b10 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	@ 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e1f3      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	4b51      	ldr	r3, [pc, #324]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0xe8>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d063      	beq.n	800138a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c2:	4b4a      	ldr	r3, [pc, #296]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ce:	4b47      	ldr	r3, [pc, #284]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d11c      	bne.n	8001314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012da:	4b44      	ldr	r3, [pc, #272]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d116      	bne.n	8001314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	4b41      	ldr	r3, [pc, #260]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x152>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e1c7      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b3b      	ldr	r3, [pc, #236]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4937      	ldr	r1, [pc, #220]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	e03a      	b.n	800138a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131c:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001322:	f7ff fbf5 	bl	8000b10 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fbf1 	bl	8000b10 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1a8      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b28      	ldr	r3, [pc, #160]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4925      	ldr	r1, [pc, #148]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135e:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <HAL_RCC_OscConfig+0x244>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fbd4 	bl	8000b10 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136c:	f7ff fbd0 	bl	8000b10 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e187      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d036      	beq.n	8001404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d016      	beq.n	80013cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_RCC_OscConfig+0x248>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a4:	f7ff fbb4 	bl	8000b10 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ac:	f7ff fbb0 	bl	8000b10 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e167      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <HAL_RCC_OscConfig+0x240>)
 80013c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x200>
 80013ca:	e01b      	b.n	8001404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_RCC_OscConfig+0x248>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fb9d 	bl	8000b10 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	e00e      	b.n	80013f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013da:	f7ff fb99 	bl	8000b10 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d907      	bls.n	80013f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e150      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
 80013ec:	40023800 	.word	0x40023800
 80013f0:	42470000 	.word	0x42470000
 80013f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	4b88      	ldr	r3, [pc, #544]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80013fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1ea      	bne.n	80013da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8097 	beq.w	8001540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b81      	ldr	r3, [pc, #516]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10f      	bne.n	8001442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b7d      	ldr	r3, [pc, #500]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	4a7c      	ldr	r2, [pc, #496]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	@ 0x40
 8001432:	4b7a      	ldr	r3, [pc, #488]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143e:	2301      	movs	r3, #1
 8001440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001442:	4b77      	ldr	r3, [pc, #476]	@ (8001620 <HAL_RCC_OscConfig+0x474>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144e:	4b74      	ldr	r3, [pc, #464]	@ (8001620 <HAL_RCC_OscConfig+0x474>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a73      	ldr	r2, [pc, #460]	@ (8001620 <HAL_RCC_OscConfig+0x474>)
 8001454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145a:	f7ff fb59 	bl	8000b10 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001462:	f7ff fb55 	bl	8000b10 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e10c      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <HAL_RCC_OscConfig+0x474>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d106      	bne.n	8001496 <HAL_RCC_OscConfig+0x2ea>
 8001488:	4b64      	ldr	r3, [pc, #400]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148c:	4a63      	ldr	r2, [pc, #396]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6713      	str	r3, [r2, #112]	@ 0x70
 8001494:	e01c      	b.n	80014d0 <HAL_RCC_OscConfig+0x324>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x30c>
 800149e:	4b5f      	ldr	r3, [pc, #380]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a2:	4a5e      	ldr	r2, [pc, #376]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014aa:	4b5c      	ldr	r3, [pc, #368]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ae:	4a5b      	ldr	r2, [pc, #364]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0x324>
 80014b8:	4b58      	ldr	r3, [pc, #352]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014bc:	4a57      	ldr	r2, [pc, #348]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c4:	4b55      	ldr	r3, [pc, #340]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c8:	4a54      	ldr	r2, [pc, #336]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80014ca:	f023 0304 	bic.w	r3, r3, #4
 80014ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d015      	beq.n	8001504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fb1a 	bl	8000b10 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb16 	bl	8000b10 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e0cb      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f6:	4b49      	ldr	r3, [pc, #292]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0ee      	beq.n	80014e0 <HAL_RCC_OscConfig+0x334>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001504:	f7ff fb04 	bl	8000b10 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fb00 	bl	8000b10 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0b5      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001522:	4b3e      	ldr	r3, [pc, #248]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1ee      	bne.n	800150c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001534:	4b39      	ldr	r3, [pc, #228]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	4a38      	ldr	r2, [pc, #224]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 800153a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800153e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a1 	beq.w	800168c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800154a:	4b34      	ldr	r3, [pc, #208]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b08      	cmp	r3, #8
 8001554:	d05c      	beq.n	8001610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d141      	bne.n	80015e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <HAL_RCC_OscConfig+0x478>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fad4 	bl	8000b10 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff fad0 	bl	8000b10 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e087      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157e:	4b27      	ldr	r3, [pc, #156]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69da      	ldr	r2, [r3, #28]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	3b01      	subs	r3, #1
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	491b      	ldr	r1, [pc, #108]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <HAL_RCC_OscConfig+0x478>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff faa9 	bl	8000b10 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff faa5 	bl	8000b10 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e05c      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x416>
 80015e0:	e054      	b.n	800168c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <HAL_RCC_OscConfig+0x478>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fa92 	bl	8000b10 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fa8e 	bl	8000b10 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e045      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_RCC_OscConfig+0x470>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x444>
 800160e:	e03d      	b.n	800168c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e038      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000
 8001624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_RCC_OscConfig+0x4ec>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d028      	beq.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d121      	bne.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d11a      	bne.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001658:	4013      	ands	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800165e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001660:	4293      	cmp	r3, r2
 8001662:	d111      	bne.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	3b01      	subs	r3, #1
 8001672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d107      	bne.n	8001688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0cc      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b0:	4b68      	ldr	r3, [pc, #416]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d90c      	bls.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b65      	ldr	r3, [pc, #404]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b63      	ldr	r3, [pc, #396]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0b8      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f0:	4b59      	ldr	r3, [pc, #356]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a58      	ldr	r2, [pc, #352]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001708:	4b53      	ldr	r3, [pc, #332]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a52      	ldr	r2, [pc, #328]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001714:	4b50      	ldr	r3, [pc, #320]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	494d      	ldr	r1, [pc, #308]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d044      	beq.n	80017bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d119      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e07f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d003      	beq.n	800175a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	2b03      	cmp	r3, #3
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176a:	4b3b      	ldr	r3, [pc, #236]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e067      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177a:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f023 0203 	bic.w	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4934      	ldr	r1, [pc, #208]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800178c:	f7ff f9c0 	bl	8000b10 <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	e00a      	b.n	80017aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001794:	f7ff f9bc 	bl	8000b10 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e04f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 020c 	and.w	r2, r3, #12
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d1eb      	bne.n	8001794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017bc:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d20c      	bcs.n	80017e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e032      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4916      	ldr	r1, [pc, #88]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	490e      	ldr	r1, [pc, #56]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001822:	f000 f821 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8001826:	4602      	mov	r2, r0
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	490a      	ldr	r1, [pc, #40]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 8001834:	5ccb      	ldrb	r3, [r1, r3]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f920 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00
 8001858:	40023800 	.word	0x40023800
 800185c:	08003460 	.word	0x08003460
 8001860:	20000000 	.word	0x20000000
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800186c:	b094      	sub	sp, #80	@ 0x50
 800186e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	647b      	str	r3, [r7, #68]	@ 0x44
 8001874:	2300      	movs	r3, #0
 8001876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001878:	2300      	movs	r3, #0
 800187a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001880:	4b79      	ldr	r3, [pc, #484]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d00d      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x40>
 800188c:	2b08      	cmp	r3, #8
 800188e:	f200 80e1 	bhi.w	8001a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x34>
 8001896:	2b04      	cmp	r3, #4
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800189a:	e0db      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b73      	ldr	r3, [pc, #460]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x204>)
 800189e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80018a0:	e0db      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018a2:	4b73      	ldr	r3, [pc, #460]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80018a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018a6:	e0d8      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d063      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018be:	4b6a      	ldr	r3, [pc, #424]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	2200      	movs	r2, #0
 80018c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018da:	4622      	mov	r2, r4
 80018dc:	462b      	mov	r3, r5
 80018de:	f04f 0000 	mov.w	r0, #0
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	0159      	lsls	r1, r3, #5
 80018e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ec:	0150      	lsls	r0, r2, #5
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4621      	mov	r1, r4
 80018f4:	1a51      	subs	r1, r2, r1
 80018f6:	6139      	str	r1, [r7, #16]
 80018f8:	4629      	mov	r1, r5
 80018fa:	eb63 0301 	sbc.w	r3, r3, r1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800190c:	4659      	mov	r1, fp
 800190e:	018b      	lsls	r3, r1, #6
 8001910:	4651      	mov	r1, sl
 8001912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001916:	4651      	mov	r1, sl
 8001918:	018a      	lsls	r2, r1, #6
 800191a:	4651      	mov	r1, sl
 800191c:	ebb2 0801 	subs.w	r8, r2, r1
 8001920:	4659      	mov	r1, fp
 8001922:	eb63 0901 	sbc.w	r9, r3, r1
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800193a:	4690      	mov	r8, r2
 800193c:	4699      	mov	r9, r3
 800193e:	4623      	mov	r3, r4
 8001940:	eb18 0303 	adds.w	r3, r8, r3
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	462b      	mov	r3, r5
 8001948:	eb49 0303 	adc.w	r3, r9, r3
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800195a:	4629      	mov	r1, r5
 800195c:	024b      	lsls	r3, r1, #9
 800195e:	4621      	mov	r1, r4
 8001960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001964:	4621      	mov	r1, r4
 8001966:	024a      	lsls	r2, r1, #9
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800196e:	2200      	movs	r2, #0
 8001970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001978:	f7fe fc2e 	bl	80001d8 <__aeabi_uldivmod>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4613      	mov	r3, r2
 8001982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001984:	e058      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	2200      	movs	r2, #0
 800198e:	4618      	mov	r0, r3
 8001990:	4611      	mov	r1, r2
 8001992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
 800199c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019a0:	4642      	mov	r2, r8
 80019a2:	464b      	mov	r3, r9
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	0159      	lsls	r1, r3, #5
 80019ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b2:	0150      	lsls	r0, r2, #5
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4641      	mov	r1, r8
 80019ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80019be:	4649      	mov	r1, r9
 80019c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019d8:	ebb2 040a 	subs.w	r4, r2, sl
 80019dc:	eb63 050b 	sbc.w	r5, r3, fp
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	00eb      	lsls	r3, r5, #3
 80019ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ee:	00e2      	lsls	r2, r4, #3
 80019f0:	4614      	mov	r4, r2
 80019f2:	461d      	mov	r5, r3
 80019f4:	4643      	mov	r3, r8
 80019f6:	18e3      	adds	r3, r4, r3
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	464b      	mov	r3, r9
 80019fc:	eb45 0303 	adc.w	r3, r5, r3
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a0e:	4629      	mov	r1, r5
 8001a10:	028b      	lsls	r3, r1, #10
 8001a12:	4621      	mov	r1, r4
 8001a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a18:	4621      	mov	r1, r4
 8001a1a:	028a      	lsls	r2, r1, #10
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a22:	2200      	movs	r2, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	61fa      	str	r2, [r7, #28]
 8001a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a2c:	f7fe fbd4 	bl	80001d8 <__aeabi_uldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a38:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	3301      	adds	r3, #1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001a48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a52:	e002      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3750      	adds	r7, #80	@ 0x50
 8001a60:	46bd      	mov	sp, r7
 8001a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	00f42400 	.word	0x00f42400
 8001a70:	007a1200 	.word	0x007a1200

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b03      	ldr	r3, [pc, #12]	@ (8001a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000000 	.word	0x20000000

08001a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a90:	f7ff fff0 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4903      	ldr	r1, [pc, #12]	@ (8001ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa2:	5ccb      	ldrb	r3, [r1, r3]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	08003470 	.word	0x08003470

08001ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ab8:	f7ff ffdc 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0b5b      	lsrs	r3, r3, #13
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4903      	ldr	r1, [pc, #12]	@ (8001ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08003470 	.word	0x08003470

08001adc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e042      	b.n	8001b74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe fe34 	bl	8000770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2224      	movs	r2, #36	@ 0x24
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fd69 	bl	80025f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d175      	bne.n	8001c88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_UART_Transmit+0x2c>
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e06e      	b.n	8001c8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2221      	movs	r2, #33	@ 0x21
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bba:	f7fe ffa9 	bl	8000b10 <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bd4:	d108      	bne.n	8001be8 <HAL_UART_Transmit+0x6c>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d104      	bne.n	8001be8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	e003      	b.n	8001bf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bf0:	e02e      	b.n	8001c50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2180      	movs	r1, #128	@ 0x80
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fb05 	bl	800220c <UART_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e03a      	b.n	8001c8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10b      	bne.n	8001c32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	e007      	b.n	8001c42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1cb      	bne.n	8001bf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2200      	movs	r2, #0
 8001c62:	2140      	movs	r1, #64	@ 0x40
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fad1 	bl	800220c <UART_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e006      	b.n	8001c8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e000      	b.n	8001c8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c88:	2302      	movs	r3, #2
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0ba      	sub	sp, #232	@ 0xe8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10f      	bne.n	8001cfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_UART_IRQHandler+0x66>
 8001ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fbc2 	bl	800247c <UART_Receive_IT>
      return;
 8001cf8:	e25b      	b.n	80021b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80de 	beq.w	8001ec0 <HAL_UART_IRQHandler+0x22c>
 8001d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d106      	bne.n	8001d1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80d1 	beq.w	8001ec0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_UART_IRQHandler+0xae>
 8001d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_UART_IRQHandler+0xd2>
 8001d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f043 0202 	orr.w	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_UART_IRQHandler+0xf6>
 8001d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d011      	beq.n	8001dba <HAL_UART_IRQHandler+0x126>
 8001d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f043 0208 	orr.w	r2, r3, #8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 81f2 	beq.w	80021a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_UART_IRQHandler+0x14e>
 8001dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fb4d 	bl	800247c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dec:	2b40      	cmp	r3, #64	@ 0x40
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <HAL_UART_IRQHandler+0x17a>
 8001e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d04f      	beq.n	8001eae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fa55 	bl	80022be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1e:	2b40      	cmp	r3, #64	@ 0x40
 8001e20:	d141      	bne.n	8001ea6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3314      	adds	r3, #20
 8001e28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e30:	e853 3f00 	ldrex	r3, [r3]
 8001e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3314      	adds	r3, #20
 8001e4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001e5e:	e841 2300 	strex	r3, r2, [r1]
 8001e62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1d9      	bne.n	8001e22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d013      	beq.n	8001e9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002074 <HAL_UART_IRQHandler+0x3e0>)
 8001e7c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe ffd1 	bl	8000e2a <HAL_DMA_Abort_IT>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e9c:	e00e      	b.n	8001ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f99e 	bl	80021e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea4:	e00a      	b.n	8001ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f99a 	bl	80021e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eac:	e006      	b.n	8001ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f996 	bl	80021e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001eba:	e175      	b.n	80021a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ebc:	bf00      	nop
    return;
 8001ebe:	e173      	b.n	80021a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	f040 814f 	bne.w	8002168 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8148 	beq.w	8002168 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8141 	beq.w	8002168 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f06:	2b40      	cmp	r3, #64	@ 0x40
 8001f08:	f040 80b6 	bne.w	8002078 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8145 	beq.w	80021ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	f080 813e 	bcs.w	80021ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f42:	f000 8088 	beq.w	8002056 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	330c      	adds	r3, #12
 8001f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f54:	e853 3f00 	ldrex	r3, [r3]
 8001f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001f72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f82:	e841 2300 	strex	r3, r2, [r1]
 8001f86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1d9      	bne.n	8001f46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3314      	adds	r3, #20
 8001f98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f9c:	e853 3f00 	ldrex	r3, [r3]
 8001fa0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001fa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3314      	adds	r3, #20
 8001fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001fc2:	e841 2300 	strex	r3, r2, [r1]
 8001fc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1e1      	bne.n	8001f92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fd8:	e853 3f00 	ldrex	r3, [r3]
 8001fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3314      	adds	r3, #20
 8001fee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001ff2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001ff8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001ffa:	e841 2300 	strex	r3, r2, [r1]
 8001ffe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1e3      	bne.n	8001fce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	330c      	adds	r3, #12
 800201a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800201e:	e853 3f00 	ldrex	r3, [r3]
 8002022:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002026:	f023 0310 	bic.w	r3, r3, #16
 800202a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	330c      	adds	r3, #12
 8002034:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002038:	65ba      	str	r2, [r7, #88]	@ 0x58
 800203a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800203e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002040:	e841 2300 	strex	r3, r2, [r1]
 8002044:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e3      	bne.n	8002014 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe7a 	bl	8000d4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002064:	b29b      	uxth	r3, r3
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	b29b      	uxth	r3, r3
 800206a:	4619      	mov	r1, r3
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f8c1 	bl	80021f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002072:	e09b      	b.n	80021ac <HAL_UART_IRQHandler+0x518>
 8002074:	08002385 	.word	0x08002385
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002080:	b29b      	uxth	r3, r3
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 808e 	beq.w	80021b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 8089 	beq.w	80021b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	330c      	adds	r3, #12
 80020a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a8:	e853 3f00 	ldrex	r3, [r3]
 80020ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80020ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80020c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80020c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020ca:	e841 2300 	strex	r3, r2, [r1]
 80020ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80020d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1e3      	bne.n	800209e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3314      	adds	r3, #20
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	e853 3f00 	ldrex	r3, [r3]
 80020e4:	623b      	str	r3, [r7, #32]
   return(result);
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3314      	adds	r3, #20
 80020f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80020fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002102:	e841 2300 	strex	r3, r2, [r1]
 8002106:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e3      	bne.n	80020d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	330c      	adds	r3, #12
 8002122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	e853 3f00 	ldrex	r3, [r3]
 800212a:	60fb      	str	r3, [r7, #12]
   return(result);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0310 	bic.w	r3, r3, #16
 8002132:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	330c      	adds	r3, #12
 800213c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002140:	61fa      	str	r2, [r7, #28]
 8002142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002144:	69b9      	ldr	r1, [r7, #24]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	e841 2300 	strex	r3, r2, [r1]
 800214c:	617b      	str	r3, [r7, #20]
   return(result);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e3      	bne.n	800211c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800215a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f847 	bl	80021f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002166:	e023      	b.n	80021b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800216c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <HAL_UART_IRQHandler+0x4f4>
 8002174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f913 	bl	80023ac <UART_Transmit_IT>
    return;
 8002186:	e014      	b.n	80021b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800218c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <HAL_UART_IRQHandler+0x51e>
 8002194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f953 	bl	800244c <UART_EndTransmit_IT>
    return;
 80021a6:	e004      	b.n	80021b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80021a8:	bf00      	nop
 80021aa:	e002      	b.n	80021b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80021ac:	bf00      	nop
 80021ae:	e000      	b.n	80021b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80021b0:	bf00      	nop
  }
}
 80021b2:	37e8      	adds	r7, #232	@ 0xe8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800221c:	e03b      	b.n	8002296 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002224:	d037      	beq.n	8002296 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7fe fc73 	bl	8000b10 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	6a3a      	ldr	r2, [r7, #32]
 8002232:	429a      	cmp	r2, r3
 8002234:	d302      	bcc.n	800223c <UART_WaitOnFlagUntilTimeout+0x30>
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e03a      	b.n	80022b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d023      	beq.n	8002296 <UART_WaitOnFlagUntilTimeout+0x8a>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b80      	cmp	r3, #128	@ 0x80
 8002252:	d020      	beq.n	8002296 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b40      	cmp	r3, #64	@ 0x40
 8002258:	d01d      	beq.n	8002296 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b08      	cmp	r3, #8
 8002266:	d116      	bne.n	8002296 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f81d 	bl	80022be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2208      	movs	r2, #8
 8002288:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4013      	ands	r3, r2
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	bf0c      	ite	eq
 80022a6:	2301      	moveq	r3, #1
 80022a8:	2300      	movne	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d0b4      	beq.n	800221e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022be:	b480      	push	{r7}
 80022c0:	b095      	sub	sp, #84	@ 0x54
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	330c      	adds	r3, #12
 80022cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d0:	e853 3f00 	ldrex	r3, [r3]
 80022d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	330c      	adds	r3, #12
 80022e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80022e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e5      	bne.n	80022c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3314      	adds	r3, #20
 8002300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	e853 3f00 	ldrex	r3, [r3]
 8002308:	61fb      	str	r3, [r7, #28]
   return(result);
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3314      	adds	r3, #20
 8002318:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800231a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002322:	e841 2300 	strex	r3, r2, [r1]
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1e5      	bne.n	80022fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	2b01      	cmp	r3, #1
 8002334:	d119      	bne.n	800236a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	330c      	adds	r3, #12
 800233c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	e853 3f00 	ldrex	r3, [r3]
 8002344:	60bb      	str	r3, [r7, #8]
   return(result);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f023 0310 	bic.w	r3, r3, #16
 800234c:	647b      	str	r3, [r7, #68]	@ 0x44
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	330c      	adds	r3, #12
 8002354:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002356:	61ba      	str	r2, [r7, #24]
 8002358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235a:	6979      	ldr	r1, [r7, #20]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	e841 2300 	strex	r3, r2, [r1]
 8002362:	613b      	str	r3, [r7, #16]
   return(result);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1e5      	bne.n	8002336 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002378:	bf00      	nop
 800237a:	3754      	adds	r7, #84	@ 0x54
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff ff1e 	bl	80021e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b21      	cmp	r3, #33	@ 0x21
 80023be:	d13e      	bne.n	800243e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c8:	d114      	bne.n	80023f4 <UART_Transmit_IT+0x48>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d110      	bne.n	80023f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	1c9a      	adds	r2, r3, #2
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	621a      	str	r2, [r3, #32]
 80023f2:	e008      	b.n	8002406 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	1c59      	adds	r1, r3, #1
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6211      	str	r1, [r2, #32]
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29b      	uxth	r3, r3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4619      	mov	r1, r3
 8002414:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002428:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002438:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800243e:	2302      	movs	r3, #2
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002462:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fea3 	bl	80021b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08c      	sub	sp, #48	@ 0x30
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b22      	cmp	r3, #34	@ 0x22
 800248e:	f040 80ae 	bne.w	80025ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800249a:	d117      	bne.n	80024cc <UART_Receive_IT+0x50>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d113      	bne.n	80024cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c4:	1c9a      	adds	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80024ca:	e026      	b.n	800251a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024de:	d007      	beq.n	80024f0 <UART_Receive_IT+0x74>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <UART_Receive_IT+0x82>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e008      	b.n	8002510 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800250a:	b2da      	uxtb	r2, r3
 800250c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4619      	mov	r1, r3
 8002528:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800252a:	2b00      	cmp	r3, #0
 800252c:	d15d      	bne.n	80025ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0220 	bic.w	r2, r2, #32
 800253c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	2b01      	cmp	r3, #1
 8002572:	d135      	bne.n	80025e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	330c      	adds	r3, #12
 8002580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	e853 3f00 	ldrex	r3, [r3]
 8002588:	613b      	str	r3, [r7, #16]
   return(result);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f023 0310 	bic.w	r3, r3, #16
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	330c      	adds	r3, #12
 8002598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800259a:	623a      	str	r2, [r7, #32]
 800259c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259e:	69f9      	ldr	r1, [r7, #28]
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	e841 2300 	strex	r3, r2, [r1]
 80025a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e5      	bne.n	800257a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d10a      	bne.n	80025d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fe0b 	bl	80021f4 <HAL_UARTEx_RxEventCallback>
 80025de:	e002      	b.n	80025e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fdf3 	bl	80021cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e002      	b.n	80025f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e000      	b.n	80025f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3730      	adds	r7, #48	@ 0x30
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b0c0      	sub	sp, #256	@ 0x100
 80025fe:	af00      	add	r7, sp, #0
 8002600:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	68d9      	ldr	r1, [r3, #12]
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	ea40 0301 	orr.w	r3, r0, r1
 8002620:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	431a      	orrs	r2, r3
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	431a      	orrs	r2, r3
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002650:	f021 010c 	bic.w	r1, r1, #12
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800265e:	430b      	orrs	r3, r1
 8002660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800266e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002672:	6999      	ldr	r1, [r3, #24]
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	ea40 0301 	orr.w	r3, r0, r1
 800267e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b8f      	ldr	r3, [pc, #572]	@ (80028c4 <UART_SetConfig+0x2cc>)
 8002688:	429a      	cmp	r2, r3
 800268a:	d005      	beq.n	8002698 <UART_SetConfig+0xa0>
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b8d      	ldr	r3, [pc, #564]	@ (80028c8 <UART_SetConfig+0x2d0>)
 8002694:	429a      	cmp	r2, r3
 8002696:	d104      	bne.n	80026a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002698:	f7ff fa0c 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 800269c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80026a0:	e003      	b.n	80026aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026a2:	f7ff f9f3 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 80026a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026b4:	f040 810c 	bne.w	80028d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026bc:	2200      	movs	r2, #0
 80026be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026ca:	4622      	mov	r2, r4
 80026cc:	462b      	mov	r3, r5
 80026ce:	1891      	adds	r1, r2, r2
 80026d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026d2:	415b      	adcs	r3, r3
 80026d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026da:	4621      	mov	r1, r4
 80026dc:	eb12 0801 	adds.w	r8, r2, r1
 80026e0:	4629      	mov	r1, r5
 80026e2:	eb43 0901 	adc.w	r9, r3, r1
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026fa:	4690      	mov	r8, r2
 80026fc:	4699      	mov	r9, r3
 80026fe:	4623      	mov	r3, r4
 8002700:	eb18 0303 	adds.w	r3, r8, r3
 8002704:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002708:	462b      	mov	r3, r5
 800270a:	eb49 0303 	adc.w	r3, r9, r3
 800270e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800271e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002726:	460b      	mov	r3, r1
 8002728:	18db      	adds	r3, r3, r3
 800272a:	653b      	str	r3, [r7, #80]	@ 0x50
 800272c:	4613      	mov	r3, r2
 800272e:	eb42 0303 	adc.w	r3, r2, r3
 8002732:	657b      	str	r3, [r7, #84]	@ 0x54
 8002734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800273c:	f7fd fd4c 	bl	80001d8 <__aeabi_uldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4b61      	ldr	r3, [pc, #388]	@ (80028cc <UART_SetConfig+0x2d4>)
 8002746:	fba3 2302 	umull	r2, r3, r3, r2
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	011c      	lsls	r4, r3, #4
 800274e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002752:	2200      	movs	r2, #0
 8002754:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002758:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800275c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002760:	4642      	mov	r2, r8
 8002762:	464b      	mov	r3, r9
 8002764:	1891      	adds	r1, r2, r2
 8002766:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002768:	415b      	adcs	r3, r3
 800276a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800276c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002770:	4641      	mov	r1, r8
 8002772:	eb12 0a01 	adds.w	sl, r2, r1
 8002776:	4649      	mov	r1, r9
 8002778:	eb43 0b01 	adc.w	fp, r3, r1
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002788:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800278c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002790:	4692      	mov	sl, r2
 8002792:	469b      	mov	fp, r3
 8002794:	4643      	mov	r3, r8
 8002796:	eb1a 0303 	adds.w	r3, sl, r3
 800279a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800279e:	464b      	mov	r3, r9
 80027a0:	eb4b 0303 	adc.w	r3, fp, r3
 80027a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027bc:	460b      	mov	r3, r1
 80027be:	18db      	adds	r3, r3, r3
 80027c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80027c2:	4613      	mov	r3, r2
 80027c4:	eb42 0303 	adc.w	r3, r2, r3
 80027c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027d2:	f7fd fd01 	bl	80001d8 <__aeabi_uldivmod>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <UART_SetConfig+0x2d4>)
 80027de:	fba3 2301 	umull	r2, r3, r3, r1
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2264      	movs	r2, #100	@ 0x64
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	1acb      	subs	r3, r1, r3
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027f2:	4b36      	ldr	r3, [pc, #216]	@ (80028cc <UART_SetConfig+0x2d4>)
 80027f4:	fba3 2302 	umull	r2, r3, r3, r2
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002800:	441c      	add	r4, r3
 8002802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800280c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002810:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	1891      	adds	r1, r2, r2
 800281a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800281c:	415b      	adcs	r3, r3
 800281e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002824:	4641      	mov	r1, r8
 8002826:	1851      	adds	r1, r2, r1
 8002828:	6339      	str	r1, [r7, #48]	@ 0x30
 800282a:	4649      	mov	r1, r9
 800282c:	414b      	adcs	r3, r1
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800283c:	4659      	mov	r1, fp
 800283e:	00cb      	lsls	r3, r1, #3
 8002840:	4651      	mov	r1, sl
 8002842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002846:	4651      	mov	r1, sl
 8002848:	00ca      	lsls	r2, r1, #3
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	4603      	mov	r3, r0
 8002850:	4642      	mov	r2, r8
 8002852:	189b      	adds	r3, r3, r2
 8002854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002858:	464b      	mov	r3, r9
 800285a:	460a      	mov	r2, r1
 800285c:	eb42 0303 	adc.w	r3, r2, r3
 8002860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002870:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002874:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002878:	460b      	mov	r3, r1
 800287a:	18db      	adds	r3, r3, r3
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800287e:	4613      	mov	r3, r2
 8002880:	eb42 0303 	adc.w	r3, r2, r3
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800288a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800288e:	f7fd fca3 	bl	80001d8 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <UART_SetConfig+0x2d4>)
 8002898:	fba3 1302 	umull	r1, r3, r3, r2
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	2164      	movs	r1, #100	@ 0x64
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	3332      	adds	r3, #50	@ 0x32
 80028aa:	4a08      	ldr	r2, [pc, #32]	@ (80028cc <UART_SetConfig+0x2d4>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	f003 0207 	and.w	r2, r3, #7
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4422      	add	r2, r4
 80028be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028c0:	e106      	b.n	8002ad0 <UART_SetConfig+0x4d8>
 80028c2:	bf00      	nop
 80028c4:	40011000 	.word	0x40011000
 80028c8:	40011400 	.word	0x40011400
 80028cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d4:	2200      	movs	r2, #0
 80028d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028e2:	4642      	mov	r2, r8
 80028e4:	464b      	mov	r3, r9
 80028e6:	1891      	adds	r1, r2, r2
 80028e8:	6239      	str	r1, [r7, #32]
 80028ea:	415b      	adcs	r3, r3
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028f2:	4641      	mov	r1, r8
 80028f4:	1854      	adds	r4, r2, r1
 80028f6:	4649      	mov	r1, r9
 80028f8:	eb43 0501 	adc.w	r5, r3, r1
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	00eb      	lsls	r3, r5, #3
 8002906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290a:	00e2      	lsls	r2, r4, #3
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
 8002910:	4643      	mov	r3, r8
 8002912:	18e3      	adds	r3, r4, r3
 8002914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002918:	464b      	mov	r3, r9
 800291a:	eb45 0303 	adc.w	r3, r5, r3
 800291e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800292e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800293e:	4629      	mov	r1, r5
 8002940:	008b      	lsls	r3, r1, #2
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002948:	4621      	mov	r1, r4
 800294a:	008a      	lsls	r2, r1, #2
 800294c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002950:	f7fd fc42 	bl	80001d8 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4b60      	ldr	r3, [pc, #384]	@ (8002adc <UART_SetConfig+0x4e4>)
 800295a:	fba3 2302 	umull	r2, r3, r3, r2
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	011c      	lsls	r4, r3, #4
 8002962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002966:	2200      	movs	r2, #0
 8002968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800296c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002974:	4642      	mov	r2, r8
 8002976:	464b      	mov	r3, r9
 8002978:	1891      	adds	r1, r2, r2
 800297a:	61b9      	str	r1, [r7, #24]
 800297c:	415b      	adcs	r3, r3
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002984:	4641      	mov	r1, r8
 8002986:	1851      	adds	r1, r2, r1
 8002988:	6139      	str	r1, [r7, #16]
 800298a:	4649      	mov	r1, r9
 800298c:	414b      	adcs	r3, r1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800299c:	4659      	mov	r1, fp
 800299e:	00cb      	lsls	r3, r1, #3
 80029a0:	4651      	mov	r1, sl
 80029a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029a6:	4651      	mov	r1, sl
 80029a8:	00ca      	lsls	r2, r1, #3
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	4642      	mov	r2, r8
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029b8:	464b      	mov	r3, r9
 80029ba:	460a      	mov	r2, r1
 80029bc:	eb42 0303 	adc.w	r3, r2, r3
 80029c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029dc:	4649      	mov	r1, r9
 80029de:	008b      	lsls	r3, r1, #2
 80029e0:	4641      	mov	r1, r8
 80029e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e6:	4641      	mov	r1, r8
 80029e8:	008a      	lsls	r2, r1, #2
 80029ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029ee:	f7fd fbf3 	bl	80001d8 <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	4b38      	ldr	r3, [pc, #224]	@ (8002adc <UART_SetConfig+0x4e4>)
 80029fa:	fba3 2301 	umull	r2, r3, r3, r1
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2264      	movs	r2, #100	@ 0x64
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	1acb      	subs	r3, r1, r3
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	3332      	adds	r3, #50	@ 0x32
 8002a0c:	4a33      	ldr	r2, [pc, #204]	@ (8002adc <UART_SetConfig+0x4e4>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a18:	441c      	add	r4, r3
 8002a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a1e:	2200      	movs	r2, #0
 8002a20:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a22:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a28:	4642      	mov	r2, r8
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	1891      	adds	r1, r2, r2
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	415b      	adcs	r3, r3
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a38:	4641      	mov	r1, r8
 8002a3a:	1851      	adds	r1, r2, r1
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	4649      	mov	r1, r9
 8002a40:	414b      	adcs	r3, r1
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a50:	4659      	mov	r1, fp
 8002a52:	00cb      	lsls	r3, r1, #3
 8002a54:	4651      	mov	r1, sl
 8002a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	00ca      	lsls	r2, r1, #3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	4642      	mov	r2, r8
 8002a66:	189b      	adds	r3, r3, r2
 8002a68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	460a      	mov	r2, r1
 8002a6e:	eb42 0303 	adc.w	r3, r2, r3
 8002a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a8c:	4649      	mov	r1, r9
 8002a8e:	008b      	lsls	r3, r1, #2
 8002a90:	4641      	mov	r1, r8
 8002a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a96:	4641      	mov	r1, r8
 8002a98:	008a      	lsls	r2, r1, #2
 8002a9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a9e:	f7fd fb9b 	bl	80001d8 <__aeabi_uldivmod>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <UART_SetConfig+0x4e4>)
 8002aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	2164      	movs	r1, #100	@ 0x64
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	3332      	adds	r3, #50	@ 0x32
 8002aba:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <UART_SetConfig+0x4e4>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	f003 020f 	and.w	r2, r3, #15
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4422      	add	r2, r4
 8002ace:	609a      	str	r2, [r3, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002adc:	51eb851f 	.word	0x51eb851f

08002ae0 <std>:
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	b510      	push	{r4, lr}
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8002aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002aee:	6083      	str	r3, [r0, #8]
 8002af0:	8181      	strh	r1, [r0, #12]
 8002af2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002af4:	81c2      	strh	r2, [r0, #14]
 8002af6:	6183      	str	r3, [r0, #24]
 8002af8:	4619      	mov	r1, r3
 8002afa:	2208      	movs	r2, #8
 8002afc:	305c      	adds	r0, #92	@ 0x5c
 8002afe:	f000 f90f 	bl	8002d20 <memset>
 8002b02:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <std+0x58>)
 8002b04:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b06:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <std+0x5c>)
 8002b08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <std+0x60>)
 8002b0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <std+0x64>)
 8002b10:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b12:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <std+0x68>)
 8002b14:	6224      	str	r4, [r4, #32]
 8002b16:	429c      	cmp	r4, r3
 8002b18:	d006      	beq.n	8002b28 <std+0x48>
 8002b1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b1e:	4294      	cmp	r4, r2
 8002b20:	d002      	beq.n	8002b28 <std+0x48>
 8002b22:	33d0      	adds	r3, #208	@ 0xd0
 8002b24:	429c      	cmp	r4, r3
 8002b26:	d105      	bne.n	8002b34 <std+0x54>
 8002b28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b30:	f000 b928 	b.w	8002d84 <__retarget_lock_init_recursive>
 8002b34:	bd10      	pop	{r4, pc}
 8002b36:	bf00      	nop
 8002b38:	08003041 	.word	0x08003041
 8002b3c:	08003063 	.word	0x08003063
 8002b40:	0800309b 	.word	0x0800309b
 8002b44:	080030bf 	.word	0x080030bf
 8002b48:	200000d4 	.word	0x200000d4

08002b4c <stdio_exit_handler>:
 8002b4c:	4a02      	ldr	r2, [pc, #8]	@ (8002b58 <stdio_exit_handler+0xc>)
 8002b4e:	4903      	ldr	r1, [pc, #12]	@ (8002b5c <stdio_exit_handler+0x10>)
 8002b50:	4803      	ldr	r0, [pc, #12]	@ (8002b60 <stdio_exit_handler+0x14>)
 8002b52:	f000 b869 	b.w	8002c28 <_fwalk_sglue>
 8002b56:	bf00      	nop
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	08002fd9 	.word	0x08002fd9
 8002b60:	2000001c 	.word	0x2000001c

08002b64 <cleanup_stdio>:
 8002b64:	6841      	ldr	r1, [r0, #4]
 8002b66:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <cleanup_stdio+0x34>)
 8002b68:	4299      	cmp	r1, r3
 8002b6a:	b510      	push	{r4, lr}
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	d001      	beq.n	8002b74 <cleanup_stdio+0x10>
 8002b70:	f000 fa32 	bl	8002fd8 <_fflush_r>
 8002b74:	68a1      	ldr	r1, [r4, #8]
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <cleanup_stdio+0x38>)
 8002b78:	4299      	cmp	r1, r3
 8002b7a:	d002      	beq.n	8002b82 <cleanup_stdio+0x1e>
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f000 fa2b 	bl	8002fd8 <_fflush_r>
 8002b82:	68e1      	ldr	r1, [r4, #12]
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <cleanup_stdio+0x3c>)
 8002b86:	4299      	cmp	r1, r3
 8002b88:	d004      	beq.n	8002b94 <cleanup_stdio+0x30>
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b90:	f000 ba22 	b.w	8002fd8 <_fflush_r>
 8002b94:	bd10      	pop	{r4, pc}
 8002b96:	bf00      	nop
 8002b98:	200000d4 	.word	0x200000d4
 8002b9c:	2000013c 	.word	0x2000013c
 8002ba0:	200001a4 	.word	0x200001a4

08002ba4 <global_stdio_init.part.0>:
 8002ba4:	b510      	push	{r4, lr}
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <global_stdio_init.part.0+0x30>)
 8002ba8:	4c0b      	ldr	r4, [pc, #44]	@ (8002bd8 <global_stdio_init.part.0+0x34>)
 8002baa:	4a0c      	ldr	r2, [pc, #48]	@ (8002bdc <global_stdio_init.part.0+0x38>)
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	4620      	mov	r0, r4
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	f7ff ff94 	bl	8002ae0 <std>
 8002bb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2109      	movs	r1, #9
 8002bc0:	f7ff ff8e 	bl	8002ae0 <std>
 8002bc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002bc8:	2202      	movs	r2, #2
 8002bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bce:	2112      	movs	r1, #18
 8002bd0:	f7ff bf86 	b.w	8002ae0 <std>
 8002bd4:	2000020c 	.word	0x2000020c
 8002bd8:	200000d4 	.word	0x200000d4
 8002bdc:	08002b4d 	.word	0x08002b4d

08002be0 <__sfp_lock_acquire>:
 8002be0:	4801      	ldr	r0, [pc, #4]	@ (8002be8 <__sfp_lock_acquire+0x8>)
 8002be2:	f000 b8d0 	b.w	8002d86 <__retarget_lock_acquire_recursive>
 8002be6:	bf00      	nop
 8002be8:	20000211 	.word	0x20000211

08002bec <__sfp_lock_release>:
 8002bec:	4801      	ldr	r0, [pc, #4]	@ (8002bf4 <__sfp_lock_release+0x8>)
 8002bee:	f000 b8cb 	b.w	8002d88 <__retarget_lock_release_recursive>
 8002bf2:	bf00      	nop
 8002bf4:	20000211 	.word	0x20000211

08002bf8 <__sinit>:
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	f7ff fff0 	bl	8002be0 <__sfp_lock_acquire>
 8002c00:	6a23      	ldr	r3, [r4, #32]
 8002c02:	b11b      	cbz	r3, 8002c0c <__sinit+0x14>
 8002c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c08:	f7ff bff0 	b.w	8002bec <__sfp_lock_release>
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <__sinit+0x28>)
 8002c0e:	6223      	str	r3, [r4, #32]
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <__sinit+0x2c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f5      	bne.n	8002c04 <__sinit+0xc>
 8002c18:	f7ff ffc4 	bl	8002ba4 <global_stdio_init.part.0>
 8002c1c:	e7f2      	b.n	8002c04 <__sinit+0xc>
 8002c1e:	bf00      	nop
 8002c20:	08002b65 	.word	0x08002b65
 8002c24:	2000020c 	.word	0x2000020c

08002c28 <_fwalk_sglue>:
 8002c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c2c:	4607      	mov	r7, r0
 8002c2e:	4688      	mov	r8, r1
 8002c30:	4614      	mov	r4, r2
 8002c32:	2600      	movs	r6, #0
 8002c34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c38:	f1b9 0901 	subs.w	r9, r9, #1
 8002c3c:	d505      	bpl.n	8002c4a <_fwalk_sglue+0x22>
 8002c3e:	6824      	ldr	r4, [r4, #0]
 8002c40:	2c00      	cmp	r4, #0
 8002c42:	d1f7      	bne.n	8002c34 <_fwalk_sglue+0xc>
 8002c44:	4630      	mov	r0, r6
 8002c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c4a:	89ab      	ldrh	r3, [r5, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d907      	bls.n	8002c60 <_fwalk_sglue+0x38>
 8002c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c54:	3301      	adds	r3, #1
 8002c56:	d003      	beq.n	8002c60 <_fwalk_sglue+0x38>
 8002c58:	4629      	mov	r1, r5
 8002c5a:	4638      	mov	r0, r7
 8002c5c:	47c0      	blx	r8
 8002c5e:	4306      	orrs	r6, r0
 8002c60:	3568      	adds	r5, #104	@ 0x68
 8002c62:	e7e9      	b.n	8002c38 <_fwalk_sglue+0x10>

08002c64 <_puts_r>:
 8002c64:	6a03      	ldr	r3, [r0, #32]
 8002c66:	b570      	push	{r4, r5, r6, lr}
 8002c68:	6884      	ldr	r4, [r0, #8]
 8002c6a:	4605      	mov	r5, r0
 8002c6c:	460e      	mov	r6, r1
 8002c6e:	b90b      	cbnz	r3, 8002c74 <_puts_r+0x10>
 8002c70:	f7ff ffc2 	bl	8002bf8 <__sinit>
 8002c74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c76:	07db      	lsls	r3, r3, #31
 8002c78:	d405      	bmi.n	8002c86 <_puts_r+0x22>
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	0598      	lsls	r0, r3, #22
 8002c7e:	d402      	bmi.n	8002c86 <_puts_r+0x22>
 8002c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c82:	f000 f880 	bl	8002d86 <__retarget_lock_acquire_recursive>
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	0719      	lsls	r1, r3, #28
 8002c8a:	d502      	bpl.n	8002c92 <_puts_r+0x2e>
 8002c8c:	6923      	ldr	r3, [r4, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d135      	bne.n	8002cfe <_puts_r+0x9a>
 8002c92:	4621      	mov	r1, r4
 8002c94:	4628      	mov	r0, r5
 8002c96:	f000 fa55 	bl	8003144 <__swsetup_r>
 8002c9a:	b380      	cbz	r0, 8002cfe <_puts_r+0x9a>
 8002c9c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002ca0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ca2:	07da      	lsls	r2, r3, #31
 8002ca4:	d405      	bmi.n	8002cb2 <_puts_r+0x4e>
 8002ca6:	89a3      	ldrh	r3, [r4, #12]
 8002ca8:	059b      	lsls	r3, r3, #22
 8002caa:	d402      	bmi.n	8002cb2 <_puts_r+0x4e>
 8002cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cae:	f000 f86b 	bl	8002d88 <__retarget_lock_release_recursive>
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da04      	bge.n	8002cc4 <_puts_r+0x60>
 8002cba:	69a2      	ldr	r2, [r4, #24]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	dc17      	bgt.n	8002cf0 <_puts_r+0x8c>
 8002cc0:	290a      	cmp	r1, #10
 8002cc2:	d015      	beq.n	8002cf0 <_puts_r+0x8c>
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	6022      	str	r2, [r4, #0]
 8002cca:	7019      	strb	r1, [r3, #0]
 8002ccc:	68a3      	ldr	r3, [r4, #8]
 8002cce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60a3      	str	r3, [r4, #8]
 8002cd6:	2900      	cmp	r1, #0
 8002cd8:	d1ed      	bne.n	8002cb6 <_puts_r+0x52>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da11      	bge.n	8002d02 <_puts_r+0x9e>
 8002cde:	4622      	mov	r2, r4
 8002ce0:	210a      	movs	r1, #10
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f000 f9ef 	bl	80030c6 <__swbuf_r>
 8002ce8:	3001      	adds	r0, #1
 8002cea:	d0d7      	beq.n	8002c9c <_puts_r+0x38>
 8002cec:	250a      	movs	r5, #10
 8002cee:	e7d7      	b.n	8002ca0 <_puts_r+0x3c>
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	f000 f9e7 	bl	80030c6 <__swbuf_r>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d1e7      	bne.n	8002ccc <_puts_r+0x68>
 8002cfc:	e7ce      	b.n	8002c9c <_puts_r+0x38>
 8002cfe:	3e01      	subs	r6, #1
 8002d00:	e7e4      	b.n	8002ccc <_puts_r+0x68>
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	6022      	str	r2, [r4, #0]
 8002d08:	220a      	movs	r2, #10
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e7ee      	b.n	8002cec <_puts_r+0x88>
	...

08002d10 <puts>:
 8002d10:	4b02      	ldr	r3, [pc, #8]	@ (8002d1c <puts+0xc>)
 8002d12:	4601      	mov	r1, r0
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	f7ff bfa5 	b.w	8002c64 <_puts_r>
 8002d1a:	bf00      	nop
 8002d1c:	20000018 	.word	0x20000018

08002d20 <memset>:
 8002d20:	4402      	add	r2, r0
 8002d22:	4603      	mov	r3, r0
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d100      	bne.n	8002d2a <memset+0xa>
 8002d28:	4770      	bx	lr
 8002d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2e:	e7f9      	b.n	8002d24 <memset+0x4>

08002d30 <__errno>:
 8002d30:	4b01      	ldr	r3, [pc, #4]	@ (8002d38 <__errno+0x8>)
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000018 	.word	0x20000018

08002d3c <__libc_init_array>:
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	4d0d      	ldr	r5, [pc, #52]	@ (8002d74 <__libc_init_array+0x38>)
 8002d40:	4c0d      	ldr	r4, [pc, #52]	@ (8002d78 <__libc_init_array+0x3c>)
 8002d42:	1b64      	subs	r4, r4, r5
 8002d44:	10a4      	asrs	r4, r4, #2
 8002d46:	2600      	movs	r6, #0
 8002d48:	42a6      	cmp	r6, r4
 8002d4a:	d109      	bne.n	8002d60 <__libc_init_array+0x24>
 8002d4c:	4d0b      	ldr	r5, [pc, #44]	@ (8002d7c <__libc_init_array+0x40>)
 8002d4e:	4c0c      	ldr	r4, [pc, #48]	@ (8002d80 <__libc_init_array+0x44>)
 8002d50:	f000 fb72 	bl	8003438 <_init>
 8002d54:	1b64      	subs	r4, r4, r5
 8002d56:	10a4      	asrs	r4, r4, #2
 8002d58:	2600      	movs	r6, #0
 8002d5a:	42a6      	cmp	r6, r4
 8002d5c:	d105      	bne.n	8002d6a <__libc_init_array+0x2e>
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d64:	4798      	blx	r3
 8002d66:	3601      	adds	r6, #1
 8002d68:	e7ee      	b.n	8002d48 <__libc_init_array+0xc>
 8002d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6e:	4798      	blx	r3
 8002d70:	3601      	adds	r6, #1
 8002d72:	e7f2      	b.n	8002d5a <__libc_init_array+0x1e>
 8002d74:	08003480 	.word	0x08003480
 8002d78:	08003480 	.word	0x08003480
 8002d7c:	08003480 	.word	0x08003480
 8002d80:	08003484 	.word	0x08003484

08002d84 <__retarget_lock_init_recursive>:
 8002d84:	4770      	bx	lr

08002d86 <__retarget_lock_acquire_recursive>:
 8002d86:	4770      	bx	lr

08002d88 <__retarget_lock_release_recursive>:
 8002d88:	4770      	bx	lr
	...

08002d8c <sbrk_aligned>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8002dcc <sbrk_aligned+0x40>)
 8002d90:	460c      	mov	r4, r1
 8002d92:	6831      	ldr	r1, [r6, #0]
 8002d94:	4605      	mov	r5, r0
 8002d96:	b911      	cbnz	r1, 8002d9e <sbrk_aligned+0x12>
 8002d98:	f000 fae2 	bl	8003360 <_sbrk_r>
 8002d9c:	6030      	str	r0, [r6, #0]
 8002d9e:	4621      	mov	r1, r4
 8002da0:	4628      	mov	r0, r5
 8002da2:	f000 fadd 	bl	8003360 <_sbrk_r>
 8002da6:	1c43      	adds	r3, r0, #1
 8002da8:	d103      	bne.n	8002db2 <sbrk_aligned+0x26>
 8002daa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002dae:	4620      	mov	r0, r4
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
 8002db2:	1cc4      	adds	r4, r0, #3
 8002db4:	f024 0403 	bic.w	r4, r4, #3
 8002db8:	42a0      	cmp	r0, r4
 8002dba:	d0f8      	beq.n	8002dae <sbrk_aligned+0x22>
 8002dbc:	1a21      	subs	r1, r4, r0
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f000 face 	bl	8003360 <_sbrk_r>
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d1f2      	bne.n	8002dae <sbrk_aligned+0x22>
 8002dc8:	e7ef      	b.n	8002daa <sbrk_aligned+0x1e>
 8002dca:	bf00      	nop
 8002dcc:	20000214 	.word	0x20000214

08002dd0 <_malloc_r>:
 8002dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd4:	1ccd      	adds	r5, r1, #3
 8002dd6:	f025 0503 	bic.w	r5, r5, #3
 8002dda:	3508      	adds	r5, #8
 8002ddc:	2d0c      	cmp	r5, #12
 8002dde:	bf38      	it	cc
 8002de0:	250c      	movcc	r5, #12
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	4606      	mov	r6, r0
 8002de6:	db01      	blt.n	8002dec <_malloc_r+0x1c>
 8002de8:	42a9      	cmp	r1, r5
 8002dea:	d904      	bls.n	8002df6 <_malloc_r+0x26>
 8002dec:	230c      	movs	r3, #12
 8002dee:	6033      	str	r3, [r6, #0]
 8002df0:	2000      	movs	r0, #0
 8002df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002df6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ecc <_malloc_r+0xfc>
 8002dfa:	f000 f915 	bl	8003028 <__malloc_lock>
 8002dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8002e02:	461c      	mov	r4, r3
 8002e04:	bb44      	cbnz	r4, 8002e58 <_malloc_r+0x88>
 8002e06:	4629      	mov	r1, r5
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f7ff ffbf 	bl	8002d8c <sbrk_aligned>
 8002e0e:	1c43      	adds	r3, r0, #1
 8002e10:	4604      	mov	r4, r0
 8002e12:	d158      	bne.n	8002ec6 <_malloc_r+0xf6>
 8002e14:	f8d8 4000 	ldr.w	r4, [r8]
 8002e18:	4627      	mov	r7, r4
 8002e1a:	2f00      	cmp	r7, #0
 8002e1c:	d143      	bne.n	8002ea6 <_malloc_r+0xd6>
 8002e1e:	2c00      	cmp	r4, #0
 8002e20:	d04b      	beq.n	8002eba <_malloc_r+0xea>
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	4639      	mov	r1, r7
 8002e26:	4630      	mov	r0, r6
 8002e28:	eb04 0903 	add.w	r9, r4, r3
 8002e2c:	f000 fa98 	bl	8003360 <_sbrk_r>
 8002e30:	4581      	cmp	r9, r0
 8002e32:	d142      	bne.n	8002eba <_malloc_r+0xea>
 8002e34:	6821      	ldr	r1, [r4, #0]
 8002e36:	1a6d      	subs	r5, r5, r1
 8002e38:	4629      	mov	r1, r5
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f7ff ffa6 	bl	8002d8c <sbrk_aligned>
 8002e40:	3001      	adds	r0, #1
 8002e42:	d03a      	beq.n	8002eba <_malloc_r+0xea>
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	442b      	add	r3, r5
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	bb62      	cbnz	r2, 8002eac <_malloc_r+0xdc>
 8002e52:	f8c8 7000 	str.w	r7, [r8]
 8002e56:	e00f      	b.n	8002e78 <_malloc_r+0xa8>
 8002e58:	6822      	ldr	r2, [r4, #0]
 8002e5a:	1b52      	subs	r2, r2, r5
 8002e5c:	d420      	bmi.n	8002ea0 <_malloc_r+0xd0>
 8002e5e:	2a0b      	cmp	r2, #11
 8002e60:	d917      	bls.n	8002e92 <_malloc_r+0xc2>
 8002e62:	1961      	adds	r1, r4, r5
 8002e64:	42a3      	cmp	r3, r4
 8002e66:	6025      	str	r5, [r4, #0]
 8002e68:	bf18      	it	ne
 8002e6a:	6059      	strne	r1, [r3, #4]
 8002e6c:	6863      	ldr	r3, [r4, #4]
 8002e6e:	bf08      	it	eq
 8002e70:	f8c8 1000 	streq.w	r1, [r8]
 8002e74:	5162      	str	r2, [r4, r5]
 8002e76:	604b      	str	r3, [r1, #4]
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f000 f8db 	bl	8003034 <__malloc_unlock>
 8002e7e:	f104 000b 	add.w	r0, r4, #11
 8002e82:	1d23      	adds	r3, r4, #4
 8002e84:	f020 0007 	bic.w	r0, r0, #7
 8002e88:	1ac2      	subs	r2, r0, r3
 8002e8a:	bf1c      	itt	ne
 8002e8c:	1a1b      	subne	r3, r3, r0
 8002e8e:	50a3      	strne	r3, [r4, r2]
 8002e90:	e7af      	b.n	8002df2 <_malloc_r+0x22>
 8002e92:	6862      	ldr	r2, [r4, #4]
 8002e94:	42a3      	cmp	r3, r4
 8002e96:	bf0c      	ite	eq
 8002e98:	f8c8 2000 	streq.w	r2, [r8]
 8002e9c:	605a      	strne	r2, [r3, #4]
 8002e9e:	e7eb      	b.n	8002e78 <_malloc_r+0xa8>
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	6864      	ldr	r4, [r4, #4]
 8002ea4:	e7ae      	b.n	8002e04 <_malloc_r+0x34>
 8002ea6:	463c      	mov	r4, r7
 8002ea8:	687f      	ldr	r7, [r7, #4]
 8002eaa:	e7b6      	b.n	8002e1a <_malloc_r+0x4a>
 8002eac:	461a      	mov	r2, r3
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	42a3      	cmp	r3, r4
 8002eb2:	d1fb      	bne.n	8002eac <_malloc_r+0xdc>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6053      	str	r3, [r2, #4]
 8002eb8:	e7de      	b.n	8002e78 <_malloc_r+0xa8>
 8002eba:	230c      	movs	r3, #12
 8002ebc:	6033      	str	r3, [r6, #0]
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	f000 f8b8 	bl	8003034 <__malloc_unlock>
 8002ec4:	e794      	b.n	8002df0 <_malloc_r+0x20>
 8002ec6:	6005      	str	r5, [r0, #0]
 8002ec8:	e7d6      	b.n	8002e78 <_malloc_r+0xa8>
 8002eca:	bf00      	nop
 8002ecc:	20000218 	.word	0x20000218

08002ed0 <__sflush_r>:
 8002ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed8:	0716      	lsls	r6, r2, #28
 8002eda:	4605      	mov	r5, r0
 8002edc:	460c      	mov	r4, r1
 8002ede:	d454      	bmi.n	8002f8a <__sflush_r+0xba>
 8002ee0:	684b      	ldr	r3, [r1, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	dc02      	bgt.n	8002eec <__sflush_r+0x1c>
 8002ee6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dd48      	ble.n	8002f7e <__sflush_r+0xae>
 8002eec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002eee:	2e00      	cmp	r6, #0
 8002ef0:	d045      	beq.n	8002f7e <__sflush_r+0xae>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002ef8:	682f      	ldr	r7, [r5, #0]
 8002efa:	6a21      	ldr	r1, [r4, #32]
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	d030      	beq.n	8002f62 <__sflush_r+0x92>
 8002f00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f02:	89a3      	ldrh	r3, [r4, #12]
 8002f04:	0759      	lsls	r1, r3, #29
 8002f06:	d505      	bpl.n	8002f14 <__sflush_r+0x44>
 8002f08:	6863      	ldr	r3, [r4, #4]
 8002f0a:	1ad2      	subs	r2, r2, r3
 8002f0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f0e:	b10b      	cbz	r3, 8002f14 <__sflush_r+0x44>
 8002f10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f12:	1ad2      	subs	r2, r2, r3
 8002f14:	2300      	movs	r3, #0
 8002f16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f18:	6a21      	ldr	r1, [r4, #32]
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	47b0      	blx	r6
 8002f1e:	1c43      	adds	r3, r0, #1
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	d106      	bne.n	8002f32 <__sflush_r+0x62>
 8002f24:	6829      	ldr	r1, [r5, #0]
 8002f26:	291d      	cmp	r1, #29
 8002f28:	d82b      	bhi.n	8002f82 <__sflush_r+0xb2>
 8002f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8002fd4 <__sflush_r+0x104>)
 8002f2c:	410a      	asrs	r2, r1
 8002f2e:	07d6      	lsls	r6, r2, #31
 8002f30:	d427      	bmi.n	8002f82 <__sflush_r+0xb2>
 8002f32:	2200      	movs	r2, #0
 8002f34:	6062      	str	r2, [r4, #4]
 8002f36:	04d9      	lsls	r1, r3, #19
 8002f38:	6922      	ldr	r2, [r4, #16]
 8002f3a:	6022      	str	r2, [r4, #0]
 8002f3c:	d504      	bpl.n	8002f48 <__sflush_r+0x78>
 8002f3e:	1c42      	adds	r2, r0, #1
 8002f40:	d101      	bne.n	8002f46 <__sflush_r+0x76>
 8002f42:	682b      	ldr	r3, [r5, #0]
 8002f44:	b903      	cbnz	r3, 8002f48 <__sflush_r+0x78>
 8002f46:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f4a:	602f      	str	r7, [r5, #0]
 8002f4c:	b1b9      	cbz	r1, 8002f7e <__sflush_r+0xae>
 8002f4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f52:	4299      	cmp	r1, r3
 8002f54:	d002      	beq.n	8002f5c <__sflush_r+0x8c>
 8002f56:	4628      	mov	r0, r5
 8002f58:	f000 fa24 	bl	80033a4 <_free_r>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f60:	e00d      	b.n	8002f7e <__sflush_r+0xae>
 8002f62:	2301      	movs	r3, #1
 8002f64:	4628      	mov	r0, r5
 8002f66:	47b0      	blx	r6
 8002f68:	4602      	mov	r2, r0
 8002f6a:	1c50      	adds	r0, r2, #1
 8002f6c:	d1c9      	bne.n	8002f02 <__sflush_r+0x32>
 8002f6e:	682b      	ldr	r3, [r5, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0c6      	beq.n	8002f02 <__sflush_r+0x32>
 8002f74:	2b1d      	cmp	r3, #29
 8002f76:	d001      	beq.n	8002f7c <__sflush_r+0xac>
 8002f78:	2b16      	cmp	r3, #22
 8002f7a:	d11e      	bne.n	8002fba <__sflush_r+0xea>
 8002f7c:	602f      	str	r7, [r5, #0]
 8002f7e:	2000      	movs	r0, #0
 8002f80:	e022      	b.n	8002fc8 <__sflush_r+0xf8>
 8002f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	e01b      	b.n	8002fc2 <__sflush_r+0xf2>
 8002f8a:	690f      	ldr	r7, [r1, #16]
 8002f8c:	2f00      	cmp	r7, #0
 8002f8e:	d0f6      	beq.n	8002f7e <__sflush_r+0xae>
 8002f90:	0793      	lsls	r3, r2, #30
 8002f92:	680e      	ldr	r6, [r1, #0]
 8002f94:	bf08      	it	eq
 8002f96:	694b      	ldreq	r3, [r1, #20]
 8002f98:	600f      	str	r7, [r1, #0]
 8002f9a:	bf18      	it	ne
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	eba6 0807 	sub.w	r8, r6, r7
 8002fa2:	608b      	str	r3, [r1, #8]
 8002fa4:	f1b8 0f00 	cmp.w	r8, #0
 8002fa8:	dde9      	ble.n	8002f7e <__sflush_r+0xae>
 8002faa:	6a21      	ldr	r1, [r4, #32]
 8002fac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002fae:	4643      	mov	r3, r8
 8002fb0:	463a      	mov	r2, r7
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	47b0      	blx	r6
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	dc08      	bgt.n	8002fcc <__sflush_r+0xfc>
 8002fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fc2:	81a3      	strh	r3, [r4, #12]
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fcc:	4407      	add	r7, r0
 8002fce:	eba8 0800 	sub.w	r8, r8, r0
 8002fd2:	e7e7      	b.n	8002fa4 <__sflush_r+0xd4>
 8002fd4:	dfbffffe 	.word	0xdfbffffe

08002fd8 <_fflush_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	690b      	ldr	r3, [r1, #16]
 8002fdc:	4605      	mov	r5, r0
 8002fde:	460c      	mov	r4, r1
 8002fe0:	b913      	cbnz	r3, 8002fe8 <_fflush_r+0x10>
 8002fe2:	2500      	movs	r5, #0
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	b118      	cbz	r0, 8002ff2 <_fflush_r+0x1a>
 8002fea:	6a03      	ldr	r3, [r0, #32]
 8002fec:	b90b      	cbnz	r3, 8002ff2 <_fflush_r+0x1a>
 8002fee:	f7ff fe03 	bl	8002bf8 <__sinit>
 8002ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f3      	beq.n	8002fe2 <_fflush_r+0xa>
 8002ffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002ffc:	07d0      	lsls	r0, r2, #31
 8002ffe:	d404      	bmi.n	800300a <_fflush_r+0x32>
 8003000:	0599      	lsls	r1, r3, #22
 8003002:	d402      	bmi.n	800300a <_fflush_r+0x32>
 8003004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003006:	f7ff febe 	bl	8002d86 <__retarget_lock_acquire_recursive>
 800300a:	4628      	mov	r0, r5
 800300c:	4621      	mov	r1, r4
 800300e:	f7ff ff5f 	bl	8002ed0 <__sflush_r>
 8003012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003014:	07da      	lsls	r2, r3, #31
 8003016:	4605      	mov	r5, r0
 8003018:	d4e4      	bmi.n	8002fe4 <_fflush_r+0xc>
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	059b      	lsls	r3, r3, #22
 800301e:	d4e1      	bmi.n	8002fe4 <_fflush_r+0xc>
 8003020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003022:	f7ff feb1 	bl	8002d88 <__retarget_lock_release_recursive>
 8003026:	e7dd      	b.n	8002fe4 <_fflush_r+0xc>

08003028 <__malloc_lock>:
 8003028:	4801      	ldr	r0, [pc, #4]	@ (8003030 <__malloc_lock+0x8>)
 800302a:	f7ff beac 	b.w	8002d86 <__retarget_lock_acquire_recursive>
 800302e:	bf00      	nop
 8003030:	20000210 	.word	0x20000210

08003034 <__malloc_unlock>:
 8003034:	4801      	ldr	r0, [pc, #4]	@ (800303c <__malloc_unlock+0x8>)
 8003036:	f7ff bea7 	b.w	8002d88 <__retarget_lock_release_recursive>
 800303a:	bf00      	nop
 800303c:	20000210 	.word	0x20000210

08003040 <__sread>:
 8003040:	b510      	push	{r4, lr}
 8003042:	460c      	mov	r4, r1
 8003044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003048:	f000 f978 	bl	800333c <_read_r>
 800304c:	2800      	cmp	r0, #0
 800304e:	bfab      	itete	ge
 8003050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003052:	89a3      	ldrhlt	r3, [r4, #12]
 8003054:	181b      	addge	r3, r3, r0
 8003056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800305a:	bfac      	ite	ge
 800305c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800305e:	81a3      	strhlt	r3, [r4, #12]
 8003060:	bd10      	pop	{r4, pc}

08003062 <__swrite>:
 8003062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003066:	461f      	mov	r7, r3
 8003068:	898b      	ldrh	r3, [r1, #12]
 800306a:	05db      	lsls	r3, r3, #23
 800306c:	4605      	mov	r5, r0
 800306e:	460c      	mov	r4, r1
 8003070:	4616      	mov	r6, r2
 8003072:	d505      	bpl.n	8003080 <__swrite+0x1e>
 8003074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003078:	2302      	movs	r3, #2
 800307a:	2200      	movs	r2, #0
 800307c:	f000 f94c 	bl	8003318 <_lseek_r>
 8003080:	89a3      	ldrh	r3, [r4, #12]
 8003082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003086:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800308a:	81a3      	strh	r3, [r4, #12]
 800308c:	4632      	mov	r2, r6
 800308e:	463b      	mov	r3, r7
 8003090:	4628      	mov	r0, r5
 8003092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003096:	f000 b973 	b.w	8003380 <_write_r>

0800309a <__sseek>:
 800309a:	b510      	push	{r4, lr}
 800309c:	460c      	mov	r4, r1
 800309e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a2:	f000 f939 	bl	8003318 <_lseek_r>
 80030a6:	1c43      	adds	r3, r0, #1
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	bf15      	itete	ne
 80030ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80030ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80030b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80030b6:	81a3      	strheq	r3, [r4, #12]
 80030b8:	bf18      	it	ne
 80030ba:	81a3      	strhne	r3, [r4, #12]
 80030bc:	bd10      	pop	{r4, pc}

080030be <__sclose>:
 80030be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c2:	f000 b8f7 	b.w	80032b4 <_close_r>

080030c6 <__swbuf_r>:
 80030c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c8:	460e      	mov	r6, r1
 80030ca:	4614      	mov	r4, r2
 80030cc:	4605      	mov	r5, r0
 80030ce:	b118      	cbz	r0, 80030d8 <__swbuf_r+0x12>
 80030d0:	6a03      	ldr	r3, [r0, #32]
 80030d2:	b90b      	cbnz	r3, 80030d8 <__swbuf_r+0x12>
 80030d4:	f7ff fd90 	bl	8002bf8 <__sinit>
 80030d8:	69a3      	ldr	r3, [r4, #24]
 80030da:	60a3      	str	r3, [r4, #8]
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	071a      	lsls	r2, r3, #28
 80030e0:	d501      	bpl.n	80030e6 <__swbuf_r+0x20>
 80030e2:	6923      	ldr	r3, [r4, #16]
 80030e4:	b943      	cbnz	r3, 80030f8 <__swbuf_r+0x32>
 80030e6:	4621      	mov	r1, r4
 80030e8:	4628      	mov	r0, r5
 80030ea:	f000 f82b 	bl	8003144 <__swsetup_r>
 80030ee:	b118      	cbz	r0, 80030f8 <__swbuf_r+0x32>
 80030f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80030f4:	4638      	mov	r0, r7
 80030f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	6922      	ldr	r2, [r4, #16]
 80030fc:	1a98      	subs	r0, r3, r2
 80030fe:	6963      	ldr	r3, [r4, #20]
 8003100:	b2f6      	uxtb	r6, r6
 8003102:	4283      	cmp	r3, r0
 8003104:	4637      	mov	r7, r6
 8003106:	dc05      	bgt.n	8003114 <__swbuf_r+0x4e>
 8003108:	4621      	mov	r1, r4
 800310a:	4628      	mov	r0, r5
 800310c:	f7ff ff64 	bl	8002fd8 <_fflush_r>
 8003110:	2800      	cmp	r0, #0
 8003112:	d1ed      	bne.n	80030f0 <__swbuf_r+0x2a>
 8003114:	68a3      	ldr	r3, [r4, #8]
 8003116:	3b01      	subs	r3, #1
 8003118:	60a3      	str	r3, [r4, #8]
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	6022      	str	r2, [r4, #0]
 8003120:	701e      	strb	r6, [r3, #0]
 8003122:	6962      	ldr	r2, [r4, #20]
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	429a      	cmp	r2, r3
 8003128:	d004      	beq.n	8003134 <__swbuf_r+0x6e>
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	07db      	lsls	r3, r3, #31
 800312e:	d5e1      	bpl.n	80030f4 <__swbuf_r+0x2e>
 8003130:	2e0a      	cmp	r6, #10
 8003132:	d1df      	bne.n	80030f4 <__swbuf_r+0x2e>
 8003134:	4621      	mov	r1, r4
 8003136:	4628      	mov	r0, r5
 8003138:	f7ff ff4e 	bl	8002fd8 <_fflush_r>
 800313c:	2800      	cmp	r0, #0
 800313e:	d0d9      	beq.n	80030f4 <__swbuf_r+0x2e>
 8003140:	e7d6      	b.n	80030f0 <__swbuf_r+0x2a>
	...

08003144 <__swsetup_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4b29      	ldr	r3, [pc, #164]	@ (80031ec <__swsetup_r+0xa8>)
 8003148:	4605      	mov	r5, r0
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	460c      	mov	r4, r1
 800314e:	b118      	cbz	r0, 8003158 <__swsetup_r+0x14>
 8003150:	6a03      	ldr	r3, [r0, #32]
 8003152:	b90b      	cbnz	r3, 8003158 <__swsetup_r+0x14>
 8003154:	f7ff fd50 	bl	8002bf8 <__sinit>
 8003158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800315c:	0719      	lsls	r1, r3, #28
 800315e:	d422      	bmi.n	80031a6 <__swsetup_r+0x62>
 8003160:	06da      	lsls	r2, r3, #27
 8003162:	d407      	bmi.n	8003174 <__swsetup_r+0x30>
 8003164:	2209      	movs	r2, #9
 8003166:	602a      	str	r2, [r5, #0]
 8003168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800316c:	81a3      	strh	r3, [r4, #12]
 800316e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003172:	e033      	b.n	80031dc <__swsetup_r+0x98>
 8003174:	0758      	lsls	r0, r3, #29
 8003176:	d512      	bpl.n	800319e <__swsetup_r+0x5a>
 8003178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800317a:	b141      	cbz	r1, 800318e <__swsetup_r+0x4a>
 800317c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003180:	4299      	cmp	r1, r3
 8003182:	d002      	beq.n	800318a <__swsetup_r+0x46>
 8003184:	4628      	mov	r0, r5
 8003186:	f000 f90d 	bl	80033a4 <_free_r>
 800318a:	2300      	movs	r3, #0
 800318c:	6363      	str	r3, [r4, #52]	@ 0x34
 800318e:	89a3      	ldrh	r3, [r4, #12]
 8003190:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003194:	81a3      	strh	r3, [r4, #12]
 8003196:	2300      	movs	r3, #0
 8003198:	6063      	str	r3, [r4, #4]
 800319a:	6923      	ldr	r3, [r4, #16]
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	f043 0308 	orr.w	r3, r3, #8
 80031a4:	81a3      	strh	r3, [r4, #12]
 80031a6:	6923      	ldr	r3, [r4, #16]
 80031a8:	b94b      	cbnz	r3, 80031be <__swsetup_r+0x7a>
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80031b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031b4:	d003      	beq.n	80031be <__swsetup_r+0x7a>
 80031b6:	4621      	mov	r1, r4
 80031b8:	4628      	mov	r0, r5
 80031ba:	f000 f83f 	bl	800323c <__smakebuf_r>
 80031be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031c2:	f013 0201 	ands.w	r2, r3, #1
 80031c6:	d00a      	beq.n	80031de <__swsetup_r+0x9a>
 80031c8:	2200      	movs	r2, #0
 80031ca:	60a2      	str	r2, [r4, #8]
 80031cc:	6962      	ldr	r2, [r4, #20]
 80031ce:	4252      	negs	r2, r2
 80031d0:	61a2      	str	r2, [r4, #24]
 80031d2:	6922      	ldr	r2, [r4, #16]
 80031d4:	b942      	cbnz	r2, 80031e8 <__swsetup_r+0xa4>
 80031d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80031da:	d1c5      	bne.n	8003168 <__swsetup_r+0x24>
 80031dc:	bd38      	pop	{r3, r4, r5, pc}
 80031de:	0799      	lsls	r1, r3, #30
 80031e0:	bf58      	it	pl
 80031e2:	6962      	ldrpl	r2, [r4, #20]
 80031e4:	60a2      	str	r2, [r4, #8]
 80031e6:	e7f4      	b.n	80031d2 <__swsetup_r+0x8e>
 80031e8:	2000      	movs	r0, #0
 80031ea:	e7f7      	b.n	80031dc <__swsetup_r+0x98>
 80031ec:	20000018 	.word	0x20000018

080031f0 <__swhatbuf_r>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	460c      	mov	r4, r1
 80031f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f8:	2900      	cmp	r1, #0
 80031fa:	b096      	sub	sp, #88	@ 0x58
 80031fc:	4615      	mov	r5, r2
 80031fe:	461e      	mov	r6, r3
 8003200:	da0d      	bge.n	800321e <__swhatbuf_r+0x2e>
 8003202:	89a3      	ldrh	r3, [r4, #12]
 8003204:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	bf14      	ite	ne
 800320e:	2340      	movne	r3, #64	@ 0x40
 8003210:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003214:	2000      	movs	r0, #0
 8003216:	6031      	str	r1, [r6, #0]
 8003218:	602b      	str	r3, [r5, #0]
 800321a:	b016      	add	sp, #88	@ 0x58
 800321c:	bd70      	pop	{r4, r5, r6, pc}
 800321e:	466a      	mov	r2, sp
 8003220:	f000 f858 	bl	80032d4 <_fstat_r>
 8003224:	2800      	cmp	r0, #0
 8003226:	dbec      	blt.n	8003202 <__swhatbuf_r+0x12>
 8003228:	9901      	ldr	r1, [sp, #4]
 800322a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800322e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003232:	4259      	negs	r1, r3
 8003234:	4159      	adcs	r1, r3
 8003236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800323a:	e7eb      	b.n	8003214 <__swhatbuf_r+0x24>

0800323c <__smakebuf_r>:
 800323c:	898b      	ldrh	r3, [r1, #12]
 800323e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003240:	079d      	lsls	r5, r3, #30
 8003242:	4606      	mov	r6, r0
 8003244:	460c      	mov	r4, r1
 8003246:	d507      	bpl.n	8003258 <__smakebuf_r+0x1c>
 8003248:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	6123      	str	r3, [r4, #16]
 8003250:	2301      	movs	r3, #1
 8003252:	6163      	str	r3, [r4, #20]
 8003254:	b003      	add	sp, #12
 8003256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003258:	ab01      	add	r3, sp, #4
 800325a:	466a      	mov	r2, sp
 800325c:	f7ff ffc8 	bl	80031f0 <__swhatbuf_r>
 8003260:	9f00      	ldr	r7, [sp, #0]
 8003262:	4605      	mov	r5, r0
 8003264:	4639      	mov	r1, r7
 8003266:	4630      	mov	r0, r6
 8003268:	f7ff fdb2 	bl	8002dd0 <_malloc_r>
 800326c:	b948      	cbnz	r0, 8003282 <__smakebuf_r+0x46>
 800326e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003272:	059a      	lsls	r2, r3, #22
 8003274:	d4ee      	bmi.n	8003254 <__smakebuf_r+0x18>
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	e7e2      	b.n	8003248 <__smakebuf_r+0xc>
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	6020      	str	r0, [r4, #0]
 8003286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800328a:	81a3      	strh	r3, [r4, #12]
 800328c:	9b01      	ldr	r3, [sp, #4]
 800328e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003292:	b15b      	cbz	r3, 80032ac <__smakebuf_r+0x70>
 8003294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003298:	4630      	mov	r0, r6
 800329a:	f000 f82d 	bl	80032f8 <_isatty_r>
 800329e:	b128      	cbz	r0, 80032ac <__smakebuf_r+0x70>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	431d      	orrs	r5, r3
 80032b0:	81a5      	strh	r5, [r4, #12]
 80032b2:	e7cf      	b.n	8003254 <__smakebuf_r+0x18>

080032b4 <_close_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	4d06      	ldr	r5, [pc, #24]	@ (80032d0 <_close_r+0x1c>)
 80032b8:	2300      	movs	r3, #0
 80032ba:	4604      	mov	r4, r0
 80032bc:	4608      	mov	r0, r1
 80032be:	602b      	str	r3, [r5, #0]
 80032c0:	f7fd fb19 	bl	80008f6 <_close>
 80032c4:	1c43      	adds	r3, r0, #1
 80032c6:	d102      	bne.n	80032ce <_close_r+0x1a>
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	b103      	cbz	r3, 80032ce <_close_r+0x1a>
 80032cc:	6023      	str	r3, [r4, #0]
 80032ce:	bd38      	pop	{r3, r4, r5, pc}
 80032d0:	2000021c 	.word	0x2000021c

080032d4 <_fstat_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4d07      	ldr	r5, [pc, #28]	@ (80032f4 <_fstat_r+0x20>)
 80032d8:	2300      	movs	r3, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	602b      	str	r3, [r5, #0]
 80032e2:	f7fd fb14 	bl	800090e <_fstat>
 80032e6:	1c43      	adds	r3, r0, #1
 80032e8:	d102      	bne.n	80032f0 <_fstat_r+0x1c>
 80032ea:	682b      	ldr	r3, [r5, #0]
 80032ec:	b103      	cbz	r3, 80032f0 <_fstat_r+0x1c>
 80032ee:	6023      	str	r3, [r4, #0]
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	bf00      	nop
 80032f4:	2000021c 	.word	0x2000021c

080032f8 <_isatty_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4d06      	ldr	r5, [pc, #24]	@ (8003314 <_isatty_r+0x1c>)
 80032fc:	2300      	movs	r3, #0
 80032fe:	4604      	mov	r4, r0
 8003300:	4608      	mov	r0, r1
 8003302:	602b      	str	r3, [r5, #0]
 8003304:	f7fd fb13 	bl	800092e <_isatty>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_isatty_r+0x1a>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_isatty_r+0x1a>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	2000021c 	.word	0x2000021c

08003318 <_lseek_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4d07      	ldr	r5, [pc, #28]	@ (8003338 <_lseek_r+0x20>)
 800331c:	4604      	mov	r4, r0
 800331e:	4608      	mov	r0, r1
 8003320:	4611      	mov	r1, r2
 8003322:	2200      	movs	r2, #0
 8003324:	602a      	str	r2, [r5, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f7fd fb0c 	bl	8000944 <_lseek>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d102      	bne.n	8003336 <_lseek_r+0x1e>
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	b103      	cbz	r3, 8003336 <_lseek_r+0x1e>
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	2000021c 	.word	0x2000021c

0800333c <_read_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4d07      	ldr	r5, [pc, #28]	@ (800335c <_read_r+0x20>)
 8003340:	4604      	mov	r4, r0
 8003342:	4608      	mov	r0, r1
 8003344:	4611      	mov	r1, r2
 8003346:	2200      	movs	r2, #0
 8003348:	602a      	str	r2, [r5, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f7fd fa9a 	bl	8000884 <_read>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_read_r+0x1e>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_read_r+0x1e>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	2000021c 	.word	0x2000021c

08003360 <_sbrk_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	4d06      	ldr	r5, [pc, #24]	@ (800337c <_sbrk_r+0x1c>)
 8003364:	2300      	movs	r3, #0
 8003366:	4604      	mov	r4, r0
 8003368:	4608      	mov	r0, r1
 800336a:	602b      	str	r3, [r5, #0]
 800336c:	f7fd faf8 	bl	8000960 <_sbrk>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d102      	bne.n	800337a <_sbrk_r+0x1a>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	b103      	cbz	r3, 800337a <_sbrk_r+0x1a>
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	2000021c 	.word	0x2000021c

08003380 <_write_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	4d07      	ldr	r5, [pc, #28]	@ (80033a0 <_write_r+0x20>)
 8003384:	4604      	mov	r4, r0
 8003386:	4608      	mov	r0, r1
 8003388:	4611      	mov	r1, r2
 800338a:	2200      	movs	r2, #0
 800338c:	602a      	str	r2, [r5, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	f7fd fa95 	bl	80008be <_write>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d102      	bne.n	800339e <_write_r+0x1e>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	b103      	cbz	r3, 800339e <_write_r+0x1e>
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	bd38      	pop	{r3, r4, r5, pc}
 80033a0:	2000021c 	.word	0x2000021c

080033a4 <_free_r>:
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4605      	mov	r5, r0
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d041      	beq.n	8003430 <_free_r+0x8c>
 80033ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033b0:	1f0c      	subs	r4, r1, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bfb8      	it	lt
 80033b6:	18e4      	addlt	r4, r4, r3
 80033b8:	f7ff fe36 	bl	8003028 <__malloc_lock>
 80033bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003434 <_free_r+0x90>)
 80033be:	6813      	ldr	r3, [r2, #0]
 80033c0:	b933      	cbnz	r3, 80033d0 <_free_r+0x2c>
 80033c2:	6063      	str	r3, [r4, #4]
 80033c4:	6014      	str	r4, [r2, #0]
 80033c6:	4628      	mov	r0, r5
 80033c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033cc:	f7ff be32 	b.w	8003034 <__malloc_unlock>
 80033d0:	42a3      	cmp	r3, r4
 80033d2:	d908      	bls.n	80033e6 <_free_r+0x42>
 80033d4:	6820      	ldr	r0, [r4, #0]
 80033d6:	1821      	adds	r1, r4, r0
 80033d8:	428b      	cmp	r3, r1
 80033da:	bf01      	itttt	eq
 80033dc:	6819      	ldreq	r1, [r3, #0]
 80033de:	685b      	ldreq	r3, [r3, #4]
 80033e0:	1809      	addeq	r1, r1, r0
 80033e2:	6021      	streq	r1, [r4, #0]
 80033e4:	e7ed      	b.n	80033c2 <_free_r+0x1e>
 80033e6:	461a      	mov	r2, r3
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b10b      	cbz	r3, 80033f0 <_free_r+0x4c>
 80033ec:	42a3      	cmp	r3, r4
 80033ee:	d9fa      	bls.n	80033e6 <_free_r+0x42>
 80033f0:	6811      	ldr	r1, [r2, #0]
 80033f2:	1850      	adds	r0, r2, r1
 80033f4:	42a0      	cmp	r0, r4
 80033f6:	d10b      	bne.n	8003410 <_free_r+0x6c>
 80033f8:	6820      	ldr	r0, [r4, #0]
 80033fa:	4401      	add	r1, r0
 80033fc:	1850      	adds	r0, r2, r1
 80033fe:	4283      	cmp	r3, r0
 8003400:	6011      	str	r1, [r2, #0]
 8003402:	d1e0      	bne.n	80033c6 <_free_r+0x22>
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	6053      	str	r3, [r2, #4]
 800340a:	4408      	add	r0, r1
 800340c:	6010      	str	r0, [r2, #0]
 800340e:	e7da      	b.n	80033c6 <_free_r+0x22>
 8003410:	d902      	bls.n	8003418 <_free_r+0x74>
 8003412:	230c      	movs	r3, #12
 8003414:	602b      	str	r3, [r5, #0]
 8003416:	e7d6      	b.n	80033c6 <_free_r+0x22>
 8003418:	6820      	ldr	r0, [r4, #0]
 800341a:	1821      	adds	r1, r4, r0
 800341c:	428b      	cmp	r3, r1
 800341e:	bf04      	itt	eq
 8003420:	6819      	ldreq	r1, [r3, #0]
 8003422:	685b      	ldreq	r3, [r3, #4]
 8003424:	6063      	str	r3, [r4, #4]
 8003426:	bf04      	itt	eq
 8003428:	1809      	addeq	r1, r1, r0
 800342a:	6021      	streq	r1, [r4, #0]
 800342c:	6054      	str	r4, [r2, #4]
 800342e:	e7ca      	b.n	80033c6 <_free_r+0x22>
 8003430:	bd38      	pop	{r3, r4, r5, pc}
 8003432:	bf00      	nop
 8003434:	20000218 	.word	0x20000218

08003438 <_init>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr

08003444 <_fini>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr
