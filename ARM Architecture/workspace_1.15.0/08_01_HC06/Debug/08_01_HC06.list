
08_01_HC06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003540  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080036e0  080036e0  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800374c  0800374c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  0800374c  0800374c  0000474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003754  08003754  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003754  08003754  00004754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003758  08003758  00004758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800375c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000005c  080037b8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080037b8  0000525c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008347  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000170b  00000000  00000000  0000d3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000548  00000000  00000000  0000f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157a9  00000000  00000000  0000f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ac3  00000000  00000000  00024ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c7f  00000000  00000000  0002d984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002054  00000000  00000000  000b3648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000b569c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080036c8 	.word	0x080036c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080036c8 	.word	0x080036c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <send_data_via_bluetooth>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_data_via_bluetooth(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	@ 0x38
 8000574:	af00      	add	r7, sp, #0
	char buffer[50];
	int len = snprintf(buffer, sizeof(buffer), "블루투스 통신 테스트\r\n");
 8000576:	463b      	mov	r3, r7
 8000578:	4a08      	ldr	r2, [pc, #32]	@ (800059c <send_data_via_bluetooth+0x2c>)
 800057a:	2132      	movs	r1, #50	@ 0x32
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fbef 	bl	8002d60 <sniprintf>
 8000582:	6378      	str	r0, [r7, #52]	@ 0x34
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8000584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000586:	b29a      	uxth	r2, r3
 8000588:	4639      	mov	r1, r7
 800058a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <send_data_via_bluetooth+0x30>)
 8000590:	f001 fbe0 	bl	8001d54 <HAL_UART_Transmit>
}
 8000594:	bf00      	nop
 8000596:	3738      	adds	r7, #56	@ 0x38
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	080036e0 	.word	0x080036e0
 80005a0:	20000078 	.word	0x20000078

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fb14 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f820 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8dc 	bl	800076c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f8b0 	bl	8000718 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f884 	bl	80006c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx1_data, sizeof(rx1_data));
 80005bc:	2201      	movs	r2, #1
 80005be:	4908      	ldr	r1, [pc, #32]	@ (80005e0 <main+0x3c>)
 80005c0:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <main+0x40>)
 80005c2:	f001 fc52 	bl	8001e6a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx2_data, sizeof(rx2_data));
 80005c6:	2201      	movs	r2, #1
 80005c8:	4907      	ldr	r1, [pc, #28]	@ (80005e8 <main+0x44>)
 80005ca:	4808      	ldr	r0, [pc, #32]	@ (80005ec <main+0x48>)
 80005cc:	f001 fc4d 	bl	8001e6a <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  send_data_via_bluetooth();
 80005d0:	f7ff ffce 	bl	8000570 <send_data_via_bluetooth>
	  HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d8:	f000 fb6e 	bl	8000cb8 <HAL_Delay>
	  send_data_via_bluetooth();
 80005dc:	bf00      	nop
 80005de:	e7f7      	b.n	80005d0 <main+0x2c>
 80005e0:	20000108 	.word	0x20000108
 80005e4:	20000078 	.word	0x20000078
 80005e8:	20000109 	.word	0x20000109
 80005ec:	200000c0 	.word	0x200000c0

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	@ 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fbe2 	bl	8002dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	@ (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	@ (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fe84 	bl	8001384 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000682:	f000 f917 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f8e6 	bl	8001874 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 f901 	bl	80008b4 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	@ 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <MX_USART1_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006fc:	f001 fada 	bl	8001cb4 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f8d5 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000078 	.word	0x20000078
 8000714:	40011000 	.word	0x40011000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000750:	f001 fab0 	bl	8001cb4 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f8ab 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000c0 	.word	0x200000c0
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	@ 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b2d      	ldr	r3, [pc, #180]	@ (800083c <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a2c      	ldr	r2, [pc, #176]	@ (800083c <MX_GPIO_Init+0xd0>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b2a      	ldr	r3, [pc, #168]	@ (800083c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b26      	ldr	r3, [pc, #152]	@ (800083c <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a25      	ldr	r2, [pc, #148]	@ (800083c <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b23      	ldr	r3, [pc, #140]	@ (800083c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a1e      	ldr	r2, [pc, #120]	@ (800083c <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	@ (800083c <MX_GPIO_Init+0xd0>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2122      	movs	r1, #34	@ 0x22
 80007f6:	4812      	ldr	r0, [pc, #72]	@ (8000840 <MX_GPIO_Init+0xd4>)
 80007f8:	f000 fdaa 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000802:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_GPIO_Init+0xd8>)
 8000814:	f000 fc18 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000818:	2322      	movs	r3, #34	@ 0x22
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_GPIO_Init+0xd4>)
 8000830:	f000 fc0a 	bl	8001048 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020800 	.word	0x40020800

08000848 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a11      	ldr	r2, [pc, #68]	@ (800089c <HAL_UART_RxCpltCallback+0x54>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d10b      	bne.n	8000872 <HAL_UART_RxCpltCallback+0x2a>
	{
		HAL_UART_Transmit(&huart1, &rx2_data, sizeof(rx2_data), 10);
 800085a:	230a      	movs	r3, #10
 800085c:	2201      	movs	r2, #1
 800085e:	4910      	ldr	r1, [pc, #64]	@ (80008a0 <HAL_UART_RxCpltCallback+0x58>)
 8000860:	4810      	ldr	r0, [pc, #64]	@ (80008a4 <HAL_UART_RxCpltCallback+0x5c>)
 8000862:	f001 fa77 	bl	8001d54 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rx2_data, sizeof(rx2_data));
 8000866:	2201      	movs	r2, #1
 8000868:	490d      	ldr	r1, [pc, #52]	@ (80008a0 <HAL_UART_RxCpltCallback+0x58>)
 800086a:	480f      	ldr	r0, [pc, #60]	@ (80008a8 <HAL_UART_RxCpltCallback+0x60>)
 800086c:	f001 fafd 	bl	8001e6a <HAL_UART_Receive_IT>
	else if(huart->Instance == USART1)
	{
		HAL_UART_Transmit(&huart2, &rx1_data, sizeof(rx1_data), 10);
		HAL_UART_Receive_IT(&huart1, &rx1_data, sizeof(rx1_data));
	}
}
 8000870:	e00f      	b.n	8000892 <HAL_UART_RxCpltCallback+0x4a>
	else if(huart->Instance == USART1)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <HAL_UART_RxCpltCallback+0x64>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d10a      	bne.n	8000892 <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Transmit(&huart2, &rx1_data, sizeof(rx1_data), 10);
 800087c:	230a      	movs	r3, #10
 800087e:	2201      	movs	r2, #1
 8000880:	490b      	ldr	r1, [pc, #44]	@ (80008b0 <HAL_UART_RxCpltCallback+0x68>)
 8000882:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <HAL_UART_RxCpltCallback+0x60>)
 8000884:	f001 fa66 	bl	8001d54 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &rx1_data, sizeof(rx1_data));
 8000888:	2201      	movs	r2, #1
 800088a:	4909      	ldr	r1, [pc, #36]	@ (80008b0 <HAL_UART_RxCpltCallback+0x68>)
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <HAL_UART_RxCpltCallback+0x5c>)
 800088e:	f001 faec 	bl	8001e6a <HAL_UART_Receive_IT>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40004400 	.word	0x40004400
 80008a0:	20000109 	.word	0x20000109
 80008a4:	20000078 	.word	0x20000078
 80008a8:	200000c0 	.word	0x200000c0
 80008ac:	40011000 	.word	0x40011000
 80008b0:	20000108 	.word	0x20000108

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <Error_Handler+0x8>

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	@ (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	@ (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008fe:	2007      	movs	r0, #7
 8000900:	f000 face 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	@ 0x30
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a49      	ldr	r2, [pc, #292]	@ (8000a54 <HAL_UART_MspInit+0x144>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d153      	bne.n	80009da <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	4b48      	ldr	r3, [pc, #288]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a47      	ldr	r2, [pc, #284]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b45      	ldr	r3, [pc, #276]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	4b41      	ldr	r3, [pc, #260]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a40      	ldr	r2, [pc, #256]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a39      	ldr	r2, [pc, #228]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b37      	ldr	r3, [pc, #220]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000998:	2307      	movs	r3, #7
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	482e      	ldr	r0, [pc, #184]	@ (8000a5c <HAL_UART_MspInit+0x14c>)
 80009a4:	f000 fb50 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009a8:	2380      	movs	r3, #128	@ 0x80
 80009aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b8:	2307      	movs	r3, #7
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4827      	ldr	r0, [pc, #156]	@ (8000a60 <HAL_UART_MspInit+0x150>)
 80009c4:	f000 fb40 	bl	8001048 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2025      	movs	r0, #37	@ 0x25
 80009ce:	f000 fa72 	bl	8000eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009d2:	2025      	movs	r0, #37	@ 0x25
 80009d4:	f000 fa8b 	bl	8000eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d8:	e038      	b.n	8000a4c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a21      	ldr	r2, [pc, #132]	@ (8000a64 <HAL_UART_MspInit+0x154>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d133      	bne.n	8000a4c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	4a13      	ldr	r2, [pc, #76]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <HAL_UART_MspInit+0x148>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <HAL_UART_MspInit+0x14c>)
 8000a38:	f000 fb06 	bl	8001048 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2026      	movs	r0, #38	@ 0x26
 8000a42:	f000 fa38 	bl	8000eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a46:	2026      	movs	r0, #38	@ 0x26
 8000a48:	f000 fa51 	bl	8000eee <HAL_NVIC_EnableIRQ>
}
 8000a4c:	bf00      	nop
 8000a4e:	3730      	adds	r7, #48	@ 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40011000 	.word	0x40011000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40004400 	.word	0x40004400

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abe:	f000 f8db 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <USART1_IRQHandler+0x10>)
 8000ace:	f001 f9f1 	bl	8001eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000078 	.word	0x20000078

08000adc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae0:	4802      	ldr	r0, [pc, #8]	@ (8000aec <USART2_IRQHandler+0x10>)
 8000ae2:	f001 f9e7 	bl	8001eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000c0 	.word	0x200000c0

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f002 f95a 	bl	8002dd8 <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20020000 	.word	0x20020000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	2000010c 	.word	0x2000010c
 8000b58:	20000260 	.word	0x20000260

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b84:	f7ff ffea 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	@ (8000bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f002 f919 	bl	8002de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb2:	f7ff fcf7 	bl	80005a4 <main>
  bx  lr    
 8000bb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc4:	0800375c 	.word	0x0800375c
  ldr r2, =_sbss
 8000bc8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bcc:	2000025c 	.word	0x2000025c

08000bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <HAL_Init+0x40>)
 8000bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_Init+0x40>)
 8000bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <HAL_Init+0x40>)
 8000bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f94f 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 f808 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fe5a 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023c00 	.word	0x40023c00

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f967 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c54:	f000 f92f 	bl	8000eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000110 	.word	0x20000110

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	@ (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000110 	.word	0x20000110

08000cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff ffee 	bl	8000ca0 <HAL_GetTick>
 8000cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000cd0:	d005      	beq.n	8000cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <HAL_Delay+0x44>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cde:	bf00      	nop
 8000ce0:	f7ff ffde 	bl	8000ca0 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d8f7      	bhi.n	8000ce0 <HAL_Delay+0x28>
  {
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4907      	ldr	r1, [pc, #28]	@ (8000d9c <__NVIC_EnableIRQ+0x38>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	@ (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	@ (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	@ 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	@ 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e6c:	d301      	bcc.n	8000e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00f      	b.n	8000e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <SysTick_Config+0x40>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e80:	f7ff ff8e 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <SysTick_Config+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <SysTick_Config+0x40>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff29 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff3e 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff8e 	bl	8000df4 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5d 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff31 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffa2 	bl	8000e5c <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff feb6 	bl	8000ca0 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d008      	beq.n	8000f54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2280      	movs	r2, #128	@ 0x80
 8000f46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e052      	b.n	8000ffa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0216 	bic.w	r2, r2, #22
 8000f62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	695a      	ldr	r2, [r3, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d103      	bne.n	8000f84 <HAL_DMA_Abort+0x62>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0208 	bic.w	r2, r2, #8
 8000f92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa4:	e013      	b.n	8000fce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fa6:	f7ff fe7b 	bl	8000ca0 <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b05      	cmp	r3, #5
 8000fb2:	d90c      	bls.n	8000fce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e015      	b.n	8000ffa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e4      	bne.n	8000fa6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fe0:	223f      	movs	r2, #63	@ 0x3f
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d004      	beq.n	8001020 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2280      	movs	r2, #128	@ 0x80
 800101a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e00c      	b.n	800103a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2205      	movs	r2, #5
 8001024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0201 	bic.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	@ 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e159      	b.n	8001318 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8148 	bne.w	8001312 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80a2 	beq.w	8001312 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b57      	ldr	r3, [pc, #348]	@ (8001330 <HAL_GPIO_Init+0x2e8>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a56      	ldr	r2, [pc, #344]	@ (8001330 <HAL_GPIO_Init+0x2e8>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b54      	ldr	r3, [pc, #336]	@ (8001330 <HAL_GPIO_Init+0x2e8>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <HAL_GPIO_Init+0x2ec>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a49      	ldr	r2, [pc, #292]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x202>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a48      	ldr	r2, [pc, #288]	@ (800133c <HAL_GPIO_Init+0x2f4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x1fe>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a47      	ldr	r2, [pc, #284]	@ (8001340 <HAL_GPIO_Init+0x2f8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x1fa>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a46      	ldr	r2, [pc, #280]	@ (8001344 <HAL_GPIO_Init+0x2fc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x1f6>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a45      	ldr	r2, [pc, #276]	@ (8001348 <HAL_GPIO_Init+0x300>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x1f2>
 8001236:	2304      	movs	r3, #4
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x204>
 800123a:	2307      	movs	r3, #7
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x204>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x204>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x204>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x204>
 800124a:	2300      	movs	r3, #0
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125c:	4935      	ldr	r1, [pc, #212]	@ (8001334 <HAL_GPIO_Init+0x2ec>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b38      	ldr	r3, [pc, #224]	@ (800134c <HAL_GPIO_Init+0x304>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a2f      	ldr	r2, [pc, #188]	@ (800134c <HAL_GPIO_Init+0x304>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HAL_GPIO_Init+0x304>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a24      	ldr	r2, [pc, #144]	@ (800134c <HAL_GPIO_Init+0x304>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012be:	4b23      	ldr	r3, [pc, #140]	@ (800134c <HAL_GPIO_Init+0x304>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e2:	4a1a      	ldr	r2, [pc, #104]	@ (800134c <HAL_GPIO_Init+0x304>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <HAL_GPIO_Init+0x304>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130c:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <HAL_GPIO_Init+0x304>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	f67f aea2 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020400 	.word	0x40020400
 8001340:	40020800 	.word	0x40020800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40021000 	.word	0x40021000
 800134c:	40013c00 	.word	0x40013c00

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800136c:	e003      	b.n	8001376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	041a      	lsls	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	619a      	str	r2, [r3, #24]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e267      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d075      	beq.n	800148e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a2:	4b88      	ldr	r3, [pc, #544]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d00c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ae:	4b85      	ldr	r3, [pc, #532]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d112      	bne.n	80013e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ba:	4b82      	ldr	r3, [pc, #520]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013c6:	d10b      	bne.n	80013e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	4b7e      	ldr	r3, [pc, #504]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d05b      	beq.n	800148c <HAL_RCC_OscConfig+0x108>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d157      	bne.n	800148c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e242      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e8:	d106      	bne.n	80013f8 <HAL_RCC_OscConfig+0x74>
 80013ea:	4b76      	ldr	r3, [pc, #472]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a75      	ldr	r2, [pc, #468]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e01d      	b.n	8001434 <HAL_RCC_OscConfig+0xb0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x98>
 8001402:	4b70      	ldr	r3, [pc, #448]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a6f      	ldr	r2, [pc, #444]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b6d      	ldr	r3, [pc, #436]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6c      	ldr	r2, [pc, #432]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0xb0>
 800141c:	4b69      	ldr	r3, [pc, #420]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a68      	ldr	r2, [pc, #416]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b66      	ldr	r3, [pc, #408]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a65      	ldr	r2, [pc, #404]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fc30 	bl	8000ca0 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fc2c 	bl	8000ca0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	@ 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e207      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b5b      	ldr	r3, [pc, #364]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xc0>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fc1c 	bl	8000ca0 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fc18 	bl	8000ca0 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1f3      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	4b51      	ldr	r3, [pc, #324]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0xe8>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d063      	beq.n	8001562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149a:	4b4a      	ldr	r3, [pc, #296]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a6:	4b47      	ldr	r3, [pc, #284]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d11c      	bne.n	80014ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b2:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	4b41      	ldr	r3, [pc, #260]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_RCC_OscConfig+0x152>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1c7      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4b3b      	ldr	r3, [pc, #236]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4937      	ldr	r1, [pc, #220]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	e03a      	b.n	8001562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f4:	4b34      	ldr	r3, [pc, #208]	@ (80015c8 <HAL_RCC_OscConfig+0x244>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff fbd1 	bl	8000ca0 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fbcd 	bl	8000ca0 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1a8      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	4b2b      	ldr	r3, [pc, #172]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4925      	ldr	r1, [pc, #148]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
 8001534:	e015      	b.n	8001562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <HAL_RCC_OscConfig+0x244>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fbb0 	bl	8000ca0 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fbac 	bl	8000ca0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e187      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d036      	beq.n	80015dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d016      	beq.n	80015a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_RCC_OscConfig+0x248>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fb90 	bl	8000ca0 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fb8c 	bl	8000ca0 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e167      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x200>
 80015a2:	e01b      	b.n	80015dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_RCC_OscConfig+0x248>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fb79 	bl	8000ca0 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	e00e      	b.n	80015d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff fb75 	bl	8000ca0 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d907      	bls.n	80015d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e150      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
 80015c4:	40023800 	.word	0x40023800
 80015c8:	42470000 	.word	0x42470000
 80015cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	4b88      	ldr	r3, [pc, #544]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1ea      	bne.n	80015b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8097 	beq.w	8001718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b81      	ldr	r3, [pc, #516]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10f      	bne.n	800161a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b7d      	ldr	r3, [pc, #500]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a7c      	ldr	r2, [pc, #496]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b7a      	ldr	r3, [pc, #488]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b77      	ldr	r3, [pc, #476]	@ (80017f8 <HAL_RCC_OscConfig+0x474>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001626:	4b74      	ldr	r3, [pc, #464]	@ (80017f8 <HAL_RCC_OscConfig+0x474>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a73      	ldr	r2, [pc, #460]	@ (80017f8 <HAL_RCC_OscConfig+0x474>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb35 	bl	8000ca0 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff fb31 	bl	8000ca0 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e10c      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b6a      	ldr	r3, [pc, #424]	@ (80017f8 <HAL_RCC_OscConfig+0x474>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x2ea>
 8001660:	4b64      	ldr	r3, [pc, #400]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001664:	4a63      	ldr	r2, [pc, #396]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	@ 0x70
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x324>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x30c>
 8001676:	4b5f      	ldr	r3, [pc, #380]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167a:	4a5e      	ldr	r2, [pc, #376]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6713      	str	r3, [r2, #112]	@ 0x70
 8001682:	4b5c      	ldr	r3, [pc, #368]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001686:	4a5b      	ldr	r2, [pc, #364]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6713      	str	r3, [r2, #112]	@ 0x70
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x324>
 8001690:	4b58      	ldr	r3, [pc, #352]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001694:	4a57      	ldr	r2, [pc, #348]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	@ 0x70
 800169c:	4b55      	ldr	r3, [pc, #340]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a0:	4a54      	ldr	r2, [pc, #336]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d015      	beq.n	80016dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff faf6 	bl	8000ca0 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff faf2 	bl	8000ca0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0cb      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	4b49      	ldr	r3, [pc, #292]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0ee      	beq.n	80016b8 <HAL_RCC_OscConfig+0x334>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016dc:	f7ff fae0 	bl	8000ca0 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fadc 	bl	8000ca0 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e0b5      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	4b3e      	ldr	r3, [pc, #248]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ee      	bne.n	80016e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170c:	4b39      	ldr	r3, [pc, #228]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	4a38      	ldr	r2, [pc, #224]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001716:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a1 	beq.w	8001864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001722:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b08      	cmp	r3, #8
 800172c:	d05c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d141      	bne.n	80017ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <HAL_RCC_OscConfig+0x478>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fab0 	bl	8000ca0 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff faac 	bl	8000ca0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e087      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	4b27      	ldr	r3, [pc, #156]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69da      	ldr	r2, [r3, #28]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001770:	019b      	lsls	r3, r3, #6
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	3b01      	subs	r3, #1
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001784:	061b      	lsls	r3, r3, #24
 8001786:	491b      	ldr	r1, [pc, #108]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x478>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff fa85 	bl	8000ca0 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff fa81 	bl	8000ca0 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e05c      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x416>
 80017b8:	e054      	b.n	8001864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <HAL_RCC_OscConfig+0x478>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fa6e 	bl	8000ca0 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff fa6a 	bl	8000ca0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e045      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_RCC_OscConfig+0x470>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x444>
 80017e6:	e03d      	b.n	8001864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d107      	bne.n	8001800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e038      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000
 80017fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001800:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x4ec>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d028      	beq.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d121      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d11a      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001830:	4013      	ands	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001838:	4293      	cmp	r3, r2
 800183a:	d111      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	3b01      	subs	r3, #1
 800184a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d107      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0cc      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b68      	ldr	r3, [pc, #416]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d90c      	bls.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b65      	ldr	r3, [pc, #404]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b63      	ldr	r3, [pc, #396]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0b8      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c8:	4b59      	ldr	r3, [pc, #356]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a58      	ldr	r2, [pc, #352]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e0:	4b53      	ldr	r3, [pc, #332]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a52      	ldr	r2, [pc, #328]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b50      	ldr	r3, [pc, #320]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	494d      	ldr	r1, [pc, #308]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d044      	beq.n	8001994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b47      	ldr	r3, [pc, #284]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d119      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e07f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d003      	beq.n	8001932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192e:	2b03      	cmp	r3, #3
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	4b3f      	ldr	r3, [pc, #252]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b3b      	ldr	r3, [pc, #236]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e067      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001952:	4b37      	ldr	r3, [pc, #220]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f023 0203 	bic.w	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4934      	ldr	r1, [pc, #208]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001964:	f7ff f99c 	bl	8000ca0 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	e00a      	b.n	8001982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff f998 	bl	8000ca0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e04f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 020c 	and.w	r2, r3, #12
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	429a      	cmp	r2, r3
 8001992:	d1eb      	bne.n	800196c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001994:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d20c      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e032      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4916      	ldr	r1, [pc, #88]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	490e      	ldr	r1, [pc, #56]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fa:	f000 f821 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	5ccb      	ldrb	r3, [r1, r3]
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	4a09      	ldr	r2, [pc, #36]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f8fc 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00
 8001a30:	40023800 	.word	0x40023800
 8001a34:	08003700 	.word	0x08003700
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a44:	b094      	sub	sp, #80	@ 0x50
 8001a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a50:	2300      	movs	r3, #0
 8001a52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a58:	4b79      	ldr	r3, [pc, #484]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d00d      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x40>
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	f200 80e1 	bhi.w	8001c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a72:	e0db      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b73      	ldr	r3, [pc, #460]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a76:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001a78:	e0db      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7a:	4b73      	ldr	r3, [pc, #460]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a7e:	e0d8      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a80:	4b6f      	ldr	r3, [pc, #444]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a88:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a96:	4b6a      	ldr	r3, [pc, #424]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	462b      	mov	r3, r5
 8001ab6:	f04f 0000 	mov.w	r0, #0
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	0159      	lsls	r1, r3, #5
 8001ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac4:	0150      	lsls	r0, r2, #5
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4621      	mov	r1, r4
 8001acc:	1a51      	subs	r1, r2, r1
 8001ace:	6139      	str	r1, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae4:	4659      	mov	r1, fp
 8001ae6:	018b      	lsls	r3, r1, #6
 8001ae8:	4651      	mov	r1, sl
 8001aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aee:	4651      	mov	r1, sl
 8001af0:	018a      	lsls	r2, r1, #6
 8001af2:	4651      	mov	r1, sl
 8001af4:	ebb2 0801 	subs.w	r8, r2, r1
 8001af8:	4659      	mov	r1, fp
 8001afa:	eb63 0901 	sbc.w	r9, r3, r1
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b12:	4690      	mov	r8, r2
 8001b14:	4699      	mov	r9, r3
 8001b16:	4623      	mov	r3, r4
 8001b18:	eb18 0303 	adds.w	r3, r8, r3
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	462b      	mov	r3, r5
 8001b20:	eb49 0303 	adc.w	r3, r9, r3
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b32:	4629      	mov	r1, r5
 8001b34:	024b      	lsls	r3, r1, #9
 8001b36:	4621      	mov	r1, r4
 8001b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	024a      	lsls	r2, r1, #9
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b50:	f7fe fb96 	bl	8000280 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b5c:	e058      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	2200      	movs	r2, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	4611      	mov	r1, r2
 8001b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b78:	4642      	mov	r2, r8
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	f04f 0000 	mov.w	r0, #0
 8001b80:	f04f 0100 	mov.w	r1, #0
 8001b84:	0159      	lsls	r1, r3, #5
 8001b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8a:	0150      	lsls	r0, r2, #5
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4641      	mov	r1, r8
 8001b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b96:	4649      	mov	r1, r9
 8001b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	00eb      	lsls	r3, r5, #3
 8001bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc6:	00e2      	lsls	r2, r4, #3
 8001bc8:	4614      	mov	r4, r2
 8001bca:	461d      	mov	r5, r3
 8001bcc:	4643      	mov	r3, r8
 8001bce:	18e3      	adds	r3, r4, r3
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	eb45 0303 	adc.w	r3, r5, r3
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be6:	4629      	mov	r1, r5
 8001be8:	028b      	lsls	r3, r1, #10
 8001bea:	4621      	mov	r1, r4
 8001bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	028a      	lsls	r2, r1, #10
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	61fa      	str	r2, [r7, #28]
 8001c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c04:	f7fe fb3c 	bl	8000280 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3750      	adds	r7, #80	@ 0x50
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	007a1200 	.word	0x007a1200

08001c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	@ (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08003710 	.word	0x08003710

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c90:	f7ff ffdc 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0b5b      	lsrs	r3, r3, #13
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4903      	ldr	r1, [pc, #12]	@ (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	08003710 	.word	0x08003710

08001cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e042      	b.n	8001d4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fe18 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2224      	movs	r2, #36	@ 0x24
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fdbd 	bl	8002878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d175      	bne.n	8001e60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_UART_Transmit+0x2c>
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e06e      	b.n	8001e62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2221      	movs	r2, #33	@ 0x21
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d92:	f7fe ff85 	bl	8000ca0 <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dac:	d108      	bne.n	8001dc0 <HAL_UART_Transmit+0x6c>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	e003      	b.n	8001dc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001dc8:	e02e      	b.n	8001e28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2180      	movs	r1, #128	@ 0x80
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 fb1f 	bl	8002418 <UART_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e03a      	b.n	8001e62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10b      	bne.n	8001e0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	3302      	adds	r3, #2
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	e007      	b.n	8001e1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3301      	adds	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1cb      	bne.n	8001dca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2140      	movs	r1, #64	@ 0x40
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 faeb 	bl	8002418 <UART_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e006      	b.n	8001e62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e000      	b.n	8001e62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	4613      	mov	r3, r2
 8001e76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d112      	bne.n	8001eaa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_UART_Receive_IT+0x26>
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e00b      	b.n	8001eac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fb12 	bl	80024ca <UART_Start_Receive_IT>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	e000      	b.n	8001eac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0ba      	sub	sp, #232	@ 0xe8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_UART_IRQHandler+0x66>
 8001f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fbf2 	bl	80026fc <UART_Receive_IT>
      return;
 8001f18:	e25b      	b.n	80023d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80de 	beq.w	80020e0 <HAL_UART_IRQHandler+0x22c>
 8001f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80d1 	beq.w	80020e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_UART_IRQHandler+0xae>
 8001f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_UART_IRQHandler+0xd2>
 8001f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_UART_IRQHandler+0xf6>
 8001f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f043 0204 	orr.w	r2, r3, #4
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d011      	beq.n	8001fda <HAL_UART_IRQHandler+0x126>
 8001fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f043 0208 	orr.w	r2, r3, #8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 81f2 	beq.w	80023c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_UART_IRQHandler+0x14e>
 8001ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fb7d 	bl	80026fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200c:	2b40      	cmp	r3, #64	@ 0x40
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <HAL_UART_IRQHandler+0x17a>
 8002026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d04f      	beq.n	80020ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fa85 	bl	800253e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203e:	2b40      	cmp	r3, #64	@ 0x40
 8002040:	d141      	bne.n	80020c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3314      	adds	r3, #20
 8002048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002050:	e853 3f00 	ldrex	r3, [r3]
 8002054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800205c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3314      	adds	r3, #20
 800206a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800206e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800207a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800207e:	e841 2300 	strex	r3, r2, [r1]
 8002082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1d9      	bne.n	8002042 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d013      	beq.n	80020be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209a:	4a7e      	ldr	r2, [pc, #504]	@ (8002294 <HAL_UART_IRQHandler+0x3e0>)
 800209c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ffad 	bl	8001002 <HAL_DMA_Abort_IT>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d016      	beq.n	80020dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020b8:	4610      	mov	r0, r2
 80020ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020bc:	e00e      	b.n	80020dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f994 	bl	80023ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c4:	e00a      	b.n	80020dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f990 	bl	80023ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020cc:	e006      	b.n	80020dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f98c 	bl	80023ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80020da:	e175      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020dc:	bf00      	nop
    return;
 80020de:	e173      	b.n	80023c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f040 814f 	bne.w	8002388 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8148 	beq.w	8002388 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8141 	beq.w	8002388 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002126:	2b40      	cmp	r3, #64	@ 0x40
 8002128:	f040 80b6 	bne.w	8002298 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002138:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8145 	beq.w	80023cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800214a:	429a      	cmp	r2, r3
 800214c:	f080 813e 	bcs.w	80023cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002156:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002162:	f000 8088 	beq.w	8002276 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002170:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002174:	e853 3f00 	ldrex	r3, [r3]
 8002178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800217c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	330c      	adds	r3, #12
 800218e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002192:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800219e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021a2:	e841 2300 	strex	r3, r2, [r1]
 80021a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80021aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1d9      	bne.n	8002166 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3314      	adds	r3, #20
 80021b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021bc:	e853 3f00 	ldrex	r3, [r3]
 80021c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80021c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3314      	adds	r3, #20
 80021d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80021da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80021de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80021e2:	e841 2300 	strex	r3, r2, [r1]
 80021e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80021e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e1      	bne.n	80021b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3314      	adds	r3, #20
 80021f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021f8:	e853 3f00 	ldrex	r3, [r3]
 80021fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80021fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3314      	adds	r3, #20
 800220e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002212:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002214:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002216:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002218:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800221a:	e841 2300 	strex	r3, r2, [r1]
 800221e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002220:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e3      	bne.n	80021ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	330c      	adds	r3, #12
 800223a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800223e:	e853 3f00 	ldrex	r3, [r3]
 8002242:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002246:	f023 0310 	bic.w	r3, r3, #16
 800224a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	330c      	adds	r3, #12
 8002254:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002258:	65ba      	str	r2, [r7, #88]	@ 0x58
 800225a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800225e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002260:	e841 2300 	strex	r3, r2, [r1]
 8002264:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e3      	bne.n	8002234 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fe56 	bl	8000f22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002284:	b29b      	uxth	r3, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	b29b      	uxth	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f8b7 	bl	8002400 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002292:	e09b      	b.n	80023cc <HAL_UART_IRQHandler+0x518>
 8002294:	08002605 	.word	0x08002605
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 808e 	beq.w	80023d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8089 	beq.w	80023d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80022ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	330c      	adds	r3, #12
 80022de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80022e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80022e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022ea:	e841 2300 	strex	r3, r2, [r1]
 80022ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80022f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e3      	bne.n	80022be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3314      	adds	r3, #20
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	e853 3f00 	ldrex	r3, [r3]
 8002304:	623b      	str	r3, [r7, #32]
   return(result);
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3314      	adds	r3, #20
 8002316:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800231a:	633a      	str	r2, [r7, #48]	@ 0x30
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002322:	e841 2300 	strex	r3, r2, [r1]
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1e3      	bne.n	80022f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	e853 3f00 	ldrex	r3, [r3]
 800234a:	60fb      	str	r3, [r7, #12]
   return(result);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0310 	bic.w	r3, r3, #16
 8002352:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002360:	61fa      	str	r2, [r7, #28]
 8002362:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002364:	69b9      	ldr	r1, [r7, #24]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	e841 2300 	strex	r3, r2, [r1]
 800236c:	617b      	str	r3, [r7, #20]
   return(result);
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e3      	bne.n	800233c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800237a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800237e:	4619      	mov	r1, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f83d 	bl	8002400 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002386:	e023      	b.n	80023d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800238c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <HAL_UART_IRQHandler+0x4f4>
 8002394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f943 	bl	800262c <UART_Transmit_IT>
    return;
 80023a6:	e014      	b.n	80023d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00e      	beq.n	80023d2 <HAL_UART_IRQHandler+0x51e>
 80023b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f983 	bl	80026cc <UART_EndTransmit_IT>
    return;
 80023c6:	e004      	b.n	80023d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80023c8:	bf00      	nop
 80023ca:	e002      	b.n	80023d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80023cc:	bf00      	nop
 80023ce:	e000      	b.n	80023d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80023d0:	bf00      	nop
  }
}
 80023d2:	37e8      	adds	r7, #232	@ 0xe8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002428:	e03b      	b.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002430:	d037      	beq.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7fe fc35 	bl	8000ca0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	6a3a      	ldr	r2, [r7, #32]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <UART_WaitOnFlagUntilTimeout+0x30>
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e03a      	b.n	80024c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	d023      	beq.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b80      	cmp	r3, #128	@ 0x80
 800245e:	d020      	beq.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b40      	cmp	r3, #64	@ 0x40
 8002464:	d01d      	beq.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b08      	cmp	r3, #8
 8002472:	d116      	bne.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f857 	bl	800253e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2208      	movs	r2, #8
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4013      	ands	r3, r2
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d0b4      	beq.n	800242a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	4613      	mov	r3, r2
 80024d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2222      	movs	r2, #34	@ 0x22
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800250e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0220 	orr.w	r2, r2, #32
 800252e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800253e:	b480      	push	{r7}
 8002540:	b095      	sub	sp, #84	@ 0x54
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002550:	e853 3f00 	ldrex	r3, [r3]
 8002554:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002558:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800255c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	330c      	adds	r3, #12
 8002564:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002566:	643a      	str	r2, [r7, #64]	@ 0x40
 8002568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800256c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800256e:	e841 2300 	strex	r3, r2, [r1]
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1e5      	bne.n	8002546 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3314      	adds	r3, #20
 8002580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	e853 3f00 	ldrex	r3, [r3]
 8002588:	61fb      	str	r3, [r7, #28]
   return(result);
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3314      	adds	r3, #20
 8002598:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800259a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800259c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a2:	e841 2300 	strex	r3, r2, [r1]
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e5      	bne.n	800257a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d119      	bne.n	80025ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	e853 3f00 	ldrex	r3, [r3]
 80025c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f023 0310 	bic.w	r3, r3, #16
 80025cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025d6:	61ba      	str	r2, [r7, #24]
 80025d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025da:	6979      	ldr	r1, [r7, #20]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	e841 2300 	strex	r3, r2, [r1]
 80025e2:	613b      	str	r3, [r7, #16]
   return(result);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e5      	bne.n	80025b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025f8:	bf00      	nop
 80025fa:	3754      	adds	r7, #84	@ 0x54
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002610:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff fee4 	bl	80023ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b21      	cmp	r3, #33	@ 0x21
 800263e:	d13e      	bne.n	80026be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002648:	d114      	bne.n	8002674 <UART_Transmit_IT+0x48>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d110      	bne.n	8002674 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002666:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	621a      	str	r2, [r3, #32]
 8002672:	e008      	b.n	8002686 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	1c59      	adds	r1, r3, #1
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6211      	str	r1, [r2, #32]
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29b      	uxth	r3, r3
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4619      	mov	r1, r3
 8002694:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fe73 	bl	80023d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	@ 0x30
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b22      	cmp	r3, #34	@ 0x22
 800270e:	f040 80ae 	bne.w	800286e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271a:	d117      	bne.n	800274c <UART_Receive_IT+0x50>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d113      	bne.n	800274c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273a:	b29a      	uxth	r2, r3
 800273c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	1c9a      	adds	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	629a      	str	r2, [r3, #40]	@ 0x28
 800274a:	e026      	b.n	800279a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002752:	2300      	movs	r3, #0
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275e:	d007      	beq.n	8002770 <UART_Receive_IT+0x74>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <UART_Receive_IT+0x82>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e008      	b.n	8002790 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800278a:	b2da      	uxtb	r2, r3
 800278c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4619      	mov	r1, r3
 80027a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d15d      	bne.n	800286a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0220 	bic.w	r2, r2, #32
 80027bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d135      	bne.n	8002860 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	613b      	str	r3, [r7, #16]
   return(result);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f023 0310 	bic.w	r3, r3, #16
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281a:	623a      	str	r2, [r7, #32]
 800281c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281e:	69f9      	ldr	r1, [r7, #28]
 8002820:	6a3a      	ldr	r2, [r7, #32]
 8002822:	e841 2300 	strex	r3, r2, [r1]
 8002826:	61bb      	str	r3, [r7, #24]
   return(result);
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1e5      	bne.n	80027fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b10      	cmp	r3, #16
 800283a:	d10a      	bne.n	8002852 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff fdd1 	bl	8002400 <HAL_UARTEx_RxEventCallback>
 800285e:	e002      	b.n	8002866 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7fd fff1 	bl	8000848 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e002      	b.n	8002870 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	3730      	adds	r7, #48	@ 0x30
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800287c:	b0c0      	sub	sp, #256	@ 0x100
 800287e:	af00      	add	r7, sp, #0
 8002880:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002894:	68d9      	ldr	r1, [r3, #12]
 8002896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	ea40 0301 	orr.w	r3, r0, r1
 80028a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028d0:	f021 010c 	bic.w	r1, r1, #12
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028de:	430b      	orrs	r3, r1
 80028e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f2:	6999      	ldr	r1, [r3, #24]
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	ea40 0301 	orr.w	r3, r0, r1
 80028fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b8f      	ldr	r3, [pc, #572]	@ (8002b44 <UART_SetConfig+0x2cc>)
 8002908:	429a      	cmp	r2, r3
 800290a:	d005      	beq.n	8002918 <UART_SetConfig+0xa0>
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b8d      	ldr	r3, [pc, #564]	@ (8002b48 <UART_SetConfig+0x2d0>)
 8002914:	429a      	cmp	r2, r3
 8002916:	d104      	bne.n	8002922 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002918:	f7ff f9b8 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 800291c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002920:	e003      	b.n	800292a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002922:	f7ff f99f 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002926:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002934:	f040 810c 	bne.w	8002b50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800293c:	2200      	movs	r2, #0
 800293e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002942:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002946:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800294a:	4622      	mov	r2, r4
 800294c:	462b      	mov	r3, r5
 800294e:	1891      	adds	r1, r2, r2
 8002950:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002952:	415b      	adcs	r3, r3
 8002954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002956:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800295a:	4621      	mov	r1, r4
 800295c:	eb12 0801 	adds.w	r8, r2, r1
 8002960:	4629      	mov	r1, r5
 8002962:	eb43 0901 	adc.w	r9, r3, r1
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297a:	4690      	mov	r8, r2
 800297c:	4699      	mov	r9, r3
 800297e:	4623      	mov	r3, r4
 8002980:	eb18 0303 	adds.w	r3, r8, r3
 8002984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002988:	462b      	mov	r3, r5
 800298a:	eb49 0303 	adc.w	r3, r9, r3
 800298e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800299e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029a6:	460b      	mov	r3, r1
 80029a8:	18db      	adds	r3, r3, r3
 80029aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80029ac:	4613      	mov	r3, r2
 80029ae:	eb42 0303 	adc.w	r3, r2, r3
 80029b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80029b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029bc:	f7fd fc60 	bl	8000280 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4b61      	ldr	r3, [pc, #388]	@ (8002b4c <UART_SetConfig+0x2d4>)
 80029c6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	011c      	lsls	r4, r3, #4
 80029ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029d2:	2200      	movs	r2, #0
 80029d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	1891      	adds	r1, r2, r2
 80029e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029e8:	415b      	adcs	r3, r3
 80029ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029f0:	4641      	mov	r1, r8
 80029f2:	eb12 0a01 	adds.w	sl, r2, r1
 80029f6:	4649      	mov	r1, r9
 80029f8:	eb43 0b01 	adc.w	fp, r3, r1
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a10:	4692      	mov	sl, r2
 8002a12:	469b      	mov	fp, r3
 8002a14:	4643      	mov	r3, r8
 8002a16:	eb1a 0303 	adds.w	r3, sl, r3
 8002a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a1e:	464b      	mov	r3, r9
 8002a20:	eb4b 0303 	adc.w	r3, fp, r3
 8002a24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	18db      	adds	r3, r3, r3
 8002a40:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a42:	4613      	mov	r3, r2
 8002a44:	eb42 0303 	adc.w	r3, r2, r3
 8002a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a52:	f7fd fc15 	bl	8000280 <__aeabi_uldivmod>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b4c <UART_SetConfig+0x2d4>)
 8002a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2264      	movs	r2, #100	@ 0x64
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	1acb      	subs	r3, r1, r3
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a72:	4b36      	ldr	r3, [pc, #216]	@ (8002b4c <UART_SetConfig+0x2d4>)
 8002a74:	fba3 2302 	umull	r2, r3, r3, r2
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a80:	441c      	add	r4, r3
 8002a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a94:	4642      	mov	r2, r8
 8002a96:	464b      	mov	r3, r9
 8002a98:	1891      	adds	r1, r2, r2
 8002a9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a9c:	415b      	adcs	r3, r3
 8002a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	1851      	adds	r1, r2, r1
 8002aa8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002aaa:	4649      	mov	r1, r9
 8002aac:	414b      	adcs	r3, r1
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002abc:	4659      	mov	r1, fp
 8002abe:	00cb      	lsls	r3, r1, #3
 8002ac0:	4651      	mov	r1, sl
 8002ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ac6:	4651      	mov	r1, sl
 8002ac8:	00ca      	lsls	r2, r1, #3
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ad8:	464b      	mov	r3, r9
 8002ada:	460a      	mov	r2, r1
 8002adc:	eb42 0303 	adc.w	r3, r2, r3
 8002ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002af0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002af4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002af8:	460b      	mov	r3, r1
 8002afa:	18db      	adds	r3, r3, r3
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afe:	4613      	mov	r3, r2
 8002b00:	eb42 0303 	adc.w	r3, r2, r3
 8002b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b0e:	f7fd fbb7 	bl	8000280 <__aeabi_uldivmod>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <UART_SetConfig+0x2d4>)
 8002b18:	fba3 1302 	umull	r1, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	2164      	movs	r1, #100	@ 0x64
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	3332      	adds	r3, #50	@ 0x32
 8002b2a:	4a08      	ldr	r2, [pc, #32]	@ (8002b4c <UART_SetConfig+0x2d4>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	f003 0207 	and.w	r2, r3, #7
 8002b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4422      	add	r2, r4
 8002b3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b40:	e106      	b.n	8002d50 <UART_SetConfig+0x4d8>
 8002b42:	bf00      	nop
 8002b44:	40011000 	.word	0x40011000
 8002b48:	40011400 	.word	0x40011400
 8002b4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b54:	2200      	movs	r2, #0
 8002b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b62:	4642      	mov	r2, r8
 8002b64:	464b      	mov	r3, r9
 8002b66:	1891      	adds	r1, r2, r2
 8002b68:	6239      	str	r1, [r7, #32]
 8002b6a:	415b      	adcs	r3, r3
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b72:	4641      	mov	r1, r8
 8002b74:	1854      	adds	r4, r2, r1
 8002b76:	4649      	mov	r1, r9
 8002b78:	eb43 0501 	adc.w	r5, r3, r1
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	00eb      	lsls	r3, r5, #3
 8002b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8a:	00e2      	lsls	r2, r4, #3
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	461d      	mov	r5, r3
 8002b90:	4643      	mov	r3, r8
 8002b92:	18e3      	adds	r3, r4, r3
 8002b94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b98:	464b      	mov	r3, r9
 8002b9a:	eb45 0303 	adc.w	r3, r5, r3
 8002b9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	008b      	lsls	r3, r1, #2
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bc8:	4621      	mov	r1, r4
 8002bca:	008a      	lsls	r2, r1, #2
 8002bcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bd0:	f7fd fb56 	bl	8000280 <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4b60      	ldr	r3, [pc, #384]	@ (8002d5c <UART_SetConfig+0x4e4>)
 8002bda:	fba3 2302 	umull	r2, r3, r3, r2
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	011c      	lsls	r4, r3, #4
 8002be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	1891      	adds	r1, r2, r2
 8002bfa:	61b9      	str	r1, [r7, #24]
 8002bfc:	415b      	adcs	r3, r3
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c04:	4641      	mov	r1, r8
 8002c06:	1851      	adds	r1, r2, r1
 8002c08:	6139      	str	r1, [r7, #16]
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	414b      	adcs	r3, r1
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c1c:	4659      	mov	r1, fp
 8002c1e:	00cb      	lsls	r3, r1, #3
 8002c20:	4651      	mov	r1, sl
 8002c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c26:	4651      	mov	r1, sl
 8002c28:	00ca      	lsls	r2, r1, #3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4642      	mov	r2, r8
 8002c32:	189b      	adds	r3, r3, r2
 8002c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c38:	464b      	mov	r3, r9
 8002c3a:	460a      	mov	r2, r1
 8002c3c:	eb42 0303 	adc.w	r3, r2, r3
 8002c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c5c:	4649      	mov	r1, r9
 8002c5e:	008b      	lsls	r3, r1, #2
 8002c60:	4641      	mov	r1, r8
 8002c62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c66:	4641      	mov	r1, r8
 8002c68:	008a      	lsls	r2, r1, #2
 8002c6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c6e:	f7fd fb07 	bl	8000280 <__aeabi_uldivmod>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4611      	mov	r1, r2
 8002c78:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <UART_SetConfig+0x4e4>)
 8002c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2264      	movs	r2, #100	@ 0x64
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	1acb      	subs	r3, r1, r3
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	3332      	adds	r3, #50	@ 0x32
 8002c8c:	4a33      	ldr	r2, [pc, #204]	@ (8002d5c <UART_SetConfig+0x4e4>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c98:	441c      	add	r4, r3
 8002c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ca2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ca4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ca8:	4642      	mov	r2, r8
 8002caa:	464b      	mov	r3, r9
 8002cac:	1891      	adds	r1, r2, r2
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	415b      	adcs	r3, r3
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb8:	4641      	mov	r1, r8
 8002cba:	1851      	adds	r1, r2, r1
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	414b      	adcs	r3, r1
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cd0:	4659      	mov	r1, fp
 8002cd2:	00cb      	lsls	r3, r1, #3
 8002cd4:	4651      	mov	r1, sl
 8002cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cda:	4651      	mov	r1, sl
 8002cdc:	00ca      	lsls	r2, r1, #3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	189b      	adds	r3, r3, r2
 8002ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cea:	464b      	mov	r3, r9
 8002cec:	460a      	mov	r2, r1
 8002cee:	eb42 0303 	adc.w	r3, r2, r3
 8002cf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cfe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	008b      	lsls	r3, r1, #2
 8002d10:	4641      	mov	r1, r8
 8002d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d16:	4641      	mov	r1, r8
 8002d18:	008a      	lsls	r2, r1, #2
 8002d1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d1e:	f7fd faaf 	bl	8000280 <__aeabi_uldivmod>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <UART_SetConfig+0x4e4>)
 8002d28:	fba3 1302 	umull	r1, r3, r3, r2
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	2164      	movs	r1, #100	@ 0x64
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	3332      	adds	r3, #50	@ 0x32
 8002d3a:	4a08      	ldr	r2, [pc, #32]	@ (8002d5c <UART_SetConfig+0x4e4>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	f003 020f 	and.w	r2, r3, #15
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4422      	add	r2, r4
 8002d4e:	609a      	str	r2, [r3, #8]
}
 8002d50:	bf00      	nop
 8002d52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d56:	46bd      	mov	sp, r7
 8002d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5c:	51eb851f 	.word	0x51eb851f

08002d60 <sniprintf>:
 8002d60:	b40c      	push	{r2, r3}
 8002d62:	b530      	push	{r4, r5, lr}
 8002d64:	4b17      	ldr	r3, [pc, #92]	@ (8002dc4 <sniprintf+0x64>)
 8002d66:	1e0c      	subs	r4, r1, #0
 8002d68:	681d      	ldr	r5, [r3, #0]
 8002d6a:	b09d      	sub	sp, #116	@ 0x74
 8002d6c:	da08      	bge.n	8002d80 <sniprintf+0x20>
 8002d6e:	238b      	movs	r3, #139	@ 0x8b
 8002d70:	602b      	str	r3, [r5, #0]
 8002d72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d76:	b01d      	add	sp, #116	@ 0x74
 8002d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d7c:	b002      	add	sp, #8
 8002d7e:	4770      	bx	lr
 8002d80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002d84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d88:	bf14      	ite	ne
 8002d8a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8002d8e:	4623      	moveq	r3, r4
 8002d90:	9304      	str	r3, [sp, #16]
 8002d92:	9307      	str	r3, [sp, #28]
 8002d94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d98:	9002      	str	r0, [sp, #8]
 8002d9a:	9006      	str	r0, [sp, #24]
 8002d9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002da0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002da2:	ab21      	add	r3, sp, #132	@ 0x84
 8002da4:	a902      	add	r1, sp, #8
 8002da6:	4628      	mov	r0, r5
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	f000 f89d 	bl	8002ee8 <_svfiprintf_r>
 8002dae:	1c43      	adds	r3, r0, #1
 8002db0:	bfbc      	itt	lt
 8002db2:	238b      	movlt	r3, #139	@ 0x8b
 8002db4:	602b      	strlt	r3, [r5, #0]
 8002db6:	2c00      	cmp	r4, #0
 8002db8:	d0dd      	beq.n	8002d76 <sniprintf+0x16>
 8002dba:	9b02      	ldr	r3, [sp, #8]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e7d9      	b.n	8002d76 <sniprintf+0x16>
 8002dc2:	bf00      	nop
 8002dc4:	2000000c 	.word	0x2000000c

08002dc8 <memset>:
 8002dc8:	4402      	add	r2, r0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <memset+0xa>
 8002dd0:	4770      	bx	lr
 8002dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd6:	e7f9      	b.n	8002dcc <memset+0x4>

08002dd8 <__errno>:
 8002dd8:	4b01      	ldr	r3, [pc, #4]	@ (8002de0 <__errno+0x8>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	2000000c 	.word	0x2000000c

08002de4 <__libc_init_array>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	4d0d      	ldr	r5, [pc, #52]	@ (8002e1c <__libc_init_array+0x38>)
 8002de8:	4c0d      	ldr	r4, [pc, #52]	@ (8002e20 <__libc_init_array+0x3c>)
 8002dea:	1b64      	subs	r4, r4, r5
 8002dec:	10a4      	asrs	r4, r4, #2
 8002dee:	2600      	movs	r6, #0
 8002df0:	42a6      	cmp	r6, r4
 8002df2:	d109      	bne.n	8002e08 <__libc_init_array+0x24>
 8002df4:	4d0b      	ldr	r5, [pc, #44]	@ (8002e24 <__libc_init_array+0x40>)
 8002df6:	4c0c      	ldr	r4, [pc, #48]	@ (8002e28 <__libc_init_array+0x44>)
 8002df8:	f000 fc66 	bl	80036c8 <_init>
 8002dfc:	1b64      	subs	r4, r4, r5
 8002dfe:	10a4      	asrs	r4, r4, #2
 8002e00:	2600      	movs	r6, #0
 8002e02:	42a6      	cmp	r6, r4
 8002e04:	d105      	bne.n	8002e12 <__libc_init_array+0x2e>
 8002e06:	bd70      	pop	{r4, r5, r6, pc}
 8002e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0c:	4798      	blx	r3
 8002e0e:	3601      	adds	r6, #1
 8002e10:	e7ee      	b.n	8002df0 <__libc_init_array+0xc>
 8002e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e16:	4798      	blx	r3
 8002e18:	3601      	adds	r6, #1
 8002e1a:	e7f2      	b.n	8002e02 <__libc_init_array+0x1e>
 8002e1c:	08003754 	.word	0x08003754
 8002e20:	08003754 	.word	0x08003754
 8002e24:	08003754 	.word	0x08003754
 8002e28:	08003758 	.word	0x08003758

08002e2c <__retarget_lock_acquire_recursive>:
 8002e2c:	4770      	bx	lr

08002e2e <__retarget_lock_release_recursive>:
 8002e2e:	4770      	bx	lr

08002e30 <__ssputs_r>:
 8002e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	688e      	ldr	r6, [r1, #8]
 8002e36:	461f      	mov	r7, r3
 8002e38:	42be      	cmp	r6, r7
 8002e3a:	680b      	ldr	r3, [r1, #0]
 8002e3c:	4682      	mov	sl, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	4690      	mov	r8, r2
 8002e42:	d82d      	bhi.n	8002ea0 <__ssputs_r+0x70>
 8002e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e4c:	d026      	beq.n	8002e9c <__ssputs_r+0x6c>
 8002e4e:	6965      	ldr	r5, [r4, #20]
 8002e50:	6909      	ldr	r1, [r1, #16]
 8002e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e56:	eba3 0901 	sub.w	r9, r3, r1
 8002e5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e5e:	1c7b      	adds	r3, r7, #1
 8002e60:	444b      	add	r3, r9
 8002e62:	106d      	asrs	r5, r5, #1
 8002e64:	429d      	cmp	r5, r3
 8002e66:	bf38      	it	cc
 8002e68:	461d      	movcc	r5, r3
 8002e6a:	0553      	lsls	r3, r2, #21
 8002e6c:	d527      	bpl.n	8002ebe <__ssputs_r+0x8e>
 8002e6e:	4629      	mov	r1, r5
 8002e70:	f000 f958 	bl	8003124 <_malloc_r>
 8002e74:	4606      	mov	r6, r0
 8002e76:	b360      	cbz	r0, 8002ed2 <__ssputs_r+0xa2>
 8002e78:	6921      	ldr	r1, [r4, #16]
 8002e7a:	464a      	mov	r2, r9
 8002e7c:	f000 fbc4 	bl	8003608 <memcpy>
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e8a:	81a3      	strh	r3, [r4, #12]
 8002e8c:	6126      	str	r6, [r4, #16]
 8002e8e:	6165      	str	r5, [r4, #20]
 8002e90:	444e      	add	r6, r9
 8002e92:	eba5 0509 	sub.w	r5, r5, r9
 8002e96:	6026      	str	r6, [r4, #0]
 8002e98:	60a5      	str	r5, [r4, #8]
 8002e9a:	463e      	mov	r6, r7
 8002e9c:	42be      	cmp	r6, r7
 8002e9e:	d900      	bls.n	8002ea2 <__ssputs_r+0x72>
 8002ea0:	463e      	mov	r6, r7
 8002ea2:	6820      	ldr	r0, [r4, #0]
 8002ea4:	4632      	mov	r2, r6
 8002ea6:	4641      	mov	r1, r8
 8002ea8:	f000 fb84 	bl	80035b4 <memmove>
 8002eac:	68a3      	ldr	r3, [r4, #8]
 8002eae:	1b9b      	subs	r3, r3, r6
 8002eb0:	60a3      	str	r3, [r4, #8]
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	4433      	add	r3, r6
 8002eb6:	6023      	str	r3, [r4, #0]
 8002eb8:	2000      	movs	r0, #0
 8002eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	f000 fb4a 	bl	8003558 <_realloc_r>
 8002ec4:	4606      	mov	r6, r0
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d1e0      	bne.n	8002e8c <__ssputs_r+0x5c>
 8002eca:	6921      	ldr	r1, [r4, #16]
 8002ecc:	4650      	mov	r0, sl
 8002ece:	f000 fba9 	bl	8003624 <_free_r>
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	f8ca 3000 	str.w	r3, [sl]
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ede:	81a3      	strh	r3, [r4, #12]
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ee4:	e7e9      	b.n	8002eba <__ssputs_r+0x8a>
	...

08002ee8 <_svfiprintf_r>:
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	4698      	mov	r8, r3
 8002eee:	898b      	ldrh	r3, [r1, #12]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	b09d      	sub	sp, #116	@ 0x74
 8002ef4:	4607      	mov	r7, r0
 8002ef6:	460d      	mov	r5, r1
 8002ef8:	4614      	mov	r4, r2
 8002efa:	d510      	bpl.n	8002f1e <_svfiprintf_r+0x36>
 8002efc:	690b      	ldr	r3, [r1, #16]
 8002efe:	b973      	cbnz	r3, 8002f1e <_svfiprintf_r+0x36>
 8002f00:	2140      	movs	r1, #64	@ 0x40
 8002f02:	f000 f90f 	bl	8003124 <_malloc_r>
 8002f06:	6028      	str	r0, [r5, #0]
 8002f08:	6128      	str	r0, [r5, #16]
 8002f0a:	b930      	cbnz	r0, 8002f1a <_svfiprintf_r+0x32>
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f14:	b01d      	add	sp, #116	@ 0x74
 8002f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f1a:	2340      	movs	r3, #64	@ 0x40
 8002f1c:	616b      	str	r3, [r5, #20]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f22:	2320      	movs	r3, #32
 8002f24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f2c:	2330      	movs	r3, #48	@ 0x30
 8002f2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80030cc <_svfiprintf_r+0x1e4>
 8002f32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f36:	f04f 0901 	mov.w	r9, #1
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	469a      	mov	sl, r3
 8002f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f42:	b10a      	cbz	r2, 8002f48 <_svfiprintf_r+0x60>
 8002f44:	2a25      	cmp	r2, #37	@ 0x25
 8002f46:	d1f9      	bne.n	8002f3c <_svfiprintf_r+0x54>
 8002f48:	ebba 0b04 	subs.w	fp, sl, r4
 8002f4c:	d00b      	beq.n	8002f66 <_svfiprintf_r+0x7e>
 8002f4e:	465b      	mov	r3, fp
 8002f50:	4622      	mov	r2, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	4638      	mov	r0, r7
 8002f56:	f7ff ff6b 	bl	8002e30 <__ssputs_r>
 8002f5a:	3001      	adds	r0, #1
 8002f5c:	f000 80a7 	beq.w	80030ae <_svfiprintf_r+0x1c6>
 8002f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f62:	445a      	add	r2, fp
 8002f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f66:	f89a 3000 	ldrb.w	r3, [sl]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 809f 	beq.w	80030ae <_svfiprintf_r+0x1c6>
 8002f70:	2300      	movs	r3, #0
 8002f72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f7a:	f10a 0a01 	add.w	sl, sl, #1
 8002f7e:	9304      	str	r3, [sp, #16]
 8002f80:	9307      	str	r3, [sp, #28]
 8002f82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f86:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f88:	4654      	mov	r4, sl
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f90:	484e      	ldr	r0, [pc, #312]	@ (80030cc <_svfiprintf_r+0x1e4>)
 8002f92:	f7fd f925 	bl	80001e0 <memchr>
 8002f96:	9a04      	ldr	r2, [sp, #16]
 8002f98:	b9d8      	cbnz	r0, 8002fd2 <_svfiprintf_r+0xea>
 8002f9a:	06d0      	lsls	r0, r2, #27
 8002f9c:	bf44      	itt	mi
 8002f9e:	2320      	movmi	r3, #32
 8002fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fa4:	0711      	lsls	r1, r2, #28
 8002fa6:	bf44      	itt	mi
 8002fa8:	232b      	movmi	r3, #43	@ 0x2b
 8002faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fae:	f89a 3000 	ldrb.w	r3, [sl]
 8002fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fb4:	d015      	beq.n	8002fe2 <_svfiprintf_r+0xfa>
 8002fb6:	9a07      	ldr	r2, [sp, #28]
 8002fb8:	4654      	mov	r4, sl
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f04f 0c0a 	mov.w	ip, #10
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fc6:	3b30      	subs	r3, #48	@ 0x30
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	d94b      	bls.n	8003064 <_svfiprintf_r+0x17c>
 8002fcc:	b1b0      	cbz	r0, 8002ffc <_svfiprintf_r+0x114>
 8002fce:	9207      	str	r2, [sp, #28]
 8002fd0:	e014      	b.n	8002ffc <_svfiprintf_r+0x114>
 8002fd2:	eba0 0308 	sub.w	r3, r0, r8
 8002fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	9304      	str	r3, [sp, #16]
 8002fde:	46a2      	mov	sl, r4
 8002fe0:	e7d2      	b.n	8002f88 <_svfiprintf_r+0xa0>
 8002fe2:	9b03      	ldr	r3, [sp, #12]
 8002fe4:	1d19      	adds	r1, r3, #4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	9103      	str	r1, [sp, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bfbb      	ittet	lt
 8002fee:	425b      	neglt	r3, r3
 8002ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ff4:	9307      	strge	r3, [sp, #28]
 8002ff6:	9307      	strlt	r3, [sp, #28]
 8002ff8:	bfb8      	it	lt
 8002ffa:	9204      	strlt	r2, [sp, #16]
 8002ffc:	7823      	ldrb	r3, [r4, #0]
 8002ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8003000:	d10a      	bne.n	8003018 <_svfiprintf_r+0x130>
 8003002:	7863      	ldrb	r3, [r4, #1]
 8003004:	2b2a      	cmp	r3, #42	@ 0x2a
 8003006:	d132      	bne.n	800306e <_svfiprintf_r+0x186>
 8003008:	9b03      	ldr	r3, [sp, #12]
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	9203      	str	r2, [sp, #12]
 8003010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003014:	3402      	adds	r4, #2
 8003016:	9305      	str	r3, [sp, #20]
 8003018:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80030dc <_svfiprintf_r+0x1f4>
 800301c:	7821      	ldrb	r1, [r4, #0]
 800301e:	2203      	movs	r2, #3
 8003020:	4650      	mov	r0, sl
 8003022:	f7fd f8dd 	bl	80001e0 <memchr>
 8003026:	b138      	cbz	r0, 8003038 <_svfiprintf_r+0x150>
 8003028:	9b04      	ldr	r3, [sp, #16]
 800302a:	eba0 000a 	sub.w	r0, r0, sl
 800302e:	2240      	movs	r2, #64	@ 0x40
 8003030:	4082      	lsls	r2, r0
 8003032:	4313      	orrs	r3, r2
 8003034:	3401      	adds	r4, #1
 8003036:	9304      	str	r3, [sp, #16]
 8003038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800303c:	4824      	ldr	r0, [pc, #144]	@ (80030d0 <_svfiprintf_r+0x1e8>)
 800303e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003042:	2206      	movs	r2, #6
 8003044:	f7fd f8cc 	bl	80001e0 <memchr>
 8003048:	2800      	cmp	r0, #0
 800304a:	d036      	beq.n	80030ba <_svfiprintf_r+0x1d2>
 800304c:	4b21      	ldr	r3, [pc, #132]	@ (80030d4 <_svfiprintf_r+0x1ec>)
 800304e:	bb1b      	cbnz	r3, 8003098 <_svfiprintf_r+0x1b0>
 8003050:	9b03      	ldr	r3, [sp, #12]
 8003052:	3307      	adds	r3, #7
 8003054:	f023 0307 	bic.w	r3, r3, #7
 8003058:	3308      	adds	r3, #8
 800305a:	9303      	str	r3, [sp, #12]
 800305c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800305e:	4433      	add	r3, r6
 8003060:	9309      	str	r3, [sp, #36]	@ 0x24
 8003062:	e76a      	b.n	8002f3a <_svfiprintf_r+0x52>
 8003064:	fb0c 3202 	mla	r2, ip, r2, r3
 8003068:	460c      	mov	r4, r1
 800306a:	2001      	movs	r0, #1
 800306c:	e7a8      	b.n	8002fc0 <_svfiprintf_r+0xd8>
 800306e:	2300      	movs	r3, #0
 8003070:	3401      	adds	r4, #1
 8003072:	9305      	str	r3, [sp, #20]
 8003074:	4619      	mov	r1, r3
 8003076:	f04f 0c0a 	mov.w	ip, #10
 800307a:	4620      	mov	r0, r4
 800307c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003080:	3a30      	subs	r2, #48	@ 0x30
 8003082:	2a09      	cmp	r2, #9
 8003084:	d903      	bls.n	800308e <_svfiprintf_r+0x1a6>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0c6      	beq.n	8003018 <_svfiprintf_r+0x130>
 800308a:	9105      	str	r1, [sp, #20]
 800308c:	e7c4      	b.n	8003018 <_svfiprintf_r+0x130>
 800308e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003092:	4604      	mov	r4, r0
 8003094:	2301      	movs	r3, #1
 8003096:	e7f0      	b.n	800307a <_svfiprintf_r+0x192>
 8003098:	ab03      	add	r3, sp, #12
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	462a      	mov	r2, r5
 800309e:	4b0e      	ldr	r3, [pc, #56]	@ (80030d8 <_svfiprintf_r+0x1f0>)
 80030a0:	a904      	add	r1, sp, #16
 80030a2:	4638      	mov	r0, r7
 80030a4:	f3af 8000 	nop.w
 80030a8:	1c42      	adds	r2, r0, #1
 80030aa:	4606      	mov	r6, r0
 80030ac:	d1d6      	bne.n	800305c <_svfiprintf_r+0x174>
 80030ae:	89ab      	ldrh	r3, [r5, #12]
 80030b0:	065b      	lsls	r3, r3, #25
 80030b2:	f53f af2d 	bmi.w	8002f10 <_svfiprintf_r+0x28>
 80030b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030b8:	e72c      	b.n	8002f14 <_svfiprintf_r+0x2c>
 80030ba:	ab03      	add	r3, sp, #12
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	462a      	mov	r2, r5
 80030c0:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <_svfiprintf_r+0x1f0>)
 80030c2:	a904      	add	r1, sp, #16
 80030c4:	4638      	mov	r0, r7
 80030c6:	f000 f91b 	bl	8003300 <_printf_i>
 80030ca:	e7ed      	b.n	80030a8 <_svfiprintf_r+0x1c0>
 80030cc:	08003718 	.word	0x08003718
 80030d0:	08003722 	.word	0x08003722
 80030d4:	00000000 	.word	0x00000000
 80030d8:	08002e31 	.word	0x08002e31
 80030dc:	0800371e 	.word	0x0800371e

080030e0 <sbrk_aligned>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	4e0f      	ldr	r6, [pc, #60]	@ (8003120 <sbrk_aligned+0x40>)
 80030e4:	460c      	mov	r4, r1
 80030e6:	6831      	ldr	r1, [r6, #0]
 80030e8:	4605      	mov	r5, r0
 80030ea:	b911      	cbnz	r1, 80030f2 <sbrk_aligned+0x12>
 80030ec:	f000 fa7c 	bl	80035e8 <_sbrk_r>
 80030f0:	6030      	str	r0, [r6, #0]
 80030f2:	4621      	mov	r1, r4
 80030f4:	4628      	mov	r0, r5
 80030f6:	f000 fa77 	bl	80035e8 <_sbrk_r>
 80030fa:	1c43      	adds	r3, r0, #1
 80030fc:	d103      	bne.n	8003106 <sbrk_aligned+0x26>
 80030fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003102:	4620      	mov	r0, r4
 8003104:	bd70      	pop	{r4, r5, r6, pc}
 8003106:	1cc4      	adds	r4, r0, #3
 8003108:	f024 0403 	bic.w	r4, r4, #3
 800310c:	42a0      	cmp	r0, r4
 800310e:	d0f8      	beq.n	8003102 <sbrk_aligned+0x22>
 8003110:	1a21      	subs	r1, r4, r0
 8003112:	4628      	mov	r0, r5
 8003114:	f000 fa68 	bl	80035e8 <_sbrk_r>
 8003118:	3001      	adds	r0, #1
 800311a:	d1f2      	bne.n	8003102 <sbrk_aligned+0x22>
 800311c:	e7ef      	b.n	80030fe <sbrk_aligned+0x1e>
 800311e:	bf00      	nop
 8003120:	20000250 	.word	0x20000250

08003124 <_malloc_r>:
 8003124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003128:	1ccd      	adds	r5, r1, #3
 800312a:	f025 0503 	bic.w	r5, r5, #3
 800312e:	3508      	adds	r5, #8
 8003130:	2d0c      	cmp	r5, #12
 8003132:	bf38      	it	cc
 8003134:	250c      	movcc	r5, #12
 8003136:	2d00      	cmp	r5, #0
 8003138:	4606      	mov	r6, r0
 800313a:	db01      	blt.n	8003140 <_malloc_r+0x1c>
 800313c:	42a9      	cmp	r1, r5
 800313e:	d904      	bls.n	800314a <_malloc_r+0x26>
 8003140:	230c      	movs	r3, #12
 8003142:	6033      	str	r3, [r6, #0]
 8003144:	2000      	movs	r0, #0
 8003146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800314a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003220 <_malloc_r+0xfc>
 800314e:	f000 f9f7 	bl	8003540 <__malloc_lock>
 8003152:	f8d8 3000 	ldr.w	r3, [r8]
 8003156:	461c      	mov	r4, r3
 8003158:	bb44      	cbnz	r4, 80031ac <_malloc_r+0x88>
 800315a:	4629      	mov	r1, r5
 800315c:	4630      	mov	r0, r6
 800315e:	f7ff ffbf 	bl	80030e0 <sbrk_aligned>
 8003162:	1c43      	adds	r3, r0, #1
 8003164:	4604      	mov	r4, r0
 8003166:	d158      	bne.n	800321a <_malloc_r+0xf6>
 8003168:	f8d8 4000 	ldr.w	r4, [r8]
 800316c:	4627      	mov	r7, r4
 800316e:	2f00      	cmp	r7, #0
 8003170:	d143      	bne.n	80031fa <_malloc_r+0xd6>
 8003172:	2c00      	cmp	r4, #0
 8003174:	d04b      	beq.n	800320e <_malloc_r+0xea>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	4639      	mov	r1, r7
 800317a:	4630      	mov	r0, r6
 800317c:	eb04 0903 	add.w	r9, r4, r3
 8003180:	f000 fa32 	bl	80035e8 <_sbrk_r>
 8003184:	4581      	cmp	r9, r0
 8003186:	d142      	bne.n	800320e <_malloc_r+0xea>
 8003188:	6821      	ldr	r1, [r4, #0]
 800318a:	1a6d      	subs	r5, r5, r1
 800318c:	4629      	mov	r1, r5
 800318e:	4630      	mov	r0, r6
 8003190:	f7ff ffa6 	bl	80030e0 <sbrk_aligned>
 8003194:	3001      	adds	r0, #1
 8003196:	d03a      	beq.n	800320e <_malloc_r+0xea>
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	442b      	add	r3, r5
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	f8d8 3000 	ldr.w	r3, [r8]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	bb62      	cbnz	r2, 8003200 <_malloc_r+0xdc>
 80031a6:	f8c8 7000 	str.w	r7, [r8]
 80031aa:	e00f      	b.n	80031cc <_malloc_r+0xa8>
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	1b52      	subs	r2, r2, r5
 80031b0:	d420      	bmi.n	80031f4 <_malloc_r+0xd0>
 80031b2:	2a0b      	cmp	r2, #11
 80031b4:	d917      	bls.n	80031e6 <_malloc_r+0xc2>
 80031b6:	1961      	adds	r1, r4, r5
 80031b8:	42a3      	cmp	r3, r4
 80031ba:	6025      	str	r5, [r4, #0]
 80031bc:	bf18      	it	ne
 80031be:	6059      	strne	r1, [r3, #4]
 80031c0:	6863      	ldr	r3, [r4, #4]
 80031c2:	bf08      	it	eq
 80031c4:	f8c8 1000 	streq.w	r1, [r8]
 80031c8:	5162      	str	r2, [r4, r5]
 80031ca:	604b      	str	r3, [r1, #4]
 80031cc:	4630      	mov	r0, r6
 80031ce:	f000 f9bd 	bl	800354c <__malloc_unlock>
 80031d2:	f104 000b 	add.w	r0, r4, #11
 80031d6:	1d23      	adds	r3, r4, #4
 80031d8:	f020 0007 	bic.w	r0, r0, #7
 80031dc:	1ac2      	subs	r2, r0, r3
 80031de:	bf1c      	itt	ne
 80031e0:	1a1b      	subne	r3, r3, r0
 80031e2:	50a3      	strne	r3, [r4, r2]
 80031e4:	e7af      	b.n	8003146 <_malloc_r+0x22>
 80031e6:	6862      	ldr	r2, [r4, #4]
 80031e8:	42a3      	cmp	r3, r4
 80031ea:	bf0c      	ite	eq
 80031ec:	f8c8 2000 	streq.w	r2, [r8]
 80031f0:	605a      	strne	r2, [r3, #4]
 80031f2:	e7eb      	b.n	80031cc <_malloc_r+0xa8>
 80031f4:	4623      	mov	r3, r4
 80031f6:	6864      	ldr	r4, [r4, #4]
 80031f8:	e7ae      	b.n	8003158 <_malloc_r+0x34>
 80031fa:	463c      	mov	r4, r7
 80031fc:	687f      	ldr	r7, [r7, #4]
 80031fe:	e7b6      	b.n	800316e <_malloc_r+0x4a>
 8003200:	461a      	mov	r2, r3
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	42a3      	cmp	r3, r4
 8003206:	d1fb      	bne.n	8003200 <_malloc_r+0xdc>
 8003208:	2300      	movs	r3, #0
 800320a:	6053      	str	r3, [r2, #4]
 800320c:	e7de      	b.n	80031cc <_malloc_r+0xa8>
 800320e:	230c      	movs	r3, #12
 8003210:	6033      	str	r3, [r6, #0]
 8003212:	4630      	mov	r0, r6
 8003214:	f000 f99a 	bl	800354c <__malloc_unlock>
 8003218:	e794      	b.n	8003144 <_malloc_r+0x20>
 800321a:	6005      	str	r5, [r0, #0]
 800321c:	e7d6      	b.n	80031cc <_malloc_r+0xa8>
 800321e:	bf00      	nop
 8003220:	20000254 	.word	0x20000254

08003224 <_printf_common>:
 8003224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003228:	4616      	mov	r6, r2
 800322a:	4698      	mov	r8, r3
 800322c:	688a      	ldr	r2, [r1, #8]
 800322e:	690b      	ldr	r3, [r1, #16]
 8003230:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003234:	4293      	cmp	r3, r2
 8003236:	bfb8      	it	lt
 8003238:	4613      	movlt	r3, r2
 800323a:	6033      	str	r3, [r6, #0]
 800323c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003240:	4607      	mov	r7, r0
 8003242:	460c      	mov	r4, r1
 8003244:	b10a      	cbz	r2, 800324a <_printf_common+0x26>
 8003246:	3301      	adds	r3, #1
 8003248:	6033      	str	r3, [r6, #0]
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	0699      	lsls	r1, r3, #26
 800324e:	bf42      	ittt	mi
 8003250:	6833      	ldrmi	r3, [r6, #0]
 8003252:	3302      	addmi	r3, #2
 8003254:	6033      	strmi	r3, [r6, #0]
 8003256:	6825      	ldr	r5, [r4, #0]
 8003258:	f015 0506 	ands.w	r5, r5, #6
 800325c:	d106      	bne.n	800326c <_printf_common+0x48>
 800325e:	f104 0a19 	add.w	sl, r4, #25
 8003262:	68e3      	ldr	r3, [r4, #12]
 8003264:	6832      	ldr	r2, [r6, #0]
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	42ab      	cmp	r3, r5
 800326a:	dc26      	bgt.n	80032ba <_printf_common+0x96>
 800326c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	3b00      	subs	r3, #0
 8003274:	bf18      	it	ne
 8003276:	2301      	movne	r3, #1
 8003278:	0692      	lsls	r2, r2, #26
 800327a:	d42b      	bmi.n	80032d4 <_printf_common+0xb0>
 800327c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003280:	4641      	mov	r1, r8
 8003282:	4638      	mov	r0, r7
 8003284:	47c8      	blx	r9
 8003286:	3001      	adds	r0, #1
 8003288:	d01e      	beq.n	80032c8 <_printf_common+0xa4>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	6922      	ldr	r2, [r4, #16]
 800328e:	f003 0306 	and.w	r3, r3, #6
 8003292:	2b04      	cmp	r3, #4
 8003294:	bf02      	ittt	eq
 8003296:	68e5      	ldreq	r5, [r4, #12]
 8003298:	6833      	ldreq	r3, [r6, #0]
 800329a:	1aed      	subeq	r5, r5, r3
 800329c:	68a3      	ldr	r3, [r4, #8]
 800329e:	bf0c      	ite	eq
 80032a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032a4:	2500      	movne	r5, #0
 80032a6:	4293      	cmp	r3, r2
 80032a8:	bfc4      	itt	gt
 80032aa:	1a9b      	subgt	r3, r3, r2
 80032ac:	18ed      	addgt	r5, r5, r3
 80032ae:	2600      	movs	r6, #0
 80032b0:	341a      	adds	r4, #26
 80032b2:	42b5      	cmp	r5, r6
 80032b4:	d11a      	bne.n	80032ec <_printf_common+0xc8>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e008      	b.n	80032cc <_printf_common+0xa8>
 80032ba:	2301      	movs	r3, #1
 80032bc:	4652      	mov	r2, sl
 80032be:	4641      	mov	r1, r8
 80032c0:	4638      	mov	r0, r7
 80032c2:	47c8      	blx	r9
 80032c4:	3001      	adds	r0, #1
 80032c6:	d103      	bne.n	80032d0 <_printf_common+0xac>
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d0:	3501      	adds	r5, #1
 80032d2:	e7c6      	b.n	8003262 <_printf_common+0x3e>
 80032d4:	18e1      	adds	r1, r4, r3
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	2030      	movs	r0, #48	@ 0x30
 80032da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80032de:	4422      	add	r2, r4
 80032e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032e8:	3302      	adds	r3, #2
 80032ea:	e7c7      	b.n	800327c <_printf_common+0x58>
 80032ec:	2301      	movs	r3, #1
 80032ee:	4622      	mov	r2, r4
 80032f0:	4641      	mov	r1, r8
 80032f2:	4638      	mov	r0, r7
 80032f4:	47c8      	blx	r9
 80032f6:	3001      	adds	r0, #1
 80032f8:	d0e6      	beq.n	80032c8 <_printf_common+0xa4>
 80032fa:	3601      	adds	r6, #1
 80032fc:	e7d9      	b.n	80032b2 <_printf_common+0x8e>
	...

08003300 <_printf_i>:
 8003300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003304:	7e0f      	ldrb	r7, [r1, #24]
 8003306:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003308:	2f78      	cmp	r7, #120	@ 0x78
 800330a:	4691      	mov	r9, r2
 800330c:	4680      	mov	r8, r0
 800330e:	460c      	mov	r4, r1
 8003310:	469a      	mov	sl, r3
 8003312:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003316:	d807      	bhi.n	8003328 <_printf_i+0x28>
 8003318:	2f62      	cmp	r7, #98	@ 0x62
 800331a:	d80a      	bhi.n	8003332 <_printf_i+0x32>
 800331c:	2f00      	cmp	r7, #0
 800331e:	f000 80d2 	beq.w	80034c6 <_printf_i+0x1c6>
 8003322:	2f58      	cmp	r7, #88	@ 0x58
 8003324:	f000 80b9 	beq.w	800349a <_printf_i+0x19a>
 8003328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800332c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003330:	e03a      	b.n	80033a8 <_printf_i+0xa8>
 8003332:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003336:	2b15      	cmp	r3, #21
 8003338:	d8f6      	bhi.n	8003328 <_printf_i+0x28>
 800333a:	a101      	add	r1, pc, #4	@ (adr r1, 8003340 <_printf_i+0x40>)
 800333c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003340:	08003399 	.word	0x08003399
 8003344:	080033ad 	.word	0x080033ad
 8003348:	08003329 	.word	0x08003329
 800334c:	08003329 	.word	0x08003329
 8003350:	08003329 	.word	0x08003329
 8003354:	08003329 	.word	0x08003329
 8003358:	080033ad 	.word	0x080033ad
 800335c:	08003329 	.word	0x08003329
 8003360:	08003329 	.word	0x08003329
 8003364:	08003329 	.word	0x08003329
 8003368:	08003329 	.word	0x08003329
 800336c:	080034ad 	.word	0x080034ad
 8003370:	080033d7 	.word	0x080033d7
 8003374:	08003467 	.word	0x08003467
 8003378:	08003329 	.word	0x08003329
 800337c:	08003329 	.word	0x08003329
 8003380:	080034cf 	.word	0x080034cf
 8003384:	08003329 	.word	0x08003329
 8003388:	080033d7 	.word	0x080033d7
 800338c:	08003329 	.word	0x08003329
 8003390:	08003329 	.word	0x08003329
 8003394:	0800346f 	.word	0x0800346f
 8003398:	6833      	ldr	r3, [r6, #0]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6032      	str	r2, [r6, #0]
 80033a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033a8:	2301      	movs	r3, #1
 80033aa:	e09d      	b.n	80034e8 <_printf_i+0x1e8>
 80033ac:	6833      	ldr	r3, [r6, #0]
 80033ae:	6820      	ldr	r0, [r4, #0]
 80033b0:	1d19      	adds	r1, r3, #4
 80033b2:	6031      	str	r1, [r6, #0]
 80033b4:	0606      	lsls	r6, r0, #24
 80033b6:	d501      	bpl.n	80033bc <_printf_i+0xbc>
 80033b8:	681d      	ldr	r5, [r3, #0]
 80033ba:	e003      	b.n	80033c4 <_printf_i+0xc4>
 80033bc:	0645      	lsls	r5, r0, #25
 80033be:	d5fb      	bpl.n	80033b8 <_printf_i+0xb8>
 80033c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033c4:	2d00      	cmp	r5, #0
 80033c6:	da03      	bge.n	80033d0 <_printf_i+0xd0>
 80033c8:	232d      	movs	r3, #45	@ 0x2d
 80033ca:	426d      	negs	r5, r5
 80033cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033d0:	4859      	ldr	r0, [pc, #356]	@ (8003538 <_printf_i+0x238>)
 80033d2:	230a      	movs	r3, #10
 80033d4:	e011      	b.n	80033fa <_printf_i+0xfa>
 80033d6:	6821      	ldr	r1, [r4, #0]
 80033d8:	6833      	ldr	r3, [r6, #0]
 80033da:	0608      	lsls	r0, r1, #24
 80033dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80033e0:	d402      	bmi.n	80033e8 <_printf_i+0xe8>
 80033e2:	0649      	lsls	r1, r1, #25
 80033e4:	bf48      	it	mi
 80033e6:	b2ad      	uxthmi	r5, r5
 80033e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80033ea:	4853      	ldr	r0, [pc, #332]	@ (8003538 <_printf_i+0x238>)
 80033ec:	6033      	str	r3, [r6, #0]
 80033ee:	bf14      	ite	ne
 80033f0:	230a      	movne	r3, #10
 80033f2:	2308      	moveq	r3, #8
 80033f4:	2100      	movs	r1, #0
 80033f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80033fa:	6866      	ldr	r6, [r4, #4]
 80033fc:	60a6      	str	r6, [r4, #8]
 80033fe:	2e00      	cmp	r6, #0
 8003400:	bfa2      	ittt	ge
 8003402:	6821      	ldrge	r1, [r4, #0]
 8003404:	f021 0104 	bicge.w	r1, r1, #4
 8003408:	6021      	strge	r1, [r4, #0]
 800340a:	b90d      	cbnz	r5, 8003410 <_printf_i+0x110>
 800340c:	2e00      	cmp	r6, #0
 800340e:	d04b      	beq.n	80034a8 <_printf_i+0x1a8>
 8003410:	4616      	mov	r6, r2
 8003412:	fbb5 f1f3 	udiv	r1, r5, r3
 8003416:	fb03 5711 	mls	r7, r3, r1, r5
 800341a:	5dc7      	ldrb	r7, [r0, r7]
 800341c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003420:	462f      	mov	r7, r5
 8003422:	42bb      	cmp	r3, r7
 8003424:	460d      	mov	r5, r1
 8003426:	d9f4      	bls.n	8003412 <_printf_i+0x112>
 8003428:	2b08      	cmp	r3, #8
 800342a:	d10b      	bne.n	8003444 <_printf_i+0x144>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	07df      	lsls	r7, r3, #31
 8003430:	d508      	bpl.n	8003444 <_printf_i+0x144>
 8003432:	6923      	ldr	r3, [r4, #16]
 8003434:	6861      	ldr	r1, [r4, #4]
 8003436:	4299      	cmp	r1, r3
 8003438:	bfde      	ittt	le
 800343a:	2330      	movle	r3, #48	@ 0x30
 800343c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003440:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003444:	1b92      	subs	r2, r2, r6
 8003446:	6122      	str	r2, [r4, #16]
 8003448:	f8cd a000 	str.w	sl, [sp]
 800344c:	464b      	mov	r3, r9
 800344e:	aa03      	add	r2, sp, #12
 8003450:	4621      	mov	r1, r4
 8003452:	4640      	mov	r0, r8
 8003454:	f7ff fee6 	bl	8003224 <_printf_common>
 8003458:	3001      	adds	r0, #1
 800345a:	d14a      	bne.n	80034f2 <_printf_i+0x1f2>
 800345c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003460:	b004      	add	sp, #16
 8003462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	f043 0320 	orr.w	r3, r3, #32
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	4833      	ldr	r0, [pc, #204]	@ (800353c <_printf_i+0x23c>)
 8003470:	2778      	movs	r7, #120	@ 0x78
 8003472:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	6831      	ldr	r1, [r6, #0]
 800347a:	061f      	lsls	r7, r3, #24
 800347c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003480:	d402      	bmi.n	8003488 <_printf_i+0x188>
 8003482:	065f      	lsls	r7, r3, #25
 8003484:	bf48      	it	mi
 8003486:	b2ad      	uxthmi	r5, r5
 8003488:	6031      	str	r1, [r6, #0]
 800348a:	07d9      	lsls	r1, r3, #31
 800348c:	bf44      	itt	mi
 800348e:	f043 0320 	orrmi.w	r3, r3, #32
 8003492:	6023      	strmi	r3, [r4, #0]
 8003494:	b11d      	cbz	r5, 800349e <_printf_i+0x19e>
 8003496:	2310      	movs	r3, #16
 8003498:	e7ac      	b.n	80033f4 <_printf_i+0xf4>
 800349a:	4827      	ldr	r0, [pc, #156]	@ (8003538 <_printf_i+0x238>)
 800349c:	e7e9      	b.n	8003472 <_printf_i+0x172>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	f023 0320 	bic.w	r3, r3, #32
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	e7f6      	b.n	8003496 <_printf_i+0x196>
 80034a8:	4616      	mov	r6, r2
 80034aa:	e7bd      	b.n	8003428 <_printf_i+0x128>
 80034ac:	6833      	ldr	r3, [r6, #0]
 80034ae:	6825      	ldr	r5, [r4, #0]
 80034b0:	6961      	ldr	r1, [r4, #20]
 80034b2:	1d18      	adds	r0, r3, #4
 80034b4:	6030      	str	r0, [r6, #0]
 80034b6:	062e      	lsls	r6, r5, #24
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	d501      	bpl.n	80034c0 <_printf_i+0x1c0>
 80034bc:	6019      	str	r1, [r3, #0]
 80034be:	e002      	b.n	80034c6 <_printf_i+0x1c6>
 80034c0:	0668      	lsls	r0, r5, #25
 80034c2:	d5fb      	bpl.n	80034bc <_printf_i+0x1bc>
 80034c4:	8019      	strh	r1, [r3, #0]
 80034c6:	2300      	movs	r3, #0
 80034c8:	6123      	str	r3, [r4, #16]
 80034ca:	4616      	mov	r6, r2
 80034cc:	e7bc      	b.n	8003448 <_printf_i+0x148>
 80034ce:	6833      	ldr	r3, [r6, #0]
 80034d0:	1d1a      	adds	r2, r3, #4
 80034d2:	6032      	str	r2, [r6, #0]
 80034d4:	681e      	ldr	r6, [r3, #0]
 80034d6:	6862      	ldr	r2, [r4, #4]
 80034d8:	2100      	movs	r1, #0
 80034da:	4630      	mov	r0, r6
 80034dc:	f7fc fe80 	bl	80001e0 <memchr>
 80034e0:	b108      	cbz	r0, 80034e6 <_printf_i+0x1e6>
 80034e2:	1b80      	subs	r0, r0, r6
 80034e4:	6060      	str	r0, [r4, #4]
 80034e6:	6863      	ldr	r3, [r4, #4]
 80034e8:	6123      	str	r3, [r4, #16]
 80034ea:	2300      	movs	r3, #0
 80034ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034f0:	e7aa      	b.n	8003448 <_printf_i+0x148>
 80034f2:	6923      	ldr	r3, [r4, #16]
 80034f4:	4632      	mov	r2, r6
 80034f6:	4649      	mov	r1, r9
 80034f8:	4640      	mov	r0, r8
 80034fa:	47d0      	blx	sl
 80034fc:	3001      	adds	r0, #1
 80034fe:	d0ad      	beq.n	800345c <_printf_i+0x15c>
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	079b      	lsls	r3, r3, #30
 8003504:	d413      	bmi.n	800352e <_printf_i+0x22e>
 8003506:	68e0      	ldr	r0, [r4, #12]
 8003508:	9b03      	ldr	r3, [sp, #12]
 800350a:	4298      	cmp	r0, r3
 800350c:	bfb8      	it	lt
 800350e:	4618      	movlt	r0, r3
 8003510:	e7a6      	b.n	8003460 <_printf_i+0x160>
 8003512:	2301      	movs	r3, #1
 8003514:	4632      	mov	r2, r6
 8003516:	4649      	mov	r1, r9
 8003518:	4640      	mov	r0, r8
 800351a:	47d0      	blx	sl
 800351c:	3001      	adds	r0, #1
 800351e:	d09d      	beq.n	800345c <_printf_i+0x15c>
 8003520:	3501      	adds	r5, #1
 8003522:	68e3      	ldr	r3, [r4, #12]
 8003524:	9903      	ldr	r1, [sp, #12]
 8003526:	1a5b      	subs	r3, r3, r1
 8003528:	42ab      	cmp	r3, r5
 800352a:	dcf2      	bgt.n	8003512 <_printf_i+0x212>
 800352c:	e7eb      	b.n	8003506 <_printf_i+0x206>
 800352e:	2500      	movs	r5, #0
 8003530:	f104 0619 	add.w	r6, r4, #25
 8003534:	e7f5      	b.n	8003522 <_printf_i+0x222>
 8003536:	bf00      	nop
 8003538:	08003729 	.word	0x08003729
 800353c:	0800373a 	.word	0x0800373a

08003540 <__malloc_lock>:
 8003540:	4801      	ldr	r0, [pc, #4]	@ (8003548 <__malloc_lock+0x8>)
 8003542:	f7ff bc73 	b.w	8002e2c <__retarget_lock_acquire_recursive>
 8003546:	bf00      	nop
 8003548:	2000024c 	.word	0x2000024c

0800354c <__malloc_unlock>:
 800354c:	4801      	ldr	r0, [pc, #4]	@ (8003554 <__malloc_unlock+0x8>)
 800354e:	f7ff bc6e 	b.w	8002e2e <__retarget_lock_release_recursive>
 8003552:	bf00      	nop
 8003554:	2000024c 	.word	0x2000024c

08003558 <_realloc_r>:
 8003558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355c:	4680      	mov	r8, r0
 800355e:	4615      	mov	r5, r2
 8003560:	460c      	mov	r4, r1
 8003562:	b921      	cbnz	r1, 800356e <_realloc_r+0x16>
 8003564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003568:	4611      	mov	r1, r2
 800356a:	f7ff bddb 	b.w	8003124 <_malloc_r>
 800356e:	b92a      	cbnz	r2, 800357c <_realloc_r+0x24>
 8003570:	f000 f858 	bl	8003624 <_free_r>
 8003574:	2400      	movs	r4, #0
 8003576:	4620      	mov	r0, r4
 8003578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800357c:	f000 f89c 	bl	80036b8 <_malloc_usable_size_r>
 8003580:	4285      	cmp	r5, r0
 8003582:	4606      	mov	r6, r0
 8003584:	d802      	bhi.n	800358c <_realloc_r+0x34>
 8003586:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800358a:	d8f4      	bhi.n	8003576 <_realloc_r+0x1e>
 800358c:	4629      	mov	r1, r5
 800358e:	4640      	mov	r0, r8
 8003590:	f7ff fdc8 	bl	8003124 <_malloc_r>
 8003594:	4607      	mov	r7, r0
 8003596:	2800      	cmp	r0, #0
 8003598:	d0ec      	beq.n	8003574 <_realloc_r+0x1c>
 800359a:	42b5      	cmp	r5, r6
 800359c:	462a      	mov	r2, r5
 800359e:	4621      	mov	r1, r4
 80035a0:	bf28      	it	cs
 80035a2:	4632      	movcs	r2, r6
 80035a4:	f000 f830 	bl	8003608 <memcpy>
 80035a8:	4621      	mov	r1, r4
 80035aa:	4640      	mov	r0, r8
 80035ac:	f000 f83a 	bl	8003624 <_free_r>
 80035b0:	463c      	mov	r4, r7
 80035b2:	e7e0      	b.n	8003576 <_realloc_r+0x1e>

080035b4 <memmove>:
 80035b4:	4288      	cmp	r0, r1
 80035b6:	b510      	push	{r4, lr}
 80035b8:	eb01 0402 	add.w	r4, r1, r2
 80035bc:	d902      	bls.n	80035c4 <memmove+0x10>
 80035be:	4284      	cmp	r4, r0
 80035c0:	4623      	mov	r3, r4
 80035c2:	d807      	bhi.n	80035d4 <memmove+0x20>
 80035c4:	1e43      	subs	r3, r0, #1
 80035c6:	42a1      	cmp	r1, r4
 80035c8:	d008      	beq.n	80035dc <memmove+0x28>
 80035ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035d2:	e7f8      	b.n	80035c6 <memmove+0x12>
 80035d4:	4402      	add	r2, r0
 80035d6:	4601      	mov	r1, r0
 80035d8:	428a      	cmp	r2, r1
 80035da:	d100      	bne.n	80035de <memmove+0x2a>
 80035dc:	bd10      	pop	{r4, pc}
 80035de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035e6:	e7f7      	b.n	80035d8 <memmove+0x24>

080035e8 <_sbrk_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4d06      	ldr	r5, [pc, #24]	@ (8003604 <_sbrk_r+0x1c>)
 80035ec:	2300      	movs	r3, #0
 80035ee:	4604      	mov	r4, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	602b      	str	r3, [r5, #0]
 80035f4:	f7fd fa7c 	bl	8000af0 <_sbrk>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d102      	bne.n	8003602 <_sbrk_r+0x1a>
 80035fc:	682b      	ldr	r3, [r5, #0]
 80035fe:	b103      	cbz	r3, 8003602 <_sbrk_r+0x1a>
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	bd38      	pop	{r3, r4, r5, pc}
 8003604:	20000258 	.word	0x20000258

08003608 <memcpy>:
 8003608:	440a      	add	r2, r1
 800360a:	4291      	cmp	r1, r2
 800360c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003610:	d100      	bne.n	8003614 <memcpy+0xc>
 8003612:	4770      	bx	lr
 8003614:	b510      	push	{r4, lr}
 8003616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800361a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800361e:	4291      	cmp	r1, r2
 8003620:	d1f9      	bne.n	8003616 <memcpy+0xe>
 8003622:	bd10      	pop	{r4, pc}

08003624 <_free_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4605      	mov	r5, r0
 8003628:	2900      	cmp	r1, #0
 800362a:	d041      	beq.n	80036b0 <_free_r+0x8c>
 800362c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003630:	1f0c      	subs	r4, r1, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	bfb8      	it	lt
 8003636:	18e4      	addlt	r4, r4, r3
 8003638:	f7ff ff82 	bl	8003540 <__malloc_lock>
 800363c:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <_free_r+0x90>)
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	b933      	cbnz	r3, 8003650 <_free_r+0x2c>
 8003642:	6063      	str	r3, [r4, #4]
 8003644:	6014      	str	r4, [r2, #0]
 8003646:	4628      	mov	r0, r5
 8003648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800364c:	f7ff bf7e 	b.w	800354c <__malloc_unlock>
 8003650:	42a3      	cmp	r3, r4
 8003652:	d908      	bls.n	8003666 <_free_r+0x42>
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	1821      	adds	r1, r4, r0
 8003658:	428b      	cmp	r3, r1
 800365a:	bf01      	itttt	eq
 800365c:	6819      	ldreq	r1, [r3, #0]
 800365e:	685b      	ldreq	r3, [r3, #4]
 8003660:	1809      	addeq	r1, r1, r0
 8003662:	6021      	streq	r1, [r4, #0]
 8003664:	e7ed      	b.n	8003642 <_free_r+0x1e>
 8003666:	461a      	mov	r2, r3
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b10b      	cbz	r3, 8003670 <_free_r+0x4c>
 800366c:	42a3      	cmp	r3, r4
 800366e:	d9fa      	bls.n	8003666 <_free_r+0x42>
 8003670:	6811      	ldr	r1, [r2, #0]
 8003672:	1850      	adds	r0, r2, r1
 8003674:	42a0      	cmp	r0, r4
 8003676:	d10b      	bne.n	8003690 <_free_r+0x6c>
 8003678:	6820      	ldr	r0, [r4, #0]
 800367a:	4401      	add	r1, r0
 800367c:	1850      	adds	r0, r2, r1
 800367e:	4283      	cmp	r3, r0
 8003680:	6011      	str	r1, [r2, #0]
 8003682:	d1e0      	bne.n	8003646 <_free_r+0x22>
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	6053      	str	r3, [r2, #4]
 800368a:	4408      	add	r0, r1
 800368c:	6010      	str	r0, [r2, #0]
 800368e:	e7da      	b.n	8003646 <_free_r+0x22>
 8003690:	d902      	bls.n	8003698 <_free_r+0x74>
 8003692:	230c      	movs	r3, #12
 8003694:	602b      	str	r3, [r5, #0]
 8003696:	e7d6      	b.n	8003646 <_free_r+0x22>
 8003698:	6820      	ldr	r0, [r4, #0]
 800369a:	1821      	adds	r1, r4, r0
 800369c:	428b      	cmp	r3, r1
 800369e:	bf04      	itt	eq
 80036a0:	6819      	ldreq	r1, [r3, #0]
 80036a2:	685b      	ldreq	r3, [r3, #4]
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	bf04      	itt	eq
 80036a8:	1809      	addeq	r1, r1, r0
 80036aa:	6021      	streq	r1, [r4, #0]
 80036ac:	6054      	str	r4, [r2, #4]
 80036ae:	e7ca      	b.n	8003646 <_free_r+0x22>
 80036b0:	bd38      	pop	{r3, r4, r5, pc}
 80036b2:	bf00      	nop
 80036b4:	20000254 	.word	0x20000254

080036b8 <_malloc_usable_size_r>:
 80036b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036bc:	1f18      	subs	r0, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bfbc      	itt	lt
 80036c2:	580b      	ldrlt	r3, [r1, r0]
 80036c4:	18c0      	addlt	r0, r0, r3
 80036c6:	4770      	bx	lr

080036c8 <_init>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	bf00      	nop
 80036cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ce:	bc08      	pop	{r3}
 80036d0:	469e      	mov	lr, r3
 80036d2:	4770      	bx	lr

080036d4 <_fini>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	bf00      	nop
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr
