
Self_Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004dd0  08004dd0  00005dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e6c  08004e6c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e6c  08004e6c  00005e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e74  08004e74  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e74  08004e74  00005e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e78  08004e78  00005e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  08004ee4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004ee4  000062f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce08  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd4  00000000  00000000  00012ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00014c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e2  00000000  00000000  00015920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017124  00000000  00000000  00016302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de38  00000000  00000000  0002d426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fec8  00000000  00000000  0003b25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000cb16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000cef1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004db8 	.word	0x08004db8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004db8 	.word	0x08004db8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f000 ff2b 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 f8f1 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f000 fabd 	bl	8001118 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b9e:	f000 fa91 	bl	80010c4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ba2:	f000 f9a3 	bl	8000eec <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ba6:	f000 fa17 	bl	8000fd8 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000baa:	f000 f951 	bl	8000e50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart();
 8000bae:	f000 fcbf 	bl	8001530 <ProgramStart>
  HAL_TIM_Base_Start(&htim2);
 8000bb2:	4869      	ldr	r0, [pc, #420]	@ (8000d58 <main+0x1cc>)
 8000bb4:	f001 ff34 	bl	8002a20 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4868      	ldr	r0, [pc, #416]	@ (8000d5c <main+0x1d0>)
 8000bbc:	f001 ffe4 	bl	8002b88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4867      	ldr	r0, [pc, #412]	@ (8000d60 <main+0x1d4>)
 8000bc4:	f001 ffe0 	bl	8002b88 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // forward
  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4865      	ldr	r0, [pc, #404]	@ (8000d64 <main+0x1d8>)
 8000bce:	f001 fa25 	bl	800201c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bd8:	4862      	ldr	r0, [pc, #392]	@ (8000d64 <main+0x1d8>)
 8000bda:	f001 fa1f 	bl	800201c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	4861      	ldr	r0, [pc, #388]	@ (8000d68 <main+0x1dc>)
 8000be4:	f001 fa1a 	bl	800201c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2140      	movs	r1, #64	@ 0x40
 8000bec:	485d      	ldr	r0, [pc, #372]	@ (8000d64 <main+0x1d8>)
 8000bee:	f001 fa15 	bl	800201c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 1);
  HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, 0);
   */
  int MaxSpeed = 15000;
 8000bf2:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8000bf6:	617b      	str	r3, [r7, #20]
  int current_speed = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  while (1)
  {

     int num1 = usDist1() * 100;
 8000bfc:	f000 fb80 	bl	8001300 <usDist1>
 8000c00:	ec51 0b10 	vmov	r0, r1, d0
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	4b58      	ldr	r3, [pc, #352]	@ (8000d6c <main+0x1e0>)
 8000c0a:	f7ff fb39 	bl	8000280 <__aeabi_dmul>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	f7ff fe19 	bl	800084c <__aeabi_d2iz>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(3);
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 ff56 	bl	8001ad0 <HAL_Delay>
     int num2 = usDist2() * 100;
 8000c24:	f000 fbcc 	bl	80013c0 <usDist2>
 8000c28:	ec51 0b10 	vmov	r0, r1, d0
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	4b4e      	ldr	r3, [pc, #312]	@ (8000d6c <main+0x1e0>)
 8000c32:	f7ff fb25 	bl	8000280 <__aeabi_dmul>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff fe05 	bl	800084c <__aeabi_d2iz>
 8000c42:	4603      	mov	r3, r0
 8000c44:	60bb      	str	r3, [r7, #8]
     HAL_Delay(3);
 8000c46:	2003      	movs	r0, #3
 8000c48:	f000 ff42 	bl	8001ad0 <HAL_Delay>
     int num3 = usDist3() * 100;
 8000c4c:	f000 fc14 	bl	8001478 <usDist3>
 8000c50:	ec51 0b10 	vmov	r0, r1, d0
 8000c54:	f04f 0200 	mov.w	r2, #0
 8000c58:	4b44      	ldr	r3, [pc, #272]	@ (8000d6c <main+0x1e0>)
 8000c5a:	f7ff fb11 	bl	8000280 <__aeabi_dmul>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	4610      	mov	r0, r2
 8000c64:	4619      	mov	r1, r3
 8000c66:	f7ff fdf1 	bl	800084c <__aeabi_d2iz>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	607b      	str	r3, [r7, #4]

     // printf("num1 = %d    num2 = %d      num3 = %d\r\n", num1, num2, num3);
     printf("num1 = %d\r\n", num1);
 8000c6e:	68f9      	ldr	r1, [r7, #12]
 8000c70:	483f      	ldr	r0, [pc, #252]	@ (8000d70 <main+0x1e4>)
 8000c72:	f003 f9d7 	bl	8004024 <iprintf>

     htim5.Instance->CCR1 = MaxSpeed;
 8000c76:	4b3a      	ldr	r3, [pc, #232]	@ (8000d60 <main+0x1d4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	635a      	str	r2, [r3, #52]	@ 0x34
     htim3.Instance->CCR1 = MaxSpeed;
 8000c7e:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <main+0x1d0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    current_speed = MaxSpeed;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	613b      	str	r3, [r7, #16]

    if(num1 >= 15)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b0e      	cmp	r3, #14
 8000c8e:	dd43      	ble.n	8000d18 <main+0x18c>
    {
      HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2110      	movs	r1, #16
 8000c94:	4833      	ldr	r0, [pc, #204]	@ (8000d64 <main+0x1d8>)
 8000c96:	f001 f9c1 	bl	800201c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ca0:	4830      	ldr	r0, [pc, #192]	@ (8000d64 <main+0x1d8>)
 8000ca2:	f001 f9bb 	bl	800201c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	482f      	ldr	r0, [pc, #188]	@ (8000d68 <main+0x1dc>)
 8000cac:	f001 f9b6 	bl	800201c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2140      	movs	r1, #64	@ 0x40
 8000cb4:	482b      	ldr	r0, [pc, #172]	@ (8000d64 <main+0x1d8>)
 8000cb6:	f001 f9b1 	bl	800201c <HAL_GPIO_WritePin>

      TIM3->CCR1 = MaxSpeed;
 8000cba:	4a2e      	ldr	r2, [pc, #184]	@ (8000d74 <main+0x1e8>)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	6353      	str	r3, [r2, #52]	@ 0x34
	    TIM5->CCR1 = MaxSpeed;
 8000cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8000d78 <main+0x1ec>)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	6353      	str	r3, [r2, #52]	@ 0x34
      
	    if(num2 > 15 && num3 > 15) // go forward
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	dd09      	ble.n	8000ce0 <main+0x154>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b0f      	cmp	r3, #15
 8000cd0:	dd06      	ble.n	8000ce0 <main+0x154>
      {
        TIM3->CCR1 = MaxSpeed;
 8000cd2:	4a28      	ldr	r2, [pc, #160]	@ (8000d74 <main+0x1e8>)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	6353      	str	r3, [r2, #52]	@ 0x34
        TIM5->CCR1 = MaxSpeed;
 8000cd8:	4a27      	ldr	r2, [pc, #156]	@ (8000d78 <main+0x1ec>)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	6353      	str	r3, [r2, #52]	@ 0x34
 8000cde:	e03a      	b.n	8000d56 <main+0x1ca>
      }

      else if((num3 > 15 && num2 <= 15)) // cornering
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	dd09      	ble.n	8000cfa <main+0x16e>
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	dc06      	bgt.n	8000cfa <main+0x16e>
      {
        TIM3->CCR1 = 0;
 8000cec:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <main+0x1e8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM5->CCR1 = current_speed;
 8000cf2:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <main+0x1ec>)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000cf8:	e02d      	b.n	8000d56 <main+0x1ca>
      }
      else if((num2 > 15 && num3 <= 15)) // cornering
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	f77f af7d 	ble.w	8000bfc <main+0x70>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	f73f af79 	bgt.w	8000bfc <main+0x70>
      {
        TIM3->CCR1 = current_speed;
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d74 <main+0x1e8>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	6353      	str	r3, [r2, #52]	@ 0x34
        TIM5->CCR1 = 0;
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <main+0x1ec>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d16:	e771      	b.n	8000bfc <main+0x70>
      } 
    }
    else if(num1 < 15)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b0e      	cmp	r3, #14
 8000d1c:	f73f af6e 	bgt.w	8000bfc <main+0x70>
    { 
      HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2110      	movs	r1, #16
 8000d24:	480f      	ldr	r0, [pc, #60]	@ (8000d64 <main+0x1d8>)
 8000d26:	f001 f979 	bl	800201c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <main+0x1d8>)
 8000d32:	f001 f973 	bl	800201c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2180      	movs	r1, #128	@ 0x80
 8000d3a:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <main+0x1dc>)
 8000d3c:	f001 f96e 	bl	800201c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2140      	movs	r1, #64	@ 0x40
 8000d44:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <main+0x1d8>)
 8000d46:	f001 f969 	bl	800201c <HAL_GPIO_WritePin>
      TIM3->CCR1 = MaxSpeed;
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <main+0x1e8>)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	6353      	str	r3, [r2, #52]	@ 0x34
      TIM5->CCR1 = MaxSpeed; 
 8000d50:	4a09      	ldr	r2, [pc, #36]	@ (8000d78 <main+0x1ec>)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	6353      	str	r3, [r2, #52]	@ 0x34
  {
 8000d56:	e751      	b.n	8000bfc <main+0x70>
 8000d58:	20000084 	.word	0x20000084
 8000d5c:	200000cc 	.word	0x200000cc
 8000d60:	20000114 	.word	0x20000114
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	40590000 	.word	0x40590000
 8000d70:	08004dd0 	.word	0x08004dd0
 8000d74:	40000400 	.word	0x40000400
 8000d78:	40000c00 	.word	0x40000c00

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	@ 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	@ 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 f9ba 	bl	8004104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <SystemClock_Config+0xcc>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	4a27      	ldr	r2, [pc, #156]	@ (8000e48 <SystemClock_Config+0xcc>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db0:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <SystemClock_Config+0xcc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <SystemClock_Config+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a21      	ldr	r2, [pc, #132]	@ (8000e4c <SystemClock_Config+0xd0>)
 8000dc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <SystemClock_Config+0xd0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de0:	2310      	movs	r3, #16
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de4:	2302      	movs	r3, #2
 8000de6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de8:	2300      	movs	r3, #0
 8000dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dec:	2310      	movs	r3, #16
 8000dee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000df0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000df4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000df6:	2304      	movs	r3, #4
 8000df8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 f924 	bl	8002050 <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e0e:	f000 fa43 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2302      	movs	r3, #2
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fb86 	bl	8002540 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e3a:	f000 fa2d 	bl	8001298 <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3750      	adds	r7, #80	@ 0x50
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <MX_TIM2_Init+0x94>)
 8000e6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <MX_TIM2_Init+0x94>)
 8000e76:	2253      	movs	r2, #83	@ 0x53
 8000e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <MX_TIM2_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000-1;
 8000e80:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <MX_TIM2_Init+0x94>)
 8000e82:	4a19      	ldr	r2, [pc, #100]	@ (8000ee8 <MX_TIM2_Init+0x98>)
 8000e84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_TIM2_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <MX_TIM2_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e92:	4814      	ldr	r0, [pc, #80]	@ (8000ee4 <MX_TIM2_Init+0x94>)
 8000e94:	f001 fd74 	bl	8002980 <HAL_TIM_Base_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000e9e:	f000 f9fb 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	4619      	mov	r1, r3
 8000eae:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <MX_TIM2_Init+0x94>)
 8000eb0:	f001 ffdc 	bl	8002e6c <HAL_TIM_ConfigClockSource>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 f9ed 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	@ (8000ee4 <MX_TIM2_Init+0x94>)
 8000ecc:	f002 fb6e 	bl	80035ac <HAL_TIMEx_MasterConfigSynchronization>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000ed6:	f000 f9df 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000084 	.word	0x20000084
 8000ee8:	0001387f 	.word	0x0001387f

08000eec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08e      	sub	sp, #56	@ 0x38
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd4 <MX_TIM3_Init+0xe8>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000f22:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f24:	2253      	movs	r2, #83	@ 0x53
 8000f26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8000f2e:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f42:	4823      	ldr	r0, [pc, #140]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f44:	f001 fd1c 	bl	8002980 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f4e:	f000 f9a3 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481c      	ldr	r0, [pc, #112]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f60:	f001 ff84 	bl	8002e6c <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f6a:	f000 f995 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f6e:	4818      	ldr	r0, [pc, #96]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f70:	f001 fdb0 	bl	8002ad4 <HAL_TIM_PWM_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f7a:	f000 f98d 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4810      	ldr	r0, [pc, #64]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000f8e:	f002 fb0d 	bl	80035ac <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f98:	f000 f97e 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	2360      	movs	r3, #96	@ 0x60
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000fb4:	f001 fe98 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000fbe:	f000 f96b 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fc2:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <MX_TIM3_Init+0xe4>)
 8000fc4:	f000 fb5c 	bl	8001680 <HAL_TIM_MspPostInit>

}
 8000fc8:	bf00      	nop
 8000fca:	3738      	adds	r7, #56	@ 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000cc 	.word	0x200000cc
 8000fd4:	40000400 	.word	0x40000400

08000fd8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	@ 0x38
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001008:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <MX_TIM5_Init+0xe4>)
 800100a:	4a2d      	ldr	r2, [pc, #180]	@ (80010c0 <MX_TIM5_Init+0xe8>)
 800100c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800100e:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <MX_TIM5_Init+0xe4>)
 8001010:	2253      	movs	r2, #83	@ 0x53
 8001012:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <MX_TIM5_Init+0xe4>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535-1;
 800101a:	4b28      	ldr	r3, [pc, #160]	@ (80010bc <MX_TIM5_Init+0xe4>)
 800101c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001020:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <MX_TIM5_Init+0xe4>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <MX_TIM5_Init+0xe4>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800102e:	4823      	ldr	r0, [pc, #140]	@ (80010bc <MX_TIM5_Init+0xe4>)
 8001030:	f001 fca6 	bl	8002980 <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800103a:	f000 f92d 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001044:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001048:	4619      	mov	r1, r3
 800104a:	481c      	ldr	r0, [pc, #112]	@ (80010bc <MX_TIM5_Init+0xe4>)
 800104c:	f001 ff0e 	bl	8002e6c <HAL_TIM_ConfigClockSource>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001056:	f000 f91f 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800105a:	4818      	ldr	r0, [pc, #96]	@ (80010bc <MX_TIM5_Init+0xe4>)
 800105c:	f001 fd3a 	bl	8002ad4 <HAL_TIM_PWM_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001066:	f000 f917 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	4619      	mov	r1, r3
 8001078:	4810      	ldr	r0, [pc, #64]	@ (80010bc <MX_TIM5_Init+0xe4>)
 800107a:	f002 fa97 	bl	80035ac <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001084:	f000 f908 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001088:	2360      	movs	r3, #96	@ 0x60
 800108a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	4619      	mov	r1, r3
 800109e:	4807      	ldr	r0, [pc, #28]	@ (80010bc <MX_TIM5_Init+0xe4>)
 80010a0:	f001 fe22 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80010aa:	f000 f8f5 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80010ae:	4803      	ldr	r0, [pc, #12]	@ (80010bc <MX_TIM5_Init+0xe4>)
 80010b0:	f000 fae6 	bl	8001680 <HAL_TIM_MspPostInit>

}
 80010b4:	bf00      	nop
 80010b6:	3738      	adds	r7, #56	@ 0x38
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000114 	.word	0x20000114
 80010c0:	40000c00 	.word	0x40000c00

080010c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <MX_USART2_UART_Init+0x50>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010fc:	f002 fac4 	bl	8003688 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001106:	f000 f8c7 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000015c 	.word	0x2000015c
 8001114:	40004400 	.word	0x40004400

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b55      	ldr	r3, [pc, #340]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a54      	ldr	r2, [pc, #336]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b52      	ldr	r3, [pc, #328]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b4e      	ldr	r3, [pc, #312]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a4d      	ldr	r2, [pc, #308]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b4b      	ldr	r3, [pc, #300]	@ (8001288 <MX_GPIO_Init+0x170>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b47      	ldr	r3, [pc, #284]	@ (8001288 <MX_GPIO_Init+0x170>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a46      	ldr	r2, [pc, #280]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b44      	ldr	r3, [pc, #272]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b40      	ldr	r3, [pc, #256]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a3f      	ldr	r2, [pc, #252]	@ (8001288 <MX_GPIO_Init+0x170>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b3d      	ldr	r3, [pc, #244]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG1_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 80011a4:	4839      	ldr	r0, [pc, #228]	@ (800128c <MX_GPIO_Init+0x174>)
 80011a6:	f000 ff39 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG3_Pin|D6_Pin|D5_Pin|D10_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f240 4154 	movw	r1, #1108	@ 0x454
 80011b0:	4837      	ldr	r0, [pc, #220]	@ (8001290 <MX_GPIO_Init+0x178>)
 80011b2:	f000 ff33 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIG2_Pin|D9_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	21c0      	movs	r1, #192	@ 0xc0
 80011ba:	4836      	ldr	r0, [pc, #216]	@ (8001294 <MX_GPIO_Init+0x17c>)
 80011bc:	f000 ff2e 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	482f      	ldr	r0, [pc, #188]	@ (8001294 <MX_GPIO_Init+0x17c>)
 80011d8:	f000 fd84 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TRIG1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIG1_Pin;
 80011dc:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4825      	ldr	r0, [pc, #148]	@ (800128c <MX_GPIO_Init+0x174>)
 80011f6:	f000 fd75 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO3_Pin */
  GPIO_InitStruct.Pin = ECHO3_Pin;
 80011fa:	2302      	movs	r3, #2
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO3_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4820      	ldr	r0, [pc, #128]	@ (8001290 <MX_GPIO_Init+0x178>)
 800120e:	f000 fd69 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG3_Pin D6_Pin D5_Pin D10_Pin */
  GPIO_InitStruct.Pin = TRIG3_Pin|D6_Pin|D5_Pin|D10_Pin;
 8001212:	f240 4354 	movw	r3, #1108	@ 0x454
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4819      	ldr	r0, [pc, #100]	@ (8001290 <MX_GPIO_Init+0x178>)
 800122c:	f000 fd5a 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG2_Pin D9_Pin */
  GPIO_InitStruct.Pin = TRIG2_Pin|D9_Pin;
 8001230:	23c0      	movs	r3, #192	@ 0xc0
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4813      	ldr	r0, [pc, #76]	@ (8001294 <MX_GPIO_Init+0x17c>)
 8001248:	f000 fd4c 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO2_Pin */
  GPIO_InitStruct.Pin = ECHO2_Pin;
 800124c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO2_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <MX_GPIO_Init+0x17c>)
 8001262:	f000 fd3f 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO1_Pin */
  GPIO_InitStruct.Pin = ECHO1_Pin;
 8001266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO1_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4804      	ldr	r0, [pc, #16]	@ (800128c <MX_GPIO_Init+0x174>)
 800127c:	f000 fd32 	bl	8001ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	@ 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <Error_Handler+0x8>

080012a4 <__io_putchar>:
#include "main.h"
//extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim2;
int __io_putchar(int ch)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10);
 80012ac:	1d39      	adds	r1, r7, #4
 80012ae:	230a      	movs	r3, #10
 80012b0:	2201      	movs	r2, #1
 80012b2:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <__io_putchar+0x20>)
 80012b4:	f002 fa38 	bl	8003728 <HAL_UART_Transmit>
   return ch;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000015c 	.word	0x2000015c

080012c8 <usDelay>:
    return HAL_ADC_GetValue(&hadc1);
    */
}

void usDelay(int us) // micro-second based Delay
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
   volatile uint32_t t1 = htim2.Instance->CNT;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <usDelay+0x30>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d6:	60fb      	str	r3, [r7, #12]
   while((htim2.Instance->CNT -t1) < us);
 80012d8:	bf00      	nop
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <usDelay+0x30>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	1ad2      	subs	r2, r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3f7      	bcc.n	80012da <usDelay+0x12>
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	20000084 	.word	0x20000084
 80012fc:	00000000 	.word	0x00000000

08001300 <usDist1>:

double usDist1()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800130c:	482a      	ldr	r0, [pc, #168]	@ (80013b8 <usDist1+0xb8>)
 800130e:	f000 fe85 	bl	800201c <HAL_GPIO_WritePin>
   usDelay(10);
 8001312:	200a      	movs	r0, #10
 8001314:	f7ff ffd8 	bl	80012c8 <usDelay>
   HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800131e:	4826      	ldr	r0, [pc, #152]	@ (80013b8 <usDist1+0xb8>)
 8001320:	f000 fe7c 	bl	800201c <HAL_GPIO_WritePin>
   usDelay(10);
 8001324:	200a      	movs	r0, #10
 8001326:	f7ff ffcf 	bl	80012c8 <usDelay>
   HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001330:	4821      	ldr	r0, [pc, #132]	@ (80013b8 <usDist1+0xb8>)
 8001332:	f000 fe73 	bl	800201c <HAL_GPIO_WritePin>
   //   Wait for burst
   usDelay(200);
 8001336:	20c8      	movs	r0, #200	@ 0xc8
 8001338:	f7ff ffc6 	bl	80012c8 <usDelay>
   //   Wait for Echo Low

   //   Start count
   while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) != 1);
 800133c:	bf00      	nop
 800133e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001342:	481d      	ldr	r0, [pc, #116]	@ (80013b8 <usDist1+0xb8>)
 8001344:	f000 fe52 	bl	8001fec <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	2b01      	cmp	r3, #1
 800134c:	d1f7      	bne.n	800133e <usDist1+0x3e>
   volatile uint32_t t1 = htim2.Instance->CNT;
 800134e:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <usDist1+0xbc>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001354:	607b      	str	r3, [r7, #4]
   while(HAL_GPIO_ReadPin(ECHO1_GPIO_Port, ECHO1_Pin) != 0);
 8001356:	bf00      	nop
 8001358:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800135c:	4816      	ldr	r0, [pc, #88]	@ (80013b8 <usDist1+0xb8>)
 800135e:	f000 fe45 	bl	8001fec <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f7      	bne.n	8001358 <usDist1+0x58>
   volatile uint32_t t2 = htim2.Instance->CNT;
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <usDist1+0xbc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136e:	603b      	str	r3, [r7, #0]

   int dt = t2 - t1;   //   micro-second sonic speed
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
   usDelay(60000);   //   minimum delay for next time
 8001378:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800137c:	f7ff ffa4 	bl	80012c8 <usDelay>

   double Dist = 0.0001715 * dt;
 8001380:	6978      	ldr	r0, [r7, #20]
 8001382:	f7ff f9f9 	bl	8000778 <__aeabi_i2d>
 8001386:	a30a      	add	r3, pc, #40	@ (adr r3, 80013b0 <usDist1+0xb0>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7fe ff78 	bl	8000280 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	e9c7 2302 	strd	r2, r3, [r7, #8]

   return Dist;
 8001398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800139c:	ec43 2b17 	vmov	d7, r2, r3
}
 80013a0:	eeb0 0a47 	vmov.f32	s0, s14
 80013a4:	eef0 0a67 	vmov.f32	s1, s15
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	c853c148 	.word	0xc853c148
 80013b4:	3f267a95 	.word	0x3f267a95
 80013b8:	40020000 	.word	0x40020000
 80013bc:	20000084 	.word	0x20000084

080013c0 <usDist2>:

double usDist2()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2140      	movs	r1, #64	@ 0x40
 80013ca:	4829      	ldr	r0, [pc, #164]	@ (8001470 <usDist2+0xb0>)
 80013cc:	f000 fe26 	bl	800201c <HAL_GPIO_WritePin>
   usDelay(10);
 80013d0:	200a      	movs	r0, #10
 80013d2:	f7ff ff79 	bl	80012c8 <usDelay>
   HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2140      	movs	r1, #64	@ 0x40
 80013da:	4825      	ldr	r0, [pc, #148]	@ (8001470 <usDist2+0xb0>)
 80013dc:	f000 fe1e 	bl	800201c <HAL_GPIO_WritePin>
   usDelay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f7ff ff71 	bl	80012c8 <usDelay>
   HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2140      	movs	r1, #64	@ 0x40
 80013ea:	4821      	ldr	r0, [pc, #132]	@ (8001470 <usDist2+0xb0>)
 80013ec:	f000 fe16 	bl	800201c <HAL_GPIO_WritePin>
   //   Wait for burst
   usDelay(200);
 80013f0:	20c8      	movs	r0, #200	@ 0xc8
 80013f2:	f7ff ff69 	bl	80012c8 <usDelay>
   //   Wait for Echo Low

   //   Start count
   while(HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) != 1);
 80013f6:	bf00      	nop
 80013f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013fc:	481c      	ldr	r0, [pc, #112]	@ (8001470 <usDist2+0xb0>)
 80013fe:	f000 fdf5 	bl	8001fec <HAL_GPIO_ReadPin>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d1f7      	bne.n	80013f8 <usDist2+0x38>
   volatile uint32_t t1 = htim2.Instance->CNT;
 8001408:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <usDist2+0xb4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140e:	607b      	str	r3, [r7, #4]
   while(HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin) != 0);
 8001410:	bf00      	nop
 8001412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001416:	4816      	ldr	r0, [pc, #88]	@ (8001470 <usDist2+0xb0>)
 8001418:	f000 fde8 	bl	8001fec <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f7      	bne.n	8001412 <usDist2+0x52>
   volatile uint32_t t2 = htim2.Instance->CNT;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <usDist2+0xb4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	603b      	str	r3, [r7, #0]

   int dt = t2 - t1;   //   micro-second sonic speed
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
   usDelay(60000);   //   minimum delay for next time
 8001432:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001436:	f7ff ff47 	bl	80012c8 <usDelay>

   double Dist = 0.0001715 * dt;
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff f99c 	bl	8000778 <__aeabi_i2d>
 8001440:	a309      	add	r3, pc, #36	@ (adr r3, 8001468 <usDist2+0xa8>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7fe ff1b 	bl	8000280 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	e9c7 2302 	strd	r2, r3, [r7, #8]

   return Dist;
 8001452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001456:	ec43 2b17 	vmov	d7, r2, r3
}
 800145a:	eeb0 0a47 	vmov.f32	s0, s14
 800145e:	eef0 0a67 	vmov.f32	s1, s15
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	c853c148 	.word	0xc853c148
 800146c:	3f267a95 	.word	0x3f267a95
 8001470:	40020800 	.word	0x40020800
 8001474:	20000084 	.word	0x20000084

08001478 <usDist3>:

double usDist3()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0

   HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2104      	movs	r1, #4
 8001482:	4829      	ldr	r0, [pc, #164]	@ (8001528 <usDist3+0xb0>)
 8001484:	f000 fdca 	bl	800201c <HAL_GPIO_WritePin>
   usDelay(10);
 8001488:	200a      	movs	r0, #10
 800148a:	f7ff ff1d 	bl	80012c8 <usDelay>
   HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 1);
 800148e:	2201      	movs	r2, #1
 8001490:	2104      	movs	r1, #4
 8001492:	4825      	ldr	r0, [pc, #148]	@ (8001528 <usDist3+0xb0>)
 8001494:	f000 fdc2 	bl	800201c <HAL_GPIO_WritePin>
   usDelay(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f7ff ff15 	bl	80012c8 <usDelay>
   HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2104      	movs	r1, #4
 80014a2:	4821      	ldr	r0, [pc, #132]	@ (8001528 <usDist3+0xb0>)
 80014a4:	f000 fdba 	bl	800201c <HAL_GPIO_WritePin>
   //   Wait for burst
   usDelay(200);
 80014a8:	20c8      	movs	r0, #200	@ 0xc8
 80014aa:	f7ff ff0d 	bl	80012c8 <usDelay>
   //   Wait for Echo Low

   //   Start count
   while(HAL_GPIO_ReadPin(ECHO3_GPIO_Port, ECHO3_Pin) != 1);
 80014ae:	bf00      	nop
 80014b0:	2102      	movs	r1, #2
 80014b2:	481d      	ldr	r0, [pc, #116]	@ (8001528 <usDist3+0xb0>)
 80014b4:	f000 fd9a 	bl	8001fec <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d1f8      	bne.n	80014b0 <usDist3+0x38>
   volatile uint32_t t1 = htim2.Instance->CNT;
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <usDist3+0xb4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c4:	607b      	str	r3, [r7, #4]
   while(HAL_GPIO_ReadPin(ECHO3_GPIO_Port, ECHO3_Pin) != 0);
 80014c6:	bf00      	nop
 80014c8:	2102      	movs	r1, #2
 80014ca:	4817      	ldr	r0, [pc, #92]	@ (8001528 <usDist3+0xb0>)
 80014cc:	f000 fd8e 	bl	8001fec <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f8      	bne.n	80014c8 <usDist3+0x50>
   volatile uint32_t t2 = htim2.Instance->CNT;
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <usDist3+0xb4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	603b      	str	r3, [r7, #0]

   int dt = t2 - t1;   //   micro-second sonic speed
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
   usDelay(60000);   //   minimum delay for next time
 80014e6:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80014ea:	f7ff feed 	bl	80012c8 <usDelay>
   double Dist = 0.0001715 * dt;
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff f942 	bl	8000778 <__aeabi_i2d>
 80014f4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001520 <usDist3+0xa8>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe fec1 	bl	8000280 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	e9c7 2302 	strd	r2, r3, [r7, #8]

   return Dist;
 8001506:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800150a:	ec43 2b17 	vmov	d7, r2, r3
}
 800150e:	eeb0 0a47 	vmov.f32	s0, s14
 8001512:	eef0 0a67 	vmov.f32	s1, s15
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	f3af 8000 	nop.w
 8001520:	c853c148 	.word	0xc853c148
 8001524:	3f267a95 	.word	0x3f267a95
 8001528:	40020400 	.word	0x40020400
 800152c:	20000084 	.word	0x20000084

08001530 <ProgramStart>:
void ProgramStart()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
    printf("\033[2J");         //screen clear
 8001534:	4808      	ldr	r0, [pc, #32]	@ (8001558 <ProgramStart+0x28>)
 8001536:	f002 fd75 	bl	8004024 <iprintf>
     printf("\033[1;1H");         // move cursor pos to [1:1]
 800153a:	4808      	ldr	r0, [pc, #32]	@ (800155c <ProgramStart+0x2c>)
 800153c:	f002 fd72 	bl	8004024 <iprintf>
     printf("Program started ");
 8001540:	4807      	ldr	r0, [pc, #28]	@ (8001560 <ProgramStart+0x30>)
 8001542:	f002 fd6f 	bl	8004024 <iprintf>
     Wait(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f000 f80c 	bl	8001564 <Wait>
     printf("\033[2J");         //screen clear
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <ProgramStart+0x28>)
 800154e:	f002 fd69 	bl	8004024 <iprintf>
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	08004ddc 	.word	0x08004ddc
 800155c:	08004de4 	.word	0x08004de4
 8001560:	08004dec 	.word	0x08004dec

08001564 <Wait>:

void Wait(int o)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
   printf("Press Blue button to continue\r\n");
 800156c:	4808      	ldr	r0, [pc, #32]	@ (8001590 <Wait+0x2c>)
 800156e:	f002 fdc1 	bl	80040f4 <puts>
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));      //B1 == 0
 8001572:	bf00      	nop
 8001574:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001578:	4806      	ldr	r0, [pc, #24]	@ (8001594 <Wait+0x30>)
 800157a:	f000 fd37 	bl	8001fec <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f7      	bne.n	8001574 <Wait+0x10>
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	08004e00 	.word	0x08004e00
 8001594:	40020800 	.word	0x40020800

08001598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	4a0f      	ldr	r2, [pc, #60]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_MspInit+0x4c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015d6:	2007      	movs	r0, #7
 80015d8:	f000 fb50 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f8:	d10e      	bne.n	8001618 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001616:	e026      	b.n	8001666 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a16      	ldr	r2, [pc, #88]	@ (8001678 <HAL_TIM_Base_MspInit+0x90>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10e      	bne.n	8001640 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6413      	str	r3, [r2, #64]	@ 0x40
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
}
 800163e:	e012      	b.n	8001666 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0d      	ldr	r2, [pc, #52]	@ (800167c <HAL_TIM_Base_MspInit+0x94>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10d      	bne.n	8001666 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	4a08      	ldr	r2, [pc, #32]	@ (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6413      	str	r3, [r2, #64]	@ 0x40
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
}
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40000400 	.word	0x40000400
 800167c:	40000c00 	.word	0x40000c00

08001680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a24      	ldr	r2, [pc, #144]	@ (8001730 <HAL_TIM_MspPostInit+0xb0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d11e      	bne.n	80016e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <HAL_TIM_MspPostInit+0xb4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a22      	ldr	r2, [pc, #136]	@ (8001734 <HAL_TIM_MspPostInit+0xb4>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <HAL_TIM_MspPostInit+0xb4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016be:	2340      	movs	r3, #64	@ 0x40
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ce:	2302      	movs	r3, #2
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4817      	ldr	r0, [pc, #92]	@ (8001738 <HAL_TIM_MspPostInit+0xb8>)
 80016da:	f000 fb03 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80016de:	e022      	b.n	8001726 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a15      	ldr	r2, [pc, #84]	@ (800173c <HAL_TIM_MspPostInit+0xbc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d11d      	bne.n	8001726 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_TIM_MspPostInit+0xb4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	@ (8001734 <HAL_TIM_MspPostInit+0xb4>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_TIM_MspPostInit+0xb4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001716:	2302      	movs	r3, #2
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <HAL_TIM_MspPostInit+0xb8>)
 8001722:	f000 fadf 	bl	8001ce4 <HAL_GPIO_Init>
}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40000400 	.word	0x40000400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000
 800173c:	40000c00 	.word	0x40000c00

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	@ 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	@ (80017c4 <HAL_UART_MspInit+0x84>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12b      	bne.n	80017ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <HAL_UART_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a17      	ldr	r2, [pc, #92]	@ (80017c8 <HAL_UART_MspInit+0x88>)
 800176c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_UART_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_UART_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a10      	ldr	r2, [pc, #64]	@ (80017c8 <HAL_UART_MspInit+0x88>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <HAL_UART_MspInit+0x88>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179a:	230c      	movs	r3, #12
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017aa:	2307      	movs	r3, #7
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <HAL_UART_MspInit+0x8c>)
 80017b6:	f000 fa95 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	@ 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40004400 	.word	0x40004400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <NMI_Handler+0x4>

080017d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <MemManage_Handler+0x4>

080017e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001826:	f000 f933 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}

0800182e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e00a      	b.n	8001856 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001840:	f3af 8000 	nop.w
 8001844:	4601      	mov	r1, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	b2ca      	uxtb	r2, r1
 800184e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbf0      	blt.n	8001840 <_read+0x12>
  }

  return len;
 800185e:	687b      	ldr	r3, [r7, #4]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e009      	b.n	800188e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	60ba      	str	r2, [r7, #8]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fd0e 	bl	80012a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	dbf1      	blt.n	800187a <_write+0x12>
  }
  return len;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_close>:

int _close(int file)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c8:	605a      	str	r2, [r3, #4]
  return 0;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_isatty>:

int _isatty(int file)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f002 fbec 	bl	8004114 <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20020000 	.word	0x20020000
 8001968:	00000400 	.word	0x00000400
 800196c:	200001a4 	.word	0x200001a4
 8001970:	200002f8 	.word	0x200002f8

08001974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800199c:	f7ff ffea 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a0:	480c      	ldr	r0, [pc, #48]	@ (80019d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019a2:	490d      	ldr	r1, [pc, #52]	@ (80019d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a4:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b8:	4c0a      	ldr	r4, [pc, #40]	@ (80019e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c6:	f002 fbab 	bl	8004120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7ff f8df 	bl	8000b8c <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019dc:	08004e7c 	.word	0x08004e7c
  ldr r2, =_sbss
 80019e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019e4:	200002f8 	.word	0x200002f8

080019e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <HAL_Init+0x40>)
 80019f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <HAL_Init+0x40>)
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <HAL_Init+0x40>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f931 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff fdba 	bl	8001598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f93b 	bl	8001cca <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a6c:	f000 f911 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	@ (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	@ (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	200001a8 	.word	0x200001a8

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200001a8 	.word	0x200001a8

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff ffee 	bl	8001ab8 <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000008 	.word	0x20000008

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	@ (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	@ (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	@ 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff47 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff5c 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff8e 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffb0 	bl	8001c38 <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e159      	b.n	8001fb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8148 	bne.w	8001fae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d005      	beq.n	8001d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d017      	beq.n	8001dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d123      	bne.n	8001e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80a2 	beq.w	8001fae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b57      	ldr	r3, [pc, #348]	@ (8001fcc <HAL_GPIO_Init+0x2e8>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	4a56      	ldr	r2, [pc, #344]	@ (8001fcc <HAL_GPIO_Init+0x2e8>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7a:	4b54      	ldr	r3, [pc, #336]	@ (8001fcc <HAL_GPIO_Init+0x2e8>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e86:	4a52      	ldr	r2, [pc, #328]	@ (8001fd0 <HAL_GPIO_Init+0x2ec>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a49      	ldr	r2, [pc, #292]	@ (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_GPIO_Init+0x202>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a48      	ldr	r2, [pc, #288]	@ (8001fd8 <HAL_GPIO_Init+0x2f4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0x1fe>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a47      	ldr	r2, [pc, #284]	@ (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00d      	beq.n	8001ede <HAL_GPIO_Init+0x1fa>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a46      	ldr	r2, [pc, #280]	@ (8001fe0 <HAL_GPIO_Init+0x2fc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <HAL_GPIO_Init+0x1f6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a45      	ldr	r2, [pc, #276]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x1f2>
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	e008      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e004      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f002 0203 	and.w	r2, r2, #3
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef8:	4935      	ldr	r1, [pc, #212]	@ (8001fd0 <HAL_GPIO_Init+0x2ec>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b38      	ldr	r3, [pc, #224]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a24      	ldr	r2, [pc, #144]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5a:	4b23      	ldr	r3, [pc, #140]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f84:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	f67f aea2 	bls.w	8001d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3724      	adds	r7, #36	@ 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40013c00 	.word	0x40013c00

08001fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e001      	b.n	800200e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e267      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d075      	beq.n	800215a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206e:	4b88      	ldr	r3, [pc, #544]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d00c      	beq.n	8002094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207a:	4b85      	ldr	r3, [pc, #532]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002082:	2b08      	cmp	r3, #8
 8002084:	d112      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002086:	4b82      	ldr	r3, [pc, #520]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002092:	d10b      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	4b7e      	ldr	r3, [pc, #504]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d05b      	beq.n	8002158 <HAL_RCC_OscConfig+0x108>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d157      	bne.n	8002158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e242      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x74>
 80020b6:	4b76      	ldr	r3, [pc, #472]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a75      	ldr	r2, [pc, #468]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e01d      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b70      	ldr	r3, [pc, #448]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b6d      	ldr	r3, [pc, #436]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6c      	ldr	r2, [pc, #432]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020e8:	4b69      	ldr	r3, [pc, #420]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a68      	ldr	r2, [pc, #416]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b66      	ldr	r3, [pc, #408]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a65      	ldr	r2, [pc, #404]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fcd6 	bl	8001ab8 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fcd2 	bl	8001ab8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e207      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b5b      	ldr	r3, [pc, #364]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0xc0>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fcc2 	bl	8001ab8 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fcbe 	bl	8001ab8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	@ 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1f3      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	4b51      	ldr	r3, [pc, #324]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0xe8>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002166:	4b4a      	ldr	r3, [pc, #296]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002172:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217a:	2b08      	cmp	r3, #8
 800217c:	d11c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b44      	ldr	r3, [pc, #272]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	4b41      	ldr	r3, [pc, #260]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x152>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1c7      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4937      	ldr	r1, [pc, #220]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	e03a      	b.n	800222e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c0:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <HAL_RCC_OscConfig+0x244>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff fc77 	bl	8001ab8 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff fc73 	bl	8001ab8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1a8      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b28      	ldr	r3, [pc, #160]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4925      	ldr	r1, [pc, #148]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <HAL_RCC_OscConfig+0x244>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff fc56 	bl	8001ab8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff fc52 	bl	8001ab8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e187      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4b1b      	ldr	r3, [pc, #108]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d036      	beq.n	80022a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_RCC_OscConfig+0x248>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7ff fc36 	bl	8001ab8 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fc32 	bl	8001ab8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e167      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_RCC_OscConfig+0x240>)
 8002264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x200>
 800226e:	e01b      	b.n	80022a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_RCC_OscConfig+0x248>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff fc1f 	bl	8001ab8 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	e00e      	b.n	800229c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227e:	f7ff fc1b 	bl	8001ab8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d907      	bls.n	800229c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e150      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
 8002290:	40023800 	.word	0x40023800
 8002294:	42470000 	.word	0x42470000
 8002298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	4b88      	ldr	r3, [pc, #544]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ea      	bne.n	800227e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8097 	beq.w	80023e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4b81      	ldr	r3, [pc, #516]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b7d      	ldr	r3, [pc, #500]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a7c      	ldr	r2, [pc, #496]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b7a      	ldr	r3, [pc, #488]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b77      	ldr	r3, [pc, #476]	@ (80024c4 <HAL_RCC_OscConfig+0x474>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b74      	ldr	r3, [pc, #464]	@ (80024c4 <HAL_RCC_OscConfig+0x474>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a73      	ldr	r2, [pc, #460]	@ (80024c4 <HAL_RCC_OscConfig+0x474>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7ff fbdb 	bl	8001ab8 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7ff fbd7 	bl	8001ab8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e10c      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b6a      	ldr	r3, [pc, #424]	@ (80024c4 <HAL_RCC_OscConfig+0x474>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x2ea>
 800232c:	4b64      	ldr	r3, [pc, #400]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	4a63      	ldr	r2, [pc, #396]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	@ 0x70
 8002338:	e01c      	b.n	8002374 <HAL_RCC_OscConfig+0x324>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b05      	cmp	r3, #5
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x30c>
 8002342:	4b5f      	ldr	r3, [pc, #380]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002346:	4a5e      	ldr	r2, [pc, #376]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6713      	str	r3, [r2, #112]	@ 0x70
 800234e:	4b5c      	ldr	r3, [pc, #368]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002352:	4a5b      	ldr	r2, [pc, #364]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	@ 0x70
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0x324>
 800235c:	4b58      	ldr	r3, [pc, #352]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002360:	4a57      	ldr	r2, [pc, #348]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	@ 0x70
 8002368:	4b55      	ldr	r3, [pc, #340]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236c:	4a54      	ldr	r2, [pc, #336]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7ff fb9c 	bl	8001ab8 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	e00a      	b.n	800239a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002384:	f7ff fb98 	bl	8001ab8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0cb      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	4b49      	ldr	r3, [pc, #292]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0ee      	beq.n	8002384 <HAL_RCC_OscConfig+0x334>
 80023a6:	e014      	b.n	80023d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7ff fb86 	bl	8001ab8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7ff fb82 	bl	8001ab8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0b5      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c6:	4b3e      	ldr	r3, [pc, #248]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ee      	bne.n	80023b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b39      	ldr	r3, [pc, #228]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	4a38      	ldr	r2, [pc, #224]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a1 	beq.w	8002530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ee:	4b34      	ldr	r3, [pc, #208]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d05c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d141      	bne.n	8002486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <HAL_RCC_OscConfig+0x478>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fb56 	bl	8001ab8 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002410:	f7ff fb52 	bl	8001ab8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e087      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	4b27      	ldr	r3, [pc, #156]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	3b01      	subs	r3, #1
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	491b      	ldr	r1, [pc, #108]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002458:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_RCC_OscConfig+0x478>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff fb2b 	bl	8001ab8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002466:	f7ff fb27 	bl	8001ab8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e05c      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x416>
 8002484:	e054      	b.n	8002530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <HAL_RCC_OscConfig+0x478>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff fb14 	bl	8001ab8 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7ff fb10 	bl	8001ab8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e045      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_RCC_OscConfig+0x470>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x444>
 80024b2:	e03d      	b.n	8002530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e038      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40007000 	.word	0x40007000
 80024c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x4ec>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d028      	beq.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d121      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d11a      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002504:	4293      	cmp	r3, r2
 8002506:	d111      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0cc      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b68      	ldr	r3, [pc, #416]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d90c      	bls.n	800257c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b65      	ldr	r3, [pc, #404]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b63      	ldr	r3, [pc, #396]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b8      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002594:	4b59      	ldr	r3, [pc, #356]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a58      	ldr	r2, [pc, #352]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800259e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ac:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a52      	ldr	r2, [pc, #328]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b50      	ldr	r3, [pc, #320]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	494d      	ldr	r1, [pc, #308]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d044      	beq.n	8002660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b47      	ldr	r3, [pc, #284]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d119      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e07f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b3f      	ldr	r3, [pc, #252]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b3b      	ldr	r3, [pc, #236]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e067      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4b37      	ldr	r3, [pc, #220]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f023 0203 	bic.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4934      	ldr	r1, [pc, #208]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002630:	f7ff fa42 	bl	8001ab8 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7ff fa3e 	bl	8001ab8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e04f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d20c      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b20      	ldr	r3, [pc, #128]	@ (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e032      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4916      	ldr	r1, [pc, #88]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b2:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	490e      	ldr	r1, [pc, #56]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c6:	f000 f821 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	490a      	ldr	r1, [pc, #40]	@ (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	5ccb      	ldrb	r3, [r1, r3]
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f9a2 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023c00 	.word	0x40023c00
 80026fc:	40023800 	.word	0x40023800
 8002700:	08004e20 	.word	0x08004e20
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002710:	b094      	sub	sp, #80	@ 0x50
 8002712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	647b      	str	r3, [r7, #68]	@ 0x44
 8002718:	2300      	movs	r3, #0
 800271a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800271c:	2300      	movs	r3, #0
 800271e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002724:	4b79      	ldr	r3, [pc, #484]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d00d      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x40>
 8002730:	2b08      	cmp	r3, #8
 8002732:	f200 80e1 	bhi.w	80028f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x34>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x3a>
 800273e:	e0db      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b73      	ldr	r3, [pc, #460]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 8002742:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002744:	e0db      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002746:	4b73      	ldr	r3, [pc, #460]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x208>)
 8002748:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800274a:	e0d8      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800274c:	4b6f      	ldr	r3, [pc, #444]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002756:	4b6d      	ldr	r3, [pc, #436]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d063      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002762:	4b6a      	ldr	r3, [pc, #424]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	099b      	lsrs	r3, r3, #6
 8002768:	2200      	movs	r2, #0
 800276a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800276c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800276e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002774:	633b      	str	r3, [r7, #48]	@ 0x30
 8002776:	2300      	movs	r3, #0
 8002778:	637b      	str	r3, [r7, #52]	@ 0x34
 800277a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	f04f 0000 	mov.w	r0, #0
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	0159      	lsls	r1, r3, #5
 800278c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002790:	0150      	lsls	r0, r2, #5
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4621      	mov	r1, r4
 8002798:	1a51      	subs	r1, r2, r1
 800279a:	6139      	str	r1, [r7, #16]
 800279c:	4629      	mov	r1, r5
 800279e:	eb63 0301 	sbc.w	r3, r3, r1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027b0:	4659      	mov	r1, fp
 80027b2:	018b      	lsls	r3, r1, #6
 80027b4:	4651      	mov	r1, sl
 80027b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ba:	4651      	mov	r1, sl
 80027bc:	018a      	lsls	r2, r1, #6
 80027be:	4651      	mov	r1, sl
 80027c0:	ebb2 0801 	subs.w	r8, r2, r1
 80027c4:	4659      	mov	r1, fp
 80027c6:	eb63 0901 	sbc.w	r9, r3, r1
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	4623      	mov	r3, r4
 80027e4:	eb18 0303 	adds.w	r3, r8, r3
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	462b      	mov	r3, r5
 80027ec:	eb49 0303 	adc.w	r3, r9, r3
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027fe:	4629      	mov	r1, r5
 8002800:	024b      	lsls	r3, r1, #9
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002808:	4621      	mov	r1, r4
 800280a:	024a      	lsls	r2, r1, #9
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002812:	2200      	movs	r2, #0
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800281c:	f7fe f83e 	bl	800089c <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002828:	e058      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b38      	ldr	r3, [pc, #224]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	2200      	movs	r2, #0
 8002832:	4618      	mov	r0, r3
 8002834:	4611      	mov	r1, r2
 8002836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002844:	4642      	mov	r2, r8
 8002846:	464b      	mov	r3, r9
 8002848:	f04f 0000 	mov.w	r0, #0
 800284c:	f04f 0100 	mov.w	r1, #0
 8002850:	0159      	lsls	r1, r3, #5
 8002852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002856:	0150      	lsls	r0, r2, #5
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4641      	mov	r1, r8
 800285e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002862:	4649      	mov	r1, r9
 8002864:	eb63 0b01 	sbc.w	fp, r3, r1
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800287c:	ebb2 040a 	subs.w	r4, r2, sl
 8002880:	eb63 050b 	sbc.w	r5, r3, fp
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	00eb      	lsls	r3, r5, #3
 800288e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002892:	00e2      	lsls	r2, r4, #3
 8002894:	4614      	mov	r4, r2
 8002896:	461d      	mov	r5, r3
 8002898:	4643      	mov	r3, r8
 800289a:	18e3      	adds	r3, r4, r3
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	464b      	mov	r3, r9
 80028a0:	eb45 0303 	adc.w	r3, r5, r3
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028b2:	4629      	mov	r1, r5
 80028b4:	028b      	lsls	r3, r1, #10
 80028b6:	4621      	mov	r1, r4
 80028b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028bc:	4621      	mov	r1, r4
 80028be:	028a      	lsls	r2, r1, #10
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c6:	2200      	movs	r2, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	61fa      	str	r2, [r7, #28]
 80028cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d0:	f7fd ffe4 	bl	800089c <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80028ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 80028fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002900:	4618      	mov	r0, r3
 8002902:	3750      	adds	r7, #80	@ 0x50
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	00f42400 	.word	0x00f42400
 8002914:	007a1200 	.word	0x007a1200

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <HAL_RCC_GetHCLKFreq+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002934:	f7ff fff0 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0a9b      	lsrs	r3, r3, #10
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	@ (8002954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	08004e30 	.word	0x08004e30

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800295c:	f7ff ffdc 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0b5b      	lsrs	r3, r3, #13
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	@ (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	08004e30 	.word	0x08004e30

08002980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e041      	b.n	8002a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fe1e 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fb1c 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d001      	beq.n	8002a38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e03c      	b.n	8002ab2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac0 <HAL_TIM_Base_Start+0xa0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d018      	beq.n	8002a7c <HAL_TIM_Base_Start+0x5c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a52:	d013      	beq.n	8002a7c <HAL_TIM_Base_Start+0x5c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac4 <HAL_TIM_Base_Start+0xa4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00e      	beq.n	8002a7c <HAL_TIM_Base_Start+0x5c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a19      	ldr	r2, [pc, #100]	@ (8002ac8 <HAL_TIM_Base_Start+0xa8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_TIM_Base_Start+0x5c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a17      	ldr	r2, [pc, #92]	@ (8002acc <HAL_TIM_Base_Start+0xac>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_TIM_Base_Start+0x5c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a16      	ldr	r2, [pc, #88]	@ (8002ad0 <HAL_TIM_Base_Start+0xb0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d111      	bne.n	8002aa0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d010      	beq.n	8002ab0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	e007      	b.n	8002ab0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	40000400 	.word	0x40000400
 8002ac8:	40000800 	.word	0x40000800
 8002acc:	40000c00 	.word	0x40000c00
 8002ad0:	40014000 	.word	0x40014000

08002ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e041      	b.n	8002b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f839 	bl	8002b72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f000 fa72 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_TIM_PWM_Start+0x24>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e022      	b.n	8002bf2 <HAL_TIM_PWM_Start+0x6a>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d109      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0x3e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e015      	b.n	8002bf2 <HAL_TIM_PWM_Start+0x6a>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d109      	bne.n	8002be0 <HAL_TIM_PWM_Start+0x58>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e008      	b.n	8002bf2 <HAL_TIM_PWM_Start+0x6a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e068      	b.n	8002ccc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d104      	bne.n	8002c0a <HAL_TIM_PWM_Start+0x82>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c08:	e013      	b.n	8002c32 <HAL_TIM_PWM_Start+0xaa>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d104      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x92>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c18:	e00b      	b.n	8002c32 <HAL_TIM_PWM_Start+0xaa>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d104      	bne.n	8002c2a <HAL_TIM_PWM_Start+0xa2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c28:	e003      	b.n	8002c32 <HAL_TIM_PWM_Start+0xaa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2201      	movs	r2, #1
 8002c38:	6839      	ldr	r1, [r7, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fc90 	bl	8003560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a23      	ldr	r2, [pc, #140]	@ (8002cd4 <HAL_TIM_PWM_Start+0x14c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d107      	bne.n	8002c5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <HAL_TIM_PWM_Start+0x14c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d018      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c6c:	d013      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a19      	ldr	r2, [pc, #100]	@ (8002cd8 <HAL_TIM_PWM_Start+0x150>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00e      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	@ (8002cdc <HAL_TIM_PWM_Start+0x154>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a16      	ldr	r2, [pc, #88]	@ (8002ce0 <HAL_TIM_PWM_Start+0x158>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a14      	ldr	r2, [pc, #80]	@ (8002ce4 <HAL_TIM_PWM_Start+0x15c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d111      	bne.n	8002cba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b06      	cmp	r3, #6
 8002ca6:	d010      	beq.n	8002cca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb8:	e007      	b.n	8002cca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40000800 	.word	0x40000800
 8002ce0:	40000c00 	.word	0x40000c00
 8002ce4:	40014000 	.word	0x40014000

08002ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0ae      	b.n	8002e64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	f200 809f 	bhi.w	8002e54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d16:	a201      	add	r2, pc, #4	@ (adr r2, 8002d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002e55 	.word	0x08002e55
 8002d24:	08002e55 	.word	0x08002e55
 8002d28:	08002e55 	.word	0x08002e55
 8002d2c:	08002d91 	.word	0x08002d91
 8002d30:	08002e55 	.word	0x08002e55
 8002d34:	08002e55 	.word	0x08002e55
 8002d38:	08002e55 	.word	0x08002e55
 8002d3c:	08002dd3 	.word	0x08002dd3
 8002d40:	08002e55 	.word	0x08002e55
 8002d44:	08002e55 	.word	0x08002e55
 8002d48:	08002e55 	.word	0x08002e55
 8002d4c:	08002e13 	.word	0x08002e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f9dc 	bl	8003114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0208 	orr.w	r2, r2, #8
 8002d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6999      	ldr	r1, [r3, #24]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	619a      	str	r2, [r3, #24]
      break;
 8002d8e:	e064      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fa22 	bl	80031e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6999      	ldr	r1, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	619a      	str	r2, [r3, #24]
      break;
 8002dd0:	e043      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fa6d 	bl	80032b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0208 	orr.w	r2, r2, #8
 8002dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	61da      	str	r2, [r3, #28]
      break;
 8002e10:	e023      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fab7 	bl	800338c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	61da      	str	r2, [r3, #28]
      break;
 8002e52:	e002      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIM_ConfigClockSource+0x1c>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e0b4      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x186>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec0:	d03e      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0xd4>
 8002ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec6:	f200 8087 	bhi.w	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ece:	f000 8086 	beq.w	8002fde <HAL_TIM_ConfigClockSource+0x172>
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed6:	d87f      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b70      	cmp	r3, #112	@ 0x70
 8002eda:	d01a      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0xa6>
 8002edc:	2b70      	cmp	r3, #112	@ 0x70
 8002ede:	d87b      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b60      	cmp	r3, #96	@ 0x60
 8002ee2:	d050      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x11a>
 8002ee4:	2b60      	cmp	r3, #96	@ 0x60
 8002ee6:	d877      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b50      	cmp	r3, #80	@ 0x50
 8002eea:	d03c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0xfa>
 8002eec:	2b50      	cmp	r3, #80	@ 0x50
 8002eee:	d873      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b40      	cmp	r3, #64	@ 0x40
 8002ef2:	d058      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8002ef4:	2b40      	cmp	r3, #64	@ 0x40
 8002ef6:	d86f      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b30      	cmp	r3, #48	@ 0x30
 8002efa:	d064      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002efc:	2b30      	cmp	r3, #48	@ 0x30
 8002efe:	d86b      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d060      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d867      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d05c      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d05a      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	e062      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f22:	f000 fafd 	bl	8003520 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	609a      	str	r2, [r3, #8]
      break;
 8002f3e:	e04f      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f50:	f000 fae6 	bl	8003520 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f62:	609a      	str	r2, [r3, #8]
      break;
 8002f64:	e03c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 fa5a 	bl	800342c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2150      	movs	r1, #80	@ 0x50
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fab3 	bl	80034ea <TIM_ITRx_SetConfig>
      break;
 8002f84:	e02c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 fa79 	bl	800348a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2160      	movs	r1, #96	@ 0x60
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 faa3 	bl	80034ea <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e01c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f000 fa3a 	bl	800342c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2140      	movs	r1, #64	@ 0x40
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fa93 	bl	80034ea <TIM_ITRx_SetConfig>
      break;
 8002fc4:	e00c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f000 fa8a 	bl	80034ea <TIM_ITRx_SetConfig>
      break;
 8002fd6:	e003      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a3a      	ldr	r2, [pc, #232]	@ (80030f8 <TIM_Base_SetConfig+0xfc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00f      	beq.n	8003034 <TIM_Base_SetConfig+0x38>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800301a:	d00b      	beq.n	8003034 <TIM_Base_SetConfig+0x38>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a37      	ldr	r2, [pc, #220]	@ (80030fc <TIM_Base_SetConfig+0x100>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d007      	beq.n	8003034 <TIM_Base_SetConfig+0x38>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a36      	ldr	r2, [pc, #216]	@ (8003100 <TIM_Base_SetConfig+0x104>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <TIM_Base_SetConfig+0x38>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a35      	ldr	r2, [pc, #212]	@ (8003104 <TIM_Base_SetConfig+0x108>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d108      	bne.n	8003046 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a2b      	ldr	r2, [pc, #172]	@ (80030f8 <TIM_Base_SetConfig+0xfc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01b      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003054:	d017      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a28      	ldr	r2, [pc, #160]	@ (80030fc <TIM_Base_SetConfig+0x100>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a27      	ldr	r2, [pc, #156]	@ (8003100 <TIM_Base_SetConfig+0x104>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00f      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a26      	ldr	r2, [pc, #152]	@ (8003104 <TIM_Base_SetConfig+0x108>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a25      	ldr	r2, [pc, #148]	@ (8003108 <TIM_Base_SetConfig+0x10c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a24      	ldr	r2, [pc, #144]	@ (800310c <TIM_Base_SetConfig+0x110>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a23      	ldr	r2, [pc, #140]	@ (8003110 <TIM_Base_SetConfig+0x114>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d108      	bne.n	8003098 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800308c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a0e      	ldr	r2, [pc, #56]	@ (80030f8 <TIM_Base_SetConfig+0xfc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d103      	bne.n	80030cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d105      	bne.n	80030ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f023 0201 	bic.w	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	611a      	str	r2, [r3, #16]
  }
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40010000 	.word	0x40010000
 80030fc:	40000400 	.word	0x40000400
 8003100:	40000800 	.word	0x40000800
 8003104:	40000c00 	.word	0x40000c00
 8003108:	40014000 	.word	0x40014000
 800310c:	40014400 	.word	0x40014400
 8003110:	40014800 	.word	0x40014800

08003114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 0201 	bic.w	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f023 0302 	bic.w	r3, r3, #2
 800315c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a1c      	ldr	r2, [pc, #112]	@ (80031dc <TIM_OC1_SetConfig+0xc8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10c      	bne.n	800318a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f023 0308 	bic.w	r3, r3, #8
 8003176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a13      	ldr	r2, [pc, #76]	@ (80031dc <TIM_OC1_SetConfig+0xc8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d111      	bne.n	80031b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40010000 	.word	0x40010000

080031e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f023 0210 	bic.w	r2, r3, #16
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0320 	bic.w	r3, r3, #32
 800322a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a1e      	ldr	r2, [pc, #120]	@ (80032b4 <TIM_OC2_SetConfig+0xd4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d10d      	bne.n	800325c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800325a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a15      	ldr	r2, [pc, #84]	@ (80032b4 <TIM_OC2_SetConfig+0xd4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d113      	bne.n	800328c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800326a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40010000 	.word	0x40010000

080032b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0303 	bic.w	r3, r3, #3
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1d      	ldr	r2, [pc, #116]	@ (8003388 <TIM_OC3_SetConfig+0xd0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10d      	bne.n	8003332 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800331c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a14      	ldr	r2, [pc, #80]	@ (8003388 <TIM_OC3_SetConfig+0xd0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d113      	bne.n	8003362 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40010000 	.word	0x40010000

0800338c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	031b      	lsls	r3, r3, #12
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a10      	ldr	r2, [pc, #64]	@ (8003428 <TIM_OC4_SetConfig+0x9c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d109      	bne.n	8003400 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40010000 	.word	0x40010000

0800342c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f023 0201 	bic.w	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f023 030a 	bic.w	r3, r3, #10
 8003468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	621a      	str	r2, [r3, #32]
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800348a:	b480      	push	{r7}
 800348c:	b087      	sub	sp, #28
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f023 0210 	bic.w	r2, r3, #16
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	031b      	lsls	r3, r3, #12
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003500:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	f043 0307 	orr.w	r3, r3, #7
 800350c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800353a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	021a      	lsls	r2, r3, #8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	431a      	orrs	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4313      	orrs	r3, r2
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	609a      	str	r2, [r3, #8]
}
 8003554:	bf00      	nop
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2201      	movs	r2, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1a      	ldr	r2, [r3, #32]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	43db      	mvns	r3, r3
 8003582:	401a      	ands	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	431a      	orrs	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e050      	b.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1c      	ldr	r2, [pc, #112]	@ (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d018      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003610:	d013      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a16      	ldr	r2, [pc, #88]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a15      	ldr	r2, [pc, #84]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a13      	ldr	r2, [pc, #76]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10c      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40014000 	.word	0x40014000

08003688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e042      	b.n	8003720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fe f846 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	@ 0x24
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f973 	bl	80039b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	d175      	bne.n	8003834 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_UART_Transmit+0x2c>
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e06e      	b.n	8003836 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2221      	movs	r2, #33	@ 0x21
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003766:	f7fe f9a7 	bl	8001ab8 <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003780:	d108      	bne.n	8003794 <HAL_UART_Transmit+0x6c>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d104      	bne.n	8003794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	e003      	b.n	800379c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800379c:	e02e      	b.n	80037fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2180      	movs	r1, #128	@ 0x80
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f848 	bl	800383e <UART_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e03a      	b.n	8003836 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	3302      	adds	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	e007      	b.n	80037ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	3301      	adds	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1cb      	bne.n	800379e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2200      	movs	r2, #0
 800380e:	2140      	movs	r1, #64	@ 0x40
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f814 	bl	800383e <UART_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e006      	b.n	8003836 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384e:	e03b      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003856:	d037      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe f92e 	bl	8001ab8 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	6a3a      	ldr	r2, [r7, #32]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <UART_WaitOnFlagUntilTimeout+0x30>
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e03a      	b.n	80038e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b80      	cmp	r3, #128	@ 0x80
 8003884:	d020      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	d01d      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d116      	bne.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f81d 	bl	80038f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2208      	movs	r2, #8
 80038ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e00f      	b.n	80038e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d0b4      	beq.n	8003850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b095      	sub	sp, #84	@ 0x54
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800390e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	330c      	adds	r3, #12
 8003916:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003918:	643a      	str	r2, [r7, #64]	@ 0x40
 800391a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800391e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e5      	bne.n	80038f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	61fb      	str	r3, [r7, #28]
   return(result);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3314      	adds	r3, #20
 800394a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800394c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800394e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e5      	bne.n	800392c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	2b01      	cmp	r3, #1
 8003966:	d119      	bne.n	800399c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	60bb      	str	r3, [r7, #8]
   return(result);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f023 0310 	bic.w	r3, r3, #16
 800397e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003988:	61ba      	str	r2, [r7, #24]
 800398a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6979      	ldr	r1, [r7, #20]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	613b      	str	r3, [r7, #16]
   return(result);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e5      	bne.n	8003968 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039aa:	bf00      	nop
 80039ac:	3754      	adds	r7, #84	@ 0x54
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b0c0      	sub	sp, #256	@ 0x100
 80039be:	af00      	add	r7, sp, #0
 80039c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d4:	68d9      	ldr	r1, [r3, #12]
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	ea40 0301 	orr.w	r3, r0, r1
 80039e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a10:	f021 010c 	bic.w	r1, r1, #12
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a32:	6999      	ldr	r1, [r3, #24]
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	ea40 0301 	orr.w	r3, r0, r1
 8003a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b8f      	ldr	r3, [pc, #572]	@ (8003c84 <UART_SetConfig+0x2cc>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d005      	beq.n	8003a58 <UART_SetConfig+0xa0>
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b8d      	ldr	r3, [pc, #564]	@ (8003c88 <UART_SetConfig+0x2d0>)
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d104      	bne.n	8003a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7fe ff7e 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a60:	e003      	b.n	8003a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a62:	f7fe ff65 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8003a66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a74:	f040 810c 	bne.w	8003c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	1891      	adds	r1, r2, r2
 8003a90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a92:	415b      	adcs	r3, r3
 8003a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	eb12 0801 	adds.w	r8, r2, r1
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	eb43 0901 	adc.w	r9, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb18 0303 	adds.w	r3, r8, r3
 8003ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ac8:	462b      	mov	r3, r5
 8003aca:	eb49 0303 	adc.w	r3, r9, r3
 8003ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ade:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	18db      	adds	r3, r3, r3
 8003aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aec:	4613      	mov	r3, r2
 8003aee:	eb42 0303 	adc.w	r3, r2, r3
 8003af2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003afc:	f7fc fece 	bl	800089c <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4b61      	ldr	r3, [pc, #388]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003b06:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	011c      	lsls	r4, r3, #4
 8003b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b30:	4641      	mov	r1, r8
 8003b32:	eb12 0a01 	adds.w	sl, r2, r1
 8003b36:	4649      	mov	r1, r9
 8003b38:	eb43 0b01 	adc.w	fp, r3, r1
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b50:	4692      	mov	sl, r2
 8003b52:	469b      	mov	fp, r3
 8003b54:	4643      	mov	r3, r8
 8003b56:	eb1a 0303 	adds.w	r3, sl, r3
 8003b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	eb4b 0303 	adc.w	r3, fp, r3
 8003b64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	18db      	adds	r3, r3, r3
 8003b80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b82:	4613      	mov	r3, r2
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b92:	f7fc fe83 	bl	800089c <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2264      	movs	r2, #100	@ 0x64
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	1acb      	subs	r3, r1, r3
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bb2:	4b36      	ldr	r3, [pc, #216]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bc0:	441c      	add	r4, r3
 8003bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	1891      	adds	r1, r2, r2
 8003bda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003be4:	4641      	mov	r1, r8
 8003be6:	1851      	adds	r1, r2, r1
 8003be8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bea:	4649      	mov	r1, r9
 8003bec:	414b      	adcs	r3, r1
 8003bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	00cb      	lsls	r3, r1, #3
 8003c00:	4651      	mov	r1, sl
 8003c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c06:	4651      	mov	r1, sl
 8003c08:	00ca      	lsls	r2, r1, #3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4642      	mov	r2, r8
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c18:	464b      	mov	r3, r9
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	eb42 0303 	adc.w	r3, r2, r3
 8003c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c38:	460b      	mov	r3, r1
 8003c3a:	18db      	adds	r3, r3, r3
 8003c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c3e:	4613      	mov	r3, r2
 8003c40:	eb42 0303 	adc.w	r3, r2, r3
 8003c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c4e:	f7fc fe25 	bl	800089c <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	@ 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	3332      	adds	r3, #50	@ 0x32
 8003c6a:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <UART_SetConfig+0x2d4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 0207 	and.w	r2, r3, #7
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4422      	add	r2, r4
 8003c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c80:	e106      	b.n	8003e90 <UART_SetConfig+0x4d8>
 8003c82:	bf00      	nop
 8003c84:	40011000 	.word	0x40011000
 8003c88:	40011400 	.word	0x40011400
 8003c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	1891      	adds	r1, r2, r2
 8003ca8:	6239      	str	r1, [r7, #32]
 8003caa:	415b      	adcs	r3, r3
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	1854      	adds	r4, r2, r1
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	eb43 0501 	adc.w	r5, r3, r1
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	00eb      	lsls	r3, r5, #3
 8003cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cca:	00e2      	lsls	r2, r4, #3
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	18e3      	adds	r3, r4, r3
 8003cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cd8:	464b      	mov	r3, r9
 8003cda:	eb45 0303 	adc.w	r3, r5, r3
 8003cde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cfe:	4629      	mov	r1, r5
 8003d00:	008b      	lsls	r3, r1, #2
 8003d02:	4621      	mov	r1, r4
 8003d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d08:	4621      	mov	r1, r4
 8003d0a:	008a      	lsls	r2, r1, #2
 8003d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d10:	f7fc fdc4 	bl	800089c <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4b60      	ldr	r3, [pc, #384]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	011c      	lsls	r4, r3, #4
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	61b9      	str	r1, [r7, #24]
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6139      	str	r1, [r7, #16]
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	008b      	lsls	r3, r1, #2
 8003da0:	4641      	mov	r1, r8
 8003da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da6:	4641      	mov	r1, r8
 8003da8:	008a      	lsls	r2, r1, #2
 8003daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003dae:	f7fc fd75 	bl	800089c <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	4b38      	ldr	r3, [pc, #224]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003dba:	fba3 2301 	umull	r2, r3, r3, r1
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2264      	movs	r2, #100	@ 0x64
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	1acb      	subs	r3, r1, r3
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	3332      	adds	r3, #50	@ 0x32
 8003dcc:	4a33      	ldr	r2, [pc, #204]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dd8:	441c      	add	r4, r3
 8003dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dde:	2200      	movs	r2, #0
 8003de0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003de2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003de4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003de8:	4642      	mov	r2, r8
 8003dea:	464b      	mov	r3, r9
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	415b      	adcs	r3, r3
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df8:	4641      	mov	r1, r8
 8003dfa:	1851      	adds	r1, r2, r1
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	4649      	mov	r1, r9
 8003e00:	414b      	adcs	r3, r1
 8003e02:	607b      	str	r3, [r7, #4]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e10:	4659      	mov	r1, fp
 8003e12:	00cb      	lsls	r3, r1, #3
 8003e14:	4651      	mov	r1, sl
 8003e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1a:	4651      	mov	r1, sl
 8003e1c:	00ca      	lsls	r2, r1, #3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	4642      	mov	r2, r8
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	460a      	mov	r2, r1
 8003e2e:	eb42 0303 	adc.w	r3, r2, r3
 8003e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	008b      	lsls	r3, r1, #2
 8003e50:	4641      	mov	r1, r8
 8003e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e56:	4641      	mov	r1, r8
 8003e58:	008a      	lsls	r2, r1, #2
 8003e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e5e:	f7fc fd1d 	bl	800089c <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	2164      	movs	r1, #100	@ 0x64
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	3332      	adds	r3, #50	@ 0x32
 8003e7a:	4a08      	ldr	r2, [pc, #32]	@ (8003e9c <UART_SetConfig+0x4e4>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f003 020f 	and.w	r2, r3, #15
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4422      	add	r2, r4
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e96:	46bd      	mov	sp, r7
 8003e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9c:	51eb851f 	.word	0x51eb851f

08003ea0 <std>:
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8003eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eae:	6083      	str	r3, [r0, #8]
 8003eb0:	8181      	strh	r1, [r0, #12]
 8003eb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003eb4:	81c2      	strh	r2, [r0, #14]
 8003eb6:	6183      	str	r3, [r0, #24]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	2208      	movs	r2, #8
 8003ebc:	305c      	adds	r0, #92	@ 0x5c
 8003ebe:	f000 f921 	bl	8004104 <memset>
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <std+0x58>)
 8003ec4:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <std+0x5c>)
 8003ec8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003eca:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <std+0x60>)
 8003ecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ece:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <std+0x64>)
 8003ed0:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <std+0x68>)
 8003ed4:	6224      	str	r4, [r4, #32]
 8003ed6:	429c      	cmp	r4, r3
 8003ed8:	d006      	beq.n	8003ee8 <std+0x48>
 8003eda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ede:	4294      	cmp	r4, r2
 8003ee0:	d002      	beq.n	8003ee8 <std+0x48>
 8003ee2:	33d0      	adds	r3, #208	@ 0xd0
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	d105      	bne.n	8003ef4 <std+0x54>
 8003ee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef0:	f000 b93a 	b.w	8004168 <__retarget_lock_init_recursive>
 8003ef4:	bd10      	pop	{r4, pc}
 8003ef6:	bf00      	nop
 8003ef8:	080049c1 	.word	0x080049c1
 8003efc:	080049e3 	.word	0x080049e3
 8003f00:	08004a1b 	.word	0x08004a1b
 8003f04:	08004a3f 	.word	0x08004a3f
 8003f08:	200001ac 	.word	0x200001ac

08003f0c <stdio_exit_handler>:
 8003f0c:	4a02      	ldr	r2, [pc, #8]	@ (8003f18 <stdio_exit_handler+0xc>)
 8003f0e:	4903      	ldr	r1, [pc, #12]	@ (8003f1c <stdio_exit_handler+0x10>)
 8003f10:	4803      	ldr	r0, [pc, #12]	@ (8003f20 <stdio_exit_handler+0x14>)
 8003f12:	f000 b869 	b.w	8003fe8 <_fwalk_sglue>
 8003f16:	bf00      	nop
 8003f18:	2000000c 	.word	0x2000000c
 8003f1c:	08004959 	.word	0x08004959
 8003f20:	2000001c 	.word	0x2000001c

08003f24 <cleanup_stdio>:
 8003f24:	6841      	ldr	r1, [r0, #4]
 8003f26:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <cleanup_stdio+0x34>)
 8003f28:	4299      	cmp	r1, r3
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	d001      	beq.n	8003f34 <cleanup_stdio+0x10>
 8003f30:	f000 fd12 	bl	8004958 <_fflush_r>
 8003f34:	68a1      	ldr	r1, [r4, #8]
 8003f36:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <cleanup_stdio+0x38>)
 8003f38:	4299      	cmp	r1, r3
 8003f3a:	d002      	beq.n	8003f42 <cleanup_stdio+0x1e>
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f000 fd0b 	bl	8004958 <_fflush_r>
 8003f42:	68e1      	ldr	r1, [r4, #12]
 8003f44:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <cleanup_stdio+0x3c>)
 8003f46:	4299      	cmp	r1, r3
 8003f48:	d004      	beq.n	8003f54 <cleanup_stdio+0x30>
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f50:	f000 bd02 	b.w	8004958 <_fflush_r>
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	bf00      	nop
 8003f58:	200001ac 	.word	0x200001ac
 8003f5c:	20000214 	.word	0x20000214
 8003f60:	2000027c 	.word	0x2000027c

08003f64 <global_stdio_init.part.0>:
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <global_stdio_init.part.0+0x30>)
 8003f68:	4c0b      	ldr	r4, [pc, #44]	@ (8003f98 <global_stdio_init.part.0+0x34>)
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f9c <global_stdio_init.part.0+0x38>)
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	4620      	mov	r0, r4
 8003f70:	2200      	movs	r2, #0
 8003f72:	2104      	movs	r1, #4
 8003f74:	f7ff ff94 	bl	8003ea0 <std>
 8003f78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	2109      	movs	r1, #9
 8003f80:	f7ff ff8e 	bl	8003ea0 <std>
 8003f84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f88:	2202      	movs	r2, #2
 8003f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8e:	2112      	movs	r1, #18
 8003f90:	f7ff bf86 	b.w	8003ea0 <std>
 8003f94:	200002e4 	.word	0x200002e4
 8003f98:	200001ac 	.word	0x200001ac
 8003f9c:	08003f0d 	.word	0x08003f0d

08003fa0 <__sfp_lock_acquire>:
 8003fa0:	4801      	ldr	r0, [pc, #4]	@ (8003fa8 <__sfp_lock_acquire+0x8>)
 8003fa2:	f000 b8e2 	b.w	800416a <__retarget_lock_acquire_recursive>
 8003fa6:	bf00      	nop
 8003fa8:	200002e9 	.word	0x200002e9

08003fac <__sfp_lock_release>:
 8003fac:	4801      	ldr	r0, [pc, #4]	@ (8003fb4 <__sfp_lock_release+0x8>)
 8003fae:	f000 b8dd 	b.w	800416c <__retarget_lock_release_recursive>
 8003fb2:	bf00      	nop
 8003fb4:	200002e9 	.word	0x200002e9

08003fb8 <__sinit>:
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	4604      	mov	r4, r0
 8003fbc:	f7ff fff0 	bl	8003fa0 <__sfp_lock_acquire>
 8003fc0:	6a23      	ldr	r3, [r4, #32]
 8003fc2:	b11b      	cbz	r3, 8003fcc <__sinit+0x14>
 8003fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc8:	f7ff bff0 	b.w	8003fac <__sfp_lock_release>
 8003fcc:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <__sinit+0x28>)
 8003fce:	6223      	str	r3, [r4, #32]
 8003fd0:	4b04      	ldr	r3, [pc, #16]	@ (8003fe4 <__sinit+0x2c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f5      	bne.n	8003fc4 <__sinit+0xc>
 8003fd8:	f7ff ffc4 	bl	8003f64 <global_stdio_init.part.0>
 8003fdc:	e7f2      	b.n	8003fc4 <__sinit+0xc>
 8003fde:	bf00      	nop
 8003fe0:	08003f25 	.word	0x08003f25
 8003fe4:	200002e4 	.word	0x200002e4

08003fe8 <_fwalk_sglue>:
 8003fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fec:	4607      	mov	r7, r0
 8003fee:	4688      	mov	r8, r1
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	2600      	movs	r6, #0
 8003ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8003ffc:	d505      	bpl.n	800400a <_fwalk_sglue+0x22>
 8003ffe:	6824      	ldr	r4, [r4, #0]
 8004000:	2c00      	cmp	r4, #0
 8004002:	d1f7      	bne.n	8003ff4 <_fwalk_sglue+0xc>
 8004004:	4630      	mov	r0, r6
 8004006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800400a:	89ab      	ldrh	r3, [r5, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d907      	bls.n	8004020 <_fwalk_sglue+0x38>
 8004010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004014:	3301      	adds	r3, #1
 8004016:	d003      	beq.n	8004020 <_fwalk_sglue+0x38>
 8004018:	4629      	mov	r1, r5
 800401a:	4638      	mov	r0, r7
 800401c:	47c0      	blx	r8
 800401e:	4306      	orrs	r6, r0
 8004020:	3568      	adds	r5, #104	@ 0x68
 8004022:	e7e9      	b.n	8003ff8 <_fwalk_sglue+0x10>

08004024 <iprintf>:
 8004024:	b40f      	push	{r0, r1, r2, r3}
 8004026:	b507      	push	{r0, r1, r2, lr}
 8004028:	4906      	ldr	r1, [pc, #24]	@ (8004044 <iprintf+0x20>)
 800402a:	ab04      	add	r3, sp, #16
 800402c:	6808      	ldr	r0, [r1, #0]
 800402e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004032:	6881      	ldr	r1, [r0, #8]
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	f000 f8c3 	bl	80041c0 <_vfiprintf_r>
 800403a:	b003      	add	sp, #12
 800403c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004040:	b004      	add	sp, #16
 8004042:	4770      	bx	lr
 8004044:	20000018 	.word	0x20000018

08004048 <_puts_r>:
 8004048:	6a03      	ldr	r3, [r0, #32]
 800404a:	b570      	push	{r4, r5, r6, lr}
 800404c:	6884      	ldr	r4, [r0, #8]
 800404e:	4605      	mov	r5, r0
 8004050:	460e      	mov	r6, r1
 8004052:	b90b      	cbnz	r3, 8004058 <_puts_r+0x10>
 8004054:	f7ff ffb0 	bl	8003fb8 <__sinit>
 8004058:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800405a:	07db      	lsls	r3, r3, #31
 800405c:	d405      	bmi.n	800406a <_puts_r+0x22>
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	0598      	lsls	r0, r3, #22
 8004062:	d402      	bmi.n	800406a <_puts_r+0x22>
 8004064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004066:	f000 f880 	bl	800416a <__retarget_lock_acquire_recursive>
 800406a:	89a3      	ldrh	r3, [r4, #12]
 800406c:	0719      	lsls	r1, r3, #28
 800406e:	d502      	bpl.n	8004076 <_puts_r+0x2e>
 8004070:	6923      	ldr	r3, [r4, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d135      	bne.n	80040e2 <_puts_r+0x9a>
 8004076:	4621      	mov	r1, r4
 8004078:	4628      	mov	r0, r5
 800407a:	f000 fd23 	bl	8004ac4 <__swsetup_r>
 800407e:	b380      	cbz	r0, 80040e2 <_puts_r+0x9a>
 8004080:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004084:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004086:	07da      	lsls	r2, r3, #31
 8004088:	d405      	bmi.n	8004096 <_puts_r+0x4e>
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	059b      	lsls	r3, r3, #22
 800408e:	d402      	bmi.n	8004096 <_puts_r+0x4e>
 8004090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004092:	f000 f86b 	bl	800416c <__retarget_lock_release_recursive>
 8004096:	4628      	mov	r0, r5
 8004098:	bd70      	pop	{r4, r5, r6, pc}
 800409a:	2b00      	cmp	r3, #0
 800409c:	da04      	bge.n	80040a8 <_puts_r+0x60>
 800409e:	69a2      	ldr	r2, [r4, #24]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	dc17      	bgt.n	80040d4 <_puts_r+0x8c>
 80040a4:	290a      	cmp	r1, #10
 80040a6:	d015      	beq.n	80040d4 <_puts_r+0x8c>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	6022      	str	r2, [r4, #0]
 80040ae:	7019      	strb	r1, [r3, #0]
 80040b0:	68a3      	ldr	r3, [r4, #8]
 80040b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040b6:	3b01      	subs	r3, #1
 80040b8:	60a3      	str	r3, [r4, #8]
 80040ba:	2900      	cmp	r1, #0
 80040bc:	d1ed      	bne.n	800409a <_puts_r+0x52>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	da11      	bge.n	80040e6 <_puts_r+0x9e>
 80040c2:	4622      	mov	r2, r4
 80040c4:	210a      	movs	r1, #10
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 fcbd 	bl	8004a46 <__swbuf_r>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d0d7      	beq.n	8004080 <_puts_r+0x38>
 80040d0:	250a      	movs	r5, #10
 80040d2:	e7d7      	b.n	8004084 <_puts_r+0x3c>
 80040d4:	4622      	mov	r2, r4
 80040d6:	4628      	mov	r0, r5
 80040d8:	f000 fcb5 	bl	8004a46 <__swbuf_r>
 80040dc:	3001      	adds	r0, #1
 80040de:	d1e7      	bne.n	80040b0 <_puts_r+0x68>
 80040e0:	e7ce      	b.n	8004080 <_puts_r+0x38>
 80040e2:	3e01      	subs	r6, #1
 80040e4:	e7e4      	b.n	80040b0 <_puts_r+0x68>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	6022      	str	r2, [r4, #0]
 80040ec:	220a      	movs	r2, #10
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e7ee      	b.n	80040d0 <_puts_r+0x88>
	...

080040f4 <puts>:
 80040f4:	4b02      	ldr	r3, [pc, #8]	@ (8004100 <puts+0xc>)
 80040f6:	4601      	mov	r1, r0
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	f7ff bfa5 	b.w	8004048 <_puts_r>
 80040fe:	bf00      	nop
 8004100:	20000018 	.word	0x20000018

08004104 <memset>:
 8004104:	4402      	add	r2, r0
 8004106:	4603      	mov	r3, r0
 8004108:	4293      	cmp	r3, r2
 800410a:	d100      	bne.n	800410e <memset+0xa>
 800410c:	4770      	bx	lr
 800410e:	f803 1b01 	strb.w	r1, [r3], #1
 8004112:	e7f9      	b.n	8004108 <memset+0x4>

08004114 <__errno>:
 8004114:	4b01      	ldr	r3, [pc, #4]	@ (800411c <__errno+0x8>)
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000018 	.word	0x20000018

08004120 <__libc_init_array>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	4d0d      	ldr	r5, [pc, #52]	@ (8004158 <__libc_init_array+0x38>)
 8004124:	4c0d      	ldr	r4, [pc, #52]	@ (800415c <__libc_init_array+0x3c>)
 8004126:	1b64      	subs	r4, r4, r5
 8004128:	10a4      	asrs	r4, r4, #2
 800412a:	2600      	movs	r6, #0
 800412c:	42a6      	cmp	r6, r4
 800412e:	d109      	bne.n	8004144 <__libc_init_array+0x24>
 8004130:	4d0b      	ldr	r5, [pc, #44]	@ (8004160 <__libc_init_array+0x40>)
 8004132:	4c0c      	ldr	r4, [pc, #48]	@ (8004164 <__libc_init_array+0x44>)
 8004134:	f000 fe40 	bl	8004db8 <_init>
 8004138:	1b64      	subs	r4, r4, r5
 800413a:	10a4      	asrs	r4, r4, #2
 800413c:	2600      	movs	r6, #0
 800413e:	42a6      	cmp	r6, r4
 8004140:	d105      	bne.n	800414e <__libc_init_array+0x2e>
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	f855 3b04 	ldr.w	r3, [r5], #4
 8004148:	4798      	blx	r3
 800414a:	3601      	adds	r6, #1
 800414c:	e7ee      	b.n	800412c <__libc_init_array+0xc>
 800414e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004152:	4798      	blx	r3
 8004154:	3601      	adds	r6, #1
 8004156:	e7f2      	b.n	800413e <__libc_init_array+0x1e>
 8004158:	08004e74 	.word	0x08004e74
 800415c:	08004e74 	.word	0x08004e74
 8004160:	08004e74 	.word	0x08004e74
 8004164:	08004e78 	.word	0x08004e78

08004168 <__retarget_lock_init_recursive>:
 8004168:	4770      	bx	lr

0800416a <__retarget_lock_acquire_recursive>:
 800416a:	4770      	bx	lr

0800416c <__retarget_lock_release_recursive>:
 800416c:	4770      	bx	lr

0800416e <__sfputc_r>:
 800416e:	6893      	ldr	r3, [r2, #8]
 8004170:	3b01      	subs	r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	b410      	push	{r4}
 8004176:	6093      	str	r3, [r2, #8]
 8004178:	da08      	bge.n	800418c <__sfputc_r+0x1e>
 800417a:	6994      	ldr	r4, [r2, #24]
 800417c:	42a3      	cmp	r3, r4
 800417e:	db01      	blt.n	8004184 <__sfputc_r+0x16>
 8004180:	290a      	cmp	r1, #10
 8004182:	d103      	bne.n	800418c <__sfputc_r+0x1e>
 8004184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004188:	f000 bc5d 	b.w	8004a46 <__swbuf_r>
 800418c:	6813      	ldr	r3, [r2, #0]
 800418e:	1c58      	adds	r0, r3, #1
 8004190:	6010      	str	r0, [r2, #0]
 8004192:	7019      	strb	r1, [r3, #0]
 8004194:	4608      	mov	r0, r1
 8004196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800419a:	4770      	bx	lr

0800419c <__sfputs_r>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	4606      	mov	r6, r0
 80041a0:	460f      	mov	r7, r1
 80041a2:	4614      	mov	r4, r2
 80041a4:	18d5      	adds	r5, r2, r3
 80041a6:	42ac      	cmp	r4, r5
 80041a8:	d101      	bne.n	80041ae <__sfputs_r+0x12>
 80041aa:	2000      	movs	r0, #0
 80041ac:	e007      	b.n	80041be <__sfputs_r+0x22>
 80041ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b2:	463a      	mov	r2, r7
 80041b4:	4630      	mov	r0, r6
 80041b6:	f7ff ffda 	bl	800416e <__sfputc_r>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d1f3      	bne.n	80041a6 <__sfputs_r+0xa>
 80041be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041c0 <_vfiprintf_r>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	460d      	mov	r5, r1
 80041c6:	b09d      	sub	sp, #116	@ 0x74
 80041c8:	4614      	mov	r4, r2
 80041ca:	4698      	mov	r8, r3
 80041cc:	4606      	mov	r6, r0
 80041ce:	b118      	cbz	r0, 80041d8 <_vfiprintf_r+0x18>
 80041d0:	6a03      	ldr	r3, [r0, #32]
 80041d2:	b90b      	cbnz	r3, 80041d8 <_vfiprintf_r+0x18>
 80041d4:	f7ff fef0 	bl	8003fb8 <__sinit>
 80041d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041da:	07d9      	lsls	r1, r3, #31
 80041dc:	d405      	bmi.n	80041ea <_vfiprintf_r+0x2a>
 80041de:	89ab      	ldrh	r3, [r5, #12]
 80041e0:	059a      	lsls	r2, r3, #22
 80041e2:	d402      	bmi.n	80041ea <_vfiprintf_r+0x2a>
 80041e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041e6:	f7ff ffc0 	bl	800416a <__retarget_lock_acquire_recursive>
 80041ea:	89ab      	ldrh	r3, [r5, #12]
 80041ec:	071b      	lsls	r3, r3, #28
 80041ee:	d501      	bpl.n	80041f4 <_vfiprintf_r+0x34>
 80041f0:	692b      	ldr	r3, [r5, #16]
 80041f2:	b99b      	cbnz	r3, 800421c <_vfiprintf_r+0x5c>
 80041f4:	4629      	mov	r1, r5
 80041f6:	4630      	mov	r0, r6
 80041f8:	f000 fc64 	bl	8004ac4 <__swsetup_r>
 80041fc:	b170      	cbz	r0, 800421c <_vfiprintf_r+0x5c>
 80041fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004200:	07dc      	lsls	r4, r3, #31
 8004202:	d504      	bpl.n	800420e <_vfiprintf_r+0x4e>
 8004204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004208:	b01d      	add	sp, #116	@ 0x74
 800420a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420e:	89ab      	ldrh	r3, [r5, #12]
 8004210:	0598      	lsls	r0, r3, #22
 8004212:	d4f7      	bmi.n	8004204 <_vfiprintf_r+0x44>
 8004214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004216:	f7ff ffa9 	bl	800416c <__retarget_lock_release_recursive>
 800421a:	e7f3      	b.n	8004204 <_vfiprintf_r+0x44>
 800421c:	2300      	movs	r3, #0
 800421e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004220:	2320      	movs	r3, #32
 8004222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004226:	f8cd 800c 	str.w	r8, [sp, #12]
 800422a:	2330      	movs	r3, #48	@ 0x30
 800422c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80043dc <_vfiprintf_r+0x21c>
 8004230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004234:	f04f 0901 	mov.w	r9, #1
 8004238:	4623      	mov	r3, r4
 800423a:	469a      	mov	sl, r3
 800423c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004240:	b10a      	cbz	r2, 8004246 <_vfiprintf_r+0x86>
 8004242:	2a25      	cmp	r2, #37	@ 0x25
 8004244:	d1f9      	bne.n	800423a <_vfiprintf_r+0x7a>
 8004246:	ebba 0b04 	subs.w	fp, sl, r4
 800424a:	d00b      	beq.n	8004264 <_vfiprintf_r+0xa4>
 800424c:	465b      	mov	r3, fp
 800424e:	4622      	mov	r2, r4
 8004250:	4629      	mov	r1, r5
 8004252:	4630      	mov	r0, r6
 8004254:	f7ff ffa2 	bl	800419c <__sfputs_r>
 8004258:	3001      	adds	r0, #1
 800425a:	f000 80a7 	beq.w	80043ac <_vfiprintf_r+0x1ec>
 800425e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004260:	445a      	add	r2, fp
 8004262:	9209      	str	r2, [sp, #36]	@ 0x24
 8004264:	f89a 3000 	ldrb.w	r3, [sl]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 809f 	beq.w	80043ac <_vfiprintf_r+0x1ec>
 800426e:	2300      	movs	r3, #0
 8004270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004278:	f10a 0a01 	add.w	sl, sl, #1
 800427c:	9304      	str	r3, [sp, #16]
 800427e:	9307      	str	r3, [sp, #28]
 8004280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004284:	931a      	str	r3, [sp, #104]	@ 0x68
 8004286:	4654      	mov	r4, sl
 8004288:	2205      	movs	r2, #5
 800428a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800428e:	4853      	ldr	r0, [pc, #332]	@ (80043dc <_vfiprintf_r+0x21c>)
 8004290:	f7fb ffa6 	bl	80001e0 <memchr>
 8004294:	9a04      	ldr	r2, [sp, #16]
 8004296:	b9d8      	cbnz	r0, 80042d0 <_vfiprintf_r+0x110>
 8004298:	06d1      	lsls	r1, r2, #27
 800429a:	bf44      	itt	mi
 800429c:	2320      	movmi	r3, #32
 800429e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042a2:	0713      	lsls	r3, r2, #28
 80042a4:	bf44      	itt	mi
 80042a6:	232b      	movmi	r3, #43	@ 0x2b
 80042a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042ac:	f89a 3000 	ldrb.w	r3, [sl]
 80042b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80042b2:	d015      	beq.n	80042e0 <_vfiprintf_r+0x120>
 80042b4:	9a07      	ldr	r2, [sp, #28]
 80042b6:	4654      	mov	r4, sl
 80042b8:	2000      	movs	r0, #0
 80042ba:	f04f 0c0a 	mov.w	ip, #10
 80042be:	4621      	mov	r1, r4
 80042c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042c4:	3b30      	subs	r3, #48	@ 0x30
 80042c6:	2b09      	cmp	r3, #9
 80042c8:	d94b      	bls.n	8004362 <_vfiprintf_r+0x1a2>
 80042ca:	b1b0      	cbz	r0, 80042fa <_vfiprintf_r+0x13a>
 80042cc:	9207      	str	r2, [sp, #28]
 80042ce:	e014      	b.n	80042fa <_vfiprintf_r+0x13a>
 80042d0:	eba0 0308 	sub.w	r3, r0, r8
 80042d4:	fa09 f303 	lsl.w	r3, r9, r3
 80042d8:	4313      	orrs	r3, r2
 80042da:	9304      	str	r3, [sp, #16]
 80042dc:	46a2      	mov	sl, r4
 80042de:	e7d2      	b.n	8004286 <_vfiprintf_r+0xc6>
 80042e0:	9b03      	ldr	r3, [sp, #12]
 80042e2:	1d19      	adds	r1, r3, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	9103      	str	r1, [sp, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bfbb      	ittet	lt
 80042ec:	425b      	neglt	r3, r3
 80042ee:	f042 0202 	orrlt.w	r2, r2, #2
 80042f2:	9307      	strge	r3, [sp, #28]
 80042f4:	9307      	strlt	r3, [sp, #28]
 80042f6:	bfb8      	it	lt
 80042f8:	9204      	strlt	r2, [sp, #16]
 80042fa:	7823      	ldrb	r3, [r4, #0]
 80042fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80042fe:	d10a      	bne.n	8004316 <_vfiprintf_r+0x156>
 8004300:	7863      	ldrb	r3, [r4, #1]
 8004302:	2b2a      	cmp	r3, #42	@ 0x2a
 8004304:	d132      	bne.n	800436c <_vfiprintf_r+0x1ac>
 8004306:	9b03      	ldr	r3, [sp, #12]
 8004308:	1d1a      	adds	r2, r3, #4
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	9203      	str	r2, [sp, #12]
 800430e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004312:	3402      	adds	r4, #2
 8004314:	9305      	str	r3, [sp, #20]
 8004316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80043ec <_vfiprintf_r+0x22c>
 800431a:	7821      	ldrb	r1, [r4, #0]
 800431c:	2203      	movs	r2, #3
 800431e:	4650      	mov	r0, sl
 8004320:	f7fb ff5e 	bl	80001e0 <memchr>
 8004324:	b138      	cbz	r0, 8004336 <_vfiprintf_r+0x176>
 8004326:	9b04      	ldr	r3, [sp, #16]
 8004328:	eba0 000a 	sub.w	r0, r0, sl
 800432c:	2240      	movs	r2, #64	@ 0x40
 800432e:	4082      	lsls	r2, r0
 8004330:	4313      	orrs	r3, r2
 8004332:	3401      	adds	r4, #1
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800433a:	4829      	ldr	r0, [pc, #164]	@ (80043e0 <_vfiprintf_r+0x220>)
 800433c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004340:	2206      	movs	r2, #6
 8004342:	f7fb ff4d 	bl	80001e0 <memchr>
 8004346:	2800      	cmp	r0, #0
 8004348:	d03f      	beq.n	80043ca <_vfiprintf_r+0x20a>
 800434a:	4b26      	ldr	r3, [pc, #152]	@ (80043e4 <_vfiprintf_r+0x224>)
 800434c:	bb1b      	cbnz	r3, 8004396 <_vfiprintf_r+0x1d6>
 800434e:	9b03      	ldr	r3, [sp, #12]
 8004350:	3307      	adds	r3, #7
 8004352:	f023 0307 	bic.w	r3, r3, #7
 8004356:	3308      	adds	r3, #8
 8004358:	9303      	str	r3, [sp, #12]
 800435a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800435c:	443b      	add	r3, r7
 800435e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004360:	e76a      	b.n	8004238 <_vfiprintf_r+0x78>
 8004362:	fb0c 3202 	mla	r2, ip, r2, r3
 8004366:	460c      	mov	r4, r1
 8004368:	2001      	movs	r0, #1
 800436a:	e7a8      	b.n	80042be <_vfiprintf_r+0xfe>
 800436c:	2300      	movs	r3, #0
 800436e:	3401      	adds	r4, #1
 8004370:	9305      	str	r3, [sp, #20]
 8004372:	4619      	mov	r1, r3
 8004374:	f04f 0c0a 	mov.w	ip, #10
 8004378:	4620      	mov	r0, r4
 800437a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800437e:	3a30      	subs	r2, #48	@ 0x30
 8004380:	2a09      	cmp	r2, #9
 8004382:	d903      	bls.n	800438c <_vfiprintf_r+0x1cc>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0c6      	beq.n	8004316 <_vfiprintf_r+0x156>
 8004388:	9105      	str	r1, [sp, #20]
 800438a:	e7c4      	b.n	8004316 <_vfiprintf_r+0x156>
 800438c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004390:	4604      	mov	r4, r0
 8004392:	2301      	movs	r3, #1
 8004394:	e7f0      	b.n	8004378 <_vfiprintf_r+0x1b8>
 8004396:	ab03      	add	r3, sp, #12
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	462a      	mov	r2, r5
 800439c:	4b12      	ldr	r3, [pc, #72]	@ (80043e8 <_vfiprintf_r+0x228>)
 800439e:	a904      	add	r1, sp, #16
 80043a0:	4630      	mov	r0, r6
 80043a2:	f3af 8000 	nop.w
 80043a6:	4607      	mov	r7, r0
 80043a8:	1c78      	adds	r0, r7, #1
 80043aa:	d1d6      	bne.n	800435a <_vfiprintf_r+0x19a>
 80043ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043ae:	07d9      	lsls	r1, r3, #31
 80043b0:	d405      	bmi.n	80043be <_vfiprintf_r+0x1fe>
 80043b2:	89ab      	ldrh	r3, [r5, #12]
 80043b4:	059a      	lsls	r2, r3, #22
 80043b6:	d402      	bmi.n	80043be <_vfiprintf_r+0x1fe>
 80043b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ba:	f7ff fed7 	bl	800416c <__retarget_lock_release_recursive>
 80043be:	89ab      	ldrh	r3, [r5, #12]
 80043c0:	065b      	lsls	r3, r3, #25
 80043c2:	f53f af1f 	bmi.w	8004204 <_vfiprintf_r+0x44>
 80043c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043c8:	e71e      	b.n	8004208 <_vfiprintf_r+0x48>
 80043ca:	ab03      	add	r3, sp, #12
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	462a      	mov	r2, r5
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <_vfiprintf_r+0x228>)
 80043d2:	a904      	add	r1, sp, #16
 80043d4:	4630      	mov	r0, r6
 80043d6:	f000 f91b 	bl	8004610 <_printf_i>
 80043da:	e7e4      	b.n	80043a6 <_vfiprintf_r+0x1e6>
 80043dc:	08004e38 	.word	0x08004e38
 80043e0:	08004e42 	.word	0x08004e42
 80043e4:	00000000 	.word	0x00000000
 80043e8:	0800419d 	.word	0x0800419d
 80043ec:	08004e3e 	.word	0x08004e3e

080043f0 <sbrk_aligned>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4e0f      	ldr	r6, [pc, #60]	@ (8004430 <sbrk_aligned+0x40>)
 80043f4:	460c      	mov	r4, r1
 80043f6:	6831      	ldr	r1, [r6, #0]
 80043f8:	4605      	mov	r5, r0
 80043fa:	b911      	cbnz	r1, 8004402 <sbrk_aligned+0x12>
 80043fc:	f000 fc70 	bl	8004ce0 <_sbrk_r>
 8004400:	6030      	str	r0, [r6, #0]
 8004402:	4621      	mov	r1, r4
 8004404:	4628      	mov	r0, r5
 8004406:	f000 fc6b 	bl	8004ce0 <_sbrk_r>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	d103      	bne.n	8004416 <sbrk_aligned+0x26>
 800440e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004412:	4620      	mov	r0, r4
 8004414:	bd70      	pop	{r4, r5, r6, pc}
 8004416:	1cc4      	adds	r4, r0, #3
 8004418:	f024 0403 	bic.w	r4, r4, #3
 800441c:	42a0      	cmp	r0, r4
 800441e:	d0f8      	beq.n	8004412 <sbrk_aligned+0x22>
 8004420:	1a21      	subs	r1, r4, r0
 8004422:	4628      	mov	r0, r5
 8004424:	f000 fc5c 	bl	8004ce0 <_sbrk_r>
 8004428:	3001      	adds	r0, #1
 800442a:	d1f2      	bne.n	8004412 <sbrk_aligned+0x22>
 800442c:	e7ef      	b.n	800440e <sbrk_aligned+0x1e>
 800442e:	bf00      	nop
 8004430:	200002ec 	.word	0x200002ec

08004434 <_malloc_r>:
 8004434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004438:	1ccd      	adds	r5, r1, #3
 800443a:	f025 0503 	bic.w	r5, r5, #3
 800443e:	3508      	adds	r5, #8
 8004440:	2d0c      	cmp	r5, #12
 8004442:	bf38      	it	cc
 8004444:	250c      	movcc	r5, #12
 8004446:	2d00      	cmp	r5, #0
 8004448:	4606      	mov	r6, r0
 800444a:	db01      	blt.n	8004450 <_malloc_r+0x1c>
 800444c:	42a9      	cmp	r1, r5
 800444e:	d904      	bls.n	800445a <_malloc_r+0x26>
 8004450:	230c      	movs	r3, #12
 8004452:	6033      	str	r3, [r6, #0]
 8004454:	2000      	movs	r0, #0
 8004456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004530 <_malloc_r+0xfc>
 800445e:	f000 faa3 	bl	80049a8 <__malloc_lock>
 8004462:	f8d8 3000 	ldr.w	r3, [r8]
 8004466:	461c      	mov	r4, r3
 8004468:	bb44      	cbnz	r4, 80044bc <_malloc_r+0x88>
 800446a:	4629      	mov	r1, r5
 800446c:	4630      	mov	r0, r6
 800446e:	f7ff ffbf 	bl	80043f0 <sbrk_aligned>
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	4604      	mov	r4, r0
 8004476:	d158      	bne.n	800452a <_malloc_r+0xf6>
 8004478:	f8d8 4000 	ldr.w	r4, [r8]
 800447c:	4627      	mov	r7, r4
 800447e:	2f00      	cmp	r7, #0
 8004480:	d143      	bne.n	800450a <_malloc_r+0xd6>
 8004482:	2c00      	cmp	r4, #0
 8004484:	d04b      	beq.n	800451e <_malloc_r+0xea>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	4639      	mov	r1, r7
 800448a:	4630      	mov	r0, r6
 800448c:	eb04 0903 	add.w	r9, r4, r3
 8004490:	f000 fc26 	bl	8004ce0 <_sbrk_r>
 8004494:	4581      	cmp	r9, r0
 8004496:	d142      	bne.n	800451e <_malloc_r+0xea>
 8004498:	6821      	ldr	r1, [r4, #0]
 800449a:	1a6d      	subs	r5, r5, r1
 800449c:	4629      	mov	r1, r5
 800449e:	4630      	mov	r0, r6
 80044a0:	f7ff ffa6 	bl	80043f0 <sbrk_aligned>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d03a      	beq.n	800451e <_malloc_r+0xea>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	442b      	add	r3, r5
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	f8d8 3000 	ldr.w	r3, [r8]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	bb62      	cbnz	r2, 8004510 <_malloc_r+0xdc>
 80044b6:	f8c8 7000 	str.w	r7, [r8]
 80044ba:	e00f      	b.n	80044dc <_malloc_r+0xa8>
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	1b52      	subs	r2, r2, r5
 80044c0:	d420      	bmi.n	8004504 <_malloc_r+0xd0>
 80044c2:	2a0b      	cmp	r2, #11
 80044c4:	d917      	bls.n	80044f6 <_malloc_r+0xc2>
 80044c6:	1961      	adds	r1, r4, r5
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	6025      	str	r5, [r4, #0]
 80044cc:	bf18      	it	ne
 80044ce:	6059      	strne	r1, [r3, #4]
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	bf08      	it	eq
 80044d4:	f8c8 1000 	streq.w	r1, [r8]
 80044d8:	5162      	str	r2, [r4, r5]
 80044da:	604b      	str	r3, [r1, #4]
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 fa69 	bl	80049b4 <__malloc_unlock>
 80044e2:	f104 000b 	add.w	r0, r4, #11
 80044e6:	1d23      	adds	r3, r4, #4
 80044e8:	f020 0007 	bic.w	r0, r0, #7
 80044ec:	1ac2      	subs	r2, r0, r3
 80044ee:	bf1c      	itt	ne
 80044f0:	1a1b      	subne	r3, r3, r0
 80044f2:	50a3      	strne	r3, [r4, r2]
 80044f4:	e7af      	b.n	8004456 <_malloc_r+0x22>
 80044f6:	6862      	ldr	r2, [r4, #4]
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	bf0c      	ite	eq
 80044fc:	f8c8 2000 	streq.w	r2, [r8]
 8004500:	605a      	strne	r2, [r3, #4]
 8004502:	e7eb      	b.n	80044dc <_malloc_r+0xa8>
 8004504:	4623      	mov	r3, r4
 8004506:	6864      	ldr	r4, [r4, #4]
 8004508:	e7ae      	b.n	8004468 <_malloc_r+0x34>
 800450a:	463c      	mov	r4, r7
 800450c:	687f      	ldr	r7, [r7, #4]
 800450e:	e7b6      	b.n	800447e <_malloc_r+0x4a>
 8004510:	461a      	mov	r2, r3
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	42a3      	cmp	r3, r4
 8004516:	d1fb      	bne.n	8004510 <_malloc_r+0xdc>
 8004518:	2300      	movs	r3, #0
 800451a:	6053      	str	r3, [r2, #4]
 800451c:	e7de      	b.n	80044dc <_malloc_r+0xa8>
 800451e:	230c      	movs	r3, #12
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	4630      	mov	r0, r6
 8004524:	f000 fa46 	bl	80049b4 <__malloc_unlock>
 8004528:	e794      	b.n	8004454 <_malloc_r+0x20>
 800452a:	6005      	str	r5, [r0, #0]
 800452c:	e7d6      	b.n	80044dc <_malloc_r+0xa8>
 800452e:	bf00      	nop
 8004530:	200002f0 	.word	0x200002f0

08004534 <_printf_common>:
 8004534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	4616      	mov	r6, r2
 800453a:	4698      	mov	r8, r3
 800453c:	688a      	ldr	r2, [r1, #8]
 800453e:	690b      	ldr	r3, [r1, #16]
 8004540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004544:	4293      	cmp	r3, r2
 8004546:	bfb8      	it	lt
 8004548:	4613      	movlt	r3, r2
 800454a:	6033      	str	r3, [r6, #0]
 800454c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004550:	4607      	mov	r7, r0
 8004552:	460c      	mov	r4, r1
 8004554:	b10a      	cbz	r2, 800455a <_printf_common+0x26>
 8004556:	3301      	adds	r3, #1
 8004558:	6033      	str	r3, [r6, #0]
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	0699      	lsls	r1, r3, #26
 800455e:	bf42      	ittt	mi
 8004560:	6833      	ldrmi	r3, [r6, #0]
 8004562:	3302      	addmi	r3, #2
 8004564:	6033      	strmi	r3, [r6, #0]
 8004566:	6825      	ldr	r5, [r4, #0]
 8004568:	f015 0506 	ands.w	r5, r5, #6
 800456c:	d106      	bne.n	800457c <_printf_common+0x48>
 800456e:	f104 0a19 	add.w	sl, r4, #25
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	6832      	ldr	r2, [r6, #0]
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	42ab      	cmp	r3, r5
 800457a:	dc26      	bgt.n	80045ca <_printf_common+0x96>
 800457c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004580:	6822      	ldr	r2, [r4, #0]
 8004582:	3b00      	subs	r3, #0
 8004584:	bf18      	it	ne
 8004586:	2301      	movne	r3, #1
 8004588:	0692      	lsls	r2, r2, #26
 800458a:	d42b      	bmi.n	80045e4 <_printf_common+0xb0>
 800458c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004590:	4641      	mov	r1, r8
 8004592:	4638      	mov	r0, r7
 8004594:	47c8      	blx	r9
 8004596:	3001      	adds	r0, #1
 8004598:	d01e      	beq.n	80045d8 <_printf_common+0xa4>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	6922      	ldr	r2, [r4, #16]
 800459e:	f003 0306 	and.w	r3, r3, #6
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	bf02      	ittt	eq
 80045a6:	68e5      	ldreq	r5, [r4, #12]
 80045a8:	6833      	ldreq	r3, [r6, #0]
 80045aa:	1aed      	subeq	r5, r5, r3
 80045ac:	68a3      	ldr	r3, [r4, #8]
 80045ae:	bf0c      	ite	eq
 80045b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b4:	2500      	movne	r5, #0
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bfc4      	itt	gt
 80045ba:	1a9b      	subgt	r3, r3, r2
 80045bc:	18ed      	addgt	r5, r5, r3
 80045be:	2600      	movs	r6, #0
 80045c0:	341a      	adds	r4, #26
 80045c2:	42b5      	cmp	r5, r6
 80045c4:	d11a      	bne.n	80045fc <_printf_common+0xc8>
 80045c6:	2000      	movs	r0, #0
 80045c8:	e008      	b.n	80045dc <_printf_common+0xa8>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4652      	mov	r2, sl
 80045ce:	4641      	mov	r1, r8
 80045d0:	4638      	mov	r0, r7
 80045d2:	47c8      	blx	r9
 80045d4:	3001      	adds	r0, #1
 80045d6:	d103      	bne.n	80045e0 <_printf_common+0xac>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e0:	3501      	adds	r5, #1
 80045e2:	e7c6      	b.n	8004572 <_printf_common+0x3e>
 80045e4:	18e1      	adds	r1, r4, r3
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	2030      	movs	r0, #48	@ 0x30
 80045ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045ee:	4422      	add	r2, r4
 80045f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045f8:	3302      	adds	r3, #2
 80045fa:	e7c7      	b.n	800458c <_printf_common+0x58>
 80045fc:	2301      	movs	r3, #1
 80045fe:	4622      	mov	r2, r4
 8004600:	4641      	mov	r1, r8
 8004602:	4638      	mov	r0, r7
 8004604:	47c8      	blx	r9
 8004606:	3001      	adds	r0, #1
 8004608:	d0e6      	beq.n	80045d8 <_printf_common+0xa4>
 800460a:	3601      	adds	r6, #1
 800460c:	e7d9      	b.n	80045c2 <_printf_common+0x8e>
	...

08004610 <_printf_i>:
 8004610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	7e0f      	ldrb	r7, [r1, #24]
 8004616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004618:	2f78      	cmp	r7, #120	@ 0x78
 800461a:	4691      	mov	r9, r2
 800461c:	4680      	mov	r8, r0
 800461e:	460c      	mov	r4, r1
 8004620:	469a      	mov	sl, r3
 8004622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004626:	d807      	bhi.n	8004638 <_printf_i+0x28>
 8004628:	2f62      	cmp	r7, #98	@ 0x62
 800462a:	d80a      	bhi.n	8004642 <_printf_i+0x32>
 800462c:	2f00      	cmp	r7, #0
 800462e:	f000 80d2 	beq.w	80047d6 <_printf_i+0x1c6>
 8004632:	2f58      	cmp	r7, #88	@ 0x58
 8004634:	f000 80b9 	beq.w	80047aa <_printf_i+0x19a>
 8004638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800463c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004640:	e03a      	b.n	80046b8 <_printf_i+0xa8>
 8004642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004646:	2b15      	cmp	r3, #21
 8004648:	d8f6      	bhi.n	8004638 <_printf_i+0x28>
 800464a:	a101      	add	r1, pc, #4	@ (adr r1, 8004650 <_printf_i+0x40>)
 800464c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004650:	080046a9 	.word	0x080046a9
 8004654:	080046bd 	.word	0x080046bd
 8004658:	08004639 	.word	0x08004639
 800465c:	08004639 	.word	0x08004639
 8004660:	08004639 	.word	0x08004639
 8004664:	08004639 	.word	0x08004639
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004639 	.word	0x08004639
 8004670:	08004639 	.word	0x08004639
 8004674:	08004639 	.word	0x08004639
 8004678:	08004639 	.word	0x08004639
 800467c:	080047bd 	.word	0x080047bd
 8004680:	080046e7 	.word	0x080046e7
 8004684:	08004777 	.word	0x08004777
 8004688:	08004639 	.word	0x08004639
 800468c:	08004639 	.word	0x08004639
 8004690:	080047df 	.word	0x080047df
 8004694:	08004639 	.word	0x08004639
 8004698:	080046e7 	.word	0x080046e7
 800469c:	08004639 	.word	0x08004639
 80046a0:	08004639 	.word	0x08004639
 80046a4:	0800477f 	.word	0x0800477f
 80046a8:	6833      	ldr	r3, [r6, #0]
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6032      	str	r2, [r6, #0]
 80046b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046b8:	2301      	movs	r3, #1
 80046ba:	e09d      	b.n	80047f8 <_printf_i+0x1e8>
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	6820      	ldr	r0, [r4, #0]
 80046c0:	1d19      	adds	r1, r3, #4
 80046c2:	6031      	str	r1, [r6, #0]
 80046c4:	0606      	lsls	r6, r0, #24
 80046c6:	d501      	bpl.n	80046cc <_printf_i+0xbc>
 80046c8:	681d      	ldr	r5, [r3, #0]
 80046ca:	e003      	b.n	80046d4 <_printf_i+0xc4>
 80046cc:	0645      	lsls	r5, r0, #25
 80046ce:	d5fb      	bpl.n	80046c8 <_printf_i+0xb8>
 80046d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046d4:	2d00      	cmp	r5, #0
 80046d6:	da03      	bge.n	80046e0 <_printf_i+0xd0>
 80046d8:	232d      	movs	r3, #45	@ 0x2d
 80046da:	426d      	negs	r5, r5
 80046dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046e0:	4859      	ldr	r0, [pc, #356]	@ (8004848 <_printf_i+0x238>)
 80046e2:	230a      	movs	r3, #10
 80046e4:	e011      	b.n	800470a <_printf_i+0xfa>
 80046e6:	6821      	ldr	r1, [r4, #0]
 80046e8:	6833      	ldr	r3, [r6, #0]
 80046ea:	0608      	lsls	r0, r1, #24
 80046ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80046f0:	d402      	bmi.n	80046f8 <_printf_i+0xe8>
 80046f2:	0649      	lsls	r1, r1, #25
 80046f4:	bf48      	it	mi
 80046f6:	b2ad      	uxthmi	r5, r5
 80046f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80046fa:	4853      	ldr	r0, [pc, #332]	@ (8004848 <_printf_i+0x238>)
 80046fc:	6033      	str	r3, [r6, #0]
 80046fe:	bf14      	ite	ne
 8004700:	230a      	movne	r3, #10
 8004702:	2308      	moveq	r3, #8
 8004704:	2100      	movs	r1, #0
 8004706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800470a:	6866      	ldr	r6, [r4, #4]
 800470c:	60a6      	str	r6, [r4, #8]
 800470e:	2e00      	cmp	r6, #0
 8004710:	bfa2      	ittt	ge
 8004712:	6821      	ldrge	r1, [r4, #0]
 8004714:	f021 0104 	bicge.w	r1, r1, #4
 8004718:	6021      	strge	r1, [r4, #0]
 800471a:	b90d      	cbnz	r5, 8004720 <_printf_i+0x110>
 800471c:	2e00      	cmp	r6, #0
 800471e:	d04b      	beq.n	80047b8 <_printf_i+0x1a8>
 8004720:	4616      	mov	r6, r2
 8004722:	fbb5 f1f3 	udiv	r1, r5, r3
 8004726:	fb03 5711 	mls	r7, r3, r1, r5
 800472a:	5dc7      	ldrb	r7, [r0, r7]
 800472c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004730:	462f      	mov	r7, r5
 8004732:	42bb      	cmp	r3, r7
 8004734:	460d      	mov	r5, r1
 8004736:	d9f4      	bls.n	8004722 <_printf_i+0x112>
 8004738:	2b08      	cmp	r3, #8
 800473a:	d10b      	bne.n	8004754 <_printf_i+0x144>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	07df      	lsls	r7, r3, #31
 8004740:	d508      	bpl.n	8004754 <_printf_i+0x144>
 8004742:	6923      	ldr	r3, [r4, #16]
 8004744:	6861      	ldr	r1, [r4, #4]
 8004746:	4299      	cmp	r1, r3
 8004748:	bfde      	ittt	le
 800474a:	2330      	movle	r3, #48	@ 0x30
 800474c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004750:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004754:	1b92      	subs	r2, r2, r6
 8004756:	6122      	str	r2, [r4, #16]
 8004758:	f8cd a000 	str.w	sl, [sp]
 800475c:	464b      	mov	r3, r9
 800475e:	aa03      	add	r2, sp, #12
 8004760:	4621      	mov	r1, r4
 8004762:	4640      	mov	r0, r8
 8004764:	f7ff fee6 	bl	8004534 <_printf_common>
 8004768:	3001      	adds	r0, #1
 800476a:	d14a      	bne.n	8004802 <_printf_i+0x1f2>
 800476c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004770:	b004      	add	sp, #16
 8004772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	f043 0320 	orr.w	r3, r3, #32
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	4833      	ldr	r0, [pc, #204]	@ (800484c <_printf_i+0x23c>)
 8004780:	2778      	movs	r7, #120	@ 0x78
 8004782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	6831      	ldr	r1, [r6, #0]
 800478a:	061f      	lsls	r7, r3, #24
 800478c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004790:	d402      	bmi.n	8004798 <_printf_i+0x188>
 8004792:	065f      	lsls	r7, r3, #25
 8004794:	bf48      	it	mi
 8004796:	b2ad      	uxthmi	r5, r5
 8004798:	6031      	str	r1, [r6, #0]
 800479a:	07d9      	lsls	r1, r3, #31
 800479c:	bf44      	itt	mi
 800479e:	f043 0320 	orrmi.w	r3, r3, #32
 80047a2:	6023      	strmi	r3, [r4, #0]
 80047a4:	b11d      	cbz	r5, 80047ae <_printf_i+0x19e>
 80047a6:	2310      	movs	r3, #16
 80047a8:	e7ac      	b.n	8004704 <_printf_i+0xf4>
 80047aa:	4827      	ldr	r0, [pc, #156]	@ (8004848 <_printf_i+0x238>)
 80047ac:	e7e9      	b.n	8004782 <_printf_i+0x172>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	f023 0320 	bic.w	r3, r3, #32
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	e7f6      	b.n	80047a6 <_printf_i+0x196>
 80047b8:	4616      	mov	r6, r2
 80047ba:	e7bd      	b.n	8004738 <_printf_i+0x128>
 80047bc:	6833      	ldr	r3, [r6, #0]
 80047be:	6825      	ldr	r5, [r4, #0]
 80047c0:	6961      	ldr	r1, [r4, #20]
 80047c2:	1d18      	adds	r0, r3, #4
 80047c4:	6030      	str	r0, [r6, #0]
 80047c6:	062e      	lsls	r6, r5, #24
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	d501      	bpl.n	80047d0 <_printf_i+0x1c0>
 80047cc:	6019      	str	r1, [r3, #0]
 80047ce:	e002      	b.n	80047d6 <_printf_i+0x1c6>
 80047d0:	0668      	lsls	r0, r5, #25
 80047d2:	d5fb      	bpl.n	80047cc <_printf_i+0x1bc>
 80047d4:	8019      	strh	r1, [r3, #0]
 80047d6:	2300      	movs	r3, #0
 80047d8:	6123      	str	r3, [r4, #16]
 80047da:	4616      	mov	r6, r2
 80047dc:	e7bc      	b.n	8004758 <_printf_i+0x148>
 80047de:	6833      	ldr	r3, [r6, #0]
 80047e0:	1d1a      	adds	r2, r3, #4
 80047e2:	6032      	str	r2, [r6, #0]
 80047e4:	681e      	ldr	r6, [r3, #0]
 80047e6:	6862      	ldr	r2, [r4, #4]
 80047e8:	2100      	movs	r1, #0
 80047ea:	4630      	mov	r0, r6
 80047ec:	f7fb fcf8 	bl	80001e0 <memchr>
 80047f0:	b108      	cbz	r0, 80047f6 <_printf_i+0x1e6>
 80047f2:	1b80      	subs	r0, r0, r6
 80047f4:	6060      	str	r0, [r4, #4]
 80047f6:	6863      	ldr	r3, [r4, #4]
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	2300      	movs	r3, #0
 80047fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004800:	e7aa      	b.n	8004758 <_printf_i+0x148>
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	4632      	mov	r2, r6
 8004806:	4649      	mov	r1, r9
 8004808:	4640      	mov	r0, r8
 800480a:	47d0      	blx	sl
 800480c:	3001      	adds	r0, #1
 800480e:	d0ad      	beq.n	800476c <_printf_i+0x15c>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	079b      	lsls	r3, r3, #30
 8004814:	d413      	bmi.n	800483e <_printf_i+0x22e>
 8004816:	68e0      	ldr	r0, [r4, #12]
 8004818:	9b03      	ldr	r3, [sp, #12]
 800481a:	4298      	cmp	r0, r3
 800481c:	bfb8      	it	lt
 800481e:	4618      	movlt	r0, r3
 8004820:	e7a6      	b.n	8004770 <_printf_i+0x160>
 8004822:	2301      	movs	r3, #1
 8004824:	4632      	mov	r2, r6
 8004826:	4649      	mov	r1, r9
 8004828:	4640      	mov	r0, r8
 800482a:	47d0      	blx	sl
 800482c:	3001      	adds	r0, #1
 800482e:	d09d      	beq.n	800476c <_printf_i+0x15c>
 8004830:	3501      	adds	r5, #1
 8004832:	68e3      	ldr	r3, [r4, #12]
 8004834:	9903      	ldr	r1, [sp, #12]
 8004836:	1a5b      	subs	r3, r3, r1
 8004838:	42ab      	cmp	r3, r5
 800483a:	dcf2      	bgt.n	8004822 <_printf_i+0x212>
 800483c:	e7eb      	b.n	8004816 <_printf_i+0x206>
 800483e:	2500      	movs	r5, #0
 8004840:	f104 0619 	add.w	r6, r4, #25
 8004844:	e7f5      	b.n	8004832 <_printf_i+0x222>
 8004846:	bf00      	nop
 8004848:	08004e49 	.word	0x08004e49
 800484c:	08004e5a 	.word	0x08004e5a

08004850 <__sflush_r>:
 8004850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004858:	0716      	lsls	r6, r2, #28
 800485a:	4605      	mov	r5, r0
 800485c:	460c      	mov	r4, r1
 800485e:	d454      	bmi.n	800490a <__sflush_r+0xba>
 8004860:	684b      	ldr	r3, [r1, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	dc02      	bgt.n	800486c <__sflush_r+0x1c>
 8004866:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	dd48      	ble.n	80048fe <__sflush_r+0xae>
 800486c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800486e:	2e00      	cmp	r6, #0
 8004870:	d045      	beq.n	80048fe <__sflush_r+0xae>
 8004872:	2300      	movs	r3, #0
 8004874:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004878:	682f      	ldr	r7, [r5, #0]
 800487a:	6a21      	ldr	r1, [r4, #32]
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	d030      	beq.n	80048e2 <__sflush_r+0x92>
 8004880:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	0759      	lsls	r1, r3, #29
 8004886:	d505      	bpl.n	8004894 <__sflush_r+0x44>
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800488e:	b10b      	cbz	r3, 8004894 <__sflush_r+0x44>
 8004890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	2300      	movs	r3, #0
 8004896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004898:	6a21      	ldr	r1, [r4, #32]
 800489a:	4628      	mov	r0, r5
 800489c:	47b0      	blx	r6
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	d106      	bne.n	80048b2 <__sflush_r+0x62>
 80048a4:	6829      	ldr	r1, [r5, #0]
 80048a6:	291d      	cmp	r1, #29
 80048a8:	d82b      	bhi.n	8004902 <__sflush_r+0xb2>
 80048aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <__sflush_r+0x104>)
 80048ac:	410a      	asrs	r2, r1
 80048ae:	07d6      	lsls	r6, r2, #31
 80048b0:	d427      	bmi.n	8004902 <__sflush_r+0xb2>
 80048b2:	2200      	movs	r2, #0
 80048b4:	6062      	str	r2, [r4, #4]
 80048b6:	04d9      	lsls	r1, r3, #19
 80048b8:	6922      	ldr	r2, [r4, #16]
 80048ba:	6022      	str	r2, [r4, #0]
 80048bc:	d504      	bpl.n	80048c8 <__sflush_r+0x78>
 80048be:	1c42      	adds	r2, r0, #1
 80048c0:	d101      	bne.n	80048c6 <__sflush_r+0x76>
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	b903      	cbnz	r3, 80048c8 <__sflush_r+0x78>
 80048c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80048c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048ca:	602f      	str	r7, [r5, #0]
 80048cc:	b1b9      	cbz	r1, 80048fe <__sflush_r+0xae>
 80048ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048d2:	4299      	cmp	r1, r3
 80048d4:	d002      	beq.n	80048dc <__sflush_r+0x8c>
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 fa24 	bl	8004d24 <_free_r>
 80048dc:	2300      	movs	r3, #0
 80048de:	6363      	str	r3, [r4, #52]	@ 0x34
 80048e0:	e00d      	b.n	80048fe <__sflush_r+0xae>
 80048e2:	2301      	movs	r3, #1
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b0      	blx	r6
 80048e8:	4602      	mov	r2, r0
 80048ea:	1c50      	adds	r0, r2, #1
 80048ec:	d1c9      	bne.n	8004882 <__sflush_r+0x32>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0c6      	beq.n	8004882 <__sflush_r+0x32>
 80048f4:	2b1d      	cmp	r3, #29
 80048f6:	d001      	beq.n	80048fc <__sflush_r+0xac>
 80048f8:	2b16      	cmp	r3, #22
 80048fa:	d11e      	bne.n	800493a <__sflush_r+0xea>
 80048fc:	602f      	str	r7, [r5, #0]
 80048fe:	2000      	movs	r0, #0
 8004900:	e022      	b.n	8004948 <__sflush_r+0xf8>
 8004902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004906:	b21b      	sxth	r3, r3
 8004908:	e01b      	b.n	8004942 <__sflush_r+0xf2>
 800490a:	690f      	ldr	r7, [r1, #16]
 800490c:	2f00      	cmp	r7, #0
 800490e:	d0f6      	beq.n	80048fe <__sflush_r+0xae>
 8004910:	0793      	lsls	r3, r2, #30
 8004912:	680e      	ldr	r6, [r1, #0]
 8004914:	bf08      	it	eq
 8004916:	694b      	ldreq	r3, [r1, #20]
 8004918:	600f      	str	r7, [r1, #0]
 800491a:	bf18      	it	ne
 800491c:	2300      	movne	r3, #0
 800491e:	eba6 0807 	sub.w	r8, r6, r7
 8004922:	608b      	str	r3, [r1, #8]
 8004924:	f1b8 0f00 	cmp.w	r8, #0
 8004928:	dde9      	ble.n	80048fe <__sflush_r+0xae>
 800492a:	6a21      	ldr	r1, [r4, #32]
 800492c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800492e:	4643      	mov	r3, r8
 8004930:	463a      	mov	r2, r7
 8004932:	4628      	mov	r0, r5
 8004934:	47b0      	blx	r6
 8004936:	2800      	cmp	r0, #0
 8004938:	dc08      	bgt.n	800494c <__sflush_r+0xfc>
 800493a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800493e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494c:	4407      	add	r7, r0
 800494e:	eba8 0800 	sub.w	r8, r8, r0
 8004952:	e7e7      	b.n	8004924 <__sflush_r+0xd4>
 8004954:	dfbffffe 	.word	0xdfbffffe

08004958 <_fflush_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	4605      	mov	r5, r0
 800495e:	460c      	mov	r4, r1
 8004960:	b913      	cbnz	r3, 8004968 <_fflush_r+0x10>
 8004962:	2500      	movs	r5, #0
 8004964:	4628      	mov	r0, r5
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	b118      	cbz	r0, 8004972 <_fflush_r+0x1a>
 800496a:	6a03      	ldr	r3, [r0, #32]
 800496c:	b90b      	cbnz	r3, 8004972 <_fflush_r+0x1a>
 800496e:	f7ff fb23 	bl	8003fb8 <__sinit>
 8004972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f3      	beq.n	8004962 <_fflush_r+0xa>
 800497a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800497c:	07d0      	lsls	r0, r2, #31
 800497e:	d404      	bmi.n	800498a <_fflush_r+0x32>
 8004980:	0599      	lsls	r1, r3, #22
 8004982:	d402      	bmi.n	800498a <_fflush_r+0x32>
 8004984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004986:	f7ff fbf0 	bl	800416a <__retarget_lock_acquire_recursive>
 800498a:	4628      	mov	r0, r5
 800498c:	4621      	mov	r1, r4
 800498e:	f7ff ff5f 	bl	8004850 <__sflush_r>
 8004992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004994:	07da      	lsls	r2, r3, #31
 8004996:	4605      	mov	r5, r0
 8004998:	d4e4      	bmi.n	8004964 <_fflush_r+0xc>
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	059b      	lsls	r3, r3, #22
 800499e:	d4e1      	bmi.n	8004964 <_fflush_r+0xc>
 80049a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049a2:	f7ff fbe3 	bl	800416c <__retarget_lock_release_recursive>
 80049a6:	e7dd      	b.n	8004964 <_fflush_r+0xc>

080049a8 <__malloc_lock>:
 80049a8:	4801      	ldr	r0, [pc, #4]	@ (80049b0 <__malloc_lock+0x8>)
 80049aa:	f7ff bbde 	b.w	800416a <__retarget_lock_acquire_recursive>
 80049ae:	bf00      	nop
 80049b0:	200002e8 	.word	0x200002e8

080049b4 <__malloc_unlock>:
 80049b4:	4801      	ldr	r0, [pc, #4]	@ (80049bc <__malloc_unlock+0x8>)
 80049b6:	f7ff bbd9 	b.w	800416c <__retarget_lock_release_recursive>
 80049ba:	bf00      	nop
 80049bc:	200002e8 	.word	0x200002e8

080049c0 <__sread>:
 80049c0:	b510      	push	{r4, lr}
 80049c2:	460c      	mov	r4, r1
 80049c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c8:	f000 f978 	bl	8004cbc <_read_r>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	bfab      	itete	ge
 80049d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049d2:	89a3      	ldrhlt	r3, [r4, #12]
 80049d4:	181b      	addge	r3, r3, r0
 80049d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049da:	bfac      	ite	ge
 80049dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049de:	81a3      	strhlt	r3, [r4, #12]
 80049e0:	bd10      	pop	{r4, pc}

080049e2 <__swrite>:
 80049e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e6:	461f      	mov	r7, r3
 80049e8:	898b      	ldrh	r3, [r1, #12]
 80049ea:	05db      	lsls	r3, r3, #23
 80049ec:	4605      	mov	r5, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	4616      	mov	r6, r2
 80049f2:	d505      	bpl.n	8004a00 <__swrite+0x1e>
 80049f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f8:	2302      	movs	r3, #2
 80049fa:	2200      	movs	r2, #0
 80049fc:	f000 f94c 	bl	8004c98 <_lseek_r>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	4632      	mov	r2, r6
 8004a0e:	463b      	mov	r3, r7
 8004a10:	4628      	mov	r0, r5
 8004a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a16:	f000 b973 	b.w	8004d00 <_write_r>

08004a1a <__sseek>:
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a22:	f000 f939 	bl	8004c98 <_lseek_r>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	bf15      	itete	ne
 8004a2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a36:	81a3      	strheq	r3, [r4, #12]
 8004a38:	bf18      	it	ne
 8004a3a:	81a3      	strhne	r3, [r4, #12]
 8004a3c:	bd10      	pop	{r4, pc}

08004a3e <__sclose>:
 8004a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a42:	f000 b8f7 	b.w	8004c34 <_close_r>

08004a46 <__swbuf_r>:
 8004a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a48:	460e      	mov	r6, r1
 8004a4a:	4614      	mov	r4, r2
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	b118      	cbz	r0, 8004a58 <__swbuf_r+0x12>
 8004a50:	6a03      	ldr	r3, [r0, #32]
 8004a52:	b90b      	cbnz	r3, 8004a58 <__swbuf_r+0x12>
 8004a54:	f7ff fab0 	bl	8003fb8 <__sinit>
 8004a58:	69a3      	ldr	r3, [r4, #24]
 8004a5a:	60a3      	str	r3, [r4, #8]
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	071a      	lsls	r2, r3, #28
 8004a60:	d501      	bpl.n	8004a66 <__swbuf_r+0x20>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	b943      	cbnz	r3, 8004a78 <__swbuf_r+0x32>
 8004a66:	4621      	mov	r1, r4
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f000 f82b 	bl	8004ac4 <__swsetup_r>
 8004a6e:	b118      	cbz	r0, 8004a78 <__swbuf_r+0x32>
 8004a70:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004a74:	4638      	mov	r0, r7
 8004a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	6922      	ldr	r2, [r4, #16]
 8004a7c:	1a98      	subs	r0, r3, r2
 8004a7e:	6963      	ldr	r3, [r4, #20]
 8004a80:	b2f6      	uxtb	r6, r6
 8004a82:	4283      	cmp	r3, r0
 8004a84:	4637      	mov	r7, r6
 8004a86:	dc05      	bgt.n	8004a94 <__swbuf_r+0x4e>
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f7ff ff64 	bl	8004958 <_fflush_r>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d1ed      	bne.n	8004a70 <__swbuf_r+0x2a>
 8004a94:	68a3      	ldr	r3, [r4, #8]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	60a3      	str	r3, [r4, #8]
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	6022      	str	r2, [r4, #0]
 8004aa0:	701e      	strb	r6, [r3, #0]
 8004aa2:	6962      	ldr	r2, [r4, #20]
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d004      	beq.n	8004ab4 <__swbuf_r+0x6e>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	07db      	lsls	r3, r3, #31
 8004aae:	d5e1      	bpl.n	8004a74 <__swbuf_r+0x2e>
 8004ab0:	2e0a      	cmp	r6, #10
 8004ab2:	d1df      	bne.n	8004a74 <__swbuf_r+0x2e>
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7ff ff4e 	bl	8004958 <_fflush_r>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d0d9      	beq.n	8004a74 <__swbuf_r+0x2e>
 8004ac0:	e7d6      	b.n	8004a70 <__swbuf_r+0x2a>
	...

08004ac4 <__swsetup_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4b29      	ldr	r3, [pc, #164]	@ (8004b6c <__swsetup_r+0xa8>)
 8004ac8:	4605      	mov	r5, r0
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	460c      	mov	r4, r1
 8004ace:	b118      	cbz	r0, 8004ad8 <__swsetup_r+0x14>
 8004ad0:	6a03      	ldr	r3, [r0, #32]
 8004ad2:	b90b      	cbnz	r3, 8004ad8 <__swsetup_r+0x14>
 8004ad4:	f7ff fa70 	bl	8003fb8 <__sinit>
 8004ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004adc:	0719      	lsls	r1, r3, #28
 8004ade:	d422      	bmi.n	8004b26 <__swsetup_r+0x62>
 8004ae0:	06da      	lsls	r2, r3, #27
 8004ae2:	d407      	bmi.n	8004af4 <__swsetup_r+0x30>
 8004ae4:	2209      	movs	r2, #9
 8004ae6:	602a      	str	r2, [r5, #0]
 8004ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aec:	81a3      	strh	r3, [r4, #12]
 8004aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004af2:	e033      	b.n	8004b5c <__swsetup_r+0x98>
 8004af4:	0758      	lsls	r0, r3, #29
 8004af6:	d512      	bpl.n	8004b1e <__swsetup_r+0x5a>
 8004af8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004afa:	b141      	cbz	r1, 8004b0e <__swsetup_r+0x4a>
 8004afc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b00:	4299      	cmp	r1, r3
 8004b02:	d002      	beq.n	8004b0a <__swsetup_r+0x46>
 8004b04:	4628      	mov	r0, r5
 8004b06:	f000 f90d 	bl	8004d24 <_free_r>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b14:	81a3      	strh	r3, [r4, #12]
 8004b16:	2300      	movs	r3, #0
 8004b18:	6063      	str	r3, [r4, #4]
 8004b1a:	6923      	ldr	r3, [r4, #16]
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	89a3      	ldrh	r3, [r4, #12]
 8004b20:	f043 0308 	orr.w	r3, r3, #8
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	6923      	ldr	r3, [r4, #16]
 8004b28:	b94b      	cbnz	r3, 8004b3e <__swsetup_r+0x7a>
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b34:	d003      	beq.n	8004b3e <__swsetup_r+0x7a>
 8004b36:	4621      	mov	r1, r4
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 f83f 	bl	8004bbc <__smakebuf_r>
 8004b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b42:	f013 0201 	ands.w	r2, r3, #1
 8004b46:	d00a      	beq.n	8004b5e <__swsetup_r+0x9a>
 8004b48:	2200      	movs	r2, #0
 8004b4a:	60a2      	str	r2, [r4, #8]
 8004b4c:	6962      	ldr	r2, [r4, #20]
 8004b4e:	4252      	negs	r2, r2
 8004b50:	61a2      	str	r2, [r4, #24]
 8004b52:	6922      	ldr	r2, [r4, #16]
 8004b54:	b942      	cbnz	r2, 8004b68 <__swsetup_r+0xa4>
 8004b56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b5a:	d1c5      	bne.n	8004ae8 <__swsetup_r+0x24>
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
 8004b5e:	0799      	lsls	r1, r3, #30
 8004b60:	bf58      	it	pl
 8004b62:	6962      	ldrpl	r2, [r4, #20]
 8004b64:	60a2      	str	r2, [r4, #8]
 8004b66:	e7f4      	b.n	8004b52 <__swsetup_r+0x8e>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e7f7      	b.n	8004b5c <__swsetup_r+0x98>
 8004b6c:	20000018 	.word	0x20000018

08004b70 <__swhatbuf_r>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	460c      	mov	r4, r1
 8004b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	b096      	sub	sp, #88	@ 0x58
 8004b7c:	4615      	mov	r5, r2
 8004b7e:	461e      	mov	r6, r3
 8004b80:	da0d      	bge.n	8004b9e <__swhatbuf_r+0x2e>
 8004b82:	89a3      	ldrh	r3, [r4, #12]
 8004b84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b88:	f04f 0100 	mov.w	r1, #0
 8004b8c:	bf14      	ite	ne
 8004b8e:	2340      	movne	r3, #64	@ 0x40
 8004b90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b94:	2000      	movs	r0, #0
 8004b96:	6031      	str	r1, [r6, #0]
 8004b98:	602b      	str	r3, [r5, #0]
 8004b9a:	b016      	add	sp, #88	@ 0x58
 8004b9c:	bd70      	pop	{r4, r5, r6, pc}
 8004b9e:	466a      	mov	r2, sp
 8004ba0:	f000 f858 	bl	8004c54 <_fstat_r>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	dbec      	blt.n	8004b82 <__swhatbuf_r+0x12>
 8004ba8:	9901      	ldr	r1, [sp, #4]
 8004baa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bb2:	4259      	negs	r1, r3
 8004bb4:	4159      	adcs	r1, r3
 8004bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bba:	e7eb      	b.n	8004b94 <__swhatbuf_r+0x24>

08004bbc <__smakebuf_r>:
 8004bbc:	898b      	ldrh	r3, [r1, #12]
 8004bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bc0:	079d      	lsls	r5, r3, #30
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	d507      	bpl.n	8004bd8 <__smakebuf_r+0x1c>
 8004bc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	6123      	str	r3, [r4, #16]
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	6163      	str	r3, [r4, #20]
 8004bd4:	b003      	add	sp, #12
 8004bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd8:	ab01      	add	r3, sp, #4
 8004bda:	466a      	mov	r2, sp
 8004bdc:	f7ff ffc8 	bl	8004b70 <__swhatbuf_r>
 8004be0:	9f00      	ldr	r7, [sp, #0]
 8004be2:	4605      	mov	r5, r0
 8004be4:	4639      	mov	r1, r7
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7ff fc24 	bl	8004434 <_malloc_r>
 8004bec:	b948      	cbnz	r0, 8004c02 <__smakebuf_r+0x46>
 8004bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bf2:	059a      	lsls	r2, r3, #22
 8004bf4:	d4ee      	bmi.n	8004bd4 <__smakebuf_r+0x18>
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	f043 0302 	orr.w	r3, r3, #2
 8004bfe:	81a3      	strh	r3, [r4, #12]
 8004c00:	e7e2      	b.n	8004bc8 <__smakebuf_r+0xc>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	6020      	str	r0, [r4, #0]
 8004c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	9b01      	ldr	r3, [sp, #4]
 8004c0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c12:	b15b      	cbz	r3, 8004c2c <__smakebuf_r+0x70>
 8004c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 f82d 	bl	8004c78 <_isatty_r>
 8004c1e:	b128      	cbz	r0, 8004c2c <__smakebuf_r+0x70>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	431d      	orrs	r5, r3
 8004c30:	81a5      	strh	r5, [r4, #12]
 8004c32:	e7cf      	b.n	8004bd4 <__smakebuf_r+0x18>

08004c34 <_close_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d06      	ldr	r5, [pc, #24]	@ (8004c50 <_close_r+0x1c>)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	f7fc fe2e 	bl	80018a0 <_close>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_close_r+0x1a>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_close_r+0x1a>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	200002f4 	.word	0x200002f4

08004c54 <_fstat_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d07      	ldr	r5, [pc, #28]	@ (8004c74 <_fstat_r+0x20>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	602b      	str	r3, [r5, #0]
 8004c62:	f7fc fe29 	bl	80018b8 <_fstat>
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	d102      	bne.n	8004c70 <_fstat_r+0x1c>
 8004c6a:	682b      	ldr	r3, [r5, #0]
 8004c6c:	b103      	cbz	r3, 8004c70 <_fstat_r+0x1c>
 8004c6e:	6023      	str	r3, [r4, #0]
 8004c70:	bd38      	pop	{r3, r4, r5, pc}
 8004c72:	bf00      	nop
 8004c74:	200002f4 	.word	0x200002f4

08004c78 <_isatty_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d06      	ldr	r5, [pc, #24]	@ (8004c94 <_isatty_r+0x1c>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	f7fc fe28 	bl	80018d8 <_isatty>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_isatty_r+0x1a>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_isatty_r+0x1a>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	200002f4 	.word	0x200002f4

08004c98 <_lseek_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d07      	ldr	r5, [pc, #28]	@ (8004cb8 <_lseek_r+0x20>)
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fc fe21 	bl	80018ee <_lseek>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_lseek_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_lseek_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200002f4 	.word	0x200002f4

08004cbc <_read_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d07      	ldr	r5, [pc, #28]	@ (8004cdc <_read_r+0x20>)
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	602a      	str	r2, [r5, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f7fc fdaf 	bl	800182e <_read>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_read_r+0x1e>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_read_r+0x1e>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	200002f4 	.word	0x200002f4

08004ce0 <_sbrk_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d06      	ldr	r5, [pc, #24]	@ (8004cfc <_sbrk_r+0x1c>)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4608      	mov	r0, r1
 8004cea:	602b      	str	r3, [r5, #0]
 8004cec:	f7fc fe0c 	bl	8001908 <_sbrk>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d102      	bne.n	8004cfa <_sbrk_r+0x1a>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	b103      	cbz	r3, 8004cfa <_sbrk_r+0x1a>
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	200002f4 	.word	0x200002f4

08004d00 <_write_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4d07      	ldr	r5, [pc, #28]	@ (8004d20 <_write_r+0x20>)
 8004d04:	4604      	mov	r4, r0
 8004d06:	4608      	mov	r0, r1
 8004d08:	4611      	mov	r1, r2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	602a      	str	r2, [r5, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7fc fdaa 	bl	8001868 <_write>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_write_r+0x1e>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_write_r+0x1e>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	200002f4 	.word	0x200002f4

08004d24 <_free_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4605      	mov	r5, r0
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d041      	beq.n	8004db0 <_free_r+0x8c>
 8004d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d30:	1f0c      	subs	r4, r1, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bfb8      	it	lt
 8004d36:	18e4      	addlt	r4, r4, r3
 8004d38:	f7ff fe36 	bl	80049a8 <__malloc_lock>
 8004d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004db4 <_free_r+0x90>)
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	b933      	cbnz	r3, 8004d50 <_free_r+0x2c>
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	6014      	str	r4, [r2, #0]
 8004d46:	4628      	mov	r0, r5
 8004d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d4c:	f7ff be32 	b.w	80049b4 <__malloc_unlock>
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	d908      	bls.n	8004d66 <_free_r+0x42>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	1821      	adds	r1, r4, r0
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf01      	itttt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	1809      	addeq	r1, r1, r0
 8004d62:	6021      	streq	r1, [r4, #0]
 8004d64:	e7ed      	b.n	8004d42 <_free_r+0x1e>
 8004d66:	461a      	mov	r2, r3
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b10b      	cbz	r3, 8004d70 <_free_r+0x4c>
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d9fa      	bls.n	8004d66 <_free_r+0x42>
 8004d70:	6811      	ldr	r1, [r2, #0]
 8004d72:	1850      	adds	r0, r2, r1
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d10b      	bne.n	8004d90 <_free_r+0x6c>
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	4401      	add	r1, r0
 8004d7c:	1850      	adds	r0, r2, r1
 8004d7e:	4283      	cmp	r3, r0
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	d1e0      	bne.n	8004d46 <_free_r+0x22>
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	6053      	str	r3, [r2, #4]
 8004d8a:	4408      	add	r0, r1
 8004d8c:	6010      	str	r0, [r2, #0]
 8004d8e:	e7da      	b.n	8004d46 <_free_r+0x22>
 8004d90:	d902      	bls.n	8004d98 <_free_r+0x74>
 8004d92:	230c      	movs	r3, #12
 8004d94:	602b      	str	r3, [r5, #0]
 8004d96:	e7d6      	b.n	8004d46 <_free_r+0x22>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	1821      	adds	r1, r4, r0
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	bf04      	itt	eq
 8004da0:	6819      	ldreq	r1, [r3, #0]
 8004da2:	685b      	ldreq	r3, [r3, #4]
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	bf04      	itt	eq
 8004da8:	1809      	addeq	r1, r1, r0
 8004daa:	6021      	streq	r1, [r4, #0]
 8004dac:	6054      	str	r4, [r2, #4]
 8004dae:	e7ca      	b.n	8004d46 <_free_r+0x22>
 8004db0:	bd38      	pop	{r3, r4, r5, pc}
 8004db2:	bf00      	nop
 8004db4:	200002f0 	.word	0x200002f0

08004db8 <_init>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_fini>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr
